# -*- coding: mbcs -*-
typelib_path = 'Q:\\AxisVM X6 CLOUD\\AxisVM_x64.exe'
_lcid = 0 # change this if required
from ctypes import *
import axisvm.com.core.tlb.stdole as stdole
from comtypes import GUID
from ctypes import HRESULT
from comtypes import dispid
from comtypes import DISPMETHOD, DISPPROPERTY, helpstring
from comtypes import CoClass
from comtypes import BSTR
from comtypes import helpstring
from comtypes import COMMETHOD
from comtypes.automation import _midlSAFEARRAY
from comtypes.automation import VARIANT


# values for enumeration 'ECrossSectionProcess'
cspOther = 0
cspRolled = 1
cspWelded = 2
cspColdFormed = 3
ECrossSectionProcess = c_int # enum
class IAxisVMRigidBodiesEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMRigidBodies Object'
    _iid_ = GUID('{75811228-FC44-4546-97F7-FFD19E53AFDE}')
    _idlflags_ = []
    _methods_ = []
IAxisVMRigidBodiesEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]
class AxisVMModel(CoClass):
    'AxisVMModel Object'
    _reg_clsid_ = GUID('{25FDFDB4-102C-4FFB-A884-7F215B23A30B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMModel(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMModel Object'
    _iid_ = GUID('{D61961EB-F4C0-422B-AA3F-4910AD88E57D}')
    _idlflags_ = ['dual', 'oleautomation']
AxisVMModel._com_interfaces_ = [IAxisVMModel]

class IAxisVMDrawingsLibraryEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMDrawingsLibrary Object'
    _iid_ = GUID('{3D6A33B0-E3BC-4D0E-91DD-09732A8D9D31}')
    _idlflags_ = []
    _methods_ = []
IAxisVMDrawingsLibraryEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(202)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]
class IAxisVMCrossSectionTables(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMCrossSectionTables Object'
    _iid_ = GUID('{E9582B8B-DF11-49E2-B0BC-EF9D3BD1BD31}')
    _idlflags_ = ['dual', 'oleautomation']
class RCrossSectionTable(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{B1EE4BA0-EA5D-4967-88BB-9E8EADFD0701}')
IAxisVMCrossSectionTables._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(RCrossSectionTable), 'Value' )),
    COMMETHOD([dispid(203), 'propget'], HRESULT, 'PrgTableName',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(204), 'propget'], HRESULT, 'DocTableName',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(205), 'propget'], HRESULT, 'FileName',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(206), 'propget'], HRESULT, 'Manufacturer',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
]
################################################################
## code template for IAxisVMCrossSectionTables implementation
##class IAxisVMCrossSectionTables_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Item(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def PrgTableName(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def DocTableName(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def FileName(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Manufacturer(self, Index):
##        '-no docstring-'
##        #return Value
##


# values for enumeration 'EMcrMethod'
mcrmAuto = 0
mcrmC1Lopez = 1
mcrmC1C2C3User = 2
mcrmDutch = 3
mcrmDutchUser = 4
mcrmAutoLS = 5
mcrmUser = 6
EMcrMethod = c_int # enum
class IAxisVMRebarSteelGrades(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMRebarSteelGrades Object'
    _iid_ = GUID('{3537DEDE-A52A-4855-81EB-CE2735E7F323}')
    _idlflags_ = ['dual', 'oleautomation']
class RRebarSteelGrade(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{2E100801-2B0E-4219-907C-6CE07A805BBD}')

# values for enumeration 'ENationalDesignCode'
ndcOther = 0
ndcHungarian_MSZ = 1
ndcEuroCode = 2
ndcRomanian_STAS = 4
ndcDutch_NEN = 5
ndcGerman_DIN1045_1 = 6
ndcSwiss_SIA26x = 7
ndcEuroCode_GER = 8
ndcItalian = 9
ndcEuroCode_Austrian = 10
ndcEuroCode_UK = 11
ndcEuroCode_NL = 12
ndcEuroCode_FIN = 13
ndcEuroCode_RO = 14
ndcEuroCode_HU = 15
ndcEuroCode_CZ = 16
ndcEuroCode_B = 17
ndcEuroCode_PL = 18
ndcEuroCode_DK = 19
ndcEuroCode_S = 20
ndcUS = 21
ndcCA_NBCC = 22
ndcCA_Ontario = 23
ndcCA_Bridge = 24
ndcEuroCode_SK = 25
ndcEuroCode_LV = 26
ndcEuroCode_NO = 27
ndcEuroCode_GR = 28
ENationalDesignCode = c_int # enum
IAxisVMRebarSteelGrades._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202)], HRESULT, 'Clear',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(203)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'Add',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(RRebarSteelGrade), 'RebarSteelGrade' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205)], HRESULT, 'AddFromCatalog',
              ( ['in'], ENationalDesignCode, 'NationalDesignCode' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'AddFromCatalogFile',
              ( ['in'], ENationalDesignCode, 'NationalDesignCode' ),
              ( ['in'], BSTR, 'FileName' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'IndexOf',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208), 'propget'], HRESULT, 'NationalDesignCode',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ENationalDesignCode), 'Value' )),
    COMMETHOD([dispid(209)], HRESULT, 'GetData',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(BSTR), 'Name' ),
              ( ['in', 'out'], POINTER(RRebarSteelGrade), 'RebarSteelGrade' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(210)], HRESULT, 'SetData',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(BSTR), 'Name' ),
              ( ['in', 'out'], POINTER(RRebarSteelGrade), 'RebarSteelGrade' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(211), 'propget'], HRESULT, 'UID',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(212), 'propget'], HRESULT, 'IndexOfUID',
              ( ['in'], c_int, 'UID' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
]
################################################################
## code template for IAxisVMRebarSteelGrades implementation
##class IAxisVMRebarSteelGrades_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def Clear(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def Add(self, Name):
##        '-no docstring-'
##        #return RebarSteelGrade, ResultValue
##
##    def AddFromCatalog(self, NationalDesignCode, Name):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddFromCatalogFile(self, NationalDesignCode, FileName, Name):
##        '-no docstring-'
##        #return ResultValue
##
##    def IndexOf(self, Name):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def NationalDesignCode(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def GetData(self, Index):
##        '-no docstring-'
##        #return Name, RebarSteelGrade, ResultValue
##
##    def SetData(self, Index, Name):
##        '-no docstring-'
##        #return RebarSteelGrade, ResultValue
##
##    @property
##    def UID(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def IndexOfUID(self, UID):
##        '-no docstring-'
##        #return Value
##

class IAxisVMSpringParamsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMSpringParams Object'
    _iid_ = GUID('{BC84540C-5614-466D-B4F5-5A18A96F32BE}')
    _idlflags_ = []
    _methods_ = []
IAxisVMSpringParamsEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Cleared'),
    DISPMETHOD([dispid(202)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]

# values for enumeration 'EReleaseType'
rtRigid = 0
rtHinged = 1
rtSemiRigid = 2
rtPlastic = 3
rtPushover = 4
EReleaseType = c_int # enum

# values for enumeration 'ETimberType'
ttHardwood = 0
ttGLULAM = 1
ttLVL = 2
ttSoftWood = 3
ttOther = 4
ETimberType = c_int # enum

# values for enumeration 'EWorkplanesError'
wpeInvalidName = -100001
wpeNameAlreadyExists = -100002
wpeInvalidWorkPlaneParameters = -100003
wpeWorkplaneIsNotGlobal = -100004
wpeWorkplaneIsNotSmart = -100005
wpeWorkplaneIsNotGeneral = -100006
EWorkplanesError = c_int # enum
class AxisVMRigidBodies(CoClass):
    'AxisVMRigidBodies Object'
    _reg_clsid_ = GUID('{54CAFF37-7473-4249-A905-9B1EEE94F48E}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMRigidBodies(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMRigidBodies Object'
    _iid_ = GUID('{570B35FD-D96F-4B84-B43F-9A956635A4D2}')
    _idlflags_ = ['dual', 'oleautomation']
AxisVMRigidBodies._com_interfaces_ = [IAxisVMRigidBodies]
AxisVMRigidBodies._outgoing_interfaces_ = [IAxisVMRigidBodiesEvents]

class IAxisVMSectionsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMSections Object'
    _iid_ = GUID('{E0A05A69-FA67-4659-8F0C-69495CEC0891}')
    _idlflags_ = []
    _methods_ = []
IAxisVMSectionsEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Cleared'),
    DISPMETHOD([dispid(202)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]

# values for enumeration 'ECrossSectionDoubleUType'
duOpened = 0
duClosed = 1
ECrossSectionDoubleUType = c_int # enum
class IAxisVMReports(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMReports Object'
    _iid_ = GUID('{BFB1082A-F6FC-4E34-B711-32AC11F5F19F}')
    _idlflags_ = ['dual', 'oleautomation']
IAxisVMReports._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'Name',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(202), 'propput'], HRESULT, 'Name',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(203)], HRESULT, 'NewFromTemplateFile',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'FileName' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'AddDrawingFromLibrary',
              ( ['in'], c_int, 'ReportIndex' ),
              ( ['in'], c_int, 'DrawingIndex' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205)], HRESULT, 'AddImageFromFile',
              ( ['in'], c_int, 'ReportIndex' ),
              ( ['in'], BSTR, 'FileName' ),
              ( ['in'], BSTR, 'Caption' ),
              ( ['in'], BSTR, 'OptionsJSON' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'GenerateFromTemplateFile',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'FileName' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208)], HRESULT, 'IndexOf',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209), 'propget'], HRESULT, 'TemplateDescription',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(209), 'propput'], HRESULT, 'TemplateDescription',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(210)], HRESULT, 'AddRootFolder',
              ( ['in'], c_int, 'ReportIndex' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(211), 'propget'], HRESULT, 'ImageCount',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(212), 'propget'], HRESULT, 'ImagePath',
              ( ['in'], c_int, 'ReportIndex' ),
              ( ['in'], c_int, 'ImageIndex' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(213), 'propget'], HRESULT, 'ImageCaption',
              ( ['in'], c_int, 'ReportIndex' ),
              ( ['in'], c_int, 'ImageIndex' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(214)], HRESULT, 'DeleteImage',
              ( ['in'], c_int, 'ReportIndex' ),
              ( ['in'], c_int, 'ImageIndex' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(215)], HRESULT, 'ImagesInFolder',
              ( ['in'], c_int, 'ReportIndex' ),
              ( ['in'], BSTR, 'FolderPath' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'ImageIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMReports implementation
##class IAxisVMReports_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def NewFromTemplateFile(self, Name, FileName):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddDrawingFromLibrary(self, ReportIndex, DrawingIndex):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddImageFromFile(self, ReportIndex, FileName, Caption, OptionsJSON):
##        '-no docstring-'
##        #return ResultValue
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def GenerateFromTemplateFile(self, Index, FileName):
##        '-no docstring-'
##        #return ResultValue
##
##    def IndexOf(self, Name):
##        '-no docstring-'
##        #return ResultValue
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    TemplateDescription = property(_get, _set, doc = _set.__doc__)
##
##    def AddRootFolder(self, ReportIndex, Name):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def ImageCount(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def ImagePath(self, ReportIndex, ImageIndex):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def ImageCaption(self, ReportIndex, ImageIndex):
##        '-no docstring-'
##        #return Value
##
##    def DeleteImage(self, ReportIndex, ImageIndex):
##        '-no docstring-'
##        #return ResultValue
##
##    def ImagesInFolder(self, ReportIndex, FolderPath):
##        '-no docstring-'
##        #return ImageIds, ResultValue
##

class IAxisVMNodalSupports(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMNodalSupports Object'
    _iid_ = GUID('{7FE0D2BD-254C-45DF-BC1D-454A8CA882F7}')
    _idlflags_ = ['dual', 'oleautomation']
class AxisVMNodalSupport(CoClass):
    'AxisVMNodalSupport Object'
    _reg_clsid_ = GUID('{5D1DF3D6-4990-43F4-B4C8-8B10527BE737}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMNodalSupport(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMNodalSupport Object'
    _iid_ = GUID('{5E992905-72EA-4B92-843C-C16F49317B0E}')
    _idlflags_ = ['dual', 'oleautomation']
AxisVMNodalSupport._com_interfaces_ = [IAxisVMNodalSupport]


# values for enumeration 'ELongBoolean'
lbFalse = 0
lbTrue = 1
ELongBoolean = c_int # enum
class RStiffnesses(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{D8411A79-CDBF-49BD-AAF1-42B5D311BDBA}')
class RNonLinearity(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{62FEA716-835C-41FD-B9EF-E0E9146544C2}')
class RResistances(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{22C34F5D-34FF-4CB4-AD76-70F4525C459E}')
class RMatrix3x3(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{EFBA21CF-2848-4BF8-999C-61946738A11F}')
class RNodalSupportSpringParams(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{7FC53871-4672-40A6-B000-5F2A762B0DD5}')
IAxisVMNodalSupports._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(AxisVMNodalSupport)), 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(203), 'propget'], HRESULT, 'Selected',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(203), 'propput'], HRESULT, 'Selected',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], ELongBoolean, 'Value' )),
    COMMETHOD([dispid(204), 'propget'], HRESULT, 'SelCount',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(205)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'DeleteSelected',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'AddNodalGlobal',
              ( ['in', 'out'], POINTER(RStiffnesses), 'Stiffnesses' ),
              ( ['in', 'out'], POINTER(RNonLinearity), 'NonLinearity' ),
              ( ['in', 'out'], POINTER(RResistances), 'Resistances' ),
              ( ['in'], c_int, 'NodeId' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208)], HRESULT, 'AddNodalBeamRelative',
              ( ['in', 'out'], POINTER(RStiffnesses), 'Stiffnesses' ),
              ( ['in', 'out'], POINTER(RNonLinearity), 'NonLinearity' ),
              ( ['in', 'out'], POINTER(RResistances), 'Resistances' ),
              ( ['in'], c_int, 'NodeId' ),
              ( ['in'], c_int, 'BeamId' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209)], HRESULT, 'AddNodalEdgeRelative',
              ( ['in', 'out'], POINTER(RStiffnesses), 'Stiffnesses' ),
              ( ['in', 'out'], POINTER(RNonLinearity), 'NonLinearity' ),
              ( ['in', 'out'], POINTER(RResistances), 'Resistances' ),
              ( ['in'], c_int, 'NodeId' ),
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SurfaceId1' ),
              ( ['in'], c_int, 'SurfaceId2' ),
              ( ['in'], c_int, 'DomainId1' ),
              ( ['in'], c_int, 'DomainId2' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(210)], HRESULT, 'AddNodalReference',
              ( ['in', 'out'], POINTER(RStiffnesses), 'Stiffnesses' ),
              ( ['in', 'out'], POINTER(RNonLinearity), 'NonLinearity' ),
              ( ['in', 'out'], POINTER(RResistances), 'Resistances' ),
              ( ['in'], c_int, 'NodeId' ),
              ( ['in'], c_int, 'ReferenceId' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(211)], HRESULT, 'GetSelectedItemIds',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'ItemIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(212), 'propget'], HRESULT, 'HaveStiffnessCalcParams',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(213)], HRESULT, 'GetTrMatrix',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RMatrix3x3), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(214)], HRESULT, 'AddNodalLocal',
              ( ['in', 'out'], POINTER(RStiffnesses), 'Stiffnesses' ),
              ( ['in', 'out'], POINTER(RNonLinearity), 'NonLinearity' ),
              ( ['in', 'out'], POINTER(RResistances), 'Resistances' ),
              ( ['in'], c_int, 'NodeId' ),
              ( ['in'], c_int, 'ReferenceIdx' ),
              ( ['in'], c_int, 'ReferenceIdz' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(215)], HRESULT, 'AddNodalGlobal_V153',
              ( ['in', 'out'], POINTER(RNodalSupportSpringParams), 'NodalSupportSpringParams' ),
              ( ['in'], c_int, 'NodeId' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(216)], HRESULT, 'AddNodalBeamRelative_V153',
              ( ['in', 'out'], POINTER(RNodalSupportSpringParams), 'NodalSupportSpringParams' ),
              ( ['in'], c_int, 'NodeId' ),
              ( ['in'], c_int, 'BeamId' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(217)], HRESULT, 'AddNodalEdgeRelative_V153',
              ( ['in', 'out'], POINTER(RNodalSupportSpringParams), 'NodalSupportSpringParams' ),
              ( ['in'], c_int, 'NodeId' ),
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SurfaceId1' ),
              ( ['in'], c_int, 'SurfaceId2' ),
              ( ['in'], c_int, 'DomainId1' ),
              ( ['in'], c_int, 'DomainId2' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(218)], HRESULT, 'AddNodalReference_V153',
              ( ['in', 'out'], POINTER(RNodalSupportSpringParams), 'NodalSupportSpringParams' ),
              ( ['in'], c_int, 'NodeId' ),
              ( ['in'], c_int, 'ReferenceId' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(219)], HRESULT, 'AddNodalLocal_V153',
              ( ['in', 'out'], POINTER(RNodalSupportSpringParams), 'NodalSupportSpringParams' ),
              ( ['in'], c_int, 'NodeId' ),
              ( ['in'], c_int, 'ReferenceIdx' ),
              ( ['in'], c_int, 'ReferenceIdz' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(220)], HRESULT, 'AddIsolator',
              ( ['in', 'out'], POINTER(RNodalSupportSpringParams), 'NodalSupportSpringParams' ),
              ( ['in'], c_int, 'NodeId' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMNodalSupports implementation
##class IAxisVMNodalSupports_Impl(object):
##    @property
##    def Item(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    Selected = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SelCount(self):
##        '-no docstring-'
##        #return Value
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def DeleteSelected(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddNodalGlobal(self, NodeId):
##        '-no docstring-'
##        #return Stiffnesses, NonLinearity, Resistances, ResultValue
##
##    def AddNodalBeamRelative(self, NodeId, BeamId):
##        '-no docstring-'
##        #return Stiffnesses, NonLinearity, Resistances, ResultValue
##
##    def AddNodalEdgeRelative(self, NodeId, LineId, SurfaceId1, SurfaceId2, DomainId1, DomainId2):
##        '-no docstring-'
##        #return Stiffnesses, NonLinearity, Resistances, ResultValue
##
##    def AddNodalReference(self, NodeId, ReferenceId):
##        '-no docstring-'
##        #return Stiffnesses, NonLinearity, Resistances, ResultValue
##
##    def GetSelectedItemIds(self):
##        '-no docstring-'
##        #return ItemIds, ResultValue
##
##    @property
##    def HaveStiffnessCalcParams(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def GetTrMatrix(self, Index):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def AddNodalLocal(self, NodeId, ReferenceIdx, ReferenceIdz):
##        '-no docstring-'
##        #return Stiffnesses, NonLinearity, Resistances, ResultValue
##
##    def AddNodalGlobal_V153(self, NodeId):
##        '-no docstring-'
##        #return NodalSupportSpringParams, ResultValue
##
##    def AddNodalBeamRelative_V153(self, NodeId, BeamId):
##        '-no docstring-'
##        #return NodalSupportSpringParams, ResultValue
##
##    def AddNodalEdgeRelative_V153(self, NodeId, LineId, SurfaceId1, SurfaceId2, DomainId1, DomainId2):
##        '-no docstring-'
##        #return NodalSupportSpringParams, ResultValue
##
##    def AddNodalReference_V153(self, NodeId, ReferenceId):
##        '-no docstring-'
##        #return NodalSupportSpringParams, ResultValue
##
##    def AddNodalLocal_V153(self, NodeId, ReferenceIdx, ReferenceIdz):
##        '-no docstring-'
##        #return NodalSupportSpringParams, ResultValue
##
##    def AddIsolator(self, NodeId):
##        '-no docstring-'
##        #return NodalSupportSpringParams, ResultValue
##

class IAxisVMMembers(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMMembers Object'
    _iid_ = GUID('{FA76EDF9-242B-43A2-B4B7-E50EB3A8236B}')
    _idlflags_ = ['dual', 'oleautomation']
class AxisVMMember(CoClass):
    'AxisVMMember Object'
    _reg_clsid_ = GUID('{F816404C-8138-49FF-BC7D-BD5D922A9B53}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMMember(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMMember Object'
    _iid_ = GUID('{667DBD62-07C1-4423-9F3E-D6E0F1AB960A}')
    _idlflags_ = ['dual', 'oleautomation']
AxisVMMember._com_interfaces_ = [IAxisVMMember]

class RMemberMeshParameters(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{C64282BA-A062-4614-891C-921B8FE33F65}')
class AxisVMAttributes(CoClass):
    'AxisVMAttributes Object'
    _reg_clsid_ = GUID('{1CA5FCA8-C6C2-4285-B391-452489ACC497}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMAttributes(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMAttributes Object'
    _iid_ = GUID('{C68C3DFC-733E-4376-828A-B8E16CB14B17}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMAttributesEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for IAxisVMAttributes Object'
    _iid_ = GUID('{CDB2ACF8-93FA-4B20-85C8-544B5005A92A}')
    _idlflags_ = []
    _methods_ = []
AxisVMAttributes._com_interfaces_ = [IAxisVMAttributes]
AxisVMAttributes._outgoing_interfaces_ = [IAxisVMAttributesEvents]

class AxisVMAttachments(CoClass):
    'AxisVMAttachments Object'
    _reg_clsid_ = GUID('{799F547E-DFF0-4F84-984C-6484DFF4D495}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMAttachments(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMAttachments Object'
    _iid_ = GUID('{C6BA45CB-42D5-4B99-973E-366A111B4F5B}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMAttachmentsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for IAxisVMAttachments Object'
    _iid_ = GUID('{F53766CC-F735-4849-B86B-D839E0BAC5F7}')
    _idlflags_ = []
    _methods_ = []
AxisVMAttachments._com_interfaces_ = [IAxisVMAttachments]
AxisVMAttachments._outgoing_interfaces_ = [IAxisVMAttachmentsEvents]

class RLineAttr(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{9B667525-B614-440A-932A-69E735D6EC77}')

# values for enumeration 'ELineType'
ltTruss = 0
ltBeam = 1
ltRib = 2
ltSpring = 3
ltGap = 4
ltEdge = 5
ltHole = 6
ltSimpleLine = 7
ltNNLink = 8
ltLLLink = 9
ELineType = c_int # enum

# values for enumeration 'EAutoExcentricityType'
aetCustom = 0
aetTop = 1
aetMid = 2
aetBottom = 3
EAutoExcentricityType = c_int # enum
class RPoint3d(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{34358F82-25DF-4FE6-B12F-4EF14D44CC8A}')
RPoint3d._fields_ = [
    ('x', c_double),
    ('y', c_double),
    ('z', c_double),
]
assert sizeof(RPoint3d) == 24, sizeof(RPoint3d)
assert alignment(RPoint3d) == 8, alignment(RPoint3d)

# values for enumeration 'ELineNonLinearity'
lnlTensionAndCompression = 0
lnlTensionOnly = 1
lnlCompressionOnly = 2
ELineNonLinearity = c_int # enum

# values for enumeration 'EGapType'
agtActiveInTension = 0
agtActiveInCompression = 1
EGapType = c_int # enum

# values for enumeration 'ESpringDirection'
sdGlobal = 0
sdGeometry = 1
sdPointReference = 2
sdVectorReference = 3
sdElementRelative = 4
sdNodeRelative = 5
sdSeismicIsolator = 6
ESpringDirection = c_int # enum
RStiffnesses._fields_ = [
    ('x', c_double),
    ('y', c_double),
    ('z', c_double),
    ('xx', c_double),
    ('yy', c_double),
    ('zz', c_double),
]
assert sizeof(RStiffnesses) == 48, sizeof(RStiffnesses)
assert alignment(RStiffnesses) == 8, alignment(RStiffnesses)
RLineAttr._fields_ = [
    ('LineType', ELineType),
    ('MaterialIndex', c_int),
    ('StartCrossSectionIndex', c_int),
    ('EndCrossSectionIndex', c_int),
    ('AutoEccentricityType', EAutoExcentricityType),
    ('StartEccentricity', RPoint3d),
    ('EndEccentricity', RPoint3d),
    ('TrussType', ELineNonLinearity),
    ('Resistance', c_double),
    ('ServiceClass', c_int),
    ('kdef', c_double),
    ('kx', c_double),
    ('Domain1', c_int),
    ('Domain2', c_int),
    ('GapType', EGapType),
    ('ActiveStiffness', c_double),
    ('InactiveStiffness', c_double),
    ('InitialOpening', c_double),
    ('MinPenetration', c_double),
    ('MaxPenetration', c_double),
    ('AdjustmentRatio', c_double),
    ('SpringDirection', ESpringDirection),
    ('Stiffnesses', RStiffnesses),
]
assert sizeof(RLineAttr) == 232, sizeof(RLineAttr)
assert alignment(RLineAttr) == 8, alignment(RLineAttr)

# values for enumeration 'ELineStiffnessReduction'
lsr_AX = 0
lsr_AY = 1
lsr_AZ = 2
lsr_IX = 3
lsr_IY = 4
lsr_IZ = 5
ELineStiffnessReduction = c_int # enum
class RLineAttr_V161(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{B4606C9B-0316-4166-A1DA-CF856AA678FC}')

# values for enumeration 'EMemberLocXOrientation'
mlxo_ij = 1
mlxo_ji = 2
EMemberLocXOrientation = c_int # enum
class RReleases_V161(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{6E3EC84E-DE94-40B0-AE7B-B5A26FF6A1A6}')
class RRelease_V161(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{65F62DAA-59A0-4165-9B60-4C1ED0D7FD57}')
RRelease_V161._fields_ = [
    ('ReleaseType', EReleaseType),
    ('FunctionId', c_int),
]
assert sizeof(RRelease_V161) == 8, sizeof(RRelease_V161)
assert alignment(RRelease_V161) == 4, alignment(RRelease_V161)
RReleases_V161._fields_ = [
    ('x', RRelease_V161),
    ('y', RRelease_V161),
    ('z', RRelease_V161),
    ('xx', RRelease_V161),
    ('yy', RRelease_V161),
    ('zz', RRelease_V161),
    ('ew', RRelease_V161),
]
assert sizeof(RReleases_V161) == 56, sizeof(RReleases_V161)
assert alignment(RReleases_V161) == 4, alignment(RReleases_V161)

# values for enumeration 'ELEEccType'
leet_None = 0
leet_CustomOffset = 1
leet_AlignementPoint = 2
leet_Group = 3
leet_Ref = 4
leet_RibDomain = 5
ELEEccType = c_int # enum

# values for enumeration 'ELEEccAlignementPoint'
leeap_TopLeft = 1
leeap_TopCenter = 2
leeap_TopRight = 3
leeap_CenterLeft = 4
leeap_CenterCenter = 5
leeap_CenterRight = 6
leeap_BottomLeft = 7
leeap_BottomCenter = 8
leeap_BottomRight = 9
ELEEccAlignementPoint = c_int # enum
class REccReleases(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{0579DA86-F103-42F2-8D58-69B0721B9B04}')

# values for enumeration 'EReleasePosType'
rptAuto = 0
rptRatio = 1
rptLength = 2
EReleasePosType = c_int # enum
REccReleases._fields_ = [
    ('x', EReleaseType),
    ('y', EReleaseType),
    ('z', EReleaseType),
    ('xx', EReleaseType),
    ('yy', EReleaseType),
    ('zz', EReleaseType),
    ('PosType', EReleasePosType),
    ('Pos', c_double),
]
assert sizeof(REccReleases) == 40, sizeof(REccReleases)
assert alignment(REccReleases) == 8, alignment(REccReleases)
class RSpringCharacteristics(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{60FBEEF4-3F69-4D79-838F-F35F7A9A6FDF}')
RSpringCharacteristics._fields_ = [
    ('x', c_int),
    ('y', c_int),
    ('z', c_int),
    ('xx', c_int),
    ('yy', c_int),
    ('zz', c_int),
]
assert sizeof(RSpringCharacteristics) == 24, sizeof(RSpringCharacteristics)
assert alignment(RSpringCharacteristics) == 4, alignment(RSpringCharacteristics)
RLineAttr_V161._fields_ = [
    ('LineType', ELineType),
    ('MaterialIndex', c_int),
    ('StartCrossSectionIndex', c_int),
    ('EndCrossSectionIndex', c_int),
    ('LocalXOrientation', EMemberLocXOrientation),
    ('StartRelease', RReleases_V161),
    ('EndRelease', RReleases_V161),
    ('Reference', c_int),
    ('RibAutoEccentricityType', EAutoExcentricityType),
    ('StartEccentricity', RPoint3d),
    ('EndEccentricity', RPoint3d),
    ('StartEccentricityType', ELEEccType),
    ('EndEccentricityType', ELEEccType),
    ('StartAlignementPoint', ELEEccAlignementPoint),
    ('EndAlignementPoint', ELEEccAlignementPoint),
    ('EccGroupIndex', c_int),
    ('StartRefLine', c_int),
    ('EndRefLine', c_int),
    ('RefStartAlignementPoint', ELEEccAlignementPoint),
    ('RefEndAlignementPoint', ELEEccAlignementPoint),
    ('StartEccRelease', REccReleases),
    ('EndEccRelease', REccReleases),
    ('TrussType', ELineNonLinearity),
    ('Resistance', c_double),
    ('ServiceClass', c_int),
    ('kdef', c_double),
    ('kx', c_double),
    ('Domain1', c_int),
    ('Domain2', c_int),
    ('Beam7DOF', ELongBoolean),
    ('MaterialColor', c_int),
    ('ContourColor', c_int),
    ('GapType', EGapType),
    ('ActiveStiffness', c_double),
    ('InactiveStiffness', c_double),
    ('InitialOpening', c_double),
    ('MinPenetration', c_double),
    ('MaxPenetration', c_double),
    ('AdjustmentRatio', c_double),
    ('SpringType', ESpringDirection),
    ('SpringCharacteristics', RSpringCharacteristics),
    ('SeismicIsolatorIndex', c_int),
    ('IsolatorD2', c_double),
]
assert sizeof(RLineAttr_V161) == 464, sizeof(RLineAttr_V161)
assert alignment(RLineAttr_V161) == 8, alignment(RLineAttr_V161)
IAxisVMMembers._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(AxisVMMember)), 'Value' )),
    COMMETHOD([dispid(203)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'Clear',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205), 'propget'], HRESULT, 'Selected',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(205), 'propput'], HRESULT, 'Selected',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], ELongBoolean, 'Value' )),
    COMMETHOD([dispid(206), 'propget'], HRESULT, 'SelCount',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(207)], HRESULT, 'DeleteSelected',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208)], HRESULT, 'SelectAll',
              ( ['in'], ELongBoolean, 'Select' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209)], HRESULT, 'Add',
              ( ['in'], _midlSAFEARRAY(c_int), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(210)], HRESULT, 'IndexOf',
              ( ['in'], _midlSAFEARRAY(c_int), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(211)], HRESULT, 'ChangeLocalDirection',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(212)], HRESULT, 'GetSelectedItemIds',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'ItemIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(213)], HRESULT, 'DeleteMesh',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(214)], HRESULT, 'DeleteMeshFromSelectedItems',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(215)], HRESULT, 'SelectAllColumns',
              ( ['in'], ELongBoolean, 'Select' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(216)], HRESULT, 'SelectAllBeams',
              ( ['in'], ELongBoolean, 'Select' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(217)], HRESULT, 'SelectAllOthers',
              ( ['in'], ELongBoolean, 'Select' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(218)], HRESULT, 'SelectAllColumnsAtStorey',
              ( ['in'], ELongBoolean, 'Select' ),
              ( ['in'], c_int, 'StoreyId' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(219)], HRESULT, 'SelectAllBeamsAtStorey',
              ( ['in'], ELongBoolean, 'Select' ),
              ( ['in'], c_int, 'StoreyId' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(220)], HRESULT, 'SelectAllOthersAtStorey',
              ( ['in'], ELongBoolean, 'Select' ),
              ( ['in'], c_int, 'StoreyId' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(221)], HRESULT, 'GetSelectedColumnIds',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'MemberIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(222)], HRESULT, 'GetSelectedBeamIds',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'MemberIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(223)], HRESULT, 'GetSelectedOtherIds',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'MemberIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(224)], HRESULT, 'RenameSelectedBeams',
              ( ['in'], c_int, 'NewBase' ),
              ( ['in'], BSTR, 'FormatStr' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(225)], HRESULT, 'RenameSelectedRibs',
              ( ['in'], c_int, 'NewBase' ),
              ( ['in'], BSTR, 'FormatStr' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(227)], HRESULT, 'GenerateMeshWithParamsOnSelectedItems',
              ( ['in', 'out'], POINTER(RMemberMeshParameters), 'MeshParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(228)], HRESULT, 'DeleteNameOfAllBeams',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(229)], HRESULT, 'DeleteNameOfAllRibs',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(230), 'propget'], HRESULT, 'UID',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(231)], HRESULT, 'Add_vb',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(232)], HRESULT, 'IndexOf_vb',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(233), 'propget'], HRESULT, 'IndexOfUID',
              ( ['in'], c_int, 'UID' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(234)], HRESULT, 'RenameSelectedTrusses',
              ( ['in'], c_int, 'NewBase' ),
              ( ['in'], BSTR, 'FormatStr' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(235)], HRESULT, 'DeleteNameOfAllTrussses',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(236), 'propget'], HRESULT, 'StiffnessReduction_A',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(236), 'propput'], HRESULT, 'StiffnessReduction_A',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(237), 'propget'], HRESULT, 'StiffnessReduction_I',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(237), 'propput'], HRESULT, 'StiffnessReduction_I',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(238), 'propget'], HRESULT, 'Attributes',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMAttributes)), 'Value' )),
    COMMETHOD([dispid(239), 'propget'], HRESULT, 'Attachments',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMAttachments)), 'Value' )),
    COMMETHOD([dispid(240), 'propget'], HRESULT, 'LocalX_is_ij',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'ResultValue' )),
    COMMETHOD([dispid(241), 'propget'], HRESULT, 'Name',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(242)], HRESULT, 'GetContinuousMemberIDs',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MemberIds' ),
              ( ['in'], c_double, 'MaxAngleDifferenceX' ),
              ( ['in'], c_double, 'MaxAngleDifferenceZ' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'ContinousMemberIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(243)], HRESULT, 'AssembleSelectedMembers',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(244)], HRESULT, 'BulkGetMembers',
              ( ['in'], _midlSAFEARRAY(c_int), 'MemberIds' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineAttr)), 'MemberAttrs' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(245)], HRESULT, 'BulkSetMembers',
              ( ['in'], _midlSAFEARRAY(c_int), 'MemberIds' ),
              ( ['in'], _midlSAFEARRAY(RLineAttr), 'MemberAttrs' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(246), 'propget'], HRESULT, 'StiffnessReduction',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], ELineStiffnessReduction, 'Component' ),
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(246), 'propput'], HRESULT, 'StiffnessReduction',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], ELineStiffnessReduction, 'Component' ),
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(247)], HRESULT, 'BulkGetMembers_V161',
              ( ['in'], _midlSAFEARRAY(c_int), 'MemberIds' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineAttr_V161)), 'MemberAttrs' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(248)], HRESULT, 'BulkSetMembers_V161',
              ( ['in'], _midlSAFEARRAY(c_int), 'MemberIds' ),
              ( ['in'], _midlSAFEARRAY(RLineAttr_V161), 'MemberAttrs' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(249)], HRESULT, 'ClearEccentricities',
              ( ['in'], _midlSAFEARRAY(c_int), 'MemberIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMMembers implementation
##class IAxisVMMembers_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Item(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def Clear(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    Selected = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SelCount(self):
##        '-no docstring-'
##        #return Value
##
##    def DeleteSelected(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def SelectAll(self, Select):
##        '-no docstring-'
##        #return ResultValue
##
##    def Add(self, LineIds):
##        '-no docstring-'
##        #return ResultValue
##
##    def IndexOf(self, LineIds):
##        '-no docstring-'
##        #return ResultValue
##
##    def ChangeLocalDirection(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetSelectedItemIds(self):
##        '-no docstring-'
##        #return ItemIds, ResultValue
##
##    def DeleteMesh(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def DeleteMeshFromSelectedItems(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def SelectAllColumns(self, Select):
##        '-no docstring-'
##        #return ResultValue
##
##    def SelectAllBeams(self, Select):
##        '-no docstring-'
##        #return ResultValue
##
##    def SelectAllOthers(self, Select):
##        '-no docstring-'
##        #return ResultValue
##
##    def SelectAllColumnsAtStorey(self, Select, StoreyId):
##        '-no docstring-'
##        #return ResultValue
##
##    def SelectAllBeamsAtStorey(self, Select, StoreyId):
##        '-no docstring-'
##        #return ResultValue
##
##    def SelectAllOthersAtStorey(self, Select, StoreyId):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetSelectedColumnIds(self):
##        '-no docstring-'
##        #return MemberIds, ResultValue
##
##    def GetSelectedBeamIds(self):
##        '-no docstring-'
##        #return MemberIds, ResultValue
##
##    def GetSelectedOtherIds(self):
##        '-no docstring-'
##        #return MemberIds, ResultValue
##
##    def RenameSelectedBeams(self, NewBase, FormatStr):
##        '-no docstring-'
##        #return ResultValue
##
##    def RenameSelectedRibs(self, NewBase, FormatStr):
##        '-no docstring-'
##        #return ResultValue
##
##    def GenerateMeshWithParamsOnSelectedItems(self):
##        '-no docstring-'
##        #return MeshParameters, ResultValue
##
##    def DeleteNameOfAllBeams(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def DeleteNameOfAllRibs(self):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def UID(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def Add_vb(self):
##        '-no docstring-'
##        #return LineIds, ResultValue
##
##    def IndexOf_vb(self):
##        '-no docstring-'
##        #return LineIds, ResultValue
##
##    @property
##    def IndexOfUID(self, UID):
##        '-no docstring-'
##        #return Value
##
##    def RenameSelectedTrusses(self, NewBase, FormatStr):
##        '-no docstring-'
##        #return ResultValue
##
##    def DeleteNameOfAllTrussses(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    StiffnessReduction_A = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    StiffnessReduction_I = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Attributes(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Attachments(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def LocalX_is_ij(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def Name(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def GetContinuousMemberIDs(self, MaxAngleDifferenceX, MaxAngleDifferenceZ):
##        '-no docstring-'
##        #return MemberIds, ContinousMemberIds, ResultValue
##
##    def AssembleSelectedMembers(self):
##        '-no docstring-'
##        #return Value
##
##    def BulkGetMembers(self, MemberIds):
##        '-no docstring-'
##        #return MemberAttrs, Value
##
##    def BulkSetMembers(self, MemberIds, MemberAttrs):
##        '-no docstring-'
##        #return Value
##
##    def _get(self, Index, Component):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Component, Value):
##        '-no docstring-'
##    StiffnessReduction = property(_get, _set, doc = _set.__doc__)
##
##    def BulkGetMembers_V161(self, MemberIds):
##        '-no docstring-'
##        #return MemberAttrs, Value
##
##    def BulkSetMembers_V161(self, MemberIds, MemberAttrs):
##        '-no docstring-'
##        #return Value
##
##    def ClearEccentricities(self, MemberIds):
##        '-no docstring-'
##        #return ResultValue
##

class AxisVMLines(CoClass):
    'AxisVMLines Object'
    _reg_clsid_ = GUID('{16DBCF63-2CDD-4CEA-A399-D73ED0972E72}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMLines(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMLines Object'
    _iid_ = GUID('{D3C49562-15F1-45A3-BB5D-0109F494B323}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMLinesEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMLines Object'
    _iid_ = GUID('{54316EA5-27F9-457F-8284-C44E9E00EF98}')
    _idlflags_ = []
    _methods_ = []
AxisVMLines._com_interfaces_ = [IAxisVMLines]
AxisVMLines._outgoing_interfaces_ = [IAxisVMLinesEvents]

class IAxisVMRCBeamDesignEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMRCBeamDesign Object'
    _iid_ = GUID('{23360301-1022-4860-A1D9-BCC8C3645E9B}')
    _idlflags_ = []
    _methods_ = []
IAxisVMRCBeamDesignEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]

# values for enumeration 'ECrossSectionError'
cseNotAllowedProcessForShape = -100001
cseNotAllowedProcessForParameters = -100002
cseNonPositive_b = -100003
cseNonPositive_h = -100004
cseNonPositive_tw = -100005
cseNonPositive_tf = -100006
cseNonPositive_d = -100007
cseNonPositive_v = -100008
cseNonPositive_b1 = -100009
cseNonPositive_h1 = -100010
cseNonPositive_b2 = -100011
cseNonPositive_h2 = -100012
cseNonPositive_tw1 = -100013
cseNonPositive_tf1 = -100014
cseNonPositive_tw2 = -100015
cseNonPositive_tf2 = -100016
cseNonPositive_R = -100017
cseNegative_r1 = -100018
cseNegative_r2 = -100019
cseNegative_r3 = -100020
cseNegative_e = -100021
cseNegative_a = -100022
cseTooHigh_h = -100023
cseTooHigh_tw = -100024
cseTooHigh_tf = -100025
cseTooHigh_r1 = -100026
cseTooHigh_r2 = -100027
cseTooHigh_r3 = -100028
cseTooHigh_v = -100029
cseTooLow_e = -100030
cseTooHigh_tw1 = -100031
cseTooHigh_tf1 = -100032
cseTooHigh_tw2 = -100033
cseTooHigh_tf2 = -100034
cseTooLow_h = -100035
cseTooLow_r1 = -100036
cseTooLow_N = -100037
cseDifferentThicknesses = -100038
cseDifferentWidthAndHeight = -100039
cseIncompatibleWidthAndHegiht = -100040
cseNonPositiveAx = -100041
cseNegativeAy = -100042
cseAyIsHigherThanAx = -100043
cseNegativeAz = -100044
cseAzIsHigherThanAx = -100045
cseNonPositiveIx = -100046
cseNonPositiveIy = -100047
cseNonPositiveIz = -100048
cseNonPositiveHy = -100049
cseNonPositiveHz = -100050
cseNegativeIw = -100051
cseNegativeW1t = -100052
cseNegativeW1b = -100053
cseNegativeW2t = -100054
cseNegativeW2b = -100055
cseNegativeW1pl = -100056
cseNegativeW2pl = -100057
cseEmptyName = -100058
cseNameAlreadyExists = -100059
cseExtParams = -100060
cseErrorAdding = -100061
cseErrorEditing = -100062
cseInvalidCrossSectionType = -100063
cseDifferentCrossSectionShape = -100064
cseException = -101000
cseTooHigh_e = -100065
cseTooLargeInnerCrossSection = -100066
cseInvalidMaterials = -100067
cseNonPositive_b3 = -100068
cseNonPositive_h3 = -100069
cseNonPositive_tw3 = -100070
cseNonPositive_tf3 = -100071
cseTooHigh_tw3 = -100072
cseTooHigh_tf3 = -100073
cseTooLow_b = -100074
cseNonPositive_c = -100075
cseTooLow_c = -100076
cseTooHigh_h2 = -100077
cseTooLow_b2 = -100078
ECrossSectionError = c_int # enum
class AxisVMDrawingsLibrary(CoClass):
    'AxisVMDrawingsLibrary Object'
    _reg_clsid_ = GUID('{D351B930-C801-4C04-9BE9-577C1D4A9C32}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMDrawingsLibrary(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMDrawingsLibrary Object'
    _iid_ = GUID('{684E1D00-FF7C-45DB-8DA5-06E5120E1D2D}')
    _idlflags_ = ['dual', 'oleautomation']
AxisVMDrawingsLibrary._com_interfaces_ = [IAxisVMDrawingsLibrary]
AxisVMDrawingsLibrary._outgoing_interfaces_ = [IAxisVMDrawingsLibraryEvents]

class RLoadRibMemberConcentrated(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{5C330B41-566F-4466-8BD9-A0185E0E0C8B}')

# values for enumeration 'ESystem'
sysGlobal = 0
sysLocal = 1
sysReference = 2
ESystem = c_int # enum
RLoadRibMemberConcentrated._fields_ = [
    ('LoadCaseId', c_int),
    ('MemberID', c_int),
    ('Fgx', c_double),
    ('Fgy', c_double),
    ('Fgz', c_double),
    ('Mgx', c_double),
    ('Mgy', c_double),
    ('Mgz', c_double),
    ('Position', c_double),
    ('SystemGLR', ESystem),
]
assert sizeof(RLoadRibMemberConcentrated) == 72, sizeof(RLoadRibMemberConcentrated)
assert alignment(RLoadRibMemberConcentrated) == 8, alignment(RLoadRibMemberConcentrated)
class AxisVMSurface(CoClass):
    'AxisVMSurface Object'
    _reg_clsid_ = GUID('{9D1EA77E-EF99-4ED4-8D28-D96970C88C9A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMSurface(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMSurface Object'
    _iid_ = GUID('{3B79F6A9-E2C0-41EB-95B5-466888A95324}')
    _idlflags_ = ['dual', 'oleautomation']
AxisVMSurface._com_interfaces_ = [IAxisVMSurface]

class IAxisVMPushoverHingeFunctions(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMPushoverHingeFunctions Object'
    _iid_ = GUID('{4948F30F-E3CE-4C97-8CB5-D89FFBEE11C0}')
    _idlflags_ = ['dual', 'oleautomation']
class RPoint2d(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{DE19701B-DB07-4178-81B0-9BE811A76FAC}')
RPoint2d._fields_ = [
    ('Coord1', c_double),
    ('Coord2', c_double),
]
assert sizeof(RPoint2d) == 16, sizeof(RPoint2d)
assert alignment(RPoint2d) == 8, alignment(RPoint2d)
IAxisVMPushoverHingeFunctions._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202)], HRESULT, 'Clear',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(203)], HRESULT, 'Add',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], _midlSAFEARRAY(RPoint2d), 'FunctionPoints' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205), 'propget'], HRESULT, 'Name',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(205), 'propput'], HRESULT, 'Name',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(206), 'propget'], HRESULT, 'PointCount',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(210)], HRESULT, 'GetPoints',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint2d)), 'FunctionPoints' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(211)], HRESULT, 'Modify',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], _midlSAFEARRAY(RPoint2d), 'FunctionPoints' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(212)], HRESULT, 'IndexOf',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(213)], HRESULT, 'AddFromFile',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'FileName' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(214)], HRESULT, 'SaveToFile',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'FileName' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(215)], HRESULT, 'Add_vb',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPoint2d)), 'FunctionPoints' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(216)], HRESULT, 'Modify_vb',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPoint2d)), 'FunctionPoints' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMPushoverHingeFunctions implementation
##class IAxisVMPushoverHingeFunctions_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def Clear(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def Add(self, Name, FunctionPoints):
##        '-no docstring-'
##        #return ResultValue
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def PointCount(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def GetPoints(self, Index):
##        '-no docstring-'
##        #return FunctionPoints, ResultValue
##
##    def Modify(self, Index, FunctionPoints):
##        '-no docstring-'
##        #return ResultValue
##
##    def IndexOf(self, Name):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddFromFile(self, Name, FileName):
##        '-no docstring-'
##        #return ResultValue
##
##    def SaveToFile(self, Index, FileName):
##        '-no docstring-'
##        #return ResultValue
##
##    def Add_vb(self, Name):
##        '-no docstring-'
##        #return FunctionPoints, ResultValue
##
##    def Modify_vb(self, Index):
##        '-no docstring-'
##        #return FunctionPoints, ResultValue
##

class IAxisVMWindLoad(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMWindLoad Object'
    _iid_ = GUID('{619ADD2D-692B-4130-99F0-D285E2747BD1}')
    _idlflags_ = ['dual', 'oleautomation']
class RWindLoadParams_V161(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{AFD01398-0215-4538-AE1C-BBD522DF79BD}')

# values for enumeration 'ETerrainCategory'
tc0 = 0
tcI = 1
tcII = 2
tcIII = 3
tcIV = 4
ETerrainCategory = c_int # enum
RWindLoadParams_V161._fields_ = [
    ('a', c_double),
    ('v_b0', c_double),
    ('c_dir_xp', c_double),
    ('c_dir_xm', c_double),
    ('c_dir_yp', c_double),
    ('c_dir_ym', c_double),
    ('c_season', c_double),
    ('TerrainCategoryDifferent', ELongBoolean),
    ('CustomDirectionalFactors', ELongBoolean),
    ('TerrainCat_Xp', ETerrainCategory),
    ('TerrainCat_Xm', ETerrainCategory),
    ('TerrainCat_Yp', ETerrainCategory),
    ('TerrainCat_Ym', ETerrainCategory),
    ('c_o', c_double),
    ('Iw', c_double),
    ('Zone', c_int),
    ('AltitudeFactor', c_double),
    ('TurbulenceFactor', c_double),
]
assert sizeof(RWindLoadParams_V161) == 120, sizeof(RWindLoadParams_V161)
assert alignment(RWindLoadParams_V161) == 8, alignment(RWindLoadParams_V161)
class IAxisVMWindSubStructure(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMWindSubStructure Object'
    _iid_ = GUID('{5135B5DF-C1D4-439C-A6A1-BCC3D0972AEB}')
    _idlflags_ = ['dual', 'oleautomation']
class RWindSubStructParams(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{8E3C5350-BEC1-4770-9610-9083141E061A}')

# values for enumeration 'EWindStructureRoofType'
wsrtUndefined = 0
wsrtFlat = 1
wsrtMonopitch = 2
wsrtDuopitch = 3
wsrtHip = 4
wsrtBarrel = 5
wsrtMonopitchCanopy = 6
wsrtDuopitchCanopy = 7
wsrtFreestandingWall = 8
wsrtSignBoard = 9
EWindStructureRoofType = c_int # enum

# values for enumeration 'ERoofInternalPressure'
ripUndefined = 0
ripAuto = 1
ripOpeningAreaBased = 2
ripInternalCoeff = 3
ripOff = 4
ERoofInternalPressure = c_int # enum

# values for enumeration 'ERoofFrictionEffect'
rfeSmooth = 1
rfeRough = 2
rfeVeryRough = 3
rfeCustom = 4
ERoofFrictionEffect = c_int # enum

# values for enumeration 'ERoofMultiSpanPos'
rmspFirst = 1
rmspSecond = 2
rmspInner = 3
ERoofMultiSpanPos = c_int # enum

# values for enumeration 'ERoofMultiSpanDir'
rmsdX = 1
rmsdY = 2
ERoofMultiSpanDir = c_int # enum

# values for enumeration 'EFlatRoofEdgeType'
retNone = 0
retSharpEaves = 1
retWithParapetWall = 2
retRoundEaves = 3
retMansardEaves = 4
EFlatRoofEdgeType = c_int # enum
RWindSubStructParams._fields_ = [
    ('Name', BSTR),
    ('RoofType', EWindStructureRoofType),
    ('TorsionalEffect', ELongBoolean),
    ('InternalPressure', ERoofInternalPressure),
    ('Mu_Xp', c_double),
    ('Mu_Xm', c_double),
    ('Mu_Yp', c_double),
    ('Mu_Ym', c_double),
    ('cpi_Xp', c_double),
    ('cpi_Xm', c_double),
    ('cpi_Yp', c_double),
    ('cpi_Ym', c_double),
    ('FricionEffect', ERoofFrictionEffect),
    ('CustomFriction', c_double),
    ('IsRelativeElevation', ELongBoolean),
    ('RelativeElevation', c_double),
    ('IsMultiSpan', ELongBoolean),
    ('MultiSpanPos', ERoofMultiSpanPos),
    ('MultiSpanDir', ERoofMultiSpanDir),
    ('FlatRoofEdgeType', EFlatRoofEdgeType),
    ('FlatRoofEdgeParam', c_double),
    ('Blockage_Xp', c_double),
    ('Blockage_Xm', c_double),
    ('Blockage_Yp', c_double),
    ('Blockage_Ym', c_double),
    ('Solidity', c_double),
]
assert sizeof(RWindSubStructParams) == 184, sizeof(RWindSubStructParams)
assert alignment(RWindSubStructParams) == 8, alignment(RWindSubStructParams)
IAxisVMWindLoad._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'Params',
              ( ['out', 'retval'], POINTER(RWindLoadParams_V161), 'Value' )),
    COMMETHOD([dispid(202), 'propput'], HRESULT, 'Params',
              ( ['in'], RWindLoadParams_V161, 'Value' )),
    COMMETHOD([dispid(203), 'propget'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAxisVMWindSubStructure)), 'Value' )),
    COMMETHOD([dispid(204)], HRESULT, 'Add',
              ( ['in'], RWindSubStructParams, 'Params' ),
              ( ['in'], _midlSAFEARRAY(c_int), 'LoadPanels' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206), 'propget'], HRESULT, 'CodeAllowed',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(207), 'propget'], HRESULT, 'Defined',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(208)], HRESULT, 'CreateWindCases',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209)], HRESULT, 'DeleteWindCases',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMWindLoad implementation
##class IAxisVMWindLoad_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Params = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Item(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def Add(self, Params, LoadPanels):
##        '-no docstring-'
##        #return ResultValue
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def CodeAllowed(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Defined(self):
##        '-no docstring-'
##        #return Value
##
##    def CreateWindCases(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def DeleteWindCases(self):
##        '-no docstring-'
##        #return ResultValue
##


# values for enumeration 'EWorkplaneType'
wptGlobal = 0
wptSmart = 1
wptGeneral = 2
EWorkplaneType = c_int # enum

# values for enumeration 'EDesignApproach'
daClass = 0
daElastic = 1
EDesignApproach = c_int # enum
class AxisVMSpringParams(CoClass):
    'AxisVMSpringParams Object'
    _reg_clsid_ = GUID('{04475D74-9335-4087-905D-6A4F930BD6E8}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMSpringParams(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMSpringParams Object'
    _iid_ = GUID('{4E653100-BC17-402F-8A5B-C9E439B8ECC7}')
    _idlflags_ = ['dual', 'oleautomation']
AxisVMSpringParams._com_interfaces_ = [IAxisVMSpringParams]
AxisVMSpringParams._outgoing_interfaces_ = [IAxisVMSpringParamsEvents]

class AxisVMSections(CoClass):
    'AxisVMSections Object'
    _reg_clsid_ = GUID('{FEEC27AF-0162-4CF4-B62E-FBE3FBE733EB}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMSections(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMSections Object'
    _iid_ = GUID('{2ECE0F4F-7F3C-4637-A6BA-68A9DD11D6E8}')
    _idlflags_ = ['dual', 'oleautomation']
AxisVMSections._com_interfaces_ = [IAxisVMSections]
AxisVMSections._outgoing_interfaces_ = [IAxisVMSectionsEvents]

class IAxisVMModelsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMModels Object'
    _iid_ = GUID('{3DACC0C1-F4B8-4F5A-9A14-CFA158AF5CA3}')
    _idlflags_ = []
    _methods_ = []

# values for enumeration 'EMessageDialogType'
mdtWarning = 0
mdtError = 1
mdtInformation = 2
mdtConfirmation = 3
mdtCustom = 4
mdtErrorConfirmation = 5
EMessageDialogType = c_int # enum

# values for enumeration 'EMessageDialogButton'
mdbNone = 0
mdbHelp = 1
mdbCancel = 2
mdbOK = 4
mdbNo = 8
mdbYes = 16
mdbAbort = 32
mdbIgnore = 64
mdbRetry = 128
mdbAll = 256
mdbNoToAll = 512
mdbYesToAll = 1024
mdbClose = 2048
EMessageDialogButton = c_int # enum
IAxisVMModelsEvents._disp_methods_ = [
    DISPMETHOD([dispid(201), helpstring('not supported yet')], HRESULT, 'Cleared'),
    DISPMETHOD([dispid(202), helpstring('not supported yet')], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
    DISPMETHOD([dispid(204)], HRESULT, 'SelectionProcessingChanged',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], ELongBoolean, 'NewStatus' )),
    DISPMETHOD([dispid(205)], HRESULT, 'ModelLoaded',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(206)], HRESULT, 'ModelSaved',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], BSTR, 'OldFileName' ),
               ( ['in'], BSTR, 'NewFileName' )),
    DISPMETHOD([dispid(207)], HRESULT, 'ModelClosed',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], BSTR, 'FileName' )),
    DISPMETHOD([dispid(208)], HRESULT, 'NewModel',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(209)], HRESULT, 'ModelChanged',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(210)], HRESULT, 'MainProgress',
               ( ['in'], c_double, 'Progress' ),
               ( ['in', 'out'], POINTER(ELongBoolean), 'Abort' )),
    DISPMETHOD([dispid(211)], HRESULT, 'BeforeMessageDisplay',
               ( ['in'], BSTR, 'Title' ),
               ( ['in'], BSTR, 'Description' ),
               ( ['in'], EMessageDialogType, 'MessageDialogType' ),
               ( ['in'], c_int, 'Buttons' )),
    DISPMETHOD([dispid(212)], HRESULT, 'AfterMessageDisplay',
               ( ['in'], BSTR, 'Title' ),
               ( ['in'], BSTR, 'Description' ),
               ( ['in'], EMessageDialogType, 'MessageDialogType' ),
               ( ['in'], EMessageDialogButton, 'ClickedButton' )),
    DISPMETHOD([dispid(213)], HRESULT, 'DisplayedErrors',
               ( ['in'], BSTR, 'Title' ),
               ( ['in'], BSTR, 'Description' ),
               ( ['in'], BSTR, 'Errors' )),
    DISPMETHOD([dispid(214)], HRESULT, 'FileChanged',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(215)], HRESULT, 'DirectObjectDrawTaskChanged',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], ELongBoolean, 'NewStatus' )),
]
class IAxisVMDomain(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMDomain Object'
    _iid_ = GUID('{77B667E6-5DBF-41B5-8797-62F576A2A26C}')
    _idlflags_ = ['dual', 'oleautomation']
class RSurfaceAttr(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{8E37D005-D83D-49A7-A493-FECCEB7C29B9}')
class RDomainMeshParameters(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{1CF58158-1D26-41EC-A61E-B88C153AD2FD}')
class RSurfaceCoordinates(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{9B3C46C4-41F8-43E5-9E1F-EBEE377556DC}')
RSurfaceCoordinates._fields_ = [
    ('ContourPointCount', c_int),
    ('ContourPoint1Id', c_int),
    ('ContourPoint2Id', c_int),
    ('ContourPoint3Id', c_int),
    ('ContourPoint4Id', c_int),
    ('ContourLine1Id', c_int),
    ('ContourLine2Id', c_int),
    ('ContourLine3Id', c_int),
    ('ContourLine4Id', c_int),
    ('pContourPoint1', RPoint3d),
    ('pContourPoint2', RPoint3d),
    ('pContourPoint3', RPoint3d),
    ('pContourPoint4', RPoint3d),
    ('pContourLineMidPoint1', RPoint3d),
    ('pContourLineMidPoint2', RPoint3d),
    ('pContourLineMidPoint3', RPoint3d),
    ('pContourLineMidPoint4', RPoint3d),
]
assert sizeof(RSurfaceCoordinates) == 232, sizeof(RSurfaceCoordinates)
assert alignment(RSurfaceCoordinates) == 8, alignment(RSurfaceCoordinates)
class RReinforcementParameters(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{9D665FB7-AAF9-4677-9CEE-9CBD84FE1704}')
class RStiffnessesXYZ(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{33CBECCF-6E02-479A-945C-E7B9425083C7}')
class RNonLinearityXYZ(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{D06B1CFD-4F78-430D-9F31-68542468CCE4}')
class RResistancesXYZ(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{9277DF77-08CA-412E-8AB1-005B99901957}')

# values for enumeration 'EArchitectElemType'
aetAuto = 0
aetColumn = 1
aetBeam = 2
aetWall = 3
aetSlab = 4
EArchitectElemType = c_int # enum
class AxisVMLines3d(CoClass):
    'AxisVMLines3d Object'
    _reg_clsid_ = GUID('{8B9E97EC-9F8F-43B5-BA58-C9EFD80D5207}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMLines3d(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMLines3d Object'
    _iid_ = GUID('{F64A4012-4AC9-4DE3-BF36-352868955FD7}')
    _idlflags_ = ['dual', 'oleautomation']
AxisVMLines3d._com_interfaces_ = [IAxisVMLines3d]

class RSurfaceStiffnessFactors(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{7884B13A-8933-49A6-805B-46B92F7F7D32}')
class RMatrix2x2(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{92B992EF-B30E-461C-B9E1-E0F83364456F}')

# values for enumeration 'ESurfaceStiffnessReduction'
ssr_AC = 0
ssr_ACS = 1
ssr_IC = 2
ESurfaceStiffnessReduction = c_int # enum
IAxisVMDomain._methods_ = [
    COMMETHOD([dispid(203), 'propget'], HRESULT, 'ContourLines',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(c_int)), 'Value' )),
    COMMETHOD([dispid(204), 'propget'], HRESULT, 'HoleCount',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(205), 'propget'], HRESULT, 'HoleLines',
              ( ['in'], c_int, 'HoleIndex' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(c_int)), 'Value' )),
    COMMETHOD([dispid(206), 'propget'], HRESULT, 'Weight',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(207), 'propget'], HRESULT, 'Volume',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(208), 'propget'], HRESULT, 'Area',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(210), 'propget'], HRESULT, 'MeshExists',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(212), 'propget'], HRESULT, 'MeshSurfaceIds',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(c_int)), 'Value' )),
    COMMETHOD([dispid(213)], HRESULT, 'AddHole',
              ( ['in'], _midlSAFEARRAY(c_int), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(214)], HRESULT, 'Modify',
              ( ['in'], _midlSAFEARRAY(c_int), 'LineIds' ),
              ( ['in', 'out'], POINTER(RSurfaceAttr), 'SurfaceAttr' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(215)], HRESULT, 'GenerateMesh',
              ( ['in', 'out'], POINTER(RDomainMeshParameters), 'MeshParameters' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'ErrorCodes' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'ErrorPoints' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'ErrorLines' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(216)], HRESULT, 'GetSurfaceAttr',
              ( ['in', 'out'], POINTER(RSurfaceAttr), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(217)], HRESULT, 'SetSurfaceAttr',
              ( ['in', 'out'], POINTER(RSurfaceAttr), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(218)], HRESULT, 'GetNormalVector',
              ( ['in', 'out'], POINTER(RPoint3d), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(219)], HRESULT, 'GetTrMatrix',
              ( ['in', 'out'], POINTER(RMatrix3x3), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(220)], HRESULT, 'GetMeshParameters',
              ( ['in', 'out'], POINTER(RDomainMeshParameters), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(221)], HRESULT, 'SetMeshParameters',
              ( ['in', 'out'], POINTER(RDomainMeshParameters), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(222)], HRESULT, 'SetContourLines',
              ( ['in'], _midlSAFEARRAY(c_int), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(223)], HRESULT, 'DeleteHole',
              ( ['in'], c_int, 'HoleIndex' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(224)], HRESULT, 'GetMeshSurfacesCoordinates',
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceCoordinates)), 'SurfacesCoordinates' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(225), 'propget'], HRESULT, 'HoleArea',
              ( ['in'], c_int, 'HoleIndex' ),
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(226), 'propget'], HRESULT, 'IsWall',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(227), 'propget'], HRESULT, 'IsSlab',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(228), 'propget'], HRESULT, 'IsOtherType',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(229), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(230), 'propget'], HRESULT, 'SeismicStoreyId',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(231), 'propget'], HRESULT, 'StoreyId',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(232)], HRESULT, 'GetInnerDomainIds',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'DomainIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(233), 'propget'], HRESULT, 'OuterDomainId',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(234)], HRESULT, 'GetReinforcementParameters',
              ( ['in', 'out'], POINTER(RReinforcementParameters), 'ReinforcementParameters' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'DesignCodeParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(235)], HRESULT, 'SetReinforcementParameters',
              ( ['in', 'out'], POINTER(RReinforcementParameters), 'ReinforcementParameters' ),
              ( ['in'], _midlSAFEARRAY(c_ubyte), 'DesignCodeParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(236), 'propget'], HRESULT, 'ReinforcementParametersExists',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(237)], HRESULT, 'DeleteReinforcementParameters',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(239)], HRESULT, 'ModifyHole',
              ( ['in'], c_int, 'HoleIndex' ),
              ( ['in'], _midlSAFEARRAY(c_int), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(240)], HRESULT, 'SetElasticFoundation',
              ( ['in', 'out'], POINTER(RStiffnessesXYZ), 'StiffnessesXYZ' ),
              ( ['in', 'out'], POINTER(RNonLinearityXYZ), 'NonLinearityXYZ' ),
              ( ['in', 'out'], POINTER(RResistancesXYZ), 'ResistancesXYZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(241)], HRESULT, 'GetElasticFoundation',
              ( ['in', 'out'], POINTER(RStiffnessesXYZ), 'StiffnessesXYZ' ),
              ( ['in', 'out'], POINTER(RNonLinearityXYZ), 'NonLinearityXYZ' ),
              ( ['in', 'out'], POINTER(RResistancesXYZ), 'ResistancesXYZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(242), 'propget'], HRESULT, 'ElasticFoundationExists',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(243)], HRESULT, 'DeleteElasticFoundation',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(244), 'propget'], HRESULT, 'MaterialColour',
              ( ['out', 'retval'], POINTER(c_ulong), 'Value' )),
    COMMETHOD([dispid(244), 'propput'], HRESULT, 'MaterialColour',
              ( ['in'], c_ulong, 'Value' )),
    COMMETHOD([dispid(245), 'propget'], HRESULT, 'ContourColour',
              ( ['out', 'retval'], POINTER(c_ulong), 'Value' )),
    COMMETHOD([dispid(245), 'propput'], HRESULT, 'ContourColour',
              ( ['in'], c_ulong, 'Value' )),
    COMMETHOD([dispid(246), 'propget'], HRESULT, 'ArchitectElemType',
              ( ['out', 'retval'], POINTER(EArchitectElemType), 'Value' )),
    COMMETHOD([dispid(246), 'propput'], HRESULT, 'ArchitectElemType',
              ( ['in'], EArchitectElemType, 'Value' )),
    COMMETHOD([dispid(247), 'propget'], HRESULT, 'UID',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(248)], HRESULT, 'AddHole_vb',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(249)], HRESULT, 'Modify_vb',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['in', 'out'], POINTER(RSurfaceAttr), 'SurfaceAttr' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(250)], HRESULT, 'SetContourLines_vb',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(251)], HRESULT, 'ModifyHole_vb',
              ( ['in'], c_int, 'HoleIndex' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(252), 'propget'], HRESULT, 'MaterialColour_vb',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(252), 'propput'], HRESULT, 'MaterialColour_vb',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(253), 'propget'], HRESULT, 'ContourColour_vb',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(253), 'propput'], HRESULT, 'ContourColour_vb',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(254), 'propget'], HRESULT, 'StiffnessReduction',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(254), 'propput'], HRESULT, 'StiffnessReduction',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(255), 'propget'], HRESULT, 'ContourPolygon',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMLines3d)), 'Polygon' )),
    COMMETHOD([dispid(256)], HRESULT, 'SetReinforcementParameters_vb',
              ( ['in', 'out'], POINTER(RReinforcementParameters), 'ReinforcementParameters' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'DesignCodeParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(257), 'propget'], HRESULT, 'VariableThickness',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(258)], HRESULT, 'DeleteMesh',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(259)], HRESULT, 'GetSurfaceStiffnessFactors',
              ( ['in', 'out'], POINTER(RSurfaceStiffnessFactors), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(260)], HRESULT, 'SetSurfaceStiffnessFactors',
              ( ['in', 'out'], POINTER(RSurfaceStiffnessFactors), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(261)], HRESULT, 'GetCustomStiffnessMatrix',
              ( ['in', 'out'], POINTER(RMatrix3x3), 'a' ),
              ( ['in', 'out'], POINTER(RMatrix3x3), 'b' ),
              ( ['in', 'out'], POINTER(RMatrix3x3), 'd' ),
              ( ['in', 'out'], POINTER(RMatrix2x2), 'S' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(262)], HRESULT, 'SetCustomStiffnessMatrix',
              ( ['in', 'out'], POINTER(RMatrix3x3), 'a' ),
              ( ['in', 'out'], POINTER(RMatrix3x3), 'b' ),
              ( ['in', 'out'], POINTER(RMatrix3x3), 'd' ),
              ( ['in', 'out'], POINTER(RMatrix2x2), 'S' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(263), 'propget'], HRESULT, 'StiffnessReduction_V153',
              ( ['in'], ESurfaceStiffnessReduction, 'Component' ),
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(263), 'propput'], HRESULT, 'StiffnessReduction_V153',
              ( ['in'], ESurfaceStiffnessReduction, 'Component' ),
              ( ['in'], c_double, 'Value' )),
]
################################################################
## code template for IAxisVMDomain implementation
##class IAxisVMDomain_Impl(object):
##    @property
##    def ContourLines(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def HoleCount(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def HoleLines(self, HoleIndex):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Weight(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Volume(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Area(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def MeshExists(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def MeshSurfaceIds(self):
##        '-no docstring-'
##        #return Value
##
##    def AddHole(self, LineIds):
##        '-no docstring-'
##        #return ResultValue
##
##    def Modify(self, LineIds):
##        '-no docstring-'
##        #return SurfaceAttr, ResultValue
##
##    def GenerateMesh(self):
##        '-no docstring-'
##        #return MeshParameters, ErrorCodes, ErrorPoints, ErrorLines, ResultValue
##
##    def GetSurfaceAttr(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetSurfaceAttr(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def GetNormalVector(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def GetTrMatrix(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def GetMeshParameters(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetMeshParameters(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetContourLines(self, LineIds):
##        '-no docstring-'
##        #return ResultValue
##
##    def DeleteHole(self, HoleIndex):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetMeshSurfacesCoordinates(self):
##        '-no docstring-'
##        #return SurfacesCoordinates, ResultValue
##
##    @property
##    def HoleArea(self, HoleIndex):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def IsWall(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def IsSlab(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def IsOtherType(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Name(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def SeismicStoreyId(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def StoreyId(self):
##        '-no docstring-'
##        #return Value
##
##    def GetInnerDomainIds(self):
##        '-no docstring-'
##        #return DomainIds, ResultValue
##
##    @property
##    def OuterDomainId(self):
##        '-no docstring-'
##        #return Value
##
##    def GetReinforcementParameters(self):
##        '-no docstring-'
##        #return ReinforcementParameters, DesignCodeParameters, ResultValue
##
##    def SetReinforcementParameters(self, DesignCodeParameters):
##        '-no docstring-'
##        #return ReinforcementParameters, ResultValue
##
##    @property
##    def ReinforcementParametersExists(self):
##        '-no docstring-'
##        #return Value
##
##    def DeleteReinforcementParameters(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def ModifyHole(self, HoleIndex, LineIds):
##        '-no docstring-'
##        #return ResultValue
##
##    def SetElasticFoundation(self):
##        '-no docstring-'
##        #return StiffnessesXYZ, NonLinearityXYZ, ResistancesXYZ, ResultValue
##
##    def GetElasticFoundation(self):
##        '-no docstring-'
##        #return StiffnessesXYZ, NonLinearityXYZ, ResistancesXYZ, ResultValue
##
##    @property
##    def ElasticFoundationExists(self):
##        '-no docstring-'
##        #return Value
##
##    def DeleteElasticFoundation(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    MaterialColour = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    ContourColour = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    ArchitectElemType = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def UID(self):
##        '-no docstring-'
##        #return Value
##
##    def AddHole_vb(self):
##        '-no docstring-'
##        #return LineIds, ResultValue
##
##    def Modify_vb(self):
##        '-no docstring-'
##        #return LineIds, SurfaceAttr, ResultValue
##
##    def SetContourLines_vb(self):
##        '-no docstring-'
##        #return LineIds, ResultValue
##
##    def ModifyHole_vb(self, HoleIndex):
##        '-no docstring-'
##        #return LineIds, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    MaterialColour_vb = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    ContourColour_vb = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    StiffnessReduction = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ContourPolygon(self):
##        '-no docstring-'
##        #return Polygon
##
##    def SetReinforcementParameters_vb(self):
##        '-no docstring-'
##        #return ReinforcementParameters, DesignCodeParameters, ResultValue
##
##    @property
##    def VariableThickness(self):
##        '-no docstring-'
##        #return Value
##
##    def DeleteMesh(self):
##        '-no docstring-'
##        #return Value
##
##    def GetSurfaceStiffnessFactors(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetSurfaceStiffnessFactors(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def GetCustomStiffnessMatrix(self):
##        '-no docstring-'
##        #return a, b, d, S, ResultValue
##
##    def SetCustomStiffnessMatrix(self):
##        '-no docstring-'
##        #return a, b, d, S, ResultValue
##
##    def _get(self, Component):
##        '-no docstring-'
##        #return Value
##    def _set(self, Component, Value):
##        '-no docstring-'
##    StiffnessReduction_V153 = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'ERunningMode'
rmOneWay = 0
rmRoundTrip = 1
ERunningMode = c_int # enum

# values for enumeration 'ESwayDirection'
sdPlusX = 0
sdMinX = 1
sdPlusY = 2
sdMinY = 3
sdCustom = 4
ESwayDirection = c_int # enum
class IAxisVMCalculatedReinforcementEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMCalculatedReinforcement Object'
    _iid_ = GUID('{025B4B24-58B5-474B-A08B-112693409FF0}')
    _idlflags_ = []
    _methods_ = []
IAxisVMCalculatedReinforcementEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrCode' )),
]
class IAxisVMCriticalGroupCombinations(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMCriticalGroupCombinations Object'
    _iid_ = GUID('{A67D0224-CF8F-49E4-968D-58E2473BA086}')
    _idlflags_ = ['dual', 'oleautomation']
IAxisVMCriticalGroupCombinations._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202)], HRESULT, 'Clear',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(203)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204), 'propget'], HRESULT, 'Used',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'LoadGroupId' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(204), 'propput'], HRESULT, 'Used',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'LoadGroupId' ),
              ( ['in'], ELongBoolean, 'Value' )),
    COMMETHOD([dispid(205), 'propget'], HRESULT, 'Editable',
              ( ['in'], c_int, 'LoadGroupId' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(206)], HRESULT, 'AddDefaultCombinations',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207), 'propget'], HRESULT, 'Linking',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(207), 'propput'], HRESULT, 'Linking',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], ELongBoolean, 'Value' )),
    COMMETHOD([dispid(208), 'propget'], HRESULT, 'LinkingEditable',
              ( ['in'], c_int, 'LoadGroupId' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(209)], HRESULT, 'Validate',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMCriticalGroupCombinations implementation
##class IAxisVMCriticalGroupCombinations_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def Clear(self):
##        '-no docstring-'
##        #return Value
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def _get(self, Index, LoadGroupId):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, LoadGroupId, Value):
##        '-no docstring-'
##    Used = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Editable(self, LoadGroupId):
##        '-no docstring-'
##        #return Value
##
##    def AddDefaultCombinations(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    Linking = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def LinkingEditable(self, LoadGroupId):
##        '-no docstring-'
##        #return Value
##
##    def Validate(self):
##        '-no docstring-'
##        #return ResultValue
##


# values for enumeration 'EEdgeConnectionForce'
ecfNx = 0
ecfVy = 1
ecfVz = 2
ecfTx = 3
ecfMy = 4
ecfMz = 5
EEdgeConnectionForce = c_int # enum

# values for enumeration 'EGlobalWorkplaneType'
gwptXY = 0
gwptXZ = 1
gwptYZ = 2
EGlobalWorkplaneType = c_int # enum
class RLoadNodalForce(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{BF3FA07A-0D6B-4270-BF4F-8B40DD09D4CB}')
RLoadNodalForce._fields_ = [
    ('LoadCaseId', c_int),
    ('NodeId', c_int),
    ('Fx', c_double),
    ('Fy', c_double),
    ('Fz', c_double),
    ('Mx', c_double),
    ('My', c_double),
    ('Mz', c_double),
    ('ReferenceId', c_int),
]
assert sizeof(RLoadNodalForce) == 64, sizeof(RLoadNodalForce)
assert alignment(RLoadNodalForce) == 8, alignment(RLoadNodalForce)
class AxisVMRCBeamDesign(CoClass):
    'AxisVMRCBeamDesign Object'
    _reg_clsid_ = GUID('{98E531A9-D403-4623-A682-D356371A7F63}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMRCBeamDesign(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMRCBeamDesign Object'
    _iid_ = GUID('{54EE792B-599F-4551-88DD-F3E29D3ED224}')
    _idlflags_ = ['dual', 'oleautomation']
AxisVMRCBeamDesign._com_interfaces_ = [IAxisVMRCBeamDesign]
AxisVMRCBeamDesign._outgoing_interfaces_ = [IAxisVMRCBeamDesignEvents]


# values for enumeration 'EStructureMode'
smCrainrunway = 0
smBridge = 1
EStructureMode = c_int # enum
class IAxisVMCrackWidthEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMCrackWidth Object'
    _iid_ = GUID('{A6ACB54D-7E7D-4832-98D4-65D81A7B759C}')
    _idlflags_ = []
    _methods_ = []
IAxisVMCrackWidthEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]

# values for enumeration 'ESmartWorkplaneElementType'
swetMember = 0
swetSurface = 1
swetDomain = 2
ESmartWorkplaneElementType = c_int # enum

# values for enumeration 'EMovingLoadError'
mleInvalidItemType = -100001
mleInvalidSystemValue = -100002
mleInvalidMovingLoadType = -100003
mleInvalidPathOrNodes = -100004
mleInvalidNValue = -100005
mleInvalidNormVLength = -100006
mleInvalidPathOrNormV = -100007
mleInvalidLoadCase = -100008
mleInvalidLoadGroup = -100009
mleInvalidMovingLoad = -100010
EMovingLoadError = c_int # enum

# values for enumeration 'EBaseHeightType'
bhtLowest = 0
bhtCustom = 1
EBaseHeightType = c_int # enum
class AxisVMModels(CoClass):
    'AxisVMModels Object'
    _reg_clsid_ = GUID('{05F90A2D-EF2D-4286-9F97-664A63BD3549}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMModels(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMModels Object'
    _iid_ = GUID('{F8902B66-A601-48D8-B168-7F5E8D6F4E99}')
    _idlflags_ = ['dual', 'oleautomation']
AxisVMModels._com_interfaces_ = [IAxisVMModels]
AxisVMModels._outgoing_interfaces_ = [IAxisVMModelsEvents]

class IAxisVMNodes(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMNodes Object'
    _iid_ = GUID('{4B6FE47B-EA37-41D9-81C4-62593EA5B6AC}')
    _idlflags_ = ['dual', 'oleautomation']
class RNode(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{12CF77CB-B727-483D-A90A-3B7342756E68}')
RNode._fields_ = [
    ('x', c_double),
    ('y', c_double),
    ('z', c_double),
    ('dof', c_int),
]
assert sizeof(RNode) == 32, sizeof(RNode)
assert alignment(RNode) == 8, alignment(RNode)
IAxisVMNodes._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(203), 'propget'], HRESULT, 'Selected',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(203), 'propput'], HRESULT, 'Selected',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], ELongBoolean, 'Value' )),
    COMMETHOD([dispid(204), 'propget'], HRESULT, 'SelCount',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(205)], HRESULT, 'Add',
              ( ['in'], c_double, 'x' ),
              ( ['in'], c_double, 'y' ),
              ( ['in'], c_double, 'z' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'AddWithDOF',
              ( ['in'], c_double, 'x' ),
              ( ['in'], c_double, 'y' ),
              ( ['in'], c_double, 'z' ),
              ( ['in'], c_int, 'dof' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208)], HRESULT, 'IndexOf',
              ( ['in'], c_double, 'x' ),
              ( ['in'], c_double, 'y' ),
              ( ['in'], c_double, 'z' ),
              ( ['in'], c_double, 'eps' ),
              ( ['in'], c_int, 'StartIndex' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209)], HRESULT, 'DeleteSelected',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(210)], HRESULT, 'GetConnectedLines',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIdxList' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(211)], HRESULT, 'GetConnectedSurfaces',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SurfaceIdxList' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(212)], HRESULT, 'SelectAll',
              ( ['in'], ELongBoolean, 'Select' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(213)], HRESULT, 'Clear',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(214)], HRESULT, 'GetNode',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RNode), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(215)], HRESULT, 'SetNode',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RNode), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(217)], HRESULT, 'GetSelectedItemIds',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'ItemIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(218), 'propget'], HRESULT, 'Name',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(219)], HRESULT, 'GetNodeCoord',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(220)], HRESULT, 'SetNodeCoord',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(221)], HRESULT, 'GetSelectedNodes',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'ItemIds' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RNode)), 'Items' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(222)], HRESULT, 'RenameSelectedNodes',
              ( ['in'], c_int, 'NewBase' ),
              ( ['in'], BSTR, 'FormatStr' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(223)], HRESULT, 'Check',
              ( ['in'], c_double, 'eps' ),
              ( ['in'], ELongBoolean, 'Delete' ),
              ( ['in'], ELongBoolean, 'Repaint' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(224)], HRESULT, 'DeleteNameOfAllNodes',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(225), 'propget'], HRESULT, 'UID',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(226), 'propget'], HRESULT, 'IndexOfUID',
              ( ['in'], c_int, 'UID' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(227), 'propget'], HRESULT, 'Attributes',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMAttributes)), 'Value' )),
    COMMETHOD([dispid(228), 'propget'], HRESULT, 'Attachments',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMAttachments)), 'Value' )),
    COMMETHOD([dispid(229)], HRESULT, 'RemoveSelectedIntermedNodes',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(230)], HRESULT, 'BulkAdd',
              ( ['in'], _midlSAFEARRAY(RPoint3d), 'Coords' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'ItemData' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(231)], HRESULT, 'BulkGetCoord',
              ( ['in'], _midlSAFEARRAY(c_int), 'Indexes' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Coords' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(232)], HRESULT, 'BulkGetDOF',
              ( ['in'], _midlSAFEARRAY(c_int), 'Indexes' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'DOFs' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(233)], HRESULT, 'BulkSetDOF',
              ( ['in'], _midlSAFEARRAY(c_int), 'Indexes' ),
              ( ['in'], _midlSAFEARRAY(c_int), 'DOFs' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(234)], HRESULT, 'BulkSetNodeCoord',
              ( ['in'], _midlSAFEARRAY(c_int), 'Indexes' ),
              ( ['in'], _midlSAFEARRAY(RPoint3d), 'Coords' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(235)], HRESULT, 'GetNodeLines',
              ( ['in'], c_int, 'NodeId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(236)], HRESULT, 'BulkSelect',
              ( ['in'], _midlSAFEARRAY(c_int), 'Indexes' ),
              ( ['in'], ELongBoolean, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(237)], HRESULT, 'BulkDelete',
              ( ['in'], _midlSAFEARRAY(c_int), 'Indexes' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMNodes implementation
##class IAxisVMNodes_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    Selected = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SelCount(self):
##        '-no docstring-'
##        #return Value
##
##    def Add(self, x, y, z):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddWithDOF(self, x, y, z, dof):
##        '-no docstring-'
##        #return ResultValue
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def IndexOf(self, x, y, z, eps, StartIndex):
##        '-no docstring-'
##        #return ResultValue
##
##    def DeleteSelected(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetConnectedLines(self, Index):
##        '-no docstring-'
##        #return LineIdxList, ResultValue
##
##    def GetConnectedSurfaces(self, Index):
##        '-no docstring-'
##        #return SurfaceIdxList, ResultValue
##
##    def SelectAll(self, Select):
##        '-no docstring-'
##        #return ResultValue
##
##    def Clear(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetNode(self, Index):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetNode(self, Index):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def GetSelectedItemIds(self):
##        '-no docstring-'
##        #return ItemIds, ResultValue
##
##    @property
##    def Name(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def GetNodeCoord(self, Index):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetNodeCoord(self, Index):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def GetSelectedNodes(self):
##        '-no docstring-'
##        #return ItemIds, Items, ResultValue
##
##    def RenameSelectedNodes(self, NewBase, FormatStr):
##        '-no docstring-'
##        #return ResultValue
##
##    def Check(self, eps, Delete, Repaint):
##        '-no docstring-'
##        #return ResultValue
##
##    def DeleteNameOfAllNodes(self):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def UID(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def IndexOfUID(self, UID):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Attributes(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Attachments(self):
##        '-no docstring-'
##        #return Value
##
##    def RemoveSelectedIntermedNodes(self):
##        '-no docstring-'
##        #return Value
##
##    def BulkAdd(self, Coords):
##        '-no docstring-'
##        #return ItemData, ResultValue
##
##    def BulkGetCoord(self, Indexes):
##        '-no docstring-'
##        #return Coords, ResultValue
##
##    def BulkGetDOF(self, Indexes):
##        '-no docstring-'
##        #return DOFs, ResultValue
##
##    def BulkSetDOF(self, Indexes, DOFs):
##        '-no docstring-'
##        #return ResultValue
##
##    def BulkSetNodeCoord(self, Indexes, Coords):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetNodeLines(self, NodeId):
##        '-no docstring-'
##        #return LineIds, ResultValue
##
##    def BulkSelect(self, Indexes, Value):
##        '-no docstring-'
##        #return ResultValue
##
##    def BulkDelete(self, Indexes):
##        '-no docstring-'
##        #return ResultValue
##

class IAxisVMTaskEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for Task Object'
    _iid_ = GUID('{7ABA8457-B1A0-40AC-847A-B05487DF748F}')
    _idlflags_ = []
    _methods_ = []
IAxisVMTaskEvents._disp_methods_ = [
]
class RResultTreeIteratorRec(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{B6E491A4-329C-4C2F-9803-D0EF63CB2322}')

# values for enumeration 'EAnalysisType'
atLinearStatic = 0
atNonLinearStatic = 1
atLinearVibration = 2
atNonLinearVibration = 3
atBuckling = 4
atDynamic = 5
EAnalysisType = c_int # enum
RResultTreeIteratorRec._fields_ = [
    ('AnalysisType', EAnalysisType),
    ('ResultCase', c_int),
    ('LoadLevelOrTimeStep', c_int),
    ('Creep', ELongBoolean),
]
assert sizeof(RResultTreeIteratorRec) == 16, sizeof(RResultTreeIteratorRec)
assert alignment(RResultTreeIteratorRec) == 4, alignment(RResultTreeIteratorRec)
class IAxisVMWindSubStructureEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMWindSubStructure Object'
    _iid_ = GUID('{079C12B2-5EA7-48F3-AB45-B7029ACF63AF}')
    _idlflags_ = []
    _methods_ = []
IAxisVMWindSubStructureEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]
class IAxisVMCrossSectionTable(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMCrossSectionTable Object'
    _iid_ = GUID('{9F9C9F93-0B3D-4593-B51E-D1FB968DF7D2}')
    _idlflags_ = ['dual', 'oleautomation']
class RTableCrossSectionID(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{868C5747-A187-4F3B-A6E4-2766C42659E2}')
IAxisVMCrossSectionTable._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(RTableCrossSectionID), 'Value' )),
    COMMETHOD([dispid(203), 'propget'], HRESULT, 'CrossSectionName',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(204), 'propget'], HRESULT, 'DocTableName',
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(205), 'propget'], HRESULT, 'TableID',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
]
################################################################
## code template for IAxisVMCrossSectionTable implementation
##class IAxisVMCrossSectionTable_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Item(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def CrossSectionName(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def DocTableName(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def TableID(self):
##        '-no docstring-'
##        #return Value
##


# values for enumeration 'ELinkElementForce'
lefNx = 0
lefVy = 1
lefVz = 2
lefTx = 3
lefMy = 4
lefMz = 5
ELinkElementForce = c_int # enum
class IAxisVMVelocity(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMVelocity Object'
    _iid_ = GUID('{1D5DF269-4781-40E7-96C6-CFEE8C4D3106}')
    _idlflags_ = ['dual', 'oleautomation']
class RVelocityValues(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{DB6E12FF-5EA8-4E68-9EBA-79A2927C3295}')

# values for enumeration 'EMinMaxType'
mtMin = 0
mtMax = 1
mtMinMax = 2
EMinMaxType = c_int # enum

# values for enumeration 'EVelocity'
veX = 0
veY = 1
veZ = 2
veXX = 3
veYY = 4
veZZ = 5
veR = 6
veRR = 7
EVelocity = c_int # enum
RVelocityValues._fields_ = [
    ('vvX', c_double),
    ('vvY', c_double),
    ('vvZ', c_double),
    ('vvXX', c_double),
    ('vvYY', c_double),
    ('vvZZ', c_double),
    ('vvR', c_double),
    ('vvRR', c_double),
]
assert sizeof(RVelocityValues) == 64, sizeof(RVelocityValues)
assert alignment(RVelocityValues) == 8, alignment(RVelocityValues)
IAxisVMVelocity._methods_ = [
    COMMETHOD([dispid(201)], HRESULT, 'GetNodalVelocityByLoadCaseId',
              ( ['in'], c_int, 'NodeId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'TimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RVelocityValues), 'VelocityValues' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(202)], HRESULT, 'GetEnvelopeNodalVelocity',
              ( ['in'], c_int, 'NodeId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EVelocity, 'Component' ),
              ( ['in', 'out'], POINTER(RVelocityValues), 'VelocityValues' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(203)], HRESULT, 'GetAllNodalVelocitiesByLoadCaseId',
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'TimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RVelocityValues)), 'VelocityValues' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'GetAllEnvelopeNodalVelocities',
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EVelocity, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RVelocityValues)), 'VelocityValues' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205), 'propget'], HRESULT, 'AnalysisType',
              ( ['out', 'retval'], POINTER(EAnalysisType), 'Value' )),
    COMMETHOD([dispid(205), 'propput'], HRESULT, 'AnalysisType',
              ( ['in'], EAnalysisType, 'Value' )),
    COMMETHOD([dispid(206), 'propget'], HRESULT, 'LoadCaseId',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(206), 'propput'], HRESULT, 'LoadCaseId',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(207), 'propget'], HRESULT, 'MinMaxType',
              ( ['out', 'retval'], POINTER(EMinMaxType), 'Value' )),
    COMMETHOD([dispid(207), 'propput'], HRESULT, 'MinMaxType',
              ( ['in'], EMinMaxType, 'Value' )),
    COMMETHOD([dispid(208), 'propget'], HRESULT, 'TimeStep',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(208), 'propput'], HRESULT, 'TimeStep',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(209), 'propget'], HRESULT, 'Component',
              ( ['out', 'retval'], POINTER(EVelocity), 'Value' )),
    COMMETHOD([dispid(209), 'propput'], HRESULT, 'Component',
              ( ['in'], EVelocity, 'Value' )),
    COMMETHOD([dispid(210)], HRESULT, 'NodalVelocityByLoadCaseId',
              ( ['in'], c_int, 'NodeId' ),
              ( ['in', 'out'], POINTER(RVelocityValues), 'VelocityValues' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(211)], HRESULT, 'EnvelopeNodalVelocity',
              ( ['in'], c_int, 'NodeId' ),
              ( ['in', 'out'], POINTER(RVelocityValues), 'VelocityValues' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(212)], HRESULT, 'AllNodalVelocitiesByLoadCaseId',
              ( ['out'], POINTER(_midlSAFEARRAY(RVelocityValues)), 'VelocityValues' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(213)], HRESULT, 'AllEnvelopeNodalVelocities',
              ( ['out'], POINTER(_midlSAFEARRAY(RVelocityValues)), 'VelocityValues' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(214), 'propget'], HRESULT, 'EnvelopeUID',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(214), 'propput'], HRESULT, 'EnvelopeUID',
              ( ['in'], c_int, 'Value' )),
]
################################################################
## code template for IAxisVMVelocity implementation
##class IAxisVMVelocity_Impl(object):
##    def GetNodalVelocityByLoadCaseId(self, NodeId, LoadCaseId, TimeStep, AnalysisType):
##        '-no docstring-'
##        #return VelocityValues, Combination, ResultValue
##
##    def GetEnvelopeNodalVelocity(self, NodeId, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return VelocityValues, Combination, ResultValue
##
##    def GetAllNodalVelocitiesByLoadCaseId(self, LoadCaseId, TimeStep, AnalysisType):
##        '-no docstring-'
##        #return VelocityValues, Combinations, ResultValue
##
##    def GetAllEnvelopeNodalVelocities(self, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return VelocityValues, Combinations, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    AnalysisType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LoadCaseId = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    MinMaxType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    TimeStep = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Component = property(_get, _set, doc = _set.__doc__)
##
##    def NodalVelocityByLoadCaseId(self, NodeId):
##        '-no docstring-'
##        #return VelocityValues, Combination, ResultValue
##
##    def EnvelopeNodalVelocity(self, NodeId):
##        '-no docstring-'
##        #return VelocityValues, Combination, ResultValue
##
##    def AllNodalVelocitiesByLoadCaseId(self):
##        '-no docstring-'
##        #return VelocityValues, Combinations, ResultValue
##
##    def AllEnvelopeNodalVelocities(self):
##        '-no docstring-'
##        #return VelocityValues, Combinations, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    EnvelopeUID = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'EExpClass_EC'
ecX0 = 0
ecXC1 = 1
ecXC2 = 2
ecXC3 = 3
ecXC4 = 4
ecXD1 = 5
ecXD2 = 6
ecXD3 = 7
ecXS1 = 8
ecXS2 = 9
ecXS3 = 10
ecXF1 = 11
ecXF2 = 12
ecXF3 = 13
ecXF4 = 14
ecXD2b = 15
EExpClass_EC = c_int # enum

# values for enumeration 'EReinforcementCheckStatus'
scsNotAvailable = 0
scsOK = 1
scsFail = 2
EReinforcementCheckStatus = c_int # enum
class RSpringParam_V161(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{E4DC3E4E-02A6-493A-8385-61857D38CEBB}')

# values for enumeration 'ESpringParType'
sptNodal = 0
sptIsolator = 1
sptConstraint = 2
ESpringParType = c_int # enum

# values for enumeration 'ESpringParNNType'
spnntLinear = 0
spnntNonLinearElastic = 1
spnntNonLinearPlastic = 2
ESpringParNNType = c_int # enum

# values for enumeration 'ESpringParDOFType'
spdoftTranslation = 0
spdoftRotation = 1
spdoftWarping = 2
ESpringParDOFType = c_int # enum

# values for enumeration 'ESpringParDampingType'
spdtKelvin = 0
spdtMaxwell = 1
ESpringParDampingType = c_int # enum

# values for enumeration 'ESpringParNonLinearity'
spnlTensionAndCompression = 0
spnlTensionOnly = 1
spnlCompressionOnly = 2
ESpringParNonLinearity = c_int # enum

# values for enumeration 'ESpringParNLDefType'
spnldtByParam = 0
spnldtByFunction = 1
ESpringParNLDefType = c_int # enum

# values for enumeration 'ESpringParHardeningRule'
sphrIsotropic = 0
sphrKinematic = 1
ESpringParHardeningRule = c_int # enum

# values for enumeration 'ESpringParMatrixType'
spmtTangentMatrix = 0
spmtInitialMatrix = 1
ESpringParMatrixType = c_int # enum

# values for enumeration 'ESpringParIsolatorType'
spitRubber = 0
spitSlider = 1
spitCustom = 2
ESpringParIsolatorType = c_int # enum
RSpringParam_V161._fields_ = [
    ('SpringType', ESpringParType),
    ('NNType', ESpringParNNType),
    ('DOFType', ESpringParDOFType),
    ('NLESimplified', ELongBoolean),
    ('K', c_double),
    ('KVib', c_double),
    ('DampingType', ESpringParDampingType),
    ('C', c_double),
    ('NonLinearity', ESpringParNonLinearity),
    ('NLDefType', ESpringParNLDefType),
    ('K_T', c_double),
    ('K_C', c_double),
    ('ResistanceDef_T', ELongBoolean),
    ('ResistanceDef_C', ELongBoolean),
    ('TangentStiffness_T', c_double),
    ('TangentStiffness_C', c_double),
    ('Resistance_T', c_double),
    ('Resistance_C', c_double),
    ('HardeningRule', ESpringParHardeningRule),
    ('MatrixType', ESpringParMatrixType),
    ('C_t', c_double),
    ('C_C', c_double),
    ('VerticalStiffness', c_double),
    ('IsolatorType', ESpringParIsolatorType),
    ('K1', c_double),
    ('kt', c_double),
    ('F1', c_double),
    ('Mu', c_double),
    ('R', c_double),
    ('HorizontalStiffness', c_double),
    ('Ksi', c_double),
    ('WF', c_double),
]
assert sizeof(RSpringParam_V161) == 216, sizeof(RSpringParam_V161)
assert alignment(RSpringParam_V161) == 8, alignment(RSpringParam_V161)
class RIFCExportReinforcementParams(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{76368222-EA62-4EC2-9D8F-8015C832C113}')

# values for enumeration 'EIFCDomainReinforcementLinkType'
idrltUbar = 0
idrltOverlap = 1
idrltLbar = 2
idrltNone = 3
EIFCDomainReinforcementLinkType = c_int # enum

# values for enumeration 'EIFCQuestionableDomainLink'
iqdlNone = 0
iqdlReinforce = 1
EIFCQuestionableDomainLink = c_int # enum

# values for enumeration 'EIFCDomainOverlap'
idoSeparately = 0
idoAnchored = 1
idoOverRun = 2
EIFCDomainOverlap = c_int # enum
RIFCExportReinforcementParams._fields_ = [
    ('EdgeReinforcementNeeded', ELongBoolean),
    ('AdditionalHoleReinforcement', ELongBoolean),
    ('TypicalLapLengthByDesignCode', ELongBoolean),
    ('ConcaveCornerLapLengthByDesignCode', ELongBoolean),
    ('TypicalLapLengthByUser', c_double),
    ('ConcaveCornerLapLengthByUser', c_double),
    ('AdditionalHoleRebarDiameter', c_double),
    ('DomainReinforcementLinkType', EIFCDomainReinforcementLinkType),
    ('QuestionableDomainLink', EIFCQuestionableDomainLink),
    ('DomainOverlap_Larger', EIFCDomainOverlap),
    ('DomainOverlap_Smaller', EIFCDomainOverlap),
    ('ModifyClosedLinks', ELongBoolean),
    ('ClosedLinkRatio', c_double),
]
assert sizeof(RIFCExportReinforcementParams) == 72, sizeof(RIFCExportReinforcementParams)
assert alignment(RIFCExportReinforcementParams) == 8, alignment(RIFCExportReinforcementParams)
class IAxisVMShearCapacity(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMShearCapacity Object'
    _iid_ = GUID('{14A243BA-CEBF-44DD-9C7B-36E619507C56}')
    _idlflags_ = ['dual', 'oleautomation']
class RShearCapacities(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{4DFABD55-EC99-4D16-BBA3-3AE378C45EDD}')

# values for enumeration 'EShearCapacity'
scVRdc = 0
scVEdMinusVRdc = 1
scVRdmax = 2
scVEdDivVRdmax = 3
scaVEd = 4
EShearCapacity = c_int # enum

# values for enumeration 'ECombinationType'
ctOther = 0
ctSLS1 = 1
ctSLSChar = 1
ctSLS2 = 2
ctSLSFreq = 2
ctSLS3 = 3
ctSLSQuasi = 3
ctULS1 = 4
ctULS = 4
ctULS2 = 5
ctULSSeismic = 5
ctULS3 = 6
ctULSExceptional = 6
ctULSALL = 7
ctULSab = 8
ctULSa = 9
ctULSb = 10
ctULSALLab = 11
ctULSA1 = 12
ctULSA2 = 13
ctULSA3 = 14
ctULSA4 = 15
ctULSA5 = 16
ctULSA6 = 17
ctULSA7 = 18
ctULSA8 = 19
ctULSAllSE1 = 20
ctULSAllSE2 = 21
ctULSAllSE3 = 22
ctULSAllSE4 = 23
ctULSAllSE5 = 24
ctULSAllSE6 = 25
ctULSAllSE7 = 26
ctULSAllSE8 = 27
ctSemiAutoSLS1 = 28
ctSemiAutoSLS2 = 29
ctSemiAutoSLS3 = 30
ctAuto = 31
ECombinationType = c_int # enum
class RShearCapacityValues(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{385D8979-27C3-440C-AF52-C5C76B724466}')
RShearCapacityValues._fields_ = [
    ('VRdc', c_double),
    ('VEdMinusVRdc', c_double),
    ('VRdmax', c_double),
    ('VEdDivVRdmax', c_double),
    ('aVEd', c_double),
]
assert sizeof(RShearCapacityValues) == 40, sizeof(RShearCapacityValues)
assert alignment(RShearCapacityValues) == 8, alignment(RShearCapacityValues)
RShearCapacities._fields_ = [
    ('ContourPointCount', c_int),
    ('ContourPoint1Id', c_int),
    ('ContourPoint2Id', c_int),
    ('ContourPoint3Id', c_int),
    ('ContourPoint4Id', c_int),
    ('ContourLine1Id', c_int),
    ('ContourLine2Id', c_int),
    ('ContourLine3Id', c_int),
    ('ContourLine4Id', c_int),
    ('scvCenterPoint', RShearCapacityValues),
    ('scvContourPoint1', RShearCapacityValues),
    ('scvContourPoint2', RShearCapacityValues),
    ('scvContourPoint3', RShearCapacityValues),
    ('scvContourPoint4', RShearCapacityValues),
    ('scvContourLineMidPoint1', RShearCapacityValues),
    ('scvContourLineMidPoint2', RShearCapacityValues),
    ('scvContourLineMidPoint3', RShearCapacityValues),
    ('scvContourLineMidPoint4', RShearCapacityValues),
]
assert sizeof(RShearCapacities) == 400, sizeof(RShearCapacities)
assert alignment(RShearCapacities) == 8, alignment(RShearCapacities)
IAxisVMShearCapacity._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202)], HRESULT, 'GetShearCapacitiesByLoadCaseId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RShearCapacities), 'ShearCapacities' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(203)], HRESULT, 'GetShearCapacitiesByLoadCombinationId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RShearCapacities), 'ShearCapacities' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204), helpstring('Combination is a multiline string (separated with CR+LF) where the lines belong to: ContourPoint1, ContourLineMidPoint1, ContourPoint2, ContourLineMidPoint2, ContourPoint3, ContourLineMidPoint3, [ContourPoint4, ContourLineMidPoint4], CenterPoint')], HRESULT, 'GetEnvelopeShearCapacities',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EShearCapacity, 'Component' ),
              ( ['in', 'out'], POINTER(RShearCapacities), 'ShearCapacities' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205), helpstring('Combination is a multiline string (separated with CR+LF) where the lines belong to: ContourPoint1, ContourLineMidPoint1, ContourPoint2, ContourLineMidPoint2, ContourPoint3, ContourLineMidPoint3, [ContourPoint4, ContourLineMidPoint4], CenterPoint')], HRESULT, 'GetCriticalShearCapacities',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EShearCapacity, 'Component' ),
              ( ['in', 'out'], POINTER(RShearCapacities), 'ShearCapacities' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'GetAllShearCapacitiesByLoadCaseId',
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RShearCapacities)), 'ShearCapacities' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'GetAllShearCapacitiesByLoadCombinationId',
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RShearCapacities)), 'ShearCapacities' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208), helpstring('Combinations contain a multiline strings (separated with CR+LF) where the lines belong to: ContourPoint1, ContourLineMidPoint1, ContourPoint2, ContourLineMidPoint2, ContourPoint3, ContourLineMidPoint3, [ContourPoint4, ContourLineMidPoint4], CenterPoint')], HRESULT, 'GetAllEnvelopeShearCapacities',
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EShearCapacity, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RShearCapacities)), 'ShearCapacities' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209), helpstring('Combinations contain a multiline strings (separated with CR+LF) where the lines belong to: ContourPoint1, ContourLineMidPoint1, ContourPoint2, ContourLineMidPoint2, ContourPoint3, ContourLineMidPoint3, [ContourPoint4, ContourLineMidPoint4], CenterPoint')], HRESULT, 'GetAllCriticalShearCapacities',
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EShearCapacity, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RShearCapacities)), 'ShearCapacities' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(210), 'propget'], HRESULT, 'AnalysisType',
              ( ['out', 'retval'], POINTER(EAnalysisType), 'Value' )),
    COMMETHOD([dispid(210), 'propput'], HRESULT, 'AnalysisType',
              ( ['in'], EAnalysisType, 'Value' )),
    COMMETHOD([dispid(211), 'propget'], HRESULT, 'LoadCaseId',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(211), 'propput'], HRESULT, 'LoadCaseId',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(212), 'propget'], HRESULT, 'LoadCombinationId',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(212), 'propput'], HRESULT, 'LoadCombinationId',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(213), 'propget'], HRESULT, 'MinMaxType',
              ( ['out', 'retval'], POINTER(EMinMaxType), 'Value' )),
    COMMETHOD([dispid(213), 'propput'], HRESULT, 'MinMaxType',
              ( ['in'], EMinMaxType, 'Value' )),
    COMMETHOD([dispid(214), 'propget'], HRESULT, 'CombinationType',
              ( ['out', 'retval'], POINTER(ECombinationType), 'Value' )),
    COMMETHOD([dispid(214), 'propput'], HRESULT, 'CombinationType',
              ( ['in'], ECombinationType, 'Value' )),
    COMMETHOD([dispid(215), 'propget'], HRESULT, 'LoadLevel',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(215), 'propput'], HRESULT, 'LoadLevel',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(216), 'propget'], HRESULT, 'Component',
              ( ['out', 'retval'], POINTER(EShearCapacity), 'Value' )),
    COMMETHOD([dispid(216), 'propput'], HRESULT, 'Component',
              ( ['in'], EShearCapacity, 'Value' )),
    COMMETHOD([dispid(217)], HRESULT, 'ShearCapacitiesByLoadCaseId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in', 'out'], POINTER(RShearCapacities), 'ShearCapacities' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(218)], HRESULT, 'ShearCapacitiesByLoadCombinationId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in', 'out'], POINTER(RShearCapacities), 'ShearCapacities' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(219), helpstring('Combination is a multiline string (separated with CR+LF) where the lines belong to: ContourPoint1, ContourLineMidPoint1, ContourPoint2, ContourLineMidPoint2, ContourPoint3, ContourLineMidPoint3, [ContourPoint4, ContourLineMidPoint4], CenterPoint')], HRESULT, 'EnvelopeShearCapacities',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in', 'out'], POINTER(RShearCapacities), 'ShearCapacities' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(220), helpstring('Combination is a multiline string (separated with CR+LF) where the lines belong to: ContourPoint1, ContourLineMidPoint1, ContourPoint2, ContourLineMidPoint2, ContourPoint3, ContourLineMidPoint3, [ContourPoint4, ContourLineMidPoint4], CenterPoint')], HRESULT, 'CriticalShearCapacities',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in', 'out'], POINTER(RShearCapacities), 'ShearCapacities' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(221)], HRESULT, 'AllShearCapacitiesByLoadCaseId',
              ( ['out'], POINTER(_midlSAFEARRAY(RShearCapacities)), 'ShearCapacities' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(222)], HRESULT, 'AllShearCapacitiesByLoadCombinationId',
              ( ['out'], POINTER(_midlSAFEARRAY(RShearCapacities)), 'ShearCapacities' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(223), helpstring('Combinations contain a multiline strings (separated with CR+LF) where the lines belong to: ContourPoint1, ContourLineMidPoint1, ContourPoint2, ContourLineMidPoint2, ContourPoint3, ContourLineMidPoint3, [ContourPoint4, ContourLineMidPoint4], CenterPoint')], HRESULT, 'AllEnvelopeShearCapacities',
              ( ['out'], POINTER(_midlSAFEARRAY(RShearCapacities)), 'ShearCapacities' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(224), helpstring('Combinations contain a multiline strings (separated with CR+LF) where the lines belong to: ContourPoint1, ContourLineMidPoint1, ContourPoint2, ContourLineMidPoint2, ContourPoint3, ContourLineMidPoint3, [ContourPoint4, ContourLineMidPoint4], CenterPoint')], HRESULT, 'AllCriticalShearCapacities',
              ( ['out'], POINTER(_midlSAFEARRAY(RShearCapacities)), 'ShearCapacities' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(225), 'propget'], HRESULT, 'EnvelopeUID',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(225), 'propput'], HRESULT, 'EnvelopeUID',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(228), helpstring('LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count')], HRESULT, 'GetEnvelopeShearCapacities2',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EShearCapacity, 'Component' ),
              ( ['in', 'out'], POINTER(RShearCapacities), 'ShearCapacities' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'LoadLevel' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(229), helpstring('Combination is a multiline string (separated with CR+LF) where the lines belong to: ContourPoint1, ContourLineMidPoint1, ContourPoint2, ContourLineMidPoint2, ContourPoint3, ContourLineMidPoint3, [ContourPoint4, ContourLineMidPoint4], CenterPoint')], HRESULT, 'GetCriticalShearCapacities2',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EShearCapacity, 'Component' ),
              ( ['in', 'out'], POINTER(RShearCapacities), 'ShearCapacities' ),
              ( ['out'], POINTER(ECombinationType), 'CriticalCombinationType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Factors' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(232), helpstring('LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count')], HRESULT, 'EnvelopeShearCapacities2',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in', 'out'], POINTER(RShearCapacities), 'ShearCapacities' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'LoadLevel' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(233), helpstring('Combination is a multiline string (separated with CR+LF) where the lines belong to: ContourPoint1, ContourLineMidPoint1, ContourPoint2, ContourLineMidPoint2, ContourPoint3, ContourLineMidPoint3, [ContourPoint4, ContourLineMidPoint4], CenterPoint')], HRESULT, 'CriticalShearCapacities2',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in', 'out'], POINTER(RShearCapacities), 'ShearCapacities' ),
              ( ['out'], POINTER(ECombinationType), 'CriticalCombinationType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Factors' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(234)], HRESULT, 'SetUserCreep',
              ( ['in'], ELongBoolean, 'Creep' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(235), 'propget'], HRESULT, 'UserCreep',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
]
################################################################
## code template for IAxisVMShearCapacity implementation
##class IAxisVMShearCapacity_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def GetShearCapacitiesByLoadCaseId(self, SurfaceId, LoadCaseId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return ShearCapacities, Combination, ResultValue
##
##    def GetShearCapacitiesByLoadCombinationId(self, SurfaceId, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return ShearCapacities, Combination, ResultValue
##
##    def GetEnvelopeShearCapacities(self, SurfaceId, MinMaxType, AnalysisType, Component):
##        'Combination is a multiline string (separated with CR+LF) where the lines belong to: ContourPoint1, ContourLineMidPoint1, ContourPoint2, ContourLineMidPoint2, ContourPoint3, ContourLineMidPoint3, [ContourPoint4, ContourLineMidPoint4], CenterPoint'
##        #return ShearCapacities, Combination, ResultValue
##
##    def GetCriticalShearCapacities(self, SurfaceId, MinMaxType, CombinationType, AnalysisType, Component):
##        'Combination is a multiline string (separated with CR+LF) where the lines belong to: ContourPoint1, ContourLineMidPoint1, ContourPoint2, ContourLineMidPoint2, ContourPoint3, ContourLineMidPoint3, [ContourPoint4, ContourLineMidPoint4], CenterPoint'
##        #return ShearCapacities, Combination, ResultValue
##
##    def GetAllShearCapacitiesByLoadCaseId(self, LoadCaseId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return ShearCapacities, Combinations, ResultValue
##
##    def GetAllShearCapacitiesByLoadCombinationId(self, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return ShearCapacities, Combinations, ResultValue
##
##    def GetAllEnvelopeShearCapacities(self, MinMaxType, AnalysisType, Component):
##        'Combinations contain a multiline strings (separated with CR+LF) where the lines belong to: ContourPoint1, ContourLineMidPoint1, ContourPoint2, ContourLineMidPoint2, ContourPoint3, ContourLineMidPoint3, [ContourPoint4, ContourLineMidPoint4], CenterPoint'
##        #return ShearCapacities, Combinations, ResultValue
##
##    def GetAllCriticalShearCapacities(self, MinMaxType, CombinationType, AnalysisType, Component):
##        'Combinations contain a multiline strings (separated with CR+LF) where the lines belong to: ContourPoint1, ContourLineMidPoint1, ContourPoint2, ContourLineMidPoint2, ContourPoint3, ContourLineMidPoint3, [ContourPoint4, ContourLineMidPoint4], CenterPoint'
##        #return ShearCapacities, Combinations, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    AnalysisType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LoadCaseId = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LoadCombinationId = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    MinMaxType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    CombinationType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LoadLevel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Component = property(_get, _set, doc = _set.__doc__)
##
##    def ShearCapacitiesByLoadCaseId(self, SurfaceId):
##        '-no docstring-'
##        #return ShearCapacities, Combination, ResultValue
##
##    def ShearCapacitiesByLoadCombinationId(self, SurfaceId):
##        '-no docstring-'
##        #return ShearCapacities, Combination, ResultValue
##
##    def EnvelopeShearCapacities(self, SurfaceId):
##        'Combination is a multiline string (separated with CR+LF) where the lines belong to: ContourPoint1, ContourLineMidPoint1, ContourPoint2, ContourLineMidPoint2, ContourPoint3, ContourLineMidPoint3, [ContourPoint4, ContourLineMidPoint4], CenterPoint'
##        #return ShearCapacities, Combination, ResultValue
##
##    def CriticalShearCapacities(self, SurfaceId):
##        'Combination is a multiline string (separated with CR+LF) where the lines belong to: ContourPoint1, ContourLineMidPoint1, ContourPoint2, ContourLineMidPoint2, ContourPoint3, ContourLineMidPoint3, [ContourPoint4, ContourLineMidPoint4], CenterPoint'
##        #return ShearCapacities, Combination, ResultValue
##
##    def AllShearCapacitiesByLoadCaseId(self):
##        '-no docstring-'
##        #return ShearCapacities, Combinations, ResultValue
##
##    def AllShearCapacitiesByLoadCombinationId(self):
##        '-no docstring-'
##        #return ShearCapacities, Combinations, ResultValue
##
##    def AllEnvelopeShearCapacities(self):
##        'Combinations contain a multiline strings (separated with CR+LF) where the lines belong to: ContourPoint1, ContourLineMidPoint1, ContourPoint2, ContourLineMidPoint2, ContourPoint3, ContourLineMidPoint3, [ContourPoint4, ContourLineMidPoint4], CenterPoint'
##        #return ShearCapacities, Combinations, ResultValue
##
##    def AllCriticalShearCapacities(self):
##        'Combinations contain a multiline strings (separated with CR+LF) where the lines belong to: ContourPoint1, ContourLineMidPoint1, ContourPoint2, ContourLineMidPoint2, ContourPoint3, ContourLineMidPoint3, [ContourPoint4, ContourLineMidPoint4], CenterPoint'
##        #return ShearCapacities, Combinations, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    EnvelopeUID = property(_get, _set, doc = _set.__doc__)
##
##    def GetEnvelopeShearCapacities2(self, SurfaceId, MinMaxType, AnalysisType, Component):
##        'LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count'
##        #return ShearCapacities, LoadCaseOrCombinationId, LoadLevel, ResultValue
##
##    def GetCriticalShearCapacities2(self, SurfaceId, MinMaxType, CombinationType, AnalysisType, Component):
##        'Combination is a multiline string (separated with CR+LF) where the lines belong to: ContourPoint1, ContourLineMidPoint1, ContourPoint2, ContourLineMidPoint2, ContourPoint3, ContourLineMidPoint3, [ContourPoint4, ContourLineMidPoint4], CenterPoint'
##        #return ShearCapacities, CriticalCombinationType, Factors, LoadCaseIds, ResultValue
##
##    def EnvelopeShearCapacities2(self, SurfaceId):
##        'LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count'
##        #return ShearCapacities, LoadCaseOrCombinationId, LoadLevel, ResultValue
##
##    def CriticalShearCapacities2(self, SurfaceId):
##        'Combination is a multiline string (separated with CR+LF) where the lines belong to: ContourPoint1, ContourLineMidPoint1, ContourPoint2, ContourLineMidPoint2, ContourPoint3, ContourLineMidPoint3, [ContourPoint4, ContourLineMidPoint4], CenterPoint'
##        #return ShearCapacities, CriticalCombinationType, Factors, LoadCaseIds, ResultValue
##
##    def SetUserCreep(self, Creep):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def UserCreep(self):
##        '-no docstring-'
##        #return Value
##

class IAxisVMActualReinforcementEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMActualReinforcement Object'
    _iid_ = GUID('{7B3F7A20-22DE-4196-8C13-7A39B01026F5}')
    _idlflags_ = []
    _methods_ = []
IAxisVMActualReinforcementEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Cleared'),
    DISPMETHOD([dispid(202)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]
class AxisVMCrackWidth(CoClass):
    'AxisVMCrackWidth Object'
    _reg_clsid_ = GUID('{A4405FE5-4742-44B8-8FA5-F88B1ADAAF20}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMCrackWidth(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMCrackWidth Object'
    _iid_ = GUID('{537ABDF5-0C46-4510-9E22-7130242E57F1}')
    _idlflags_ = ['dual', 'oleautomation']
AxisVMCrackWidth._com_interfaces_ = [IAxisVMCrackWidth]
AxisVMCrackWidth._outgoing_interfaces_ = [IAxisVMCrackWidthEvents]

class IAxisVMMovingLoadOnDomainEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMMovingLoadOnDomain Object'
    _iid_ = GUID('{212652EF-1CB4-498D-83D6-4AE94A69E42E}')
    _idlflags_ = []
    _methods_ = []
IAxisVMMovingLoadOnDomainEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]
class RCrossSectionSFB(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{C830B940-8434-4AFC-A789-50E14CCEB19B}')
RCrossSectionSFB._fields_ = [
    ('h', c_double),
    ('b', c_double),
    ('tw', c_double),
    ('tf', c_double),
    ('R', c_double),
    ('b2', c_double),
    ('v2', c_double),
    ('Process', ECrossSectionProcess),
]
assert sizeof(RCrossSectionSFB) == 64, sizeof(RCrossSectionSFB)
assert alignment(RCrossSectionSFB) == 8, alignment(RCrossSectionSFB)
class AxisVMCalculatedReinforcement(CoClass):
    'AxisVMCalculatedReinforcement Object'
    _reg_clsid_ = GUID('{1D189D13-5AEF-4DC6-843A-94FB0D03E073}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMCalculatedReinforcement(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMCalculatedReinforcement Object'
    _iid_ = GUID('{5E59B15F-C6A9-4B81-A4E2-6527552C4EF2}')
    _idlflags_ = ['dual', 'oleautomation']
AxisVMCalculatedReinforcement._com_interfaces_ = [IAxisVMCalculatedReinforcement]
AxisVMCalculatedReinforcement._outgoing_interfaces_ = [IAxisVMCalculatedReinforcementEvents]

class IAxisVMStructuralGrid(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMStructuralGrid Object'
    _iid_ = GUID('{C6399585-2484-48CA-A0F9-09C679217CFB}')
    _idlflags_ = ['dual', 'oleautomation']

# values for enumeration 'EStructuralGridPlane'
sgp_XY = 0
sgp_XZ = 1
sgp_YZ = 2
sgp_WorkPlane = 3
sgp_Story = 4
EStructuralGridPlane = c_int # enum
class RStructuralGridLineParams(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{5A598030-DC43-4042-BBF6-39BD3762AC02}')

# values for enumeration 'EGridLineSpacingDirection'
glsd_X = 0
glsd_Y = 1
glsd_Other = 2
EGridLineSpacingDirection = c_int # enum
IAxisVMStructuralGrid._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'LinesCount',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'UID',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(203), 'propget'], HRESULT, 'Plane',
              ( ['out', 'retval'], POINTER(EStructuralGridPlane), 'Value' )),
    COMMETHOD([dispid(204), 'propget'], HRESULT, 'TrMatrix',
              ( ['out', 'retval'], POINTER(RMatrix3x3), 'Value' )),
    COMMETHOD([dispid(205), 'propget'], HRESULT, 'NormalVector',
              ( ['out', 'retval'], POINTER(RPoint3d), 'Value' )),
    COMMETHOD([dispid(206)], HRESULT, 'AddLine',
              ( ['in'], BSTR, 'Title' ),
              ( ['in', 'out'], POINTER(RStructuralGridLineParams), 'StructuralGridLineParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(207)], HRESULT, 'GetLine',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(BSTR), 'Title' ),
              ( ['in', 'out'], POINTER(RStructuralGridLineParams), 'StructuralGridLineParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(208)], HRESULT, 'SetLine',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Title' ),
              ( ['in', 'out'], POINTER(RStructuralGridLineParams), 'StructuralGridLineParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(209)], HRESULT, 'DeleteLine',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(210), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(210), 'propput'], HRESULT, 'Name',
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(211), 'propget'], HRESULT, 'SpacingDirection',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(EGridLineSpacingDirection), 'Value' )),
]
################################################################
## code template for IAxisVMStructuralGrid implementation
##class IAxisVMStructuralGrid_Impl(object):
##    @property
##    def LinesCount(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def UID(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Plane(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def TrMatrix(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def NormalVector(self):
##        '-no docstring-'
##        #return Value
##
##    def AddLine(self, Title):
##        '-no docstring-'
##        #return StructuralGridLineParams, Value
##
##    def GetLine(self, Index):
##        '-no docstring-'
##        #return Title, StructuralGridLineParams, Value
##
##    def SetLine(self, Index, Title):
##        '-no docstring-'
##        #return StructuralGridLineParams, Value
##
##    def DeleteLine(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SpacingDirection(self, Index):
##        '-no docstring-'
##        #return Value
##

class RBulkLineSupport(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{A721A83B-2974-477F-B83E-878780254280}')

# values for enumeration 'ELineSupportType'
lstEdgeGlobal = 0
lstEdgeRelative = 1
lstBeamElasticFoundation = 2
lstRibElasticFoundation = 3
lstEdgeReference = 4
ELineSupportType = c_int # enum
RNonLinearity._fields_ = [
    ('x', ELineNonLinearity),
    ('y', ELineNonLinearity),
    ('z', ELineNonLinearity),
    ('xx', ELineNonLinearity),
    ('yy', ELineNonLinearity),
    ('zz', ELineNonLinearity),
]
assert sizeof(RNonLinearity) == 24, sizeof(RNonLinearity)
assert alignment(RNonLinearity) == 4, alignment(RNonLinearity)
RResistances._fields_ = [
    ('x', c_double),
    ('y', c_double),
    ('z', c_double),
    ('xx', c_double),
    ('yy', c_double),
    ('zz', c_double),
]
assert sizeof(RResistances) == 48, sizeof(RResistances)
assert alignment(RResistances) == 8, alignment(RResistances)
RBulkLineSupport._fields_ = [
    ('SupportType', ELineSupportType),
    ('LineId', c_int),
    ('Stiffnesses', RStiffnesses),
    ('NonLinearity', RNonLinearity),
    ('Resistances', RResistances),
    ('SurfaceId1', c_int),
    ('SurfaceId2', c_int),
    ('DomainId1', c_int),
    ('DomainId2', c_int),
    ('ReferenceId', c_int),
]
assert sizeof(RBulkLineSupport) == 152, sizeof(RBulkLineSupport)
assert alignment(RBulkLineSupport) == 8, alignment(RBulkLineSupport)
class AxisVMTask(CoClass):
    'AxisVMTask Object'
    _reg_clsid_ = GUID('{4F66CA9C-AF1A-427C-8EEB-1BC928754D7A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMTask(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for Task Object'
    _iid_ = GUID('{84EBAC4D-911D-4E9D-A447-92CCEF625C02}')
    _idlflags_ = ['dual', 'oleautomation']
AxisVMTask._com_interfaces_ = [IAxisVMTask]
AxisVMTask._outgoing_interfaces_ = [IAxisVMTaskEvents]

class RLoadSupportDisplacement(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{9A4FE59E-CA7B-407F-931D-BDA2A7E6DA4F}')
RLoadSupportDisplacement._fields_ = [
    ('LoadCaseId', c_int),
    ('SupportId', c_int),
    ('ex', c_double),
    ('ey', c_double),
    ('ez', c_double),
    ('Fx', c_double),
    ('Fy', c_double),
    ('Fz', c_double),
]
assert sizeof(RLoadSupportDisplacement) == 56, sizeof(RLoadSupportDisplacement)
assert alignment(RLoadSupportDisplacement) == 8, alignment(RLoadSupportDisplacement)

# values for enumeration 'ESettingsError'
seteInvalidGravityDirection = -100001
seteInvalidGravityAcceleration = -100002
ESettingsError = c_int # enum
class AxisVMSettings(CoClass):
    'AxisVMSettings Object'
    _reg_clsid_ = GUID('{F783E6A4-3B29-4AAF-9292-5D5D55B8C198}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMSettings(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMSettings Object'
    _iid_ = GUID('{EC17CF3C-D640-4BAA-ACCB-7847F0A2454C}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMSettingsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMSettings Object'
    _iid_ = GUID('{6243BD40-8205-45E8-ADA3-CE3A37702666}')
    _idlflags_ = []
    _methods_ = []
AxisVMSettings._com_interfaces_ = [IAxisVMSettings]
AxisVMSettings._outgoing_interfaces_ = [IAxisVMSettingsEvents]

class AxisVMMaterials(CoClass):
    'AxisVMMaterials Object'
    _reg_clsid_ = GUID('{F006B70A-11A1-4004-9E56-CBD798433E61}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMMaterials(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMMaterials Object'
    _iid_ = GUID('{20476C60-E819-413A-8939-F024B7E3F9E9}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMMaterialsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{B4DA2396-8C8A-478B-B32D-8901B7E49B86}')
    _idlflags_ = []
    _methods_ = []
AxisVMMaterials._com_interfaces_ = [IAxisVMMaterials]
AxisVMMaterials._outgoing_interfaces_ = [IAxisVMMaterialsEvents]

class AxisVMCrossSections(CoClass):
    'AxisVMCrossSections Object'
    _reg_clsid_ = GUID('{4F6A718E-A6EC-483C-8CFC-D06E68B555C6}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMCrossSections(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMCrossSections Object'
    _iid_ = GUID('{5A6C174B-41CD-4611-A920-14873243062B}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMCrossSectionsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{DDC4E583-C154-4E2A-A59E-8EE94402B294}')
    _idlflags_ = []
    _methods_ = []
AxisVMCrossSections._com_interfaces_ = [IAxisVMCrossSections]
AxisVMCrossSections._outgoing_interfaces_ = [IAxisVMCrossSectionsEvents]

class AxisVMReferences(CoClass):
    'AxisVMReferences Object'
    _reg_clsid_ = GUID('{1C62EDC9-AEF8-4CC1-909E-32CBE0563811}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMReferences(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMReferences Object'
    _iid_ = GUID('{E014CFC7-751E-430E-A91E-C894FBB10C16}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMReferencesEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMReferences Object'
    _iid_ = GUID('{F2D3FE76-B15B-4E6B-A430-CE0F5477A396}')
    _idlflags_ = []
    _methods_ = []
AxisVMReferences._com_interfaces_ = [IAxisVMReferences]
AxisVMReferences._outgoing_interfaces_ = [IAxisVMReferencesEvents]

class AxisVMNodes(CoClass):
    'AxisVMNodes Object'
    _reg_clsid_ = GUID('{AEC790CD-C7FF-430D-89CC-BF900D93B3DB}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMNodesEvents(stdole.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{32ADA03B-E552-46A7-A69E-BA8506FB6CA9}')
    _idlflags_ = []
    _methods_ = []
AxisVMNodes._com_interfaces_ = [IAxisVMNodes]
AxisVMNodes._outgoing_interfaces_ = [IAxisVMNodesEvents]

class AxisVMNodalSupports(CoClass):
    'AxisVMNodalSupports Object'
    _reg_clsid_ = GUID('{BC82CBC3-CB93-4C28-B676-045E5F71E89A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMNodalSupportsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMNodalSupports Object'
    _iid_ = GUID('{281E3A63-437E-4D72-8C81-0D23F0F0C3C6}')
    _idlflags_ = []
    _methods_ = []
AxisVMNodalSupports._com_interfaces_ = [IAxisVMNodalSupports]
AxisVMNodalSupports._outgoing_interfaces_ = [IAxisVMNodalSupportsEvents]

class AxisVMLineSupports(CoClass):
    'AxisVMLineSupports Object'
    _reg_clsid_ = GUID('{B3432420-A79D-4518-84E1-769658B828B3}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMLineSupports(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMLineSupports Object'
    _iid_ = GUID('{514757D9-3113-410A-A8A3-6161B97814B9}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMLineSupportsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMLineSupports Object'
    _iid_ = GUID('{1D328768-B701-412A-9656-1E4B046F59D0}')
    _idlflags_ = []
    _methods_ = []
AxisVMLineSupports._com_interfaces_ = [IAxisVMLineSupports]
AxisVMLineSupports._outgoing_interfaces_ = [IAxisVMLineSupportsEvents]

class AxisVMSurfaceSupports(CoClass):
    'AxisVMSurfaceSupports Object'
    _reg_clsid_ = GUID('{EF5D1277-62B1-40B4-A23D-16E9C4480BF8}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMSurfaceSupports(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMSurfaceSupports Object'
    _iid_ = GUID('{74C728AC-DE22-4526-91EA-9E4433297532}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMSurfaceSupportsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMSurfaceSupports Object'
    _iid_ = GUID('{FABB8248-98F4-4BD6-BBB5-B3B322084EF3}')
    _idlflags_ = []
    _methods_ = []
AxisVMSurfaceSupports._com_interfaces_ = [IAxisVMSurfaceSupports]
AxisVMSurfaceSupports._outgoing_interfaces_ = [IAxisVMSurfaceSupportsEvents]

class AxisVMLoadCases(CoClass):
    'AxisVMLoadCases Object'
    _reg_clsid_ = GUID('{BC479C5C-1E25-4887-99D7-0DAB473A2137}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMLoadCases(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMLoadCases Object'
    _iid_ = GUID('{731985AE-EEA3-467D-8812-5AD9B0670CBC}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMLoadCasesEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMLoadCases Object'
    _iid_ = GUID('{F05A389A-D208-414D-9B49-4D0ED4D2AF6F}')
    _idlflags_ = []
    _methods_ = []
AxisVMLoadCases._com_interfaces_ = [IAxisVMLoadCases]
AxisVMLoadCases._outgoing_interfaces_ = [IAxisVMLoadCasesEvents]

class AxisVMLoadGroups(CoClass):
    'AxisVMLoadGroups Object'
    _reg_clsid_ = GUID('{D65871A4-DB7C-460D-89A3-C545B68FFC4A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMLoadGroups(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMLoadGroups Object'
    _iid_ = GUID('{78315280-72E6-4818-A195-FDC8727C89F5}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMLoadGroupsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMLoadGroups Object'
    _iid_ = GUID('{B78210FA-183E-4864-87BB-A2410BEA29DA}')
    _idlflags_ = []
    _methods_ = []
AxisVMLoadGroups._com_interfaces_ = [IAxisVMLoadGroups]
AxisVMLoadGroups._outgoing_interfaces_ = [IAxisVMLoadGroupsEvents]

class AxisVMLoadCombinations(CoClass):
    'AxisVMLoadCombinations Object'
    _reg_clsid_ = GUID('{B9D459E7-3CCA-49B3-A106-9FB9FA1E18DA}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMLoadCombinations(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMLoadCombinations Object'
    _iid_ = GUID('{885A448F-1194-44F2-B5BC-2F030D47E3DD}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMLoadCombinationsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMLoadCombinations Object'
    _iid_ = GUID('{298EB74F-170C-437A-92D2-E90A9FD65133}')
    _idlflags_ = []
    _methods_ = []
AxisVMLoadCombinations._com_interfaces_ = [IAxisVMLoadCombinations]
AxisVMLoadCombinations._outgoing_interfaces_ = [IAxisVMLoadCombinationsEvents]

class AxisVMLoads(CoClass):
    'AxisVMLoads Object'
    _reg_clsid_ = GUID('{4282CDF5-28A9-40CA-BC14-F40B88F30197}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMLoads(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMLoads Object'
    _iid_ = GUID('{FDADCDDA-951D-4795-B146-0EF132EED2ED}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMLoadsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMLoads Object'
    _iid_ = GUID('{A2FFC1BC-FA1E-48A6-A3BE-13D14D2F2A55}')
    _idlflags_ = []
    _methods_ = []
AxisVMLoads._com_interfaces_ = [IAxisVMLoads]
AxisVMLoads._outgoing_interfaces_ = [IAxisVMLoadsEvents]

class AxisVMDomains(CoClass):
    'AxisVMDomains Object'
    _reg_clsid_ = GUID('{4246B420-C1BF-4189-BC4D-423069EFAA2A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMDomains(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMDomains Object'
    _iid_ = GUID('{BE09708D-3EB4-4BF9-AF49-5170273598E8}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMDomainsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMDomains Object'
    _iid_ = GUID('{9F58870E-4097-4127-B898-9D039D66C7F2}')
    _idlflags_ = []
    _methods_ = []
AxisVMDomains._com_interfaces_ = [IAxisVMDomains]
AxisVMDomains._outgoing_interfaces_ = [IAxisVMDomainsEvents]

class AxisVMSurfaces(CoClass):
    'AxisVMSurfaces Object'
    _reg_clsid_ = GUID('{7A09F931-9BFB-435E-BC56-22D22D9951EA}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMSurfaces(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMSurfaces Object'
    _iid_ = GUID('{C928E917-D8EC-4C62-AEC1-02123691306D}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMSurfacesEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMSurfaces Object'
    _iid_ = GUID('{0367EAB5-935D-464A-BDCD-0A4FE197AFD7}')
    _idlflags_ = []
    _methods_ = []
AxisVMSurfaces._com_interfaces_ = [IAxisVMSurfaces]
AxisVMSurfaces._outgoing_interfaces_ = [IAxisVMSurfacesEvents]


# values for enumeration 'EView'
vFront = 0
vTop = 1
vSide = 2
vPerspective = 3
EView = c_int # enum

# values for enumeration 'EDisplay'
dWireframe = 0
dHidden = 1
dRendered = 2
dTextured = 3
dSolidResult = 4
EDisplay = c_int # enum
class AxisVMCalculation(CoClass):
    'AxisVMCalculation Object'
    _reg_clsid_ = GUID('{39F8D0B6-7729-4C75-8B39-215E962E53E9}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMCalculation(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMCalculation Object'
    _iid_ = GUID('{D571513F-0F06-45CD-8B3C-9D7AF86F7E01}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMCalculationEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMCalculation Object'
    _iid_ = GUID('{B417916C-6EF4-44FC-A45B-493A01C24E7E}')
    _idlflags_ = []
    _methods_ = []
AxisVMCalculation._com_interfaces_ = [IAxisVMCalculation]
AxisVMCalculation._outgoing_interfaces_ = [IAxisVMCalculationEvents]

class AxisVMResults(CoClass):
    'AxisVMResults Object'
    _reg_clsid_ = GUID('{8D7FACBF-5DDB-49B4-9F87-41B48BDC68A5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMResults(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMResults Object'
    _iid_ = GUID('{33CC1510-A965-4110-A5A8-50428539C84E}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMResultsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMResults Object'
    _iid_ = GUID('{1641DA34-2D0E-4CD6-9E6C-59321B192CD2}')
    _idlflags_ = []
    _methods_ = []
AxisVMResults._com_interfaces_ = [IAxisVMResults]
AxisVMResults._outgoing_interfaces_ = [IAxisVMResultsEvents]


# values for enumeration 'EIFCVersion'
ifc20 = 0
ifc2x = 1
ifc2x2 = 2
ifc2x3 = 3
EIFCVersion = c_int # enum

# values for enumeration 'EDXFVersion'
dxfR12 = 0
dxfR2000 = 1
EDXFVersion = c_int # enum

# values for enumeration 'ELengthUnit'
lu_mm = 0
lu_cm = 1
lu_dm = 2
lu_m = 3
lu_inch = 4
lu_foot = 5
lu_yard = 6
ELengthUnit = c_int # enum
class AxisVMMembers(CoClass):
    'AxisVMMembers Object'
    _reg_clsid_ = GUID('{E555FDF6-46C4-472C-94AB-A9F3FE33B1B0}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMMembersEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMMembers Object'
    _iid_ = GUID('{705C0B71-B25D-4436-B526-48796229CF16}')
    _idlflags_ = []
    _methods_ = []
AxisVMMembers._com_interfaces_ = [IAxisVMMembers]
AxisVMMembers._outgoing_interfaces_ = [IAxisVMMembersEvents]

class AxisVMSpectrum(CoClass):
    'AxisVMSpectrum Object'
    _reg_clsid_ = GUID('{0180B9D5-A502-4D98-A41E-531102B05E4E}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMSpectrum(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMSpectrum Object'
    _iid_ = GUID('{93DCEF68-2FE6-48AC-9A7A-2D4994D76F7B}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMSpectrumEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMSpectrum Object'
    _iid_ = GUID('{683D4B34-D7E7-4638-A0ED-C64B5BF92226}')
    _idlflags_ = []
    _methods_ = []
AxisVMSpectrum._com_interfaces_ = [IAxisVMSpectrum]
AxisVMSpectrum._outgoing_interfaces_ = [IAxisVMSpectrumEvents]

class RSeismicParams(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{8ED9B1AF-1E58-4831-ABB4-90B04CEF8F4D}')
class AxisVMSeismicStoreys(CoClass):
    'AxisVMSeismicStoreys Object'
    _reg_clsid_ = GUID('{0FE110A5-A00C-4CDB-96E3-3984F8670392}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMSeismicStoreys(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMSeismicStoreys Object'
    _iid_ = GUID('{F648894F-274D-406C-99F8-CF51BD1B6978}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMSeismicStoreysEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMSeismicStoreys Object'
    _iid_ = GUID('{D6C98F78-ADE3-4A86-80E1-CC2D746A4814}')
    _idlflags_ = []
    _methods_ = []
AxisVMSeismicStoreys._com_interfaces_ = [IAxisVMSeismicStoreys]
AxisVMSeismicStoreys._outgoing_interfaces_ = [IAxisVMSeismicStoreysEvents]

class AxisVMLinkElements(CoClass):
    'AxisVMLinkElements Object'
    _reg_clsid_ = GUID('{A37DC722-0848-4BA7-857D-F38A78DB4ECA}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMLinkElements(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMLinkElements Object'
    _iid_ = GUID('{C6025A0E-0285-48A1-8ED3-BAED3ED705E4}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMLinkElementsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMLinkElements Object'
    _iid_ = GUID('{6C3CC3FB-CAF9-48D1-85FF-7975F311C3B5}')
    _idlflags_ = []
    _methods_ = []
AxisVMLinkElements._com_interfaces_ = [IAxisVMLinkElements]
AxisVMLinkElements._outgoing_interfaces_ = [IAxisVMLinkElementsEvents]

class AxisVMEdgeConnections(CoClass):
    'AxisVMEdgeConnections Object'
    _reg_clsid_ = GUID('{3F2F04C7-545B-4831-BF8C-6D61164E2F3B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMEdgeConnections(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMEdgeConnections Object'
    _iid_ = GUID('{27315805-0BF0-432B-8410-4B6E1AEED860}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMEdgeConnectionsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMEdgeConnections Object'
    _iid_ = GUID('{31379B3D-ADD1-415F-B402-7842A3891516}')
    _idlflags_ = []
    _methods_ = []
AxisVMEdgeConnections._com_interfaces_ = [IAxisVMEdgeConnections]
AxisVMEdgeConnections._outgoing_interfaces_ = [IAxisVMEdgeConnectionsEvents]

class AxisVMSteelDesignMembers(CoClass):
    'AxisVMSteelDesignMembers Object'
    _reg_clsid_ = GUID('{75C55683-9D19-404F-9FE8-2E2B70E1B8DF}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMSteelDesignMembers(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMSteelDesignMembers Object'
    _iid_ = GUID('{9F3C5D00-F3D2-4F31-B238-83A455DC0F02}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMSteelDesignMembersEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMSteelDesignMembers Object'
    _iid_ = GUID('{59B53547-3C50-44C1-A8FC-F3B33C7C96B6}')
    _idlflags_ = []
    _methods_ = []
AxisVMSteelDesignMembers._com_interfaces_ = [IAxisVMSteelDesignMembers]
AxisVMSteelDesignMembers._outgoing_interfaces_ = [IAxisVMSteelDesignMembersEvents]

class AxisVMActualReinforcement(CoClass):
    'AxisVMActualReinforcement Object'
    _reg_clsid_ = GUID('{7B1777D2-E48E-4421-AECD-B9D1911027F7}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMActualReinforcement(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMActualReinforcement Object'
    _iid_ = GUID('{461014AD-C3C2-452A-B483-B4C8AA9143B6}')
    _idlflags_ = ['dual', 'oleautomation']
AxisVMActualReinforcement._com_interfaces_ = [IAxisVMActualReinforcement]
AxisVMActualReinforcement._outgoing_interfaces_ = [IAxisVMActualReinforcementEvents]

class AxisVMDomainSupports(CoClass):
    'AxisVMDomainSupports Object'
    _reg_clsid_ = GUID('{F3591C25-0ACF-4B88-BC02-880F49785414}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMDomainSupports(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMDomainSupports Object'
    _iid_ = GUID('{97E818E5-6566-4B65-9E4C-C87FD85398BD}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMDomainSupportsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMDomainSupports Object'
    _iid_ = GUID('{B2CD199B-6E4E-4A04-A247-3F60B596F6A7}')
    _idlflags_ = []
    _methods_ = []
AxisVMDomainSupports._com_interfaces_ = [IAxisVMDomainSupports]
AxisVMDomainSupports._outgoing_interfaces_ = [IAxisVMDomainSupportsEvents]

class AxisVMStoreys(CoClass):
    'AxisVMStoreys Object'
    _reg_clsid_ = GUID('{34D8224C-C2E0-41ED-BBD9-06E92FE6FE76}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMStoreys(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMStoreys Object'
    _iid_ = GUID('{17B3ACA0-017B-4BC3-B607-E59CF9B38539}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMStoreysEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMStoreys Object'
    _iid_ = GUID('{676BC3D9-DB72-4218-A734-675C8BD422FD}')
    _idlflags_ = []
    _methods_ = []
AxisVMStoreys._com_interfaces_ = [IAxisVMStoreys]
AxisVMStoreys._outgoing_interfaces_ = [IAxisVMStoreysEvents]

class AxisVMTimberDesignMembers(CoClass):
    'AxisVMTimberDesignMembers Object'
    _reg_clsid_ = GUID('{38C1B96B-36FD-4E26-BFFC-8871C55DA5B5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMTimberDesignMembers(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMTimberDesignMembers Object'
    _iid_ = GUID('{82684295-4724-460F-B261-ADB301D0FAB8}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMTimberDesignMembersEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMTimberDesignMembers Object'
    _iid_ = GUID('{FDE2C6C0-7625-4594-A1A7-44C851B759BC}')
    _idlflags_ = []
    _methods_ = []
AxisVMTimberDesignMembers._com_interfaces_ = [IAxisVMTimberDesignMembers]
AxisVMTimberDesignMembers._outgoing_interfaces_ = [IAxisVMTimberDesignMembersEvents]

class AxisVMDynamicLoadFunctions(CoClass):
    'AxisVMDynamicLoadFunctions Object'
    _reg_clsid_ = GUID('{7701B900-7C0A-4D0B-AB22-006726E7E0F4}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMDynamicLoadFunctions(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMDynamicLoadFunctions Object'
    _iid_ = GUID('{2F8E9D1B-899E-40EB-80DA-FB5A6321D3E3}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMDynamicLoadFunctionsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMDynamicLoadFunctions Object'
    _iid_ = GUID('{02BAEF49-A42A-43B2-BF43-47C8B3B21ED9}')
    _idlflags_ = []
    _methods_ = []
AxisVMDynamicLoadFunctions._com_interfaces_ = [IAxisVMDynamicLoadFunctions]
AxisVMDynamicLoadFunctions._outgoing_interfaces_ = [IAxisVMDynamicLoadFunctionsEvents]

class AxisVMTimeIncrementFunctions(CoClass):
    'AxisVMTimeIncrementFunctions Object'
    _reg_clsid_ = GUID('{7A5EACCC-1D95-418D-ACCC-40C407529611}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMTimeIncrementFunctions(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMTimeIncrementFunctions Object'
    _iid_ = GUID('{2551B0A8-C473-48A7-BF94-AD46A9958976}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMTimeIncrementFunctionsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMTimeIncrementFunctions Object'
    _iid_ = GUID('{8D8ECB32-3DE7-4277-BD3E-C8B9691F57DC}')
    _idlflags_ = []
    _methods_ = []
AxisVMTimeIncrementFunctions._com_interfaces_ = [IAxisVMTimeIncrementFunctions]
AxisVMTimeIncrementFunctions._outgoing_interfaces_ = [IAxisVMTimeIncrementFunctionsEvents]

class AxisVMIncrementFunctions(CoClass):
    'AxisVMIncrementFunctions Object'
    _reg_clsid_ = GUID('{E9CA118B-AC31-4E01-89BF-47421A422DD4}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMIncrementFunctions(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMIncrementFunctions Object'
    _iid_ = GUID('{74184721-95CC-4D14-8DF9-B4BCA31958AE}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMIncrementFunctionsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMIncrementFunctions Object'
    _iid_ = GUID('{85781A69-C0D8-450D-B476-E44277AA9D36}')
    _idlflags_ = []
    _methods_ = []
AxisVMIncrementFunctions._com_interfaces_ = [IAxisVMIncrementFunctions]
AxisVMIncrementFunctions._outgoing_interfaces_ = [IAxisVMIncrementFunctionsEvents]

class AxisVMDiaphragm(CoClass):
    'AxisVMDiaphragm Object'
    _reg_clsid_ = GUID('{792AD8B7-86EF-497E-AA7E-C48183988776}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMDiaphragm(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMDiaphragm Object'
    _iid_ = GUID('{55424BC4-3DCD-461A-8A4C-E59FA0C0C7B7}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMDiaphragmEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMDiaphragm Object'
    _iid_ = GUID('{6F3E8975-56CA-4586-B5CB-487ACDF6FE3C}')
    _idlflags_ = []
    _methods_ = []
AxisVMDiaphragm._com_interfaces_ = [IAxisVMDiaphragm]
AxisVMDiaphragm._outgoing_interfaces_ = [IAxisVMDiaphragmEvents]

class AxisVMRebarSteelGrades(CoClass):
    'AxisVMRebarSteelGrades Object'
    _reg_clsid_ = GUID('{4D1DAC5A-1F5C-411B-B3D3-40B69D6DA41A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMRebarSteelGradesEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMRebarSteelGrades Object'
    _iid_ = GUID('{BD713C98-12FB-4CEA-8440-333885785D00}')
    _idlflags_ = []
    _methods_ = []
AxisVMRebarSteelGrades._com_interfaces_ = [IAxisVMRebarSteelGrades]
AxisVMRebarSteelGrades._outgoing_interfaces_ = [IAxisVMRebarSteelGradesEvents]

class AxisVMMovingLoads(CoClass):
    'AxisVMMovingLoads Object'
    _reg_clsid_ = GUID('{502206FA-BE77-421B-8D13-94F06FAB63DF}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMMovingLoads(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMMovingLoads Object'
    _iid_ = GUID('{FDAB3220-C18D-4144-81D7-D604E15F337F}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMMovingLoadsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMMovingLoads Object'
    _iid_ = GUID('{694DB902-44D1-4C22-9651-836C24381DE5}')
    _idlflags_ = []
    _methods_ = []
AxisVMMovingLoads._com_interfaces_ = [IAxisVMMovingLoads]
AxisVMMovingLoads._outgoing_interfaces_ = [IAxisVMMovingLoadsEvents]

class AxisVMColumnRebars(CoClass):
    'AxisVMColumnRebars Object'
    _reg_clsid_ = GUID('{BE2C93CC-C476-4409-9657-01EB57D391BE}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMColumnRebars(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMColumnRebars Object'
    _iid_ = GUID('{68765AAD-A6FF-4B12-9C3C-B060EB069C64}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMColumnRebarsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMColumnRebars Object'
    _iid_ = GUID('{06FB28E6-7452-454A-924E-6E57A3DA20EA}')
    _idlflags_ = []
    _methods_ = []
AxisVMColumnRebars._com_interfaces_ = [IAxisVMColumnRebars]
AxisVMColumnRebars._outgoing_interfaces_ = [IAxisVMColumnRebarsEvents]

class AxisVMRCColumnChecking(CoClass):
    'AxisVMRCColumnChecking Object'
    _reg_clsid_ = GUID('{41F18388-FC08-45B7-8CF3-6F2FBE937A9E}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMRCColumnChecking(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMRCColumnChecking Object'
    _iid_ = GUID('{4AB164E9-412D-4CE6-9CE3-1ED4028E215B}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMRCColumnCheckingEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMRCColumnChecking Object'
    _iid_ = GUID('{7A9656D2-BEF6-4640-A577-5FAFC05907D9}')
    _idlflags_ = []
    _methods_ = []
AxisVMRCColumnChecking._com_interfaces_ = [IAxisVMRCColumnChecking]
AxisVMRCColumnChecking._outgoing_interfaces_ = [IAxisVMRCColumnCheckingEvents]

class AxisVMPushoverHingeFunctions(CoClass):
    'AxisVMPushoverHingeFunctions Object'
    _reg_clsid_ = GUID('{712BA4FB-6519-4331-834E-5BE0AC8AA1BB}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMPushoverHingeFunctionsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMPushoverHingeFunctions Object'
    _iid_ = GUID('{1C2AFE79-59ED-425D-ADE1-59EE65C8AEC1}')
    _idlflags_ = []
    _methods_ = []
AxisVMPushoverHingeFunctions._com_interfaces_ = [IAxisVMPushoverHingeFunctions]
AxisVMPushoverHingeFunctions._outgoing_interfaces_ = [IAxisVMPushoverHingeFunctionsEvents]

class AxisVMCriticalGroupCombinations(CoClass):
    'AxisVMCriticalGroupCombinations Object'
    _reg_clsid_ = GUID('{23F7DB55-80A2-4487-ABDC-C21DD8B03F09}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMCriticalGroupCombinationsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMCriticalGroupCombinations Object'
    _iid_ = GUID('{A03917BA-5251-4DC6-A9E7-7B87D38420E7}')
    _idlflags_ = []
    _methods_ = []
AxisVMCriticalGroupCombinations._com_interfaces_ = [IAxisVMCriticalGroupCombinations]
AxisVMCriticalGroupCombinations._outgoing_interfaces_ = [IAxisVMCriticalGroupCombinationsEvents]

class AxisVMEnvelopes(CoClass):
    'AxisVMEnvelopes Object'
    _reg_clsid_ = GUID('{B1917A59-F926-4DF9-AF1B-49F8823636CF}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMEnvelopes(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMEnvelopes Object'
    _iid_ = GUID('{AEB4BE16-ED1B-44BE-867B-C69F3DF81D06}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMEnvelopesEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMEnvelopes Object'
    _iid_ = GUID('{0A490CB3-6253-4F30-B1DF-49903B8AECB4}')
    _idlflags_ = []
    _methods_ = []
AxisVMEnvelopes._com_interfaces_ = [IAxisVMEnvelopes]
AxisVMEnvelopes._outgoing_interfaces_ = [IAxisVMEnvelopesEvents]

class AxisVMWindows(CoClass):
    'AxisVMWindows Object'
    _reg_clsid_ = GUID('{6CC7A519-87BB-452D-ADE5-01B751F72D83}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMWindows(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMWindows Object'
    _iid_ = GUID('{7E8EA2B1-09F8-45C9-A10E-58EC5B904051}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMWindowsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMWindows Object'
    _iid_ = GUID('{D26E120E-D52B-487F-8D35-95F1FE21D189}')
    _idlflags_ = []
    _methods_ = []
AxisVMWindows._com_interfaces_ = [IAxisVMWindows]
AxisVMWindows._outgoing_interfaces_ = [IAxisVMWindowsEvents]

class AxisVMCustomParts(CoClass):
    'AxisVMCustomParts Object'
    _reg_clsid_ = GUID('{4ABDEF45-D4CE-4384-A22E-88A7D6ED1C0A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMCustomParts(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMCustomParts Object'
    _iid_ = GUID('{7597F718-4D1C-4F7F-A2D3-79353809B6E6}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMCustomPartsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMCustomParts Object'
    _iid_ = GUID('{ABE6003B-4167-4049-A41D-191E3F9F37D1}')
    _idlflags_ = []
    _methods_ = []
AxisVMCustomParts._com_interfaces_ = [IAxisVMCustomParts]
AxisVMCustomParts._outgoing_interfaces_ = [IAxisVMCustomPartsEvents]

class AxisVMLogicalParts(CoClass):
    'AxisVMLogicalParts Object'
    _reg_clsid_ = GUID('{4BF60288-1AB1-41F9-874C-79C28D438C83}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMLogicalParts(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMLogicalParts Object'
    _iid_ = GUID('{2B6F9E79-142C-4E38-B31E-B65CB2A315B5}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMLogicalPartsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMLogicalParts Object'
    _iid_ = GUID('{8509B407-8355-44A7-8916-A123CCCF07C2}')
    _idlflags_ = []
    _methods_ = []
AxisVMLogicalParts._com_interfaces_ = [IAxisVMLogicalParts]
AxisVMLogicalParts._outgoing_interfaces_ = [IAxisVMLogicalPartsEvents]

class AxisVMLoadPanels(CoClass):
    'AxisVMLoadPanels Object'
    _reg_clsid_ = GUID('{C392A19F-E7F8-4A46-9B18-A4791A1EA0E7}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMLoadPanels(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMLoadPanels Object'
    _iid_ = GUID('{2588EC34-C0AF-46AC-AEC6-562B013030EC}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMLoadPanelsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMLoadPanels Object'
    _iid_ = GUID('{CD85FE43-B057-4514-9CA3-3267F86FBE53}')
    _idlflags_ = []
    _methods_ = []
AxisVMLoadPanels._com_interfaces_ = [IAxisVMLoadPanels]
AxisVMLoadPanels._outgoing_interfaces_ = [IAxisVMLoadPanelsEvents]

class AxisVMWorkplanes(CoClass):
    'AxisVMWorkplanes Object'
    _reg_clsid_ = GUID('{290C952C-7E52-4FD2-8E98-2E92AC75903F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMWorkplanes(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMWorkplanes Object'
    _iid_ = GUID('{49B95394-DF85-414C-AD10-BF5D09415476}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMWorkplanesEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMWorkplanes Object'
    _iid_ = GUID('{B9CB4701-DDFA-41BD-9878-91D2C5D16171}')
    _idlflags_ = []
    _methods_ = []
AxisVMWorkplanes._com_interfaces_ = [IAxisVMWorkplanes]
AxisVMWorkplanes._outgoing_interfaces_ = [IAxisVMWorkplanesEvents]

class RDXFimportParameters(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{BE425A22-8581-4D9D-BF13-53D1CC5E48D0}')
class RPDFimportParameters(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{3C056034-3F10-4894-A585-4E343C83237A}')
class RIFCimportParameters(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{C6021814-BD51-46FB-BD5D-05079416FD6D}')
class AxisVMCrossSectionOptimization(CoClass):
    'AxisVMCrossSectionOptimization Object'
    _reg_clsid_ = GUID('{21D24122-2487-43FB-A061-55A12FDC22C9}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMCrossSectionOptimization(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMCrossSectionOptimization Object'
    _iid_ = GUID('{A74C0AA9-BE23-4F6F-A05A-4A708A2DC6F4}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMCrossSectionOptimizationEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMCrossSectionOptimization Object'
    _iid_ = GUID('{18854C23-EFE4-48C7-B62C-77893B57A4C9}')
    _idlflags_ = []
    _methods_ = []
AxisVMCrossSectionOptimization._com_interfaces_ = [IAxisVMCrossSectionOptimization]
AxisVMCrossSectionOptimization._outgoing_interfaces_ = [IAxisVMCrossSectionOptimizationEvents]

class AxisVMMathTexts(CoClass):
    'AxisVMMathTexts Object'
    _reg_clsid_ = GUID('{78AA1FF2-53E5-43A9-A38F-A71B5C9F35B7}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMMathTexts(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMMathTexts Object'
    _iid_ = GUID('{769C05EC-139D-437A-9310-7AE07EA2D4A0}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMMathTextsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMMathTexts Object'
    _iid_ = GUID('{CC6CFD78-9E20-44E6-8EEF-0BF98145E213}')
    _idlflags_ = []
    _methods_ = []
AxisVMMathTexts._com_interfaces_ = [IAxisVMMathTexts]
AxisVMMathTexts._outgoing_interfaces_ = [IAxisVMMathTextsEvents]

class AxisVMLayers(CoClass):
    'AxisVMLayers Object'
    _reg_clsid_ = GUID('{6100DFEC-ABDE-4BF3-BBE1-461DE33ED191}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMLayers(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMLayers Object'
    _iid_ = GUID('{89B09B86-F745-42BA-BB1B-765976EB972C}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMLayersEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMLayers Object'
    _iid_ = GUID('{E57D3148-0453-43F5-ACC3-7BB923393E1E}')
    _idlflags_ = []
    _methods_ = []
AxisVMLayers._com_interfaces_ = [IAxisVMLayers]
AxisVMLayers._outgoing_interfaces_ = [IAxisVMLayersEvents]

class AxisVMXLAMpanels(CoClass):
    'AxisVMXLAMpanels Object'
    _reg_clsid_ = GUID('{5C8E9747-C25E-4AC5-B102-0B96867642C1}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMXLAMpanels(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMXLAMpanels Object'
    _iid_ = GUID('{F682B977-BC07-4402-AEB5-F441D9FFA765}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMXLAMpanelsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMXLAMpanels Object'
    _iid_ = GUID('{2FAF371A-E6DB-4585-BBED-26462F6D800F}')
    _idlflags_ = []
    _methods_ = []
AxisVMXLAMpanels._com_interfaces_ = [IAxisVMXLAMpanels]
AxisVMXLAMpanels._outgoing_interfaces_ = [IAxisVMXLAMpanelsEvents]

class AxisVMReports(CoClass):
    'AxisVMReports Object'
    _reg_clsid_ = GUID('{CC401FBD-E654-427E-B3AC-25B5ACD65E13}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMReportsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMReports Object'
    _iid_ = GUID('{B9B25148-1FA9-4356-A275-AB397DFD27FC}')
    _idlflags_ = []
    _methods_ = []
AxisVMReports._com_interfaces_ = [IAxisVMReports]
AxisVMReports._outgoing_interfaces_ = [IAxisVMReportsEvents]

class RCompanyLogoParameters(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{35B53588-B814-46B4-AFCF-F3CA2DC9D410}')
class AxisVMStructuralGrids(CoClass):
    'AxisVMStructuralGrids Object'
    _reg_clsid_ = GUID('{E6EF033A-04E3-42AC-B175-F247676260E2}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMStructuralGrids(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMStructuralGrids Object'
    _iid_ = GUID('{1397C3C6-F070-4FCC-A0CE-837DD77F57C6}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMStructuralGridsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMStructuralGrids Object'
    _iid_ = GUID('{B0A84FF7-CBDC-4F44-B14F-ADE11F7A9D53}')
    _idlflags_ = []
    _methods_ = []
AxisVMStructuralGrids._com_interfaces_ = [IAxisVMStructuralGrids]
AxisVMStructuralGrids._outgoing_interfaces_ = [IAxisVMStructuralGridsEvents]

class AxisVMDimensions(CoClass):
    'AxisVMDimensions Object'
    _reg_clsid_ = GUID('{9DAF2B11-FA7D-4C75-A2E6-E7FA07AA08B8}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMDimensions(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMDimensions Object'
    _iid_ = GUID('{89A90011-2849-4003-896E-0A3FA718E2E2}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMDimensionsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMDimensions Object'
    _iid_ = GUID('{FA9415AB-92A9-4E38-86F8-7724F58AFA39}')
    _idlflags_ = []
    _methods_ = []
AxisVMDimensions._com_interfaces_ = [IAxisVMDimensions]
AxisVMDimensions._outgoing_interfaces_ = [IAxisVMDimensionsEvents]

class AxisVMVirtualBeams(CoClass):
    'AxisVMVirtualBeams Object'
    _reg_clsid_ = GUID('{BE4A5F1C-B3C1-47F5-B32A-9EAF373686F6}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMVirtualBeams(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMVirtualBeams Object'
    _iid_ = GUID('{36F4884C-FD38-4D52-8E6A-2EFA8D92690F}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMVirtualBeamsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMVirtualBeams Object'
    _iid_ = GUID('{D90CCB3E-54C4-47E2-88BC-C3363973BEDB}')
    _idlflags_ = []
    _methods_ = []
AxisVMVirtualBeams._com_interfaces_ = [IAxisVMVirtualBeams]
AxisVMVirtualBeams._outgoing_interfaces_ = [IAxisVMVirtualBeamsEvents]

class RAXSimportParameters(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{7314F153-7B58-4852-909E-B1FC9DF3A259}')
class AxisVMNodesSupports(CoClass):
    'AxisVMNodesSupports Object'
    _reg_clsid_ = GUID('{2FEF9220-BAA6-48A5-89A9-7B541212CAFA}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMNodesSupports(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMNodesSupports Object'
    _iid_ = GUID('{68C4AD5D-9FA3-48A4-809A-733DC6F3AB52}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMNodesSupportsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMNodesSupports Object'
    _iid_ = GUID('{10B7A03D-D940-43D3-AB4C-C166A43484B6}')
    _idlflags_ = []
    _methods_ = []
AxisVMNodesSupports._com_interfaces_ = [IAxisVMNodesSupports]
AxisVMNodesSupports._outgoing_interfaces_ = [IAxisVMNodesSupportsEvents]

class AxisVMMembersSupports(CoClass):
    'AxisVMMembersSupports Object'
    _reg_clsid_ = GUID('{8964B8CC-8B3C-4B3D-85D6-2B1F34E9A540}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMMembersSupports(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMMembersSupports Object'
    _iid_ = GUID('{0478FC42-DD27-439A-87A4-7299CEA6ADA7}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMMembersSupportsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMMembersSupports Object'
    _iid_ = GUID('{B26FD04C-F56C-4F27-8EFD-71A97B2F3DCB}')
    _idlflags_ = []
    _methods_ = []
AxisVMMembersSupports._com_interfaces_ = [IAxisVMMembersSupports]
AxisVMMembersSupports._outgoing_interfaces_ = [IAxisVMMembersSupportsEvents]

class AxisVMDomainsSupports(CoClass):
    'AxisVMDomainsSupports Object'
    _reg_clsid_ = GUID('{68C57401-6E90-42EE-8D2C-9124954D3F15}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMDomainsSupports(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMDomainsSupports Object'
    _iid_ = GUID('{67F2C974-977A-4096-BE72-A035F02693D7}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMDomainsSupportsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMDomainsSupports Object'
    _iid_ = GUID('{6D0A2DC6-1303-41EF-AF25-86D138725FDD}')
    _idlflags_ = []
    _methods_ = []
AxisVMDomainsSupports._com_interfaces_ = [IAxisVMDomainsSupports]
AxisVMDomainsSupports._outgoing_interfaces_ = [IAxisVMDomainsSupportsEvents]

class AxisVMWindLoad(CoClass):
    'AxisVMWindLoad Object'
    _reg_clsid_ = GUID('{3118095A-6854-498E-B97A-C3172CB032BB}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
AxisVMWindLoad._com_interfaces_ = [IAxisVMWindLoad]
AxisVMWindLoad._outgoing_interfaces_ = [IAxisVMWindLoad]

IAxisVMModel._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Settings',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMSettings)), 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'Materials',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMMaterials)), 'Value' )),
    COMMETHOD([dispid(203), 'propget'], HRESULT, 'CrossSections',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMCrossSections)), 'Value' )),
    COMMETHOD([dispid(204), 'propget'], HRESULT, 'References',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMReferences)), 'Value' )),
    COMMETHOD([dispid(205), 'propget'], HRESULT, 'Nodes',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMNodes)), 'Value' )),
    COMMETHOD([dispid(206), 'propget'], HRESULT, 'Lines',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMLines)), 'Value' )),
    COMMETHOD([dispid(207), 'propget'], HRESULT, 'NodalSupports',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMNodalSupports)), 'Value' )),
    COMMETHOD([dispid(208), 'propget'], HRESULT, 'LineSupports',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMLineSupports)), 'Value' )),
    COMMETHOD([dispid(209), 'propget'], HRESULT, 'SurfaceSupports',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMSurfaceSupports)), 'Value' )),
    COMMETHOD([dispid(210), 'propget'], HRESULT, 'LoadCases',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMLoadCases)), 'Value' )),
    COMMETHOD([dispid(211)], HRESULT, 'SaveToFile',
              ( ['in'], BSTR, 'FileName' ),
              ( ['in'], ELongBoolean, 'SaveResults' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'ResultValue' )),
    COMMETHOD([dispid(212), 'propget'], HRESULT, 'LoadGroups',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMLoadGroups)), 'Value' )),
    COMMETHOD([dispid(213), 'propget'], HRESULT, 'LoadCombinations',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMLoadCombinations)), 'Value' )),
    COMMETHOD([dispid(214), 'propget'], HRESULT, 'Loads',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMLoads)), 'Value' )),
    COMMETHOD([dispid(215)], HRESULT, 'LoadFromFile',
              ( ['in'], BSTR, 'FileName' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'ResultValue' )),
    COMMETHOD([dispid(216), 'propget'], HRESULT, 'Domains',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMDomains)), 'Value' )),
    COMMETHOD([dispid(217), 'propget'], HRESULT, 'Surfaces',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMSurfaces)), 'Value' )),
    COMMETHOD([dispid(218), 'propget'], HRESULT, 'View',
              ( ['out', 'retval'], POINTER(EView), 'Value' )),
    COMMETHOD([dispid(218), 'propput'], HRESULT, 'View',
              ( ['in'], EView, 'Value' )),
    COMMETHOD([dispid(219), 'propget'], HRESULT, 'Display',
              ( ['out', 'retval'], POINTER(EDisplay), 'Value' )),
    COMMETHOD([dispid(219), 'propput'], HRESULT, 'Display',
              ( ['in'], EDisplay, 'Value' )),
    COMMETHOD([dispid(220)], HRESULT, 'FitInView'),
    COMMETHOD([dispid(221), 'propget'], HRESULT, 'Calculation',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMCalculation)), 'Value' )),
    COMMETHOD([dispid(222), 'propget'], HRESULT, 'NeedsSaving',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(223), 'propget'], HRESULT, 'Results',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMResults)), 'Value' )),
    COMMETHOD([dispid(225)], HRESULT, 'BeginUpdate'),
    COMMETHOD([dispid(226)], HRESULT, 'EndUpdate'),
    COMMETHOD([dispid(227), 'propget'], HRESULT, 'SelectionProcessing',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(228), 'propget'], HRESULT, 'SelectionResult',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(229)], HRESULT, 'StartSelection',
              ( ['in'], BSTR, 'SelectionMessage' ),
              ( ['in'], ELongBoolean, 'DeleteCurrentSelection' ),
              ( ['in'], BSTR, 'ListOfSelectionTypes' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(230)], HRESULT, 'ExportToIFC',
              ( ['in'], BSTR, 'FileName' ),
              ( ['in'], EIFCVersion, 'IFCVersion' ),
              ( ['in'], ELongBoolean, 'ArchitectModel' ),
              ( ['in'], ELongBoolean, 'SelectedOnly' ),
              ( ['in'], ELongBoolean, 'ExportReinforcement' ),
              ( ['in', 'out'], POINTER(RIFCExportReinforcementParams), 'ReinforcementParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(231)], HRESULT, 'ExportToDXF',
              ( ['in'], BSTR, 'FileName' ),
              ( ['in'], EDXFVersion, 'DXFVersion' ),
              ( ['in'], ELengthUnit, 'LengthUnit' ),
              ( ['in'], c_double, 'FontFactor' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(232)], HRESULT, 'ExportToPIA',
              ( ['in'], BSTR, 'FileName' ),
              ( ['in'], ELongBoolean, 'SelectedOnly' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(233), 'propget'], HRESULT, 'Members',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMMembers)), 'Value' )),
    COMMETHOD([dispid(237), 'propget'], HRESULT, 'SpectrumH',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMSpectrum)), 'Value' )),
    COMMETHOD([dispid(238), 'propget'], HRESULT, 'SpectrumV',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMSpectrum)), 'Value' )),
    COMMETHOD([dispid(239)], HRESULT, 'GetSeismicParams',
              ( ['in', 'out'], POINTER(RSeismicParams), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(240)], HRESULT, 'SetSeismicParams',
              ( ['in', 'out'], POINTER(RSeismicParams), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(242), 'propget'], HRESULT, 'SeismicStoreys',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMSeismicStoreys)), 'Value' )),
    COMMETHOD([dispid(243)], HRESULT, 'UpdateFromPianoRev',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(244), 'propget'], HRESULT, 'Modified',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'ResultValue' )),
    COMMETHOD([dispid(245)], HRESULT, 'Refresh'),
    COMMETHOD([dispid(246), 'propget'], HRESULT, 'FileName',
              ( ['out', 'retval'], POINTER(BSTR), 'ResultValue' )),
    COMMETHOD([dispid(234), 'propget'], HRESULT, 'LinkElements',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMLinkElements)), 'Value' )),
    COMMETHOD([dispid(235), 'propget'], HRESULT, 'EdgeConnections',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMEdgeConnections)), 'Value' )),
    COMMETHOD([dispid(236), 'propget'], HRESULT, 'SteelDesignMembers',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMSteelDesignMembers)), 'Value' )),
    COMMETHOD([dispid(241), 'propget'], HRESULT, 'ActualReinforcement',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMActualReinforcement)), 'Value' )),
    COMMETHOD([dispid(247), 'propget'], HRESULT, 'Sections',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMSections)), 'Value' )),
    COMMETHOD([dispid(248), 'propget'], HRESULT, 'DomainSupports',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMDomainSupports)), 'Value' )),
    COMMETHOD([dispid(249), 'propget'], HRESULT, 'Storeys',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMStoreys)), 'Value' )),
    COMMETHOD([dispid(250), 'propget'], HRESULT, 'TimberDesignMembers',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMTimberDesignMembers)), 'Value' )),
    COMMETHOD([dispid(251), 'propget'], HRESULT, 'DynamicLoadFunctions',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMDynamicLoadFunctions)), 'Value' )),
    COMMETHOD([dispid(252), 'propget'], HRESULT, 'TimeIncrementFunctions',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMTimeIncrementFunctions)), 'Value' )),
    COMMETHOD([dispid(253), 'propget'], HRESULT, 'IncrementFunctions',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMIncrementFunctions)), 'Value' )),
    COMMETHOD([dispid(254), 'propget'], HRESULT, 'RigidBodies',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMRigidBodies)), 'Value' )),
    COMMETHOD([dispid(255), 'propget'], HRESULT, 'Diaphragm',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMDiaphragm)), 'Value' )),
    COMMETHOD([dispid(256), 'propget'], HRESULT, 'RebarSteelGrades',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMRebarSteelGrades)), 'Value' )),
    COMMETHOD([dispid(257), 'propget'], HRESULT, 'MovingLoads',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMMovingLoads)), 'Value' )),
    COMMETHOD([dispid(258), 'propget'], HRESULT, 'ColumnRebars',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMColumnRebars)), 'Value' )),
    COMMETHOD([dispid(259), 'propget'], HRESULT, 'RCBeamDesign',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMRCBeamDesign)), 'Value' )),
    COMMETHOD([dispid(260), 'propget'], HRESULT, 'RCColumnChecking',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMRCColumnChecking)), 'Value' )),
    COMMETHOD([dispid(261)], HRESULT, 'SaveUndo',
              ( ['in'], BSTR, 'UndoText' )),
    COMMETHOD([dispid(262)], HRESULT, 'Undo'),
    COMMETHOD([dispid(263)], HRESULT, 'Redo'),
    COMMETHOD([dispid(264), 'propget'], HRESULT, 'PushoverHingeFunctions',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMPushoverHingeFunctions)), 'Value' )),
    COMMETHOD([dispid(265), 'propget'], HRESULT, 'ProjectName',
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(265), 'propput'], HRESULT, 'ProjectName',
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(266), 'propget'], HRESULT, 'AnalysisBy',
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(266), 'propput'], HRESULT, 'AnalysisBy',
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(267), 'propget'], HRESULT, 'Comment',
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(267), 'propput'], HRESULT, 'Comment',
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(268), 'propget'], HRESULT, 'CriticalGroupCombinations',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMCriticalGroupCombinations)), 'Value' )),
    COMMETHOD([dispid(269), 'propget'], HRESULT, 'Envelopes',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMEnvelopes)), 'Value' )),
    COMMETHOD([dispid(270), 'propget'], HRESULT, 'Windows',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMWindows)), 'Value' )),
    COMMETHOD([dispid(271), 'propget'], HRESULT, 'CustomParts',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMCustomParts)), 'Value' )),
    COMMETHOD([dispid(272), 'propget'], HRESULT, 'LogicalParts',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMLogicalParts)), 'Value' )),
    COMMETHOD([dispid(273), 'propget'], HRESULT, 'LoadPanels',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMLoadPanels)), 'Value' )),
    COMMETHOD([dispid(274), 'propget'], HRESULT, 'Workplanes',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMWorkplanes)), 'Value' )),
    COMMETHOD([dispid(275), helpstring('The APIGlobalData can hold any data !')], HRESULT, 'SetAPIGlobalData',
              ( ['in'], BSTR, 'DataName' ),
              ( ['in'], _midlSAFEARRAY(c_ubyte), 'APIGlobalData' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(276), helpstring('The GlobalData can hold any data !')], HRESULT, 'GetAPIGlobalData',
              ( ['in'], BSTR, 'DataName' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'APIGlobalData' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(277)], HRESULT, 'GetAPIGlobalDataSize',
              ( ['in'], BSTR, 'DataName' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(278)], HRESULT, 'DeleteAPIGlobalData',
              ( ['in'], BSTR, 'DataName' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(279), helpstring('The APIGlobalData can hold any data !')], HRESULT, 'SetAPIGlobalData_vb',
              ( ['in'], BSTR, 'DataName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'APIGlobalData' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(280)], HRESULT, 'ImportDXF',
              ( ['in'], BSTR, 'FileName' ),
              ( ['in', 'out'], POINTER(RDXFimportParameters), 'Parameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(281), helpstring('The FontName is currently not used !')], HRESULT, 'ImportPDF',
              ( ['in'], BSTR, 'FileName' ),
              ( ['in', 'out'], POINTER(RPDFimportParameters), 'Parameters' ),
              ( ['in'], BSTR, 'FontName' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(282)], HRESULT, 'GetIFCExportReinfParams',
              ( ['in', 'out'], POINTER(RIFCExportReinforcementParams), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(283)], HRESULT, 'ImportIFC',
              ( ['in'], BSTR, 'FileName' ),
              ( ['in', 'out'], POINTER(RIFCimportParameters), 'Parameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(284), 'propget'], HRESULT, 'CallProgress',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(284), 'propput'], HRESULT, 'CallProgress',
              ( ['in'], ELongBoolean, 'Value' )),
    COMMETHOD([dispid(285), 'propget'], HRESULT, 'SteelCrossSectionOptimization',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMCrossSectionOptimization)), 'Value' )),
    COMMETHOD([dispid(286), 'propget'], HRESULT, 'SpectrumPushOver',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMSpectrum)), 'Value' )),
    COMMETHOD([dispid(287), 'propget'], HRESULT, 'MathTexts',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMMathTexts)), 'Value' )),
    COMMETHOD([dispid(288), 'propget'], HRESULT, 'TimberCrossSectionOptimization',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMCrossSectionOptimization)), 'Value' )),
    COMMETHOD([dispid(289), 'propget'], HRESULT, 'Layers',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMLayers)), 'Value' )),
    COMMETHOD([dispid(290), 'propget'], HRESULT, 'XLAMpanels',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMXLAMpanels)), 'Value' )),
    COMMETHOD([dispid(291), 'propget'], HRESULT, 'DrawingsLibrary',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMDrawingsLibrary)), 'Value' )),
    COMMETHOD([dispid(292), 'propget'], HRESULT, 'Reports',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMReports)), 'Value' )),
    COMMETHOD([dispid(293)], HRESULT, 'SaveModelBeforeClose'),
    COMMETHOD([dispid(294), helpstring('Supported extensions for LogoFileName: *.png; *.jpg; *.jpeg; *.bmp; *.tif; *.tiff; *.ico; *.emf; *.wmf ')], HRESULT, 'GetCompanyLogoParameters',
              ( ['in', 'out'], POINTER(RCompanyLogoParameters), 'Parameters' ),
              ( ['out'], POINTER(BSTR), 'LogoFileName' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(295)], HRESULT, 'SetCompanyLogoParameters',
              ( ['in', 'out'], POINTER(RCompanyLogoParameters), 'Parameters' ),
              ( ['in'], BSTR, 'LogoFileName' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(296), 'propget'], HRESULT, 'StructuralGrids',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMStructuralGrids)), 'Value' )),
    COMMETHOD([dispid(297)], HRESULT, 'SelectAll',
              ( ['in'], ELongBoolean, 'Select' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(298), 'propget'], HRESULT, 'Dimensions',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMDimensions)), 'Value' )),
    COMMETHOD([dispid(299)], HRESULT, 'StartModalSelection',
              ( ['in'], BSTR, 'SelectionMessage' ),
              ( ['in'], ELongBoolean, 'DeleteCurrentSelection' ),
              ( ['in'], BSTR, 'ListOfSelectionTypes' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(300)], HRESULT, 'ImportRAE',
              ( ['in'], BSTR, 'raeFileName' ),
              ( ['in'], BSTR, 'jsonFileName' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(301), 'propget'], HRESULT, 'VirtualBeams',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMVirtualBeams)), 'Value' )),
    COMMETHOD([dispid(302), 'propget'], HRESULT, 'Task',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMTask)), 'Value' )),
    COMMETHOD([dispid(303)], HRESULT, 'ImportAXS',
              ( ['in'], BSTR, 'FileName' ),
              ( ['in', 'out'], POINTER(RAXSimportParameters), 'Parameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(304), 'propget'], HRESULT, 'NodesSupports',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMNodesSupports)), 'Value' )),
    COMMETHOD([dispid(305), 'propget'], HRESULT, 'MembersSupports',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMMembersSupports)), 'Value' )),
    COMMETHOD([dispid(306), 'propget'], HRESULT, 'DomainsSupports',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMDomainsSupports)), 'Value' )),
    COMMETHOD([dispid(307), 'propget'], HRESULT, 'SpringParams',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMSpringParams)), 'Value' )),
    COMMETHOD([dispid(308), 'propget'], HRESULT, 'WindLoad',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMWindLoad)), 'Value' )),
]
################################################################
## code template for IAxisVMModel implementation
##class IAxisVMModel_Impl(object):
##    @property
##    def Settings(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Materials(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def CrossSections(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def References(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Nodes(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Lines(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def NodalSupports(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def LineSupports(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def SurfaceSupports(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def LoadCases(self):
##        '-no docstring-'
##        #return Value
##
##    def SaveToFile(self, FileName, SaveResults):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def LoadGroups(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def LoadCombinations(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Loads(self):
##        '-no docstring-'
##        #return Value
##
##    def LoadFromFile(self, FileName):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def Domains(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Surfaces(self):
##        '-no docstring-'
##        #return Value
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    View = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Display = property(_get, _set, doc = _set.__doc__)
##
##    def FitInView(self):
##        '-no docstring-'
##        #return 
##
##    @property
##    def Calculation(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def NeedsSaving(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Results(self):
##        '-no docstring-'
##        #return Value
##
##    def BeginUpdate(self):
##        '-no docstring-'
##        #return 
##
##    def EndUpdate(self):
##        '-no docstring-'
##        #return 
##
##    @property
##    def SelectionProcessing(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def SelectionResult(self):
##        '-no docstring-'
##        #return Value
##
##    def StartSelection(self, SelectionMessage, DeleteCurrentSelection, ListOfSelectionTypes):
##        '-no docstring-'
##        #return ResultValue
##
##    def ExportToIFC(self, FileName, IFCVersion, ArchitectModel, SelectedOnly, ExportReinforcement):
##        '-no docstring-'
##        #return ReinforcementParams, ResultValue
##
##    def ExportToDXF(self, FileName, DXFVersion, LengthUnit, FontFactor):
##        '-no docstring-'
##        #return ResultValue
##
##    def ExportToPIA(self, FileName, SelectedOnly):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def Members(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def SpectrumH(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def SpectrumV(self):
##        '-no docstring-'
##        #return Value
##
##    def GetSeismicParams(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetSeismicParams(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    @property
##    def SeismicStoreys(self):
##        '-no docstring-'
##        #return Value
##
##    def UpdateFromPianoRev(self):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def Modified(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def Refresh(self):
##        '-no docstring-'
##        #return 
##
##    @property
##    def FileName(self):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def LinkElements(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def EdgeConnections(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def SteelDesignMembers(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def ActualReinforcement(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Sections(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def DomainSupports(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Storeys(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def TimberDesignMembers(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def DynamicLoadFunctions(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def TimeIncrementFunctions(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def IncrementFunctions(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def RigidBodies(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Diaphragm(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def RebarSteelGrades(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def MovingLoads(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def ColumnRebars(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def RCBeamDesign(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def RCColumnChecking(self):
##        '-no docstring-'
##        #return Value
##
##    def SaveUndo(self, UndoText):
##        '-no docstring-'
##        #return 
##
##    def Undo(self):
##        '-no docstring-'
##        #return 
##
##    def Redo(self):
##        '-no docstring-'
##        #return 
##
##    @property
##    def PushoverHingeFunctions(self):
##        '-no docstring-'
##        #return Value
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    ProjectName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    AnalysisBy = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Comment = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def CriticalGroupCombinations(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Envelopes(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Windows(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def CustomParts(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def LogicalParts(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def LoadPanels(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Workplanes(self):
##        '-no docstring-'
##        #return Value
##
##    def SetAPIGlobalData(self, DataName, APIGlobalData):
##        'The APIGlobalData can hold any data !'
##        #return ResultValue
##
##    def GetAPIGlobalData(self, DataName):
##        'The GlobalData can hold any data !'
##        #return APIGlobalData, ResultValue
##
##    def GetAPIGlobalDataSize(self, DataName):
##        '-no docstring-'
##        #return ResultValue
##
##    def DeleteAPIGlobalData(self, DataName):
##        '-no docstring-'
##        #return ResultValue
##
##    def SetAPIGlobalData_vb(self, DataName):
##        'The APIGlobalData can hold any data !'
##        #return APIGlobalData, ResultValue
##
##    def ImportDXF(self, FileName):
##        '-no docstring-'
##        #return Parameters, ResultValue
##
##    def ImportPDF(self, FileName, FontName):
##        'The FontName is currently not used !'
##        #return Parameters, ResultValue
##
##    def GetIFCExportReinfParams(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def ImportIFC(self, FileName):
##        '-no docstring-'
##        #return Parameters, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    CallProgress = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SteelCrossSectionOptimization(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def SpectrumPushOver(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def MathTexts(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def TimberCrossSectionOptimization(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Layers(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def XLAMpanels(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def DrawingsLibrary(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Reports(self):
##        '-no docstring-'
##        #return Value
##
##    def SaveModelBeforeClose(self):
##        '-no docstring-'
##        #return 
##
##    def GetCompanyLogoParameters(self):
##        'Supported extensions for LogoFileName: *.png; *.jpg; *.jpeg; *.bmp; *.tif; *.tiff; *.ico; *.emf; *.wmf '
##        #return Parameters, LogoFileName, ResultValue
##
##    def SetCompanyLogoParameters(self, LogoFileName):
##        '-no docstring-'
##        #return Parameters, ResultValue
##
##    @property
##    def StructuralGrids(self):
##        '-no docstring-'
##        #return Value
##
##    def SelectAll(self, Select):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def Dimensions(self):
##        '-no docstring-'
##        #return Value
##
##    def StartModalSelection(self, SelectionMessage, DeleteCurrentSelection, ListOfSelectionTypes):
##        '-no docstring-'
##        #return ResultValue
##
##    def ImportRAE(self, raeFileName, jsonFileName):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def VirtualBeams(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Task(self):
##        '-no docstring-'
##        #return Value
##
##    def ImportAXS(self, FileName):
##        '-no docstring-'
##        #return Parameters, ResultValue
##
##    @property
##    def NodesSupports(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def MembersSupports(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def DomainsSupports(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def SpringParams(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def WindLoad(self):
##        '-no docstring-'
##        #return Value
##

class RDomainHollowCore(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{823C2B97-4BE6-4987-931D-5231928C3688}')

# values for enumeration 'EXYDirection'
xyd_x = 1
xyd_y = 2
EXYDirection = c_int # enum

# values for enumeration 'EHollowHoleType'
hht_Circular = 1
hht_Rectangular = 2
EHollowHoleType = c_int # enum
RDomainHollowCore._fields_ = [
    ('Direction', EXYDirection),
    ('d', c_double),
    ('Origin', RPoint3d),
    ('HoleType', EHollowHoleType),
    ('fi', c_double),
    ('b', c_double),
    ('h', c_double),
]
assert sizeof(RDomainHollowCore) == 72, sizeof(RDomainHollowCore)
assert alignment(RDomainHollowCore) == 8, alignment(RDomainHollowCore)
class RSpringParam(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{FC17A1A4-C97B-4A0E-BC90-AB7BC7969F10}')
RSpringParam._fields_ = [
    ('SpringType', ESpringParType),
    ('NNType', ESpringParNNType),
    ('DOFType', ESpringParDOFType),
    ('NLESimplified', ELongBoolean),
    ('K', c_double),
    ('KVib', c_double),
    ('DampingType', ESpringParDampingType),
    ('C', c_double),
    ('NonLinearity', ESpringParNonLinearity),
    ('NLDefType', ESpringParNLDefType),
    ('K_T', c_double),
    ('K_C', c_double),
    ('ResistanceDef_T', ELongBoolean),
    ('ResistanceDef_C', ELongBoolean),
    ('TangentStiffness_T', c_double),
    ('TangentStiffness_C', c_double),
    ('Resistance_T', c_double),
    ('Resistance_C', c_double),
    ('HardeningRule', ESpringParHardeningRule),
    ('MatrixType', ESpringParMatrixType),
    ('C_t', c_double),
    ('C_C', c_double),
    ('VerticalStiffness', c_double),
    ('IsolatorType', ESpringParIsolatorType),
    ('K1', c_double),
    ('kt', c_double),
    ('F1', c_double),
    ('Mu', c_double),
    ('R', c_double),
    ('HorizontalStiffness', c_double),
    ('Ksi', c_double),
]
assert sizeof(RSpringParam) == 208, sizeof(RSpringParam)
assert alignment(RSpringParam) == 8, alignment(RSpringParam)
class RSpringParamIndexes(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{CA36D439-70FF-4C5C-B307-B4A6F5E38516}')
RSpringParamIndexes._fields_ = [
    ('x', c_int),
    ('y', c_int),
    ('z', c_int),
    ('xx', c_int),
    ('yy', c_int),
    ('zz', c_int),
]
assert sizeof(RSpringParamIndexes) == 24, sizeof(RSpringParamIndexes)
assert alignment(RSpringParamIndexes) == 4, alignment(RSpringParamIndexes)
IAxisVMCrossSectionsEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Cleared'),
    DISPMETHOD([dispid(202)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]
class AxisVMWindSubStructure(CoClass):
    'AxisVMWindSubStructure Object'
    _reg_clsid_ = GUID('{054FF4D3-3B7C-496A-B5A9-FA7998DEC869}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
AxisVMWindSubStructure._com_interfaces_ = [IAxisVMWindSubStructure]
AxisVMWindSubStructure._outgoing_interfaces_ = [IAxisVMWindSubStructure]


# values for enumeration 'ESectionType'
stPlane = 0
stSegment = 1
ESectionType = c_int # enum

# values for enumeration 'EFileImportPlane'
fipPlaneXY = 0
fipPlaneXZ = 1
fipPlaneYZ = 2
fipWorkPlane = 3
EFileImportPlane = c_int # enum

# values for enumeration 'EFileImportAs'
fiaActualNodes = 0
fiaBackgroundLayer = 1
EFileImportAs = c_int # enum

# values for enumeration 'EFileImportMode'
fimOverwrite = 0
fimAdd = 1
EFileImportMode = c_int # enum
RPDFimportParameters._fields_ = [
    ('PageNumber', c_int),
    ('MaxDeviation', c_double),
    ('GeometryCheckTolerance', c_double),
    ('Scale', c_double),
    ('ImportLineWidth', ELongBoolean),
    ('ImportText', ELongBoolean),
    ('BasePlane', EFileImportPlane),
    ('WorkPlaneIndex', c_int),
    ('ImportAs', EFileImportAs),
    ('ImportMode', EFileImportMode),
    ('PlaceOffset', RPoint3d),
]
assert sizeof(RPDFimportParameters) == 80, sizeof(RPDFimportParameters)
assert alignment(RPDFimportParameters) == 8, alignment(RPDFimportParameters)
class RLoadBeamThermal(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{1381027D-9062-4BA9-A423-91CC32F8E61B}')

# values for enumeration 'EAxis'
aX = 0
aY = 1
aZ = 2
aXX = 3
aYY = 4
aZZ = 5
EAxis = c_int # enum
RLoadBeamThermal._fields_ = [
    ('LoadCaseId', c_int),
    ('LineId', c_int),
    ('Tref', c_double),
    ('Ttop', c_double),
    ('Tbot', c_double),
    ('Axis', EAxis),
]
assert sizeof(RLoadBeamThermal) == 40, sizeof(RLoadBeamThermal)
assert alignment(RLoadBeamThermal) == 8, alignment(RLoadBeamThermal)

# values for enumeration 'EIFCimportMethod'
iimStaticModel = 0
iimArchitecturalModelObjects = 1
EIFCimportMethod = c_int # enum

# values for enumeration 'EIFCopeningsAlignedToDomainEdge'
ioatdeImportAsOpenings = 0
ioatdeAdjustTheDomain = 1
EIFCopeningsAlignedToDomainEdge = c_int # enum
RIFCimportParameters._fields_ = [
    ('ImportMode', EFileImportMode),
    ('ImportMethod', EIFCimportMethod),
    ('MaxDeviation', c_double),
    ('ByAngle', c_double),
    ('JoinIfObjectsAreCloserThan', c_double),
    ('ImportAs', EFileImportAs),
    ('OpeningsAlignedToDomainEdge', EIFCopeningsAlignedToDomainEdge),
]
assert sizeof(RIFCimportParameters) == 40, sizeof(RIFCimportParameters)
assert alignment(RIFCimportParameters) == 8, alignment(RIFCimportParameters)

# values for enumeration 'EAttributesError'
atteCannotAddAttribute = -100001
atteCannotGetAttribute = -100002
atteInvalidName = -100003
atteInvalidOrEmptyItemData = -100004
atteAttributeNotFound = -100005
atteNameAlreadyExists = -100006
atteCannotDeleteAttribute = -100007
atteCannotSetAttribute = -100008
atteInvalidOrEmptyItemIndexes = -100009
atteItemIndexOutOfBounds = -100010
atteAttributeSizeMustMatch = -100011
atteItemsDataMustContainAllItems = -100012
EAttributesError = c_int # enum
IAxisVMDiaphragmEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]

# values for enumeration 'EMovingLoadType'
mltMovingLoadOnBeam = 0
mltMovingLoadOnDomain = 1
EMovingLoadType = c_int # enum

# values for enumeration 'ESectionDisplayMode'
sdmDiagramOnly = 0
sdmDiagramAvg = 1
sdmDiagramRes = 2
sdmResultant = 3
sdmDiagramSegWidth = 4
ESectionDisplayMode = c_int # enum
class RColumnRebarPos(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{C81742CF-1303-41A8-83EB-1C4EB0CD2211}')
RColumnRebarPos._fields_ = [
    ('x', c_double),
    ('y', c_double),
    ('d', c_double),
]
assert sizeof(RColumnRebarPos) == 24, sizeof(RColumnRebarPos)
assert alignment(RColumnRebarPos) == 8, alignment(RColumnRebarPos)
IAxisVMColumnRebars._methods_ = [
    COMMETHOD([dispid(201)], HRESULT, 'Add',
              ( ['in'], POINTER(BSTR), 'Name' ),
              ( ['in'], c_int, 'CrossSectionID' ),
              ( ['in'], _midlSAFEARRAY(RColumnRebarPos), 'Rebars' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(202)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(203)], HRESULT, 'DeleteRebarsFrom',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'GetRebars',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RColumnRebarPos)), 'Rebars' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205)], HRESULT, 'SetRebars',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], _midlSAFEARRAY(RColumnRebarPos), 'Rebars' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206), 'propget'], HRESULT, 'Name',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(206), 'propput'], HRESULT, 'Name',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(207), 'propget'], HRESULT, 'CrossSectionID',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(207), 'propput'], HRESULT, 'CrossSectionID',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(208), 'propget'], HRESULT, 'RebarCount',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(209), 'propget'], HRESULT, 'RebarsArea',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(210), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(211)], HRESULT, 'Add_vb',
              ( ['in'], POINTER(BSTR), 'Name' ),
              ( ['in'], c_int, 'CrossSectionID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RColumnRebarPos)), 'Rebars' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(212)], HRESULT, 'SetRebars_vb',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RColumnRebarPos)), 'Rebars' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMColumnRebars implementation
##class IAxisVMColumnRebars_Impl(object):
##    def Add(self, Name, CrossSectionID, Rebars):
##        '-no docstring-'
##        #return ResultValue
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def DeleteRebarsFrom(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetRebars(self, Index):
##        '-no docstring-'
##        #return Rebars, ResultValue
##
##    def SetRebars(self, Index, Rebars):
##        '-no docstring-'
##        #return ResultValue
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    CrossSectionID = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def RebarCount(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def RebarsArea(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def Add_vb(self, Name, CrossSectionID):
##        '-no docstring-'
##        #return Rebars, ResultValue
##
##    def SetRebars_vb(self, Index):
##        '-no docstring-'
##        #return Rebars, ResultValue
##

class RSnowLoadParams(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{8270EAFE-6D37-444C-9A3B-3B81230684A6}')
RSnowLoadParams._fields_ = [
    ('a', c_double),
    ('C_e', c_double),
    ('C_t', c_double),
    ('C_esl', c_double),
    ('s_k', c_double),
    ('s_Ad', c_double),
    ('Iw', c_double),
    ('Zone', c_int),
]
assert sizeof(RSnowLoadParams) == 64, sizeof(RSnowLoadParams)
assert alignment(RSnowLoadParams) == 8, alignment(RSnowLoadParams)
class AxisVMMaterial(CoClass):
    'AxisVMMaterial Object'
    _reg_clsid_ = GUID('{93E99F2A-6309-4B76-BA93-933485EA0D2D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMMaterial(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMMaterial Object'
    _iid_ = GUID('{2ADE9AFE-3981-452E-B9C8-40F435BDBB4C}')
    _idlflags_ = ['dual', 'oleautomation']
AxisVMMaterial._com_interfaces_ = [IAxisVMMaterial]


# values for enumeration 'EMaterialType'
mtOther = 0
mtSteel = 1
mtConcrete = 2
mtTimber = 3
mtAluminium = 4
mtBrick = 5
EMaterialType = c_int # enum
IAxisVMMaterials._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(AxisVMMaterial)), 'Value' )),
    COMMETHOD([dispid(203)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'AddDialog',
              ( ['in'], ENationalDesignCode, 'NationalDesignCode' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205)], HRESULT, 'AddSteel_Hungarian_MSZ',
              ( ['in'], BSTR, 'NationalDesignName' ),
              ( ['in'], BSTR, 'MaterialDesignName' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_ulong, 'FillColour' ),
              ( ['in'], c_ulong, 'ContourColour' ),
              ( ['in'], c_double, 'ex' ),
              ( ['in'], c_double, 'ey' ),
              ( ['in'], c_double, 'ez' ),
              ( ['in'], c_double, 'Nux' ),
              ( ['in'], c_double, 'nuy' ),
              ( ['in'], c_double, 'nuz' ),
              ( ['in'], c_double, 'Alfax' ),
              ( ['in'], c_double, 'Alfay' ),
              ( ['in'], c_double, 'Alfaz' ),
              ( ['in'], c_double, 'Rho' ),
              ( ['in'], c_double, 'SigmaH' ),
              ( ['in'], c_double, 'SigmapH' ),
              ( ['in'], c_double, 'Ry' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'AddSteel_EuroCode',
              ( ['in'], BSTR, 'NationalDesignName' ),
              ( ['in'], BSTR, 'MaterialDesignName' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_ulong, 'FillColour' ),
              ( ['in'], c_ulong, 'ContourColour' ),
              ( ['in'], c_double, 'ex' ),
              ( ['in'], c_double, 'ey' ),
              ( ['in'], c_double, 'ez' ),
              ( ['in'], c_double, 'Nux' ),
              ( ['in'], c_double, 'nuy' ),
              ( ['in'], c_double, 'nuz' ),
              ( ['in'], c_double, 'Alfax' ),
              ( ['in'], c_double, 'Alfay' ),
              ( ['in'], c_double, 'Alfaz' ),
              ( ['in'], c_double, 'Rho' ),
              ( ['in'], c_double, 'Fy' ),
              ( ['in'], c_double, 'Fu' ),
              ( ['in'], c_double, 'Fy40' ),
              ( ['in'], c_double, 'Fu40' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'AddSteel_Romanian_STAS',
              ( ['in'], BSTR, 'NationalDesignName' ),
              ( ['in'], BSTR, 'MaterialDesignName' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_ulong, 'FillColour' ),
              ( ['in'], c_ulong, 'ContourColour' ),
              ( ['in'], c_double, 'ex' ),
              ( ['in'], c_double, 'ey' ),
              ( ['in'], c_double, 'ez' ),
              ( ['in'], c_double, 'Nux' ),
              ( ['in'], c_double, 'nuy' ),
              ( ['in'], c_double, 'nuz' ),
              ( ['in'], c_double, 'Alfax' ),
              ( ['in'], c_double, 'Alfay' ),
              ( ['in'], c_double, 'Alfaz' ),
              ( ['in'], c_double, 'Rho' ),
              ( ['in'], c_double, 'R' ),
              ( ['in'], c_double, 'Rc' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208)], HRESULT, 'AddSteel_Dutch_NEN',
              ( ['in'], BSTR, 'NationalDesignName' ),
              ( ['in'], BSTR, 'MaterialDesignName' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_ulong, 'FillColour' ),
              ( ['in'], c_ulong, 'ContourColour' ),
              ( ['in'], c_double, 'ex' ),
              ( ['in'], c_double, 'ey' ),
              ( ['in'], c_double, 'ez' ),
              ( ['in'], c_double, 'Nux' ),
              ( ['in'], c_double, 'nuy' ),
              ( ['in'], c_double, 'nuz' ),
              ( ['in'], c_double, 'Alfax' ),
              ( ['in'], c_double, 'Alfay' ),
              ( ['in'], c_double, 'Alfaz' ),
              ( ['in'], c_double, 'Rho' ),
              ( ['in'], c_double, 'Fy' ),
              ( ['in'], c_double, 'Fu' ),
              ( ['in'], c_double, 'Fy40' ),
              ( ['in'], c_double, 'Fu40' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209)], HRESULT, 'AddSteel_German_DIN1045_1',
              ( ['in'], BSTR, 'NationalDesignName' ),
              ( ['in'], BSTR, 'MaterialDesignName' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_ulong, 'FillColour' ),
              ( ['in'], c_ulong, 'ContourColour' ),
              ( ['in'], c_double, 'ex' ),
              ( ['in'], c_double, 'ey' ),
              ( ['in'], c_double, 'ez' ),
              ( ['in'], c_double, 'Nux' ),
              ( ['in'], c_double, 'nuy' ),
              ( ['in'], c_double, 'nuz' ),
              ( ['in'], c_double, 'Alfax' ),
              ( ['in'], c_double, 'Alfay' ),
              ( ['in'], c_double, 'Alfaz' ),
              ( ['in'], c_double, 'Rho' ),
              ( ['in'], c_double, 'Fy' ),
              ( ['in'], c_double, 'Fu' ),
              ( ['in'], c_double, 'Fy40' ),
              ( ['in'], c_double, 'Fu40' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(210)], HRESULT, 'AddSteel_Swiss_SIA26x',
              ( ['in'], BSTR, 'NationalDesignName' ),
              ( ['in'], BSTR, 'MaterialDesignName' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_ulong, 'FillColour' ),
              ( ['in'], c_ulong, 'ContourColour' ),
              ( ['in'], c_double, 'ex' ),
              ( ['in'], c_double, 'ey' ),
              ( ['in'], c_double, 'ez' ),
              ( ['in'], c_double, 'Nux' ),
              ( ['in'], c_double, 'nuy' ),
              ( ['in'], c_double, 'nuz' ),
              ( ['in'], c_double, 'Alfax' ),
              ( ['in'], c_double, 'Alfay' ),
              ( ['in'], c_double, 'Alfaz' ),
              ( ['in'], c_double, 'Rho' ),
              ( ['in'], c_double, 'Fy' ),
              ( ['in'], c_double, 'Fu' ),
              ( ['in'], c_double, 'Fy40' ),
              ( ['in'], c_double, 'Fu40' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(211)], HRESULT, 'AddSteel_Italian',
              ( ['in'], BSTR, 'NationalDesignName' ),
              ( ['in'], BSTR, 'MaterialDesignName' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_ulong, 'FillColour' ),
              ( ['in'], c_ulong, 'ContourColour' ),
              ( ['in'], c_double, 'ex' ),
              ( ['in'], c_double, 'ey' ),
              ( ['in'], c_double, 'ez' ),
              ( ['in'], c_double, 'Nux' ),
              ( ['in'], c_double, 'nuy' ),
              ( ['in'], c_double, 'nuz' ),
              ( ['in'], c_double, 'Alfax' ),
              ( ['in'], c_double, 'Alfay' ),
              ( ['in'], c_double, 'Alfaz' ),
              ( ['in'], c_double, 'Rho' ),
              ( ['in'], c_double, 'Fy' ),
              ( ['in'], c_double, 'Fu' ),
              ( ['in'], c_double, 'Fy40' ),
              ( ['in'], c_double, 'Fu40' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(212)], HRESULT, 'AddConcrete_Hungarian_MSZ',
              ( ['in'], BSTR, 'NationalDesignName' ),
              ( ['in'], BSTR, 'MaterialDesignName' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_ulong, 'FillColour' ),
              ( ['in'], c_ulong, 'ContourColour' ),
              ( ['in'], c_double, 'ex' ),
              ( ['in'], c_double, 'ey' ),
              ( ['in'], c_double, 'ez' ),
              ( ['in'], c_double, 'Nux' ),
              ( ['in'], c_double, 'nuy' ),
              ( ['in'], c_double, 'nuz' ),
              ( ['in'], c_double, 'Alfax' ),
              ( ['in'], c_double, 'Alfay' ),
              ( ['in'], c_double, 'Alfaz' ),
              ( ['in'], c_double, 'Rho' ),
              ( ['in'], c_double, 'SigmabH' ),
              ( ['in'], c_double, 'SigmahH' ),
              ( ['in'], c_double, 'Fit' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(213)], HRESULT, 'AddConcrete_EuroCode',
              ( ['in'], BSTR, 'NationalDesignName' ),
              ( ['in'], BSTR, 'MaterialDesignName' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_ulong, 'FillColour' ),
              ( ['in'], c_ulong, 'ContourColour' ),
              ( ['in'], c_double, 'ex' ),
              ( ['in'], c_double, 'ey' ),
              ( ['in'], c_double, 'ez' ),
              ( ['in'], c_double, 'Nux' ),
              ( ['in'], c_double, 'nuy' ),
              ( ['in'], c_double, 'nuz' ),
              ( ['in'], c_double, 'Alfax' ),
              ( ['in'], c_double, 'Alfay' ),
              ( ['in'], c_double, 'Alfaz' ),
              ( ['in'], c_double, 'Rho' ),
              ( ['in'], c_double, 'Fck' ),
              ( ['in'], c_double, 'GammaC' ),
              ( ['in'], c_double, 'Alfacc' ),
              ( ['in'], c_double, 'Fit' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(214)], HRESULT, 'AddConcrete_Romanian_STAS',
              ( ['in'], BSTR, 'NationalDesignName' ),
              ( ['in'], BSTR, 'MaterialDesignName' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_ulong, 'FillColour' ),
              ( ['in'], c_ulong, 'ContourColour' ),
              ( ['in'], c_double, 'ex' ),
              ( ['in'], c_double, 'ey' ),
              ( ['in'], c_double, 'ez' ),
              ( ['in'], c_double, 'Nux' ),
              ( ['in'], c_double, 'nuy' ),
              ( ['in'], c_double, 'nuz' ),
              ( ['in'], c_double, 'Alfax' ),
              ( ['in'], c_double, 'Alfay' ),
              ( ['in'], c_double, 'Alfaz' ),
              ( ['in'], c_double, 'Rho' ),
              ( ['in'], c_double, 'SigmabH' ),
              ( ['in'], c_double, 'SigmahH' ),
              ( ['in'], c_double, 'Fit' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(215)], HRESULT, 'AddConcrete_Dutch_NEN',
              ( ['in'], BSTR, 'NationalDesignName' ),
              ( ['in'], BSTR, 'MaterialDesignName' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_ulong, 'FillColour' ),
              ( ['in'], c_ulong, 'ContourColour' ),
              ( ['in'], c_double, 'ex' ),
              ( ['in'], c_double, 'ey' ),
              ( ['in'], c_double, 'ez' ),
              ( ['in'], c_double, 'Nux' ),
              ( ['in'], c_double, 'nuy' ),
              ( ['in'], c_double, 'nuz' ),
              ( ['in'], c_double, 'Alfax' ),
              ( ['in'], c_double, 'Alfay' ),
              ( ['in'], c_double, 'Alfaz' ),
              ( ['in'], c_double, 'Rho' ),
              ( ['in'], c_double, 'Fck' ),
              ( ['in'], c_double, 'Fit' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(216)], HRESULT, 'AddConcrete_German_DIN1045_1',
              ( ['in'], BSTR, 'NationalDesignName' ),
              ( ['in'], BSTR, 'MaterialDesignName' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_ulong, 'FillColour' ),
              ( ['in'], c_ulong, 'ContourColour' ),
              ( ['in'], c_double, 'ex' ),
              ( ['in'], c_double, 'ey' ),
              ( ['in'], c_double, 'ez' ),
              ( ['in'], c_double, 'Nux' ),
              ( ['in'], c_double, 'nuy' ),
              ( ['in'], c_double, 'nuz' ),
              ( ['in'], c_double, 'Alfax' ),
              ( ['in'], c_double, 'Alfay' ),
              ( ['in'], c_double, 'Alfaz' ),
              ( ['in'], c_double, 'Rho' ),
              ( ['in'], c_double, 'Fck' ),
              ( ['in'], c_double, 'Fck_cube' ),
              ( ['in'], c_double, 'GammaC' ),
              ( ['in'], c_double, 'Alfacc' ),
              ( ['in'], c_double, 'Fit' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(217)], HRESULT, 'AddConcrete_Swiss_SIA26x',
              ( ['in'], BSTR, 'NationalDesignName' ),
              ( ['in'], BSTR, 'MaterialDesignName' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_ulong, 'FillColour' ),
              ( ['in'], c_ulong, 'ContourColour' ),
              ( ['in'], c_double, 'ex' ),
              ( ['in'], c_double, 'ey' ),
              ( ['in'], c_double, 'ez' ),
              ( ['in'], c_double, 'Nux' ),
              ( ['in'], c_double, 'nuy' ),
              ( ['in'], c_double, 'nuz' ),
              ( ['in'], c_double, 'Alfax' ),
              ( ['in'], c_double, 'Alfay' ),
              ( ['in'], c_double, 'Alfaz' ),
              ( ['in'], c_double, 'Rho' ),
              ( ['in'], c_double, 'Fck' ),
              ( ['in'], c_double, 'GammaC' ),
              ( ['in'], c_double, 'Fit' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(218)], HRESULT, 'AddConcrete_Italian',
              ( ['in'], BSTR, 'NationalDesignName' ),
              ( ['in'], BSTR, 'MaterialDesignName' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_ulong, 'FillColour' ),
              ( ['in'], c_ulong, 'ContourColour' ),
              ( ['in'], c_double, 'ex' ),
              ( ['in'], c_double, 'ey' ),
              ( ['in'], c_double, 'ez' ),
              ( ['in'], c_double, 'Nux' ),
              ( ['in'], c_double, 'nuy' ),
              ( ['in'], c_double, 'nuz' ),
              ( ['in'], c_double, 'Alfax' ),
              ( ['in'], c_double, 'Alfay' ),
              ( ['in'], c_double, 'Alfaz' ),
              ( ['in'], c_double, 'Rho' ),
              ( ['in'], c_double, 'Fck' ),
              ( ['in'], c_double, 'GammaC' ),
              ( ['in'], c_double, 'Alfacc' ),
              ( ['in'], c_double, 'Fit' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(219)], HRESULT, 'IndexOf',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(220)], HRESULT, 'AddTimber',
              ( ['in'], ENationalDesignCode, 'NationalDesignCode' ),
              ( ['in'], BSTR, 'NationalDesignName' ),
              ( ['in'], BSTR, 'MaterialDesignName' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_ulong, 'FillColour' ),
              ( ['in'], c_ulong, 'ContourColour' ),
              ( ['in'], c_double, 'ex' ),
              ( ['in'], c_double, 'ey' ),
              ( ['in'], c_double, 'ez' ),
              ( ['in'], c_double, 'Nux' ),
              ( ['in'], c_double, 'nuy' ),
              ( ['in'], c_double, 'nuz' ),
              ( ['in'], c_double, 'Alfax' ),
              ( ['in'], c_double, 'Alfay' ),
              ( ['in'], c_double, 'Alfaz' ),
              ( ['in'], c_double, 'Rho' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(221)], HRESULT, 'AddAluminium',
              ( ['in'], ENationalDesignCode, 'NationalDesignCode' ),
              ( ['in'], BSTR, 'NationalDesignName' ),
              ( ['in'], BSTR, 'MaterialDesignName' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_ulong, 'FillColour' ),
              ( ['in'], c_ulong, 'ContourColour' ),
              ( ['in'], c_double, 'ex' ),
              ( ['in'], c_double, 'ey' ),
              ( ['in'], c_double, 'ez' ),
              ( ['in'], c_double, 'Nux' ),
              ( ['in'], c_double, 'nuy' ),
              ( ['in'], c_double, 'nuz' ),
              ( ['in'], c_double, 'Alfax' ),
              ( ['in'], c_double, 'Alfay' ),
              ( ['in'], c_double, 'Alfaz' ),
              ( ['in'], c_double, 'Rho' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(222)], HRESULT, 'AddBrick',
              ( ['in'], ENationalDesignCode, 'NationalDesignCode' ),
              ( ['in'], BSTR, 'NationalDesignName' ),
              ( ['in'], BSTR, 'MaterialDesignName' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_ulong, 'FillColour' ),
              ( ['in'], c_ulong, 'ContourColour' ),
              ( ['in'], c_double, 'ex' ),
              ( ['in'], c_double, 'ey' ),
              ( ['in'], c_double, 'ez' ),
              ( ['in'], c_double, 'Nux' ),
              ( ['in'], c_double, 'nuy' ),
              ( ['in'], c_double, 'nuz' ),
              ( ['in'], c_double, 'Alfax' ),
              ( ['in'], c_double, 'Alfay' ),
              ( ['in'], c_double, 'Alfaz' ),
              ( ['in'], c_double, 'Rho' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(223)], HRESULT, 'Clear',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(224)], HRESULT, 'AddFromCatalog',
              ( ['in'], ENationalDesignCode, 'NationalDesignCode' ),
              ( ['in'], BSTR, 'MaterialName' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(225)], HRESULT, 'AddFromCatalogFile',
              ( ['in'], BSTR, 'CatalogFileName' ),
              ( ['in'], BSTR, 'MaterialName' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(226)], HRESULT, 'AddFromDialog',
              ( ['in'], _midlSAFEARRAY(ENationalDesignCode), 'NationalDesignCodes' ),
              ( ['in'], _midlSAFEARRAY(EMaterialType), 'MaterialTypes' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(227)], HRESULT, 'AddFromDialog_vb',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(ENationalDesignCode)), 'NationalDesignCodes' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(EMaterialType)), 'MaterialTypes' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(228)], HRESULT, 'AddSteel_Hungarian_MSZ_vb',
              ( ['in'], BSTR, 'NationalDesignName' ),
              ( ['in'], BSTR, 'MaterialDesignName' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'FillColour' ),
              ( ['in'], c_int, 'ContourColour' ),
              ( ['in'], c_double, 'ex' ),
              ( ['in'], c_double, 'ey' ),
              ( ['in'], c_double, 'ez' ),
              ( ['in'], c_double, 'Nux' ),
              ( ['in'], c_double, 'nuy' ),
              ( ['in'], c_double, 'nuz' ),
              ( ['in'], c_double, 'Alfax' ),
              ( ['in'], c_double, 'Alfay' ),
              ( ['in'], c_double, 'Alfaz' ),
              ( ['in'], c_double, 'Rho' ),
              ( ['in'], c_double, 'SigmaH' ),
              ( ['in'], c_double, 'SigmapH' ),
              ( ['in'], c_double, 'Ry' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(229)], HRESULT, 'AddSteel_EuroCode_vb',
              ( ['in'], BSTR, 'NationalDesignName' ),
              ( ['in'], BSTR, 'MaterialDesignName' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'FillColour' ),
              ( ['in'], c_int, 'ContourColour' ),
              ( ['in'], c_double, 'ex' ),
              ( ['in'], c_double, 'ey' ),
              ( ['in'], c_double, 'ez' ),
              ( ['in'], c_double, 'Nux' ),
              ( ['in'], c_double, 'nuy' ),
              ( ['in'], c_double, 'nuz' ),
              ( ['in'], c_double, 'Alfax' ),
              ( ['in'], c_double, 'Alfay' ),
              ( ['in'], c_double, 'Alfaz' ),
              ( ['in'], c_double, 'Rho' ),
              ( ['in'], c_double, 'Fy' ),
              ( ['in'], c_double, 'Fu' ),
              ( ['in'], c_double, 'Fy40' ),
              ( ['in'], c_double, 'Fu40' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(230)], HRESULT, 'AddSteel_Romanian_STAS_vb',
              ( ['in'], BSTR, 'NationalDesignName' ),
              ( ['in'], BSTR, 'MaterialDesignName' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'FillColour' ),
              ( ['in'], c_int, 'ContourColour' ),
              ( ['in'], c_double, 'ex' ),
              ( ['in'], c_double, 'ey' ),
              ( ['in'], c_double, 'ez' ),
              ( ['in'], c_double, 'Nux' ),
              ( ['in'], c_double, 'nuy' ),
              ( ['in'], c_double, 'nuz' ),
              ( ['in'], c_double, 'Alfax' ),
              ( ['in'], c_double, 'Alfay' ),
              ( ['in'], c_double, 'Alfaz' ),
              ( ['in'], c_double, 'Rho' ),
              ( ['in'], c_double, 'R' ),
              ( ['in'], c_double, 'Rc' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(231)], HRESULT, 'AddSteel_Dutch_NEN_vb',
              ( ['in'], BSTR, 'NationalDesignName' ),
              ( ['in'], BSTR, 'MaterialDesignName' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'FillColour' ),
              ( ['in'], c_int, 'ContourColour' ),
              ( ['in'], c_double, 'ex' ),
              ( ['in'], c_double, 'ey' ),
              ( ['in'], c_double, 'ez' ),
              ( ['in'], c_double, 'Nux' ),
              ( ['in'], c_double, 'nuy' ),
              ( ['in'], c_double, 'nuz' ),
              ( ['in'], c_double, 'Alfax' ),
              ( ['in'], c_double, 'Alfay' ),
              ( ['in'], c_double, 'Alfaz' ),
              ( ['in'], c_double, 'Rho' ),
              ( ['in'], c_double, 'Fy' ),
              ( ['in'], c_double, 'Fu' ),
              ( ['in'], c_double, 'Fy40' ),
              ( ['in'], c_double, 'Fu40' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(232)], HRESULT, 'AddSteel_German_DIN1045_1_vb',
              ( ['in'], BSTR, 'NationalDesignName' ),
              ( ['in'], BSTR, 'MaterialDesignName' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'FillColour' ),
              ( ['in'], c_int, 'ContourColour' ),
              ( ['in'], c_double, 'ex' ),
              ( ['in'], c_double, 'ey' ),
              ( ['in'], c_double, 'ez' ),
              ( ['in'], c_double, 'Nux' ),
              ( ['in'], c_double, 'nuy' ),
              ( ['in'], c_double, 'nuz' ),
              ( ['in'], c_double, 'Alfax' ),
              ( ['in'], c_double, 'Alfay' ),
              ( ['in'], c_double, 'Alfaz' ),
              ( ['in'], c_double, 'Rho' ),
              ( ['in'], c_double, 'Fy' ),
              ( ['in'], c_double, 'Fu' ),
              ( ['in'], c_double, 'Fy40' ),
              ( ['in'], c_double, 'Fu40' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(233)], HRESULT, 'AddSteel_Swiss_SIA26x_vb',
              ( ['in'], BSTR, 'NationalDesignName' ),
              ( ['in'], BSTR, 'MaterialDesignName' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'FillColour' ),
              ( ['in'], c_int, 'ContourColour' ),
              ( ['in'], c_double, 'ex' ),
              ( ['in'], c_double, 'ey' ),
              ( ['in'], c_double, 'ez' ),
              ( ['in'], c_double, 'Nux' ),
              ( ['in'], c_double, 'nuy' ),
              ( ['in'], c_double, 'nuz' ),
              ( ['in'], c_double, 'Alfax' ),
              ( ['in'], c_double, 'Alfay' ),
              ( ['in'], c_double, 'Alfaz' ),
              ( ['in'], c_double, 'Rho' ),
              ( ['in'], c_double, 'Fy' ),
              ( ['in'], c_double, 'Fu' ),
              ( ['in'], c_double, 'Fy40' ),
              ( ['in'], c_double, 'Fu40' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(234)], HRESULT, 'AddSteel_Italian_vb',
              ( ['in'], BSTR, 'NationalDesignName' ),
              ( ['in'], BSTR, 'MaterialDesignName' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'FillColour' ),
              ( ['in'], c_int, 'ContourColour' ),
              ( ['in'], c_double, 'ex' ),
              ( ['in'], c_double, 'ey' ),
              ( ['in'], c_double, 'ez' ),
              ( ['in'], c_double, 'Nux' ),
              ( ['in'], c_double, 'nuy' ),
              ( ['in'], c_double, 'nuz' ),
              ( ['in'], c_double, 'Alfax' ),
              ( ['in'], c_double, 'Alfay' ),
              ( ['in'], c_double, 'Alfaz' ),
              ( ['in'], c_double, 'Rho' ),
              ( ['in'], c_double, 'Fy' ),
              ( ['in'], c_double, 'Fu' ),
              ( ['in'], c_double, 'Fy40' ),
              ( ['in'], c_double, 'Fu40' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(235)], HRESULT, 'AddConcrete_Hungarian_MSZ_vb',
              ( ['in'], BSTR, 'NationalDesignName' ),
              ( ['in'], BSTR, 'MaterialDesignName' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'FillColour' ),
              ( ['in'], c_int, 'ContourColour' ),
              ( ['in'], c_double, 'ex' ),
              ( ['in'], c_double, 'ey' ),
              ( ['in'], c_double, 'ez' ),
              ( ['in'], c_double, 'Nux' ),
              ( ['in'], c_double, 'nuy' ),
              ( ['in'], c_double, 'nuz' ),
              ( ['in'], c_double, 'Alfax' ),
              ( ['in'], c_double, 'Alfay' ),
              ( ['in'], c_double, 'Alfaz' ),
              ( ['in'], c_double, 'Rho' ),
              ( ['in'], c_double, 'SigmabH' ),
              ( ['in'], c_double, 'SigmahH' ),
              ( ['in'], c_double, 'Fit' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(236)], HRESULT, 'AddConcrete_EuroCode_vb',
              ( ['in'], BSTR, 'NationalDesignName' ),
              ( ['in'], BSTR, 'MaterialDesignName' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'FillColour' ),
              ( ['in'], c_int, 'ContourColour' ),
              ( ['in'], c_double, 'ex' ),
              ( ['in'], c_double, 'ey' ),
              ( ['in'], c_double, 'ez' ),
              ( ['in'], c_double, 'Nux' ),
              ( ['in'], c_double, 'nuy' ),
              ( ['in'], c_double, 'nuz' ),
              ( ['in'], c_double, 'Alfax' ),
              ( ['in'], c_double, 'Alfay' ),
              ( ['in'], c_double, 'Alfaz' ),
              ( ['in'], c_double, 'Rho' ),
              ( ['in'], c_double, 'Fck' ),
              ( ['in'], c_double, 'GammaC' ),
              ( ['in'], c_double, 'Alfacc' ),
              ( ['in'], c_double, 'Fit' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(237)], HRESULT, 'AddConcrete_Romanian_STAS_vb',
              ( ['in'], BSTR, 'NationalDesignName' ),
              ( ['in'], BSTR, 'MaterialDesignName' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'FillColour' ),
              ( ['in'], c_int, 'ContourColour' ),
              ( ['in'], c_double, 'ex' ),
              ( ['in'], c_double, 'ey' ),
              ( ['in'], c_double, 'ez' ),
              ( ['in'], c_double, 'Nux' ),
              ( ['in'], c_double, 'nuy' ),
              ( ['in'], c_double, 'nuz' ),
              ( ['in'], c_double, 'Alfax' ),
              ( ['in'], c_double, 'Alfay' ),
              ( ['in'], c_double, 'Alfaz' ),
              ( ['in'], c_double, 'Rho' ),
              ( ['in'], c_double, 'SigmabH' ),
              ( ['in'], c_double, 'SigmahH' ),
              ( ['in'], c_double, 'Fit' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(238)], HRESULT, 'AddConcrete_Dutch_NEN_vb',
              ( ['in'], BSTR, 'NationalDesignName' ),
              ( ['in'], BSTR, 'MaterialDesignName' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'FillColour' ),
              ( ['in'], c_int, 'ContourColour' ),
              ( ['in'], c_double, 'ex' ),
              ( ['in'], c_double, 'ey' ),
              ( ['in'], c_double, 'ez' ),
              ( ['in'], c_double, 'Nux' ),
              ( ['in'], c_double, 'nuy' ),
              ( ['in'], c_double, 'nuz' ),
              ( ['in'], c_double, 'Alfax' ),
              ( ['in'], c_double, 'Alfay' ),
              ( ['in'], c_double, 'Alfaz' ),
              ( ['in'], c_double, 'Rho' ),
              ( ['in'], c_double, 'Fck' ),
              ( ['in'], c_double, 'Fit' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(239)], HRESULT, 'AddConcrete_German_DIN1045_1_vb',
              ( ['in'], BSTR, 'NationalDesignName' ),
              ( ['in'], BSTR, 'MaterialDesignName' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'FillColour' ),
              ( ['in'], c_int, 'ContourColour' ),
              ( ['in'], c_double, 'ex' ),
              ( ['in'], c_double, 'ey' ),
              ( ['in'], c_double, 'ez' ),
              ( ['in'], c_double, 'Nux' ),
              ( ['in'], c_double, 'nuy' ),
              ( ['in'], c_double, 'nuz' ),
              ( ['in'], c_double, 'Alfax' ),
              ( ['in'], c_double, 'Alfay' ),
              ( ['in'], c_double, 'Alfaz' ),
              ( ['in'], c_double, 'Rho' ),
              ( ['in'], c_double, 'Fck' ),
              ( ['in'], c_double, 'Fck_cube' ),
              ( ['in'], c_double, 'GammaC' ),
              ( ['in'], c_double, 'Alfacc' ),
              ( ['in'], c_double, 'Fit' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(240)], HRESULT, 'AddConcrete_Swiss_SIA26x_vb',
              ( ['in'], BSTR, 'NationalDesignName' ),
              ( ['in'], BSTR, 'MaterialDesignName' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'FillColour' ),
              ( ['in'], c_int, 'ContourColour' ),
              ( ['in'], c_double, 'ex' ),
              ( ['in'], c_double, 'ey' ),
              ( ['in'], c_double, 'ez' ),
              ( ['in'], c_double, 'Nux' ),
              ( ['in'], c_double, 'nuy' ),
              ( ['in'], c_double, 'nuz' ),
              ( ['in'], c_double, 'Alfax' ),
              ( ['in'], c_double, 'Alfay' ),
              ( ['in'], c_double, 'Alfaz' ),
              ( ['in'], c_double, 'Rho' ),
              ( ['in'], c_double, 'Fck' ),
              ( ['in'], c_double, 'GammaC' ),
              ( ['in'], c_double, 'Fit' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(241)], HRESULT, 'AddConcrete_Italian_vb',
              ( ['in'], BSTR, 'NationalDesignName' ),
              ( ['in'], BSTR, 'MaterialDesignName' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'FillColour' ),
              ( ['in'], c_int, 'ContourColour' ),
              ( ['in'], c_double, 'ex' ),
              ( ['in'], c_double, 'ey' ),
              ( ['in'], c_double, 'ez' ),
              ( ['in'], c_double, 'Nux' ),
              ( ['in'], c_double, 'nuy' ),
              ( ['in'], c_double, 'nuz' ),
              ( ['in'], c_double, 'Alfax' ),
              ( ['in'], c_double, 'Alfay' ),
              ( ['in'], c_double, 'Alfaz' ),
              ( ['in'], c_double, 'Rho' ),
              ( ['in'], c_double, 'Fck' ),
              ( ['in'], c_double, 'GammaC' ),
              ( ['in'], c_double, 'Alfacc' ),
              ( ['in'], c_double, 'Fit' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(242)], HRESULT, 'AddTimber_vb',
              ( ['in'], ENationalDesignCode, 'NationalDesignCode' ),
              ( ['in'], BSTR, 'NationalDesignName' ),
              ( ['in'], BSTR, 'MaterialDesignName' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'FillColour' ),
              ( ['in'], c_int, 'ContourColour' ),
              ( ['in'], c_double, 'ex' ),
              ( ['in'], c_double, 'ey' ),
              ( ['in'], c_double, 'ez' ),
              ( ['in'], c_double, 'Nux' ),
              ( ['in'], c_double, 'nuy' ),
              ( ['in'], c_double, 'nuz' ),
              ( ['in'], c_double, 'Alfax' ),
              ( ['in'], c_double, 'Alfay' ),
              ( ['in'], c_double, 'Alfaz' ),
              ( ['in'], c_double, 'Rho' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(243)], HRESULT, 'AddAluminium_vb',
              ( ['in'], ENationalDesignCode, 'NationalDesignCode' ),
              ( ['in'], BSTR, 'NationalDesignName' ),
              ( ['in'], BSTR, 'MaterialDesignName' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'FillColour' ),
              ( ['in'], c_int, 'ContourColour' ),
              ( ['in'], c_double, 'ex' ),
              ( ['in'], c_double, 'ey' ),
              ( ['in'], c_double, 'ez' ),
              ( ['in'], c_double, 'Nux' ),
              ( ['in'], c_double, 'nuy' ),
              ( ['in'], c_double, 'nuz' ),
              ( ['in'], c_double, 'Alfax' ),
              ( ['in'], c_double, 'Alfay' ),
              ( ['in'], c_double, 'Alfaz' ),
              ( ['in'], c_double, 'Rho' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(244)], HRESULT, 'AddBrick_vb',
              ( ['in'], ENationalDesignCode, 'NationalDesignCode' ),
              ( ['in'], BSTR, 'NationalDesignName' ),
              ( ['in'], BSTR, 'MaterialDesignName' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'FillColour' ),
              ( ['in'], c_int, 'ContourColour' ),
              ( ['in'], c_double, 'ex' ),
              ( ['in'], c_double, 'ey' ),
              ( ['in'], c_double, 'ez' ),
              ( ['in'], c_double, 'Nux' ),
              ( ['in'], c_double, 'nuy' ),
              ( ['in'], c_double, 'nuz' ),
              ( ['in'], c_double, 'Alfax' ),
              ( ['in'], c_double, 'Alfay' ),
              ( ['in'], c_double, 'Alfaz' ),
              ( ['in'], c_double, 'Rho' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(245), 'propget'], HRESULT, 'UID',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(246), 'propget'], HRESULT, 'IndexOfUID',
              ( ['in'], c_int, 'UID' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
]
################################################################
## code template for IAxisVMMaterials implementation
##class IAxisVMMaterials_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Item(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddDialog(self, NationalDesignCode):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddSteel_Hungarian_MSZ(self, NationalDesignName, MaterialDesignName, Name, FillColour, ContourColour, ex, ey, ez, Nux, nuy, nuz, Alfax, Alfay, Alfaz, Rho, SigmaH, SigmapH, Ry):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddSteel_EuroCode(self, NationalDesignName, MaterialDesignName, Name, FillColour, ContourColour, ex, ey, ez, Nux, nuy, nuz, Alfax, Alfay, Alfaz, Rho, Fy, Fu, Fy40, Fu40):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddSteel_Romanian_STAS(self, NationalDesignName, MaterialDesignName, Name, FillColour, ContourColour, ex, ey, ez, Nux, nuy, nuz, Alfax, Alfay, Alfaz, Rho, R, Rc):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddSteel_Dutch_NEN(self, NationalDesignName, MaterialDesignName, Name, FillColour, ContourColour, ex, ey, ez, Nux, nuy, nuz, Alfax, Alfay, Alfaz, Rho, Fy, Fu, Fy40, Fu40):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddSteel_German_DIN1045_1(self, NationalDesignName, MaterialDesignName, Name, FillColour, ContourColour, ex, ey, ez, Nux, nuy, nuz, Alfax, Alfay, Alfaz, Rho, Fy, Fu, Fy40, Fu40):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddSteel_Swiss_SIA26x(self, NationalDesignName, MaterialDesignName, Name, FillColour, ContourColour, ex, ey, ez, Nux, nuy, nuz, Alfax, Alfay, Alfaz, Rho, Fy, Fu, Fy40, Fu40):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddSteel_Italian(self, NationalDesignName, MaterialDesignName, Name, FillColour, ContourColour, ex, ey, ez, Nux, nuy, nuz, Alfax, Alfay, Alfaz, Rho, Fy, Fu, Fy40, Fu40):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddConcrete_Hungarian_MSZ(self, NationalDesignName, MaterialDesignName, Name, FillColour, ContourColour, ex, ey, ez, Nux, nuy, nuz, Alfax, Alfay, Alfaz, Rho, SigmabH, SigmahH, Fit):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddConcrete_EuroCode(self, NationalDesignName, MaterialDesignName, Name, FillColour, ContourColour, ex, ey, ez, Nux, nuy, nuz, Alfax, Alfay, Alfaz, Rho, Fck, GammaC, Alfacc, Fit):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddConcrete_Romanian_STAS(self, NationalDesignName, MaterialDesignName, Name, FillColour, ContourColour, ex, ey, ez, Nux, nuy, nuz, Alfax, Alfay, Alfaz, Rho, SigmabH, SigmahH, Fit):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddConcrete_Dutch_NEN(self, NationalDesignName, MaterialDesignName, Name, FillColour, ContourColour, ex, ey, ez, Nux, nuy, nuz, Alfax, Alfay, Alfaz, Rho, Fck, Fit):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddConcrete_German_DIN1045_1(self, NationalDesignName, MaterialDesignName, Name, FillColour, ContourColour, ex, ey, ez, Nux, nuy, nuz, Alfax, Alfay, Alfaz, Rho, Fck, Fck_cube, GammaC, Alfacc, Fit):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddConcrete_Swiss_SIA26x(self, NationalDesignName, MaterialDesignName, Name, FillColour, ContourColour, ex, ey, ez, Nux, nuy, nuz, Alfax, Alfay, Alfaz, Rho, Fck, GammaC, Fit):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddConcrete_Italian(self, NationalDesignName, MaterialDesignName, Name, FillColour, ContourColour, ex, ey, ez, Nux, nuy, nuz, Alfax, Alfay, Alfaz, Rho, Fck, GammaC, Alfacc, Fit):
##        '-no docstring-'
##        #return ResultValue
##
##    def IndexOf(self, Name):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddTimber(self, NationalDesignCode, NationalDesignName, MaterialDesignName, Name, FillColour, ContourColour, ex, ey, ez, Nux, nuy, nuz, Alfax, Alfay, Alfaz, Rho):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddAluminium(self, NationalDesignCode, NationalDesignName, MaterialDesignName, Name, FillColour, ContourColour, ex, ey, ez, Nux, nuy, nuz, Alfax, Alfay, Alfaz, Rho):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddBrick(self, NationalDesignCode, NationalDesignName, MaterialDesignName, Name, FillColour, ContourColour, ex, ey, ez, Nux, nuy, nuz, Alfax, Alfay, Alfaz, Rho):
##        '-no docstring-'
##        #return ResultValue
##
##    def Clear(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddFromCatalog(self, NationalDesignCode, MaterialName):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddFromCatalogFile(self, CatalogFileName, MaterialName):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddFromDialog(self, NationalDesignCodes, MaterialTypes):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddFromDialog_vb(self):
##        '-no docstring-'
##        #return NationalDesignCodes, MaterialTypes, ResultValue
##
##    def AddSteel_Hungarian_MSZ_vb(self, NationalDesignName, MaterialDesignName, Name, FillColour, ContourColour, ex, ey, ez, Nux, nuy, nuz, Alfax, Alfay, Alfaz, Rho, SigmaH, SigmapH, Ry):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddSteel_EuroCode_vb(self, NationalDesignName, MaterialDesignName, Name, FillColour, ContourColour, ex, ey, ez, Nux, nuy, nuz, Alfax, Alfay, Alfaz, Rho, Fy, Fu, Fy40, Fu40):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddSteel_Romanian_STAS_vb(self, NationalDesignName, MaterialDesignName, Name, FillColour, ContourColour, ex, ey, ez, Nux, nuy, nuz, Alfax, Alfay, Alfaz, Rho, R, Rc):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddSteel_Dutch_NEN_vb(self, NationalDesignName, MaterialDesignName, Name, FillColour, ContourColour, ex, ey, ez, Nux, nuy, nuz, Alfax, Alfay, Alfaz, Rho, Fy, Fu, Fy40, Fu40):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddSteel_German_DIN1045_1_vb(self, NationalDesignName, MaterialDesignName, Name, FillColour, ContourColour, ex, ey, ez, Nux, nuy, nuz, Alfax, Alfay, Alfaz, Rho, Fy, Fu, Fy40, Fu40):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddSteel_Swiss_SIA26x_vb(self, NationalDesignName, MaterialDesignName, Name, FillColour, ContourColour, ex, ey, ez, Nux, nuy, nuz, Alfax, Alfay, Alfaz, Rho, Fy, Fu, Fy40, Fu40):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddSteel_Italian_vb(self, NationalDesignName, MaterialDesignName, Name, FillColour, ContourColour, ex, ey, ez, Nux, nuy, nuz, Alfax, Alfay, Alfaz, Rho, Fy, Fu, Fy40, Fu40):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddConcrete_Hungarian_MSZ_vb(self, NationalDesignName, MaterialDesignName, Name, FillColour, ContourColour, ex, ey, ez, Nux, nuy, nuz, Alfax, Alfay, Alfaz, Rho, SigmabH, SigmahH, Fit):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddConcrete_EuroCode_vb(self, NationalDesignName, MaterialDesignName, Name, FillColour, ContourColour, ex, ey, ez, Nux, nuy, nuz, Alfax, Alfay, Alfaz, Rho, Fck, GammaC, Alfacc, Fit):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddConcrete_Romanian_STAS_vb(self, NationalDesignName, MaterialDesignName, Name, FillColour, ContourColour, ex, ey, ez, Nux, nuy, nuz, Alfax, Alfay, Alfaz, Rho, SigmabH, SigmahH, Fit):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddConcrete_Dutch_NEN_vb(self, NationalDesignName, MaterialDesignName, Name, FillColour, ContourColour, ex, ey, ez, Nux, nuy, nuz, Alfax, Alfay, Alfaz, Rho, Fck, Fit):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddConcrete_German_DIN1045_1_vb(self, NationalDesignName, MaterialDesignName, Name, FillColour, ContourColour, ex, ey, ez, Nux, nuy, nuz, Alfax, Alfay, Alfaz, Rho, Fck, Fck_cube, GammaC, Alfacc, Fit):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddConcrete_Swiss_SIA26x_vb(self, NationalDesignName, MaterialDesignName, Name, FillColour, ContourColour, ex, ey, ez, Nux, nuy, nuz, Alfax, Alfay, Alfaz, Rho, Fck, GammaC, Fit):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddConcrete_Italian_vb(self, NationalDesignName, MaterialDesignName, Name, FillColour, ContourColour, ex, ey, ez, Nux, nuy, nuz, Alfax, Alfay, Alfaz, Rho, Fck, GammaC, Alfacc, Fit):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddTimber_vb(self, NationalDesignCode, NationalDesignName, MaterialDesignName, Name, FillColour, ContourColour, ex, ey, ez, Nux, nuy, nuz, Alfax, Alfay, Alfaz, Rho):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddAluminium_vb(self, NationalDesignCode, NationalDesignName, MaterialDesignName, Name, FillColour, ContourColour, ex, ey, ez, Nux, nuy, nuz, Alfax, Alfay, Alfaz, Rho):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddBrick_vb(self, NationalDesignCode, NationalDesignName, MaterialDesignName, Name, FillColour, ContourColour, ex, ey, ez, Nux, nuy, nuz, Alfax, Alfay, Alfaz, Rho):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def UID(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def IndexOfUID(self, UID):
##        '-no docstring-'
##        #return Value
##


# values for enumeration 'ETimberDesignResultsError'
tdreCOMError = -100001
tdreLoadCaseIdIndexOutOfBounds = -100002
tdreLoadCombinationIdIndexOutOfBounds = -100003
tdreInvalidAnalysisType = -100004
tdreCombinationTypeNotValidForCurrentNationalDesignCode = -100005
ETimberDesignResultsError = c_int # enum
class AxisVMMovingLoadOnDomain(CoClass):
    'AxisVMMovingLoadOnDomain Object'
    _reg_clsid_ = GUID('{77E41D19-559E-468F-9822-83CBAB484C1E}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMMovingLoadOnDomain(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMMovingLoadOnDomain Object'
    _iid_ = GUID('{44B052D3-5822-44C1-A44E-6DAA44E6F7DC}')
    _idlflags_ = ['dual', 'oleautomation']
AxisVMMovingLoadOnDomain._com_interfaces_ = [IAxisVMMovingLoadOnDomain]
AxisVMMovingLoadOnDomain._outgoing_interfaces_ = [IAxisVMMovingLoadOnDomainEvents]


# values for enumeration 'ELineError'
lneNodeIndexOutOfBounds = -100001
lneReferenceIndexOutOfBounds = -100002
lneReadOnlyPropertyForThisLineType = -100003
lnePropertyNotValidForThisLineType = -100004
lneMaterialIndexOutOfBounds = -100005
lneCrossSectionIndexOutOfBounds = -100006
lneNoLinesAreSelected = -100007
lneLineHasNoMidPoint = -100008
lneEmptyLineList = -100009
lneSectionIndexOutOfBounds = -100010
lneNotBeam = -100011
lneNotGap = -100012
lneNotRib = -100013
lneNotSpring = -100014
lneNotTruss = -100015
lneNodeNotOnLine = -100016
lneErrorSplittingLine = -100017
lneNMustBeGreaterThan1 = -100018
lneIllegalServiceClassValue = -100019
lneDomainIndexOutOfBounds = -100020
lneStoreyIdOutOfBounds = -100021
lneInvalidLineType = -100022
lneReinforcementParametersNotExsist = -100023
lneInvalidColumnRebarsId = -100024
lneInvalidConcreteMaterialId = -100025
lneInvalidRebarSteelGradeId = -100026
lneInvalidRelease = -100027
lneInvalidLineTypeOrFEnumber = -100028
lneInvalidFunctionIDofRelease = -100029
lneReleaseInitAndLimitMustBe0 = -100030
lneFunctionIdMustBe0 = -100031
lneLinesNotContinuous = -100032
lneStartEndCrossSectionTypeIncompatible = -100033
lneInvalidRCCheckingParameters = -100034
lneRCShrinkageEpsMustBePositive = -100035
lneStirrupParametersAreInvalid = -100036
lneShearCrackAngleIsInvalid = -100037
lneInvalidSteelMaterialId = -100038
lneInvalidStiffnessReduction = -100039
lneStiffnessReductionNotAllowed = -100040
lneInvalidStiffnessReductionMat = -100041
lneReleaseFunctionIndexError = -100042
lneReleaseInvalidType = -100043
lneInvalidRefZ = -100044
lneReleaseInvalidMaterial = -100045
lneReleaseInvalidComponent = -100046
ELineError = c_int # enum
class RLoadSurfaceThermal(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{6315AE88-D2E7-4214-B128-5CD3640C2934}')
RLoadSurfaceThermal._fields_ = [
    ('LoadCaseId', c_int),
    ('SurfaceId', c_int),
    ('Tref', c_double),
    ('Ttop', c_double),
    ('Tbot', c_double),
]
assert sizeof(RLoadSurfaceThermal) == 32, sizeof(RLoadSurfaceThermal)
assert alignment(RLoadSurfaceThermal) == 8, alignment(RLoadSurfaceThermal)

# values for enumeration 'ECrossSectionShapeEx'
csseAll = 0
csseCustom = 1
csseRectangular = 2
csseI = 3
csseDoubleI = 4
csseWedgedI = 5
csseAsymmetricI = 6
cssePipe = 7
csseRegularPolygon = 8
csseBox = 9
csseDoubleIBox = 10
csseU = 11
csseDoubleUOpened = 12
csseDoubleUClosed = 13
csseL = 14
csseDoubleL = 15
csseDoubleLFlange = 16
csseT = 17
csseZ = 18
csseC = 19
csseS = 20
csseJ = 21
csseCircle = 22
csseRectangleRounded = 23
csseRectangleHollow = 24
csseIHaunched = 25
csseTWallHaunched = 26
csseTTopHaunched = 27
csseCircleHollow = 28
csseTrapezoid = 29
csse2LX = 30
csse4L = 31
csseCross = 32
csseCompositePipe = 33
csseCompositeBox = 34
csseCompositeRound = 35
csseCompositeRectangle = 36
csseDoubleWedgedI = 37
csseHSQ = 38
csseHSQA = 39
csse2IX = 40
csseComposite2IX = 41
csseIFB = 42
csseSFB = 43
csseDoubleLClosed = 44
ECrossSectionShapeEx = c_int # enum

# values for enumeration 'ECrossSectionRegion'
cssr_Unknown = 0
cssr_EU = 1
cssr_HU = 2
cssr_RO = 3
cssr_US = 4
cssr_NL = 5
cssr_CN = 6
cssr_SK = 7
cssr_CA = 8
cssr_SE = 9
cssr_BR = 10
cssr_PL = 11
cssr_RU = 12
cssr_CH = 13
cssr_CZ = 14
cssr_DE = 15
cssr_FR = 16
cssr_ES = 17
cssr_IT = 18
cssr_AR = 19
cssr_AT = 20
cssr_BE = 21
cssr_BG = 22
cssr_DK = 23
cssr_EE = 24
cssr_FI = 25
cssr_GR = 26
cssr_IN = 27
cssr_JP = 28
cssr_LV = 29
cssr_LT = 30
cssr_NO = 31
cssr_RS = 32
cssr_SI = 33
cssr_ZA = 34
cssr_TR = 35
cssr_UK = 36
cssr_AU = 37
cssr_NZ = 38
cssr_PT = 39
cssr_HR = 40
cssr_KR = 41
cssr_IL = 42
ECrossSectionRegion = c_int # enum
RCrossSectionTable._fields_ = [
    ('CrossSectionShape', ECrossSectionShapeEx),
    ('ProviderID', c_int),
    ('CrossSectionRegion', ECrossSectionRegion),
    ('Id', c_int),
]
assert sizeof(RCrossSectionTable) == 16, sizeof(RCrossSectionTable)
assert alignment(RCrossSectionTable) == 4, alignment(RCrossSectionTable)
class IAxisVMMovingLoadOnBeam(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMMovingLoadOnBeam Object'
    _iid_ = GUID('{82BA79DC-502F-4522-BEE4-7793321689C7}')
    _idlflags_ = ['dual', 'oleautomation']
class RMovingLoadOnBeamItem(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{D10AFA3A-2C12-467C-BFD2-2899C3E13CC6}')

# values for enumeration 'ELoadType'
ltNodalForce = 0
ltBeamConcentrated = 1
ltBeamDistributed = 2
ltBeamThermal = 3
ltBeamStress = 4
ltBeamFault = 5
ltBeamEnd = 6
ltBeamSelfWeight = 7
ltTrussThermal = 8
ltTrussStress = 9
ltTrussFault = 10
ltTrussSelfWeight = 11
ltSurfaceSelfWeight = 12
ltSurfaceDistributed = 13
ltSurfaceEdge = 14
ltSurfaceThermal = 15
ltSurfaceStress = 16
ltBeamInfluence = 17
ltDomainSelfWeight = 18
ltDomainDistributed = 19
ltDomainConstant = 19
ltDomainEdge = 20
ltDomainThermal = 21
ltDomainStress = 22
ltRibSelfWeight = 23
ltRibThermal = 24
ltRibConcentrated = 25
ltRibDistributed = 26
ltSupportDisplacement = 27
ltDomainConcentrated = 28
ltSurfaceConcentrated = 30
ltDomainPolyArea = 33
ltDomainLinear = 34
ltDomainFluid = 36
ltSurfaceFluid = 37
ltLoadDomainPolyLine = 38
ltSurfaceToBeam = 39
ltDomainPolyAssoc = 40
ltSurfaceToBeamAssoc = 41
ltNone = -1
ltDynamicNodalForce = 42
ltDynamicNodalAcceleration = 43
ltDynamicNodalSupportAcceleration = 44
ltBeamMemberConcentrated = 45
ltBeamMemberDistributed = 46
ltRibMemberConcentrated = 47
ltRibMemberDistributed = 48
ELoadType = c_int # enum
IAxisVMMovingLoadOnBeam._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'ItemCount',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202)], HRESULT, 'AddItem',
              ( ['in', 'out'], POINTER(RMovingLoadOnBeamItem), 'MovingLoadOnBeamItem' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(203)], HRESULT, 'DeleteItem',
              ( ['in'], c_int, 'ItemIndex' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204), 'propget'], HRESULT, 'ItemType',
              ( ['in'], c_int, 'ItemIndex' ),
              ( ['out', 'retval'], POINTER(ELoadType), 'Value' )),
    COMMETHOD([dispid(205)], HRESULT, 'GetItem',
              ( ['in'], c_int, 'ItemIndex' ),
              ( ['in', 'out'], POINTER(RMovingLoadOnBeamItem), 'MovingLoadOnBeamItem' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'SetItem',
              ( ['in'], c_int, 'ItemIndex' ),
              ( ['in', 'out'], POINTER(RMovingLoadOnBeamItem), 'MovingLoadOnBeamItem' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'GetPath',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'Path' ),
              ( ['out'], POINTER(c_int), 'StartNode' ),
              ( ['out'], POINTER(c_int), 'EndNode' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208)], HRESULT, 'SetPath',
              ( ['in'], _midlSAFEARRAY(c_int), 'Path' ),
              ( ['in'], c_int, 'StartNode' ),
              ( ['in'], c_int, 'EndNode' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209), 'propget'], HRESULT, 'Steps',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(209), 'propput'], HRESULT, 'Steps',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(210), 'propget'], HRESULT, 'RunningMode',
              ( ['out', 'retval'], POINTER(ERunningMode), 'Value' )),
    COMMETHOD([dispid(210), 'propput'], HRESULT, 'RunningMode',
              ( ['in'], ERunningMode, 'Value' )),
    COMMETHOD([dispid(211), 'propget'], HRESULT, 'StructureMode',
              ( ['out', 'retval'], POINTER(EStructureMode), 'Value' )),
    COMMETHOD([dispid(211), 'propput'], HRESULT, 'StructureMode',
              ( ['in'], EStructureMode, 'Value' )),
    COMMETHOD([dispid(212), 'propget'], HRESULT, 'LoadCaseId',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(212), 'propput'], HRESULT, 'LoadCaseId',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(213)], HRESULT, 'Clear',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(214)], HRESULT, 'SetPath_vb',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Path' ),
              ( ['in'], c_int, 'StartNode' ),
              ( ['in'], c_int, 'EndNode' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMMovingLoadOnBeam implementation
##class IAxisVMMovingLoadOnBeam_Impl(object):
##    @property
##    def ItemCount(self):
##        '-no docstring-'
##        #return Value
##
##    def AddItem(self):
##        '-no docstring-'
##        #return MovingLoadOnBeamItem, ResultValue
##
##    def DeleteItem(self, ItemIndex):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def ItemType(self, ItemIndex):
##        '-no docstring-'
##        #return Value
##
##    def GetItem(self, ItemIndex):
##        '-no docstring-'
##        #return MovingLoadOnBeamItem, ResultValue
##
##    def SetItem(self, ItemIndex):
##        '-no docstring-'
##        #return MovingLoadOnBeamItem, ResultValue
##
##    def GetPath(self):
##        '-no docstring-'
##        #return Path, StartNode, EndNode, ResultValue
##
##    def SetPath(self, Path, StartNode, EndNode):
##        '-no docstring-'
##        #return ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Steps = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    RunningMode = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    StructureMode = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LoadCaseId = property(_get, _set, doc = _set.__doc__)
##
##    def Clear(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def SetPath_vb(self, StartNode, EndNode):
##        '-no docstring-'
##        #return Path, ResultValue
##

class RLoadBeamInfluence(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{2631FD24-9F6B-4AE8-A842-B2C9427832A2}')
RLoadBeamInfluence._fields_ = [
    ('LoadCaseId', c_int),
    ('LineId', c_int),
    ('ex', c_double),
    ('ey', c_double),
    ('ez', c_double),
    ('Fx', c_double),
    ('Fy', c_double),
    ('Fz', c_double),
    ('Position', c_double),
]
assert sizeof(RLoadBeamInfluence) == 64, sizeof(RLoadBeamInfluence)
assert alignment(RLoadBeamInfluence) == 8, alignment(RLoadBeamInfluence)
class RLoadBeamStress(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{E88842BE-DCE7-4C94-A186-BE31A4D0BB8B}')
RLoadBeamStress._fields_ = [
    ('LoadCaseId', c_int),
    ('LineId', c_int),
    ('P', c_double),
]
assert sizeof(RLoadBeamStress) == 16, sizeof(RLoadBeamStress)
assert alignment(RLoadBeamStress) == 8, alignment(RLoadBeamStress)
class IAxisVMCrossSectionTablesEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for CrossSectionTables Object'
    _iid_ = GUID('{9449D71F-9518-46A7-B399-E8BDAD420E6C}')
    _idlflags_ = []
    _methods_ = []
IAxisVMCrossSectionTablesEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrCode' )),
]

# values for enumeration 'EResultType'
rtLoadCase = 0
rtLoadCombination = 1
rtEnvelope = 2
rtCritical = 3
EResultType = c_int # enum
class RNodalSupportForceValues(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{BDFC99CF-3040-4CC2-8B20-10C69B94CBDB}')
RNodalSupportForceValues._fields_ = [
    ('Rx', c_double),
    ('Ry', c_double),
    ('Rz', c_double),
    ('Rxx', c_double),
    ('Ryy', c_double),
    ('Rzz', c_double),
    ('Rr', c_double),
    ('Rrr', c_double),
]
assert sizeof(RNodalSupportForceValues) == 64, sizeof(RNodalSupportForceValues)
assert alignment(RNodalSupportForceValues) == 8, alignment(RNodalSupportForceValues)
class RBulkWSLineSupport(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{82C50D21-EFA0-485A-93E3-6063341D4D4A}')
RBulkWSLineSupport._fields_ = [
    ('SupportType', ELineSupportType),
    ('LineId', c_int),
    ('Stiffnesses', RStiffnesses),
    ('NonLinearity', RNonLinearity),
    ('Resistances', RResistances),
    ('ShearStiffness', c_double),
    ('SurfaceId1', c_int),
    ('SurfaceId2', c_int),
    ('DomainId1', c_int),
    ('DomainId2', c_int),
    ('ReferenceId', c_int),
]
assert sizeof(RBulkWSLineSupport) == 160, sizeof(RBulkWSLineSupport)
assert alignment(RBulkWSLineSupport) == 8, alignment(RBulkWSLineSupport)
RTableCrossSectionID._fields_ = [
    ('TableID', c_int),
    ('CrossSectionID', c_int),
]
assert sizeof(RTableCrossSectionID) == 8, sizeof(RTableCrossSectionID)
assert alignment(RTableCrossSectionID) == 4, alignment(RTableCrossSectionID)

# values for enumeration 'EStoreyAutoSearchStyle'
sassDomain = 0
sassBeam = 1
sassBoth = 2
EStoreyAutoSearchStyle = c_int # enum
IAxisVMStoreys._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202)], HRESULT, 'Clear',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(203)], HRESULT, 'Add',
              ( ['in'], c_double, 'z' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'IndexOfZ',
              ( ['in'], c_double, 'z' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206), 'propget'], HRESULT, 'HasEmptyStorey',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(207)], HRESULT, 'DeleteEmptyStoreys',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208), 'propget'], HRESULT, 'Name',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(208), 'propput'], HRESULT, 'Name',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(209), 'propget'], HRESULT, 'LevelId',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(210), 'propget'], HRESULT, 'LevelZ',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(210), 'propput'], HRESULT, 'LevelZ',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(211), 'propget'], HRESULT, 'Height',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(212)], HRESULT, 'GetItem',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(BSTR), 'Name' ),
              ( ['out'], POINTER(c_int), 'LevelId' ),
              ( ['out'], POINTER(c_double), 'z' ),
              ( ['out'], POINTER(c_double), 'Height' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(213)], HRESULT, 'SetItem',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'z' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(214), 'propget'], HRESULT, 'AutoSearchStyle',
              ( ['out', 'retval'], POINTER(EStoreyAutoSearchStyle), 'Value' )),
    COMMETHOD([dispid(214), 'propput'], HRESULT, 'AutoSearchStyle',
              ( ['in'], EStoreyAutoSearchStyle, 'Value' )),
    COMMETHOD([dispid(215)], HRESULT, 'AutoSearch',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'ResultValue' )),
]
################################################################
## code template for IAxisVMStoreys implementation
##class IAxisVMStoreys_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def Clear(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def Add(self, z, Name):
##        '-no docstring-'
##        #return ResultValue
##
##    def IndexOfZ(self, z):
##        '-no docstring-'
##        #return ResultValue
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def HasEmptyStorey(self):
##        '-no docstring-'
##        #return Value
##
##    def DeleteEmptyStoreys(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def LevelId(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    LevelZ = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Height(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def GetItem(self, Index):
##        '-no docstring-'
##        #return Name, LevelId, z, Height, ResultValue
##
##    def SetItem(self, Index, Name, z):
##        '-no docstring-'
##        #return ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    AutoSearchStyle = property(_get, _set, doc = _set.__doc__)
##
##    def AutoSearch(self):
##        '-no docstring-'
##        #return ResultValue
##

class RLoadDomainThermal(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{96FF53FE-86E0-423E-9477-C50EF4AE90AB}')
RLoadDomainThermal._fields_ = [
    ('LoadCaseId', c_int),
    ('DomainId', c_int),
    ('Tref', c_double),
    ('Tsup', c_double),
    ('Tinf', c_double),
]
assert sizeof(RLoadDomainThermal) == 32, sizeof(RLoadDomainThermal)
assert alignment(RLoadDomainThermal) == 8, alignment(RLoadDomainThermal)
IAxisVMResultsEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrCode' )),
]

# values for enumeration 'ERCBeamShape'
rcbsRectangle = 0
rcbsDownStand = 1
rcbsUpStand = 2
ERCBeamShape = c_int # enum

# values for enumeration 'EStructClass_EC'
scS1 = 0
scS2 = 1
scS3 = 2
scS4 = 3
scS5 = 4
scS6 = 5
EStructClass_EC = c_int # enum
class RLineSupportForceValues(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{F25ECC13-D83E-4C54-847E-510DDEDEFEC4}')
RLineSupportForceValues._fields_ = [
    ('Rx', c_double),
    ('Ry', c_double),
    ('Rz', c_double),
    ('Rxx', c_double),
    ('Ryy', c_double),
    ('Rzz', c_double),
    ('Rr', c_double),
    ('Rrr', c_double),
]
assert sizeof(RLineSupportForceValues) == 64, sizeof(RLineSupportForceValues)
assert alignment(RLineSupportForceValues) == 8, alignment(RLineSupportForceValues)
class IAxisVMCatalog(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMCatalog Object'
    _iid_ = GUID('{EDB42DE9-3758-42AB-8D8A-8D465B2E4B00}')
    _idlflags_ = ['dual', 'oleautomation']

# values for enumeration 'ECrossSectionShape'
cssAll = 0
cssCustom = 1
cssRectangular = 2
cssI = 4
cssDoubleI = 8
cssWedgedI = 16
cssAsymmetricI = 32
cssPipe = 64
cssRegularPolygon = 128
cssBox = 256
cssDoubleIBox = 512
cssU = 1024
cssDoubleUOpened = 2048
cssDoubleUClosed = 4096
cssL = 8192
cssDoubleL = 16384
cssDoubleLFlange = 32768
cssT = 65536
cssZ = 131072
cssC = 262144
cssS = 524288
cssJ = 1048576
cssCircle = 2097152
cssRectangleRounded = 4194304
cssRectangleHollow = 8388608
cssIHaunched = 16777216
cssTWallHaunched = 33554432
cssTTopHaunched = 67108864
cssCircleHollow = 134217728
cssTrapezoid = 268435456
css2LX = 536870912
css4L = 1073741824
ECrossSectionShape = c_int # enum
class AxisVMCrossSection(CoClass):
    'AxisVMCrossSection Object'
    _reg_clsid_ = GUID('{DC885C90-EDA8-4FC6-A714-038C9B69CE4F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMCrossSection(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMCrossSection Object'
    _iid_ = GUID('{699034A9-2F75-4569-9AD8-A8F2EE6CF48C}')
    _idlflags_ = ['dual', 'oleautomation']
AxisVMCrossSection._com_interfaces_ = [IAxisVMCrossSection]

class AxisVMCrossSectionTables(CoClass):
    'AxisVMCrossSectionTables Object'
    _reg_clsid_ = GUID('{EF64F2AD-D9CD-440F-9F9F-6BC07D989F3F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
AxisVMCrossSectionTables._com_interfaces_ = [IAxisVMCrossSectionTables]
AxisVMCrossSectionTables._outgoing_interfaces_ = [IAxisVMCrossSectionTablesEvents]

class AxisVMCrossSectionTable(CoClass):
    'AxisVMCrossSectionTables Object'
    _reg_clsid_ = GUID('{88DB0500-4453-49E9-9454-C531FBBEB23F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMCrossSectionTableEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for CrossSectionTable Object'
    _iid_ = GUID('{0E9F91DC-C37B-4C07-9FC1-4ED0426AF72B}')
    _idlflags_ = []
    _methods_ = []
AxisVMCrossSectionTable._com_interfaces_ = [IAxisVMCrossSectionTable]
AxisVMCrossSectionTable._outgoing_interfaces_ = [IAxisVMCrossSectionTableEvents]

IAxisVMCatalog._methods_ = [
    COMMETHOD([dispid(201), helpstring('caller must free the Names SafeArray!')], HRESULT, 'GetMaterialNames',
              ( ['in'], ENationalDesignCode, 'DesignCode' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Names' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(202), helpstring('caller must free the Names SafeArray!')], HRESULT, 'GetCrossSectionNames',
              ( ['in'], ECrossSectionShape, 'CrossSectionShape' ),
              ( ['in'], BSTR, 'TableName' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Names' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(203)], HRESULT, 'GetCrossSectionTableNames',
              ( ['in'], ECrossSectionShape, 'CrossSectionShape' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'TableNames' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'GetMaterial',
              ( ['in'], ENationalDesignCode, 'DesignCode' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['out'], POINTER(POINTER(AxisVMMaterial)), 'Material' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205)], HRESULT, 'GetCrossSection',
              ( ['in'], ECrossSectionShape, 'CrossSectionShape' ),
              ( ['in'], BSTR, 'TableName' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['out'], POINTER(POINTER(AxisVMCrossSection)), 'CrossSection' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206), helpstring('caller must free the Names SafeArray!')], HRESULT, 'GetMaterialNamesByType',
              ( ['in'], ENationalDesignCode, 'DesignCode' ),
              ( ['in'], EMaterialType, 'MaterialType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Names' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207), helpstring('caller must free the Names SafeArray!')], HRESULT, 'GetRebarSteelGradeNames',
              ( ['in'], ENationalDesignCode, 'DesignCode' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Names' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208), helpstring('caller must free the Manufacturers!')], HRESULT, 'GetXLAMmanufacturers',
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Manufacturers' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209), helpstring('caller must free the XLAMnames!')], HRESULT, 'GetXLAMnamesByManufacturers',
              ( ['in'], BSTR, 'Manufacturer' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'XLAMnames' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(210), helpstring('caller must free the Names SafeArray!')], HRESULT, 'GetCrossSectionNamesEx',
              ( ['in'], ECrossSectionShapeEx, 'CrossSectionShape' ),
              ( ['in'], BSTR, 'TableName' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Names' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(211)], HRESULT, 'GetCrossSectionTableNamesEx',
              ( ['in'], ECrossSectionShapeEx, 'CrossSectionShape' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'TableNames' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(212)], HRESULT, 'GetCrossSectionEx',
              ( ['in'], ECrossSectionShapeEx, 'CrossSectionShape' ),
              ( ['in'], BSTR, 'TableName' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['out'], POINTER(POINTER(AxisVMCrossSection)), 'CrossSection' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(213)], HRESULT, 'GetAllTables',
              ( ['out'], POINTER(POINTER(AxisVMCrossSectionTables)), 'CrossSectionTables' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(214)], HRESULT, 'GetTableCrossSections',
              ( ['in'], c_int, 'TableID' ),
              ( ['out'], POINTER(POINTER(AxisVMCrossSectionTable)), 'CrossSectionTable' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(215)], HRESULT, 'GetCrossSection_V154',
              ( ['in'], RTableCrossSectionID, 'CrossSectionNameID' ),
              ( ['out'], POINTER(POINTER(AxisVMCrossSection)), 'CrossSection' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMCatalog implementation
##class IAxisVMCatalog_Impl(object):
##    def GetMaterialNames(self, DesignCode):
##        'caller must free the Names SafeArray!'
##        #return Names, ResultValue
##
##    def GetCrossSectionNames(self, CrossSectionShape, TableName):
##        'caller must free the Names SafeArray!'
##        #return Names, ResultValue
##
##    def GetCrossSectionTableNames(self, CrossSectionShape):
##        '-no docstring-'
##        #return TableNames, ResultValue
##
##    def GetMaterial(self, DesignCode, Name):
##        '-no docstring-'
##        #return Material, ResultValue
##
##    def GetCrossSection(self, CrossSectionShape, TableName, Name):
##        '-no docstring-'
##        #return CrossSection, ResultValue
##
##    def GetMaterialNamesByType(self, DesignCode, MaterialType):
##        'caller must free the Names SafeArray!'
##        #return Names, ResultValue
##
##    def GetRebarSteelGradeNames(self, DesignCode):
##        'caller must free the Names SafeArray!'
##        #return Names, ResultValue
##
##    def GetXLAMmanufacturers(self):
##        'caller must free the Manufacturers!'
##        #return Manufacturers, ResultValue
##
##    def GetXLAMnamesByManufacturers(self, Manufacturer):
##        'caller must free the XLAMnames!'
##        #return XLAMnames, ResultValue
##
##    def GetCrossSectionNamesEx(self, CrossSectionShape, TableName):
##        'caller must free the Names SafeArray!'
##        #return Names, ResultValue
##
##    def GetCrossSectionTableNamesEx(self, CrossSectionShape):
##        '-no docstring-'
##        #return TableNames, ResultValue
##
##    def GetCrossSectionEx(self, CrossSectionShape, TableName, Name):
##        '-no docstring-'
##        #return CrossSection, ResultValue
##
##    def GetAllTables(self):
##        '-no docstring-'
##        #return CrossSectionTables, ResultValue
##
##    def GetTableCrossSections(self, TableID):
##        '-no docstring-'
##        #return CrossSectionTable, ResultValue
##
##    def GetCrossSection_V154(self, CrossSectionNameID):
##        '-no docstring-'
##        #return CrossSection, ResultValue
##


# values for enumeration 'EMembersSupportsError'
mseSectionIdOutOfBounds = -100001
msePadFootingNotDefined = -100002
mseInvalidType = -100003
mseStiffnessCalcParamsNotDefined = -100004
mseInvalidRefType = -100005
mseMaterialIndexOutOfBounds = -100006
EMembersSupportsError = c_int # enum

# values for enumeration 'ESurfaceVertexType'
svtContourPoint = 0
svtContourLineMidPoint = 1
svtCenterPoint = 2
ESurfaceVertexType = c_int # enum

# values for enumeration 'EVirtualBeamError'
vbeDomainIndexOutOfBounds = -100001
vbeDomainIndexIsInvalid = -100002
vbeDomainListIsEmpty = -100003
vbeChainIndexIsInvalid = -100004
vbeDuplication = -100005
vbeInvalidParameters = -100006
vbeInvalidReferenceParams = -100007
vbeVirtualBeamNoSection = -100008
vbeInvalidSections = -100009
EVirtualBeamError = c_int # enum
class AxisVMSpringParam(CoClass):
    'AxisVMSpringParam Object'
    _reg_clsid_ = GUID('{A17F4820-5316-41B4-BB8A-F37E00ECDB9C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMSpringParam(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMSpringParam Object'
    _iid_ = GUID('{97416DC8-CE7E-47C4-9470-07882B746CBE}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMSpringParamEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMSpringParam Object'
    _iid_ = GUID('{12B0E4AC-7BF9-42B4-8390-300DCBD542E1}')
    _idlflags_ = []
    _methods_ = []
AxisVMSpringParam._com_interfaces_ = [IAxisVMSpringParam]
AxisVMSpringParam._outgoing_interfaces_ = [IAxisVMSpringParamEvents]

IAxisVMSpringParams._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202)], HRESULT, 'Clear',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(203)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205)], HRESULT, 'Add',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], POINTER(RSpringParam), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'IndexOfName',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'IndexOfUID',
              ( ['in'], c_int, 'UID' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208), 'propget'], HRESULT, 'Name',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(208), 'propput'], HRESULT, 'Name',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(209), 'propget'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(AxisVMSpringParam)), 'Value' )),
    COMMETHOD([dispid(210), 'propget'], HRESULT, 'MaxNameLength',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(211), 'propget'], HRESULT, 'UID',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(212)], HRESULT, 'Add_V161',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], POINTER(RSpringParam_V161), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMSpringParams implementation
##class IAxisVMSpringParams_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def Clear(self):
##        '-no docstring-'
##        #return Value
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def Add(self, Name, Value):
##        '-no docstring-'
##        #return ResultValue
##
##    def IndexOfName(self, Name):
##        '-no docstring-'
##        #return ResultValue
##
##    def IndexOfUID(self, UID):
##        '-no docstring-'
##        #return ResultValue
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Item(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def MaxNameLength(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def UID(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def Add_V161(self, Name, Value):
##        '-no docstring-'
##        #return ResultValue
##


# values for enumeration 'EDisplacementSystem'
dsLocal = 0
dsGlobal = 1
EDisplacementSystem = c_int # enum
IAxisVMCustomPartsEvents._disp_methods_ = [
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]
class AxisVMSupports(CoClass):
    'AxisVMSupports Object'
    _reg_clsid_ = GUID('{4B040C10-C74A-4B84-80BE-DE4D21DC2D9A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMSupports(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMSupports Object'
    _iid_ = GUID('{B124CD75-DF3B-4B21-904A-E7C287A26D64}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMSupportsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMSupports Object'
    _iid_ = GUID('{6CD81003-B4EF-4CED-9AC3-AFC00CA52A3B}')
    _idlflags_ = []
    _methods_ = []
AxisVMSupports._com_interfaces_ = [IAxisVMSupports]
AxisVMSupports._outgoing_interfaces_ = [IAxisVMSupportsEvents]


# values for enumeration 'EPlaneToleranceType'
ptRelativePerThousand = 0
ptAbsolute = 1
EPlaneToleranceType = c_int # enum
IAxisVMDrawingsLibrary._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'Name',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(202), 'propput'], HRESULT, 'Name',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(203)], HRESULT, 'AddWindow',
              ( ['in'], c_int, 'WindowIndex' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'AddWindows',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205)], HRESULT, 'Delete',
              ( ['in'], c_int, 'WindowIndex' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'DisplayDrawing',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'WindowIndex' ),
              ( ['in'], ELongBoolean, 'RestoreResultComponent' ),
              ( ['in'], ELongBoolean, 'Units' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMDrawingsLibrary implementation
##class IAxisVMDrawingsLibrary_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def AddWindow(self, WindowIndex, Name):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddWindows(self, Name):
##        '-no docstring-'
##        #return ResultValue
##
##    def Delete(self, WindowIndex):
##        '-no docstring-'
##        #return ResultValue
##
##    def DisplayDrawing(self, Index, WindowIndex, RestoreResultComponent, Units):
##        '-no docstring-'
##        #return ResultValue
##


# values for enumeration 'ELanguage'
lngEnglish = 0
lngHungarian = 1
lngGerman = 2
lngRomanian = 3
lngSpanish = 4
lngItalian = 5
lngRussian = 6
lngPortuguese = 7
lngSerbian = 8
lngDutch = 9
lngFrench = 10
lngHebrew = 11
lngArabic = 12
lngCzech = 13
lngSlovakian = 14
lngBrasilianPortuguese = 15
lngGreek = 16
lngCroatian = 17
lngPolish = 18
lngBulgarian = 19
ELanguage = c_int # enum

# values for enumeration 'ECompanyLogoPosition'
clpNoLogo = 0
clpLeft = 1
clpRight = 2
clpTopLeft = 3
clpTopCenter = 4
clpTopRight = 5
ECompanyLogoPosition = c_int # enum

# values for enumeration 'ELine3dType'
ltStraightLine3d = 0
ltCircleArc3d = 1
ELine3dType = c_int # enum

# values for enumeration 'EDegreeOfFreedom'
dofFree = 0
dofXfix = 1
dofYfix = 2
dofZfix = 4
dofXXfix = 8
dofYYfix = 16
dofZZfix = 32
dofwfix = 64
dofTrussAndMembraneXZ = 58
dofFrameXZ = 42
dofPlateXY = 35
dofPlateXZ = 21
dofPlateYZ = 14
dofFrameXY = 28
dofFrameYZ = 49
EDegreeOfFreedom = c_int # enum

# values for enumeration 'ESeismicDuctilityClass'
sdc_DCM = 0
sdc_DCH = 1
ESeismicDuctilityClass = c_int # enum
class IAxisVMLoadPanel(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMLoadPanel Object'
    _iid_ = GUID('{28CA3B09-AD3F-4E7E-9DF0-FFFC359E8613}')
    _idlflags_ = ['dual', 'oleautomation']
class RLoadPanelEdgeParams(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{2CADAC70-F460-42A1-BE1B-CBDF8A5F77D5}')

# values for enumeration 'ELoadPanelEdgeType'
lpetNone = 0
lpetParapet = 1
lpetWall = 2
ELoadPanelEdgeType = c_int # enum
RLoadPanelEdgeParams._fields_ = [
    ('LoadPanelEdgeType', ELoadPanelEdgeType),
    ('h', c_double),
    ('Alpha', c_double),
    ('b_1', c_double),
]
assert sizeof(RLoadPanelEdgeParams) == 32, sizeof(RLoadPanelEdgeParams)
assert alignment(RLoadPanelEdgeParams) == 8, alignment(RLoadPanelEdgeParams)

# values for enumeration 'ELoadPanelContourType'
lpctUserDefined = 0
lpctAssociated = 1
ELoadPanelContourType = c_int # enum
IAxisVMLoadPanel._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'EdgeCount',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'SelectedEdge',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(202), 'propput'], HRESULT, 'SelectedEdge',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], ELongBoolean, 'Value' )),
    COMMETHOD([dispid(203)], HRESULT, 'SetAllEdgeParameters',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RLoadPanelEdgeParams)), 'AllEdgeParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(204)], HRESULT, 'SetEdgeParameters',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RLoadPanelEdgeParams), 'EdgeParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(205)], HRESULT, 'GetAllEdgeParameters',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RLoadPanelEdgeParams)), 'AllEdgeParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(206)], HRESULT, 'GetEdgeParameters',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RLoadPanelEdgeParams), 'EdgeParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(207)], HRESULT, 'GetContourPolygon',
              ( ['out'], POINTER(POINTER(AxisVMLines3d)), 'ContourPolygon' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(208)], HRESULT, 'GetContourLineIDs',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(209), 'propget'], HRESULT, 'ContourType',
              ( ['out', 'retval'], POINTER(ELoadPanelContourType), 'Value' )),
    COMMETHOD([dispid(210)], HRESULT, 'GetLines',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(211)], HRESULT, 'SetLines',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(212)], HRESULT, 'GetNodes',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'NodeIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(213)], HRESULT, 'SetNodes',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NodeIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(214), 'propget'], HRESULT, 'Auto',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(214), 'propput'], HRESULT, 'Auto',
              ( ['in'], ELongBoolean, 'Value' )),
    COMMETHOD([dispid(215)], HRESULT, 'GetDomains',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'DomainIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(216)], HRESULT, 'SetDomains',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'DomainIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
]
################################################################
## code template for IAxisVMLoadPanel implementation
##class IAxisVMLoadPanel_Impl(object):
##    @property
##    def EdgeCount(self):
##        '-no docstring-'
##        #return Value
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    SelectedEdge = property(_get, _set, doc = _set.__doc__)
##
##    def SetAllEdgeParameters(self):
##        '-no docstring-'
##        #return AllEdgeParameters, Value
##
##    def SetEdgeParameters(self, Index):
##        '-no docstring-'
##        #return EdgeParameters, Value
##
##    def GetAllEdgeParameters(self):
##        '-no docstring-'
##        #return AllEdgeParameters, Value
##
##    def GetEdgeParameters(self, Index):
##        '-no docstring-'
##        #return EdgeParameters, Value
##
##    def GetContourPolygon(self):
##        '-no docstring-'
##        #return ContourPolygon, Value
##
##    def GetContourLineIDs(self):
##        '-no docstring-'
##        #return LineIds, Value
##
##    @property
##    def ContourType(self):
##        '-no docstring-'
##        #return Value
##
##    def GetLines(self):
##        '-no docstring-'
##        #return LineIds, Value
##
##    def SetLines(self):
##        '-no docstring-'
##        #return LineIds, Value
##
##    def GetNodes(self):
##        '-no docstring-'
##        #return NodeIDs, Value
##
##    def SetNodes(self):
##        '-no docstring-'
##        #return NodeIDs, Value
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Auto = property(_get, _set, doc = _set.__doc__)
##
##    def GetDomains(self):
##        '-no docstring-'
##        #return DomainIds, Value
##
##    def SetDomains(self):
##        '-no docstring-'
##        #return DomainIds, Value
##

class IAxisVMSteelDesignResultsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMSteelDesignResults Object'
    _iid_ = GUID('{05FB3646-C480-42E3-9921-DADCF856493C}')
    _idlflags_ = []
    _methods_ = []
IAxisVMSteelDesignResultsEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrCode' )),
]
IAxisVMEdgeConnectionsEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Cleared'),
    DISPMETHOD([dispid(202)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]
IAxisVMSpringParam._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'FullRec',
              ( ['out', 'retval'], POINTER(RSpringParam), 'Value' )),
    COMMETHOD([dispid(201), 'propput'], HRESULT, 'FullRec',
              ( ['in'], RSpringParam, 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'FunctionPoints',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(RPoint2d)), 'Value' )),
    COMMETHOD([dispid(202), 'propput'], HRESULT, 'FunctionPoints',
              ( ['in'], _midlSAFEARRAY(RPoint2d), 'Value' )),
    COMMETHOD([dispid(203), 'propget'], HRESULT, 'FullRec_V161',
              ( ['out', 'retval'], POINTER(RSpringParam_V161), 'Value' )),
    COMMETHOD([dispid(203), 'propput'], HRESULT, 'FullRec_V161',
              ( ['in'], RSpringParam_V161, 'Value' )),
]
################################################################
## code template for IAxisVMSpringParam implementation
##class IAxisVMSpringParam_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    FullRec = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    FunctionPoints = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    FullRec_V161 = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'ERCBeam_EC_SIA_SeismicZone'
rcbsecSeismicH = 0
rcbsecSeismicM = 1
rcbsecAntiSeismic = 2
ERCBeam_EC_SIA_SeismicZone = c_int # enum
IAxisVMSupportsEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrCode' )),
]

# values for enumeration 'EVBDomainsDuplicateMode'
ddmDuplicationError = 0
ddmNoDuplication = 1
ddmDuplication = 2
EVBDomainsDuplicateMode = c_int # enum

# values for enumeration 'ESupportSeismicComponentSumType'
sscstCritical = 0
sscstFxyzWithLinkedMyz = 1
ESupportSeismicComponentSumType = c_int # enum
IAxisVMCrossSectionTableEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrCode' )),
]

# values for enumeration 'ECompanyLogoSizeOption'
clsoAuto = 0
clsoWidth = 1
clsoHeight = 2
ECompanyLogoSizeOption = c_int # enum

# values for enumeration 'EGeometryUnitType'
gut_Geom_Distance = 0
gut_Geom_Angle = 1
gut_Geom_Struct_size = 2
EGeometryUnitType = c_int # enum

# values for enumeration 'ERCBeam_ECRO_STAS_SeismicZone'
rcbssSeismicH = 0
rcbssSeismicM = 1
rcbsszAntiSeismic = 2
rcbsszSeismicH = 3
rcbsszSeismicM = 4
ERCBeam_ECRO_STAS_SeismicZone = c_int # enum

# values for enumeration 'EVirtualBeamType'
vbtVirtualBeam = 0
vbtVirtualStrip = 1
EVirtualBeamType = c_int # enum
class RShowLocalSystems(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{AEEC189B-C56E-4E9D-9D43-EE008A37F027}')
RShowLocalSystems._fields_ = [
    ('Beam', ELongBoolean),
    ('Rib', ELongBoolean),
    ('Surface', ELongBoolean),
    ('Domain', ELongBoolean),
    ('Support', ELongBoolean),
    ('Spring', ELongBoolean),
    ('Gap', ELongBoolean),
    ('Link', ELongBoolean),
    ('EdgeHinge', ELongBoolean),
]
assert sizeof(RShowLocalSystems) == 36, sizeof(RShowLocalSystems)
assert alignment(RShowLocalSystems) == 4, alignment(RShowLocalSystems)
IAxisVMAttachments._methods_ = [
    COMMETHOD([dispid(201)], HRESULT, 'AddData',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ItemIndex' ),
              ( ['in'], _midlSAFEARRAY(c_ubyte), 'ItemData' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(202)], HRESULT, 'AddData_vb',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ItemIndex' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'ItemData' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(203)], HRESULT, 'GetData',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ItemIndex' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'ItemData' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'GetSize',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ItemIndex' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ItemIndex' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206), 'propget'], HRESULT, 'ItemCount',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(207)], HRESULT, 'GetIndexesByName',
              ( ['in'], BSTR, 'Name' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'ItemIndexes' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMAttachments implementation
##class IAxisVMAttachments_Impl(object):
##    def AddData(self, Name, ItemIndex, ItemData):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddData_vb(self, Name, ItemIndex):
##        '-no docstring-'
##        #return ItemData, ResultValue
##
##    def GetData(self, Name, ItemIndex):
##        '-no docstring-'
##        #return ItemData, ResultValue
##
##    def GetSize(self, Name, ItemIndex):
##        '-no docstring-'
##        #return ResultValue
##
##    def Delete(self, Name, ItemIndex):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def ItemCount(self):
##        '-no docstring-'
##        #return Value
##
##    def GetIndexesByName(self, Name):
##        '-no docstring-'
##        #return ItemIndexes, ResultValue
##

class RLoadSurfaceToBeamAssoc(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{47DC6299-218A-46E9-BA93-FBB08B8C2548}')

# values for enumeration 'EDistributionType'
dtGlobal = 0
dtLocal = 1
dtProjected = 2
dtEdgeLocal = 3
EDistributionType = c_int # enum
RLoadSurfaceToBeamAssoc._fields_ = [
    ('LoadCaseId', c_int),
    ('DistributionType', EDistributionType),
    ('Px', c_double),
    ('Py', c_double),
    ('Pz', c_double),
]
assert sizeof(RLoadSurfaceToBeamAssoc) == 32, sizeof(RLoadSurfaceToBeamAssoc)
assert alignment(RLoadSurfaceToBeamAssoc) == 8, alignment(RLoadSurfaceToBeamAssoc)
class RReinforcements(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{59A5EFC9-AF13-4200-823E-BCB223A46720}')

# values for enumeration 'EReinforcement'
rAsbx = 0
rAsby = 1
rAstx = 2
rAsty = 3
EReinforcement = c_int # enum
class RReinforcementValues(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{186F01CD-CCA8-453C-AC17-590E7C653CB7}')

# values for enumeration 'EReinforcementStatus'
rsOK = 0
rsComprReinforcementNeededX = 1
rsComprReinforcementNeededY = 2
rsCannotBeReinforcedX = 3
rsCannotBeReinforcedY = 4
EReinforcementStatus = c_int # enum
RReinforcementValues._fields_ = [
    ('Asbx', c_double),
    ('Asby', c_double),
    ('Astx', c_double),
    ('Asty', c_double),
    ('AsbxStatus', EReinforcementStatus),
    ('AsbyStatus', EReinforcementStatus),
    ('AstxStatus', EReinforcementStatus),
    ('AstyStatus', EReinforcementStatus),
]
assert sizeof(RReinforcementValues) == 48, sizeof(RReinforcementValues)
assert alignment(RReinforcementValues) == 8, alignment(RReinforcementValues)
RReinforcements._fields_ = [
    ('ContourPointCount', c_int),
    ('ContourPoint1Id', c_int),
    ('ContourPoint2Id', c_int),
    ('ContourPoint3Id', c_int),
    ('ContourPoint4Id', c_int),
    ('ContourLine1Id', c_int),
    ('ContourLine2Id', c_int),
    ('ContourLine3Id', c_int),
    ('ContourLine4Id', c_int),
    ('rvCenterPoint', RReinforcementValues),
    ('rvContourPoint1', RReinforcementValues),
    ('rvContourPoint2', RReinforcementValues),
    ('rvContourPoint3', RReinforcementValues),
    ('rvContourPoint4', RReinforcementValues),
    ('rvContourLineMidPoint1', RReinforcementValues),
    ('rvContourLineMidPoint2', RReinforcementValues),
    ('rvContourLineMidPoint3', RReinforcementValues),
    ('rvContourLineMidPoint4', RReinforcementValues),
]
assert sizeof(RReinforcements) == 472, sizeof(RReinforcements)
assert alignment(RReinforcements) == 8, alignment(RReinforcements)
IAxisVMCalculatedReinforcement._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202)], HRESULT, 'GetCalculatedReinforcementsByLoadCaseId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RReinforcements), 'Reinforcements' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(203)], HRESULT, 'GetCalculatedReinforcementsByLoadCombinationId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RReinforcements), 'Reinforcements' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204), helpstring('Combination is a multiline string (separated with CR+LF) where the lines belong to: ContourPoint1(X bottom, Y bottom, X top, Y top), ContourLineMidPoint1(X bottom, Y bottom, X top, Y top), ContourPoint2(X bottom, Y bottom, X top, Y top), ContourLineMidPoint2(X')], HRESULT, 'GetEnvelopeCalculatedReinforcements',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RReinforcements), 'Reinforcements' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205), helpstring('Combination is a multiline string (separated with CR+LF) where the lines belong to: ContourPoint1, ContourLineMidPoint1, ContourPoint2, ContourLineMidPoint2, ContourPoint3, ContourLineMidPoint3, [ContourPoint4, ContourLineMidPoint4], CenterPoint')], HRESULT, 'GetCriticalCalculatedReinforcements',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EReinforcement, 'Component' ),
              ( ['in', 'out'], POINTER(RReinforcements), 'Reinforcements' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'GetAllCalculatedReinforcementsByLoadCaseId',
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RReinforcements)), 'Reinforcements' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'GetAllCalculatedReinforcementsByLoadCombinationId',
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RReinforcements)), 'Reinforcements' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208), helpstring('Combinations contain a multiline strings (separated with CR+LF) where the lines belong to: ContourPoint1(X bottom, Y bottom, X top, Y top), ContourLineMidPoint1(X bottom, Y bottom, X top, Y top), ContourPoint2(X bottom, Y bottom, X top, Y top), ContourLineMidP')], HRESULT, 'GetAllEnvelopeCalculatedReinforcements',
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RReinforcements)), 'Reinforcements' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209), helpstring('Combinations contain a multiline strings (separated with CR+LF) where the lines belong to: ContourPoint1, ContourLineMidPoint1, ContourPoint2, ContourLineMidPoint2, ContourPoint3, ContourLineMidPoint3, [ContourPoint4, ContourLineMidPoint4], CenterPoint')], HRESULT, 'GetAllCriticalCalculatedReinforcements',
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EReinforcement, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RReinforcements)), 'Reinforcements' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(210), 'propget'], HRESULT, 'AnalysisType',
              ( ['out', 'retval'], POINTER(EAnalysisType), 'Value' )),
    COMMETHOD([dispid(210), 'propput'], HRESULT, 'AnalysisType',
              ( ['in'], EAnalysisType, 'Value' )),
    COMMETHOD([dispid(211), 'propget'], HRESULT, 'LoadCaseId',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(211), 'propput'], HRESULT, 'LoadCaseId',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(212), 'propget'], HRESULT, 'LoadCombinationId',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(212), 'propput'], HRESULT, 'LoadCombinationId',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(214), 'propget'], HRESULT, 'CombinationType',
              ( ['out', 'retval'], POINTER(ECombinationType), 'Value' )),
    COMMETHOD([dispid(214), 'propput'], HRESULT, 'CombinationType',
              ( ['in'], ECombinationType, 'Value' )),
    COMMETHOD([dispid(215), 'propget'], HRESULT, 'LoadLevel',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(215), 'propput'], HRESULT, 'LoadLevel',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(216), 'propget'], HRESULT, 'Component',
              ( ['out', 'retval'], POINTER(EReinforcement), 'Value' )),
    COMMETHOD([dispid(216), 'propput'], HRESULT, 'Component',
              ( ['in'], EReinforcement, 'Value' )),
    COMMETHOD([dispid(217)], HRESULT, 'CalculatedReinforcementsByLoadCaseId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in', 'out'], POINTER(RReinforcements), 'Reinforcements' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(218)], HRESULT, 'CalculatedReinforcementsByLoadCombinationId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in', 'out'], POINTER(RReinforcements), 'Reinforcements' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(219), helpstring('Combination is a multiline string (separated with CR+LF) where the lines belong to: ContourPoint1, ContourLineMidPoint1, ContourPoint2, ContourLineMidPoint2, ContourPoint3, ContourLineMidPoint3, [ContourPoint4, ContourLineMidPoint4], CenterPoint')], HRESULT, 'EnvelopeCalculatedReinforcements',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in', 'out'], POINTER(RReinforcements), 'Reinforcements' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(220), helpstring('Combination is a multiline string (separated with CR+LF) where the lines belong to: ContourPoint1, ContourLineMidPoint1, ContourPoint2, ContourLineMidPoint2, ContourPoint3, ContourLineMidPoint3, [ContourPoint4, ContourLineMidPoint4], CenterPoint')], HRESULT, 'CriticalCalculatedReinforcements',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in', 'out'], POINTER(RReinforcements), 'Reinforcements' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(221)], HRESULT, 'AllCalculatedReinforcementsByLoadCaseId',
              ( ['out'], POINTER(_midlSAFEARRAY(RReinforcements)), 'Reinforcements' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(222)], HRESULT, 'AllCalculatedReinforcementsByLoadCombinationId',
              ( ['out'], POINTER(_midlSAFEARRAY(RReinforcements)), 'Reinforcements' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(223), helpstring('Combinations contain a multiline strings (separated with CR+LF) where the lines belong to: ContourPoint1, ContourLineMidPoint1, ContourPoint2, ContourLineMidPoint2, ContourPoint3, ContourLineMidPoint3, [ContourPoint4, ContourLineMidPoint4], CenterPoint')], HRESULT, 'AllEnvelopeCalculatedReinforcements',
              ( ['out'], POINTER(_midlSAFEARRAY(RReinforcements)), 'Reinforcements' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(224), helpstring('Combinations contain a multiline strings (separated with CR+LF) where the lines belong to: ContourPoint1, ContourLineMidPoint1, ContourPoint2, ContourLineMidPoint2, ContourPoint3, ContourLineMidPoint3, [ContourPoint4, ContourLineMidPoint4], CenterPoint')], HRESULT, 'AllCriticalCalculatedReinforcements',
              ( ['out'], POINTER(_midlSAFEARRAY(RReinforcements)), 'Reinforcements' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(225), 'propget'], HRESULT, 'EnvelopeUID',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(225), 'propput'], HRESULT, 'EnvelopeUID',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(228)], HRESULT, 'GetEnvelopeCalculatedReinforcements2',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EReinforcement, 'Component' ),
              ( ['in', 'out'], POINTER(RReinforcements), 'Reinforcements' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'LoadLevel' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(229)], HRESULT, 'GetCriticalCalculatedReinforcements2',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EReinforcement, 'Component' ),
              ( ['in', 'out'], POINTER(RReinforcements), 'Reinforcements' ),
              ( ['out'], POINTER(ECombinationType), 'CriticalCombinationType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Factors' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(232), helpstring('LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count')], HRESULT, 'EnvelopeCalculatedReinforcements2',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in', 'out'], POINTER(RReinforcements), 'Reinforcements' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'LoadLevel' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(233)], HRESULT, 'CriticalCalculatedReinforcements2',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in', 'out'], POINTER(RReinforcements), 'Reinforcements' ),
              ( ['out'], POINTER(ECombinationType), 'CriticalCombinationType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Factors' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMCalculatedReinforcement implementation
##class IAxisVMCalculatedReinforcement_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def GetCalculatedReinforcementsByLoadCaseId(self, SurfaceId, LoadCaseId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Reinforcements, Combination, ResultValue
##
##    def GetCalculatedReinforcementsByLoadCombinationId(self, SurfaceId, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Reinforcements, Combination, ResultValue
##
##    def GetEnvelopeCalculatedReinforcements(self, SurfaceId, AnalysisType):
##        'Combination is a multiline string (separated with CR+LF) where the lines belong to: ContourPoint1(X bottom, Y bottom, X top, Y top), ContourLineMidPoint1(X bottom, Y bottom, X top, Y top), ContourPoint2(X bottom, Y bottom, X top, Y top), ContourLineMidPoint2(X'
##        #return Reinforcements, Combination, ResultValue
##
##    def GetCriticalCalculatedReinforcements(self, SurfaceId, CombinationType, AnalysisType, Component):
##        'Combination is a multiline string (separated with CR+LF) where the lines belong to: ContourPoint1, ContourLineMidPoint1, ContourPoint2, ContourLineMidPoint2, ContourPoint3, ContourLineMidPoint3, [ContourPoint4, ContourLineMidPoint4], CenterPoint'
##        #return Reinforcements, Combination, ResultValue
##
##    def GetAllCalculatedReinforcementsByLoadCaseId(self, LoadCaseId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Reinforcements, Combinations, ResultValue
##
##    def GetAllCalculatedReinforcementsByLoadCombinationId(self, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Reinforcements, Combinations, ResultValue
##
##    def GetAllEnvelopeCalculatedReinforcements(self, AnalysisType):
##        'Combinations contain a multiline strings (separated with CR+LF) where the lines belong to: ContourPoint1(X bottom, Y bottom, X top, Y top), ContourLineMidPoint1(X bottom, Y bottom, X top, Y top), ContourPoint2(X bottom, Y bottom, X top, Y top), ContourLineMidP'
##        #return Reinforcements, Combinations, ResultValue
##
##    def GetAllCriticalCalculatedReinforcements(self, CombinationType, AnalysisType, Component):
##        'Combinations contain a multiline strings (separated with CR+LF) where the lines belong to: ContourPoint1, ContourLineMidPoint1, ContourPoint2, ContourLineMidPoint2, ContourPoint3, ContourLineMidPoint3, [ContourPoint4, ContourLineMidPoint4], CenterPoint'
##        #return Reinforcements, Combinations, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    AnalysisType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LoadCaseId = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LoadCombinationId = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    CombinationType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LoadLevel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Component = property(_get, _set, doc = _set.__doc__)
##
##    def CalculatedReinforcementsByLoadCaseId(self, SurfaceId):
##        '-no docstring-'
##        #return Reinforcements, Combination, ResultValue
##
##    def CalculatedReinforcementsByLoadCombinationId(self, SurfaceId):
##        '-no docstring-'
##        #return Reinforcements, Combination, ResultValue
##
##    def EnvelopeCalculatedReinforcements(self, SurfaceId):
##        'Combination is a multiline string (separated with CR+LF) where the lines belong to: ContourPoint1, ContourLineMidPoint1, ContourPoint2, ContourLineMidPoint2, ContourPoint3, ContourLineMidPoint3, [ContourPoint4, ContourLineMidPoint4], CenterPoint'
##        #return Reinforcements, Combination, ResultValue
##
##    def CriticalCalculatedReinforcements(self, SurfaceId):
##        'Combination is a multiline string (separated with CR+LF) where the lines belong to: ContourPoint1, ContourLineMidPoint1, ContourPoint2, ContourLineMidPoint2, ContourPoint3, ContourLineMidPoint3, [ContourPoint4, ContourLineMidPoint4], CenterPoint'
##        #return Reinforcements, Combination, ResultValue
##
##    def AllCalculatedReinforcementsByLoadCaseId(self):
##        '-no docstring-'
##        #return Reinforcements, Combinations, ResultValue
##
##    def AllCalculatedReinforcementsByLoadCombinationId(self):
##        '-no docstring-'
##        #return Reinforcements, Combinations, ResultValue
##
##    def AllEnvelopeCalculatedReinforcements(self):
##        'Combinations contain a multiline strings (separated with CR+LF) where the lines belong to: ContourPoint1, ContourLineMidPoint1, ContourPoint2, ContourLineMidPoint2, ContourPoint3, ContourLineMidPoint3, [ContourPoint4, ContourLineMidPoint4], CenterPoint'
##        #return Reinforcements, Combinations, ResultValue
##
##    def AllCriticalCalculatedReinforcements(self):
##        'Combinations contain a multiline strings (separated with CR+LF) where the lines belong to: ContourPoint1, ContourLineMidPoint1, ContourPoint2, ContourLineMidPoint2, ContourPoint3, ContourLineMidPoint3, [ContourPoint4, ContourLineMidPoint4], CenterPoint'
##        #return Reinforcements, Combinations, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    EnvelopeUID = property(_get, _set, doc = _set.__doc__)
##
##    def GetEnvelopeCalculatedReinforcements2(self, SurfaceId, AnalysisType, Component):
##        '-no docstring-'
##        #return Reinforcements, LoadCaseOrCombinationId, LoadLevel, ResultValue
##
##    def GetCriticalCalculatedReinforcements2(self, SurfaceId, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Reinforcements, CriticalCombinationType, Factors, LoadCaseIds, ResultValue
##
##    def EnvelopeCalculatedReinforcements2(self, SurfaceId):
##        'LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count'
##        #return Reinforcements, LoadCaseOrCombinationId, LoadLevel, ResultValue
##
##    def CriticalCalculatedReinforcements2(self, SurfaceId):
##        '-no docstring-'
##        #return Reinforcements, CriticalCombinationType, Factors, LoadCaseIds, ResultValue
##

class IAxisVMCalcCrackWidthEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMCalcCrackWidth Object'
    _iid_ = GUID('{EBAA5E4A-A80E-478B-BE24-3D3FCB5CCCB5}')
    _idlflags_ = []
    _methods_ = []
IAxisVMCalcCrackWidthEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]

# values for enumeration 'EGeneralAlignmentHorizontal'
gahLeft = 0
gahRight = 1
gahCenter = 2
EGeneralAlignmentHorizontal = c_int # enum
class RTimberDesignParameters(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{57041212-5D6A-4BB8-AF55-8AFA00E46947}')
class RTimberDesignParameters_V153(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{87F65234-7CC8-486B-9A91-2E724125B603}')
IAxisVMTimberDesignMembers._methods_ = [
    COMMETHOD([dispid(201)], HRESULT, 'Add',
              ( ['in', 'out'], POINTER(RTimberDesignParameters), 'TimberDesignParameters' ),
              ( ['in'], _midlSAFEARRAY(c_int), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(203)], HRESULT, 'GetDesignParameters',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RTimberDesignParameters), 'TimberDesignParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'SetDesignParameters',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RTimberDesignParameters), 'TimberDesignParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'Clear',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207), 'propget'], HRESULT, 'Selected',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(207), 'propput'], HRESULT, 'Selected',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], ELongBoolean, 'Value' )),
    COMMETHOD([dispid(208), 'propget'], HRESULT, 'SelCount',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(209)], HRESULT, 'DeleteSelected',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(210)], HRESULT, 'SelectAll',
              ( ['in'], ELongBoolean, 'Select' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(211)], HRESULT, 'GetLineIds',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(212), 'propget'], HRESULT, 'Length',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(213)], HRESULT, 'GetSelectedItemIds',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'ItemIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(214)], HRESULT, 'Add_vb',
              ( ['in', 'out'], POINTER(RTimberDesignParameters), 'TimberDesignParameters' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(215)], HRESULT, 'Add_V153',
              ( ['in', 'out'], POINTER(RTimberDesignParameters_V153), 'TimberDesignParameters' ),
              ( ['in'], _midlSAFEARRAY(c_int), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(216)], HRESULT, 'GetDesignParameters_V153',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RTimberDesignParameters_V153), 'TimberDesignParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(217)], HRESULT, 'SetDesignParameters_V153',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RTimberDesignParameters_V153), 'TimberDesignParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMTimberDesignMembers implementation
##class IAxisVMTimberDesignMembers_Impl(object):
##    def Add(self, LineIds):
##        '-no docstring-'
##        #return TimberDesignParameters, ResultValue
##
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def GetDesignParameters(self, Index):
##        '-no docstring-'
##        #return TimberDesignParameters, ResultValue
##
##    def SetDesignParameters(self, Index):
##        '-no docstring-'
##        #return TimberDesignParameters, ResultValue
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def Clear(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    Selected = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SelCount(self):
##        '-no docstring-'
##        #return Value
##
##    def DeleteSelected(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def SelectAll(self, Select):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetLineIds(self, Index):
##        '-no docstring-'
##        #return LineIds, ResultValue
##
##    @property
##    def Length(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def GetSelectedItemIds(self):
##        '-no docstring-'
##        #return ItemIds, ResultValue
##
##    def Add_vb(self):
##        '-no docstring-'
##        #return TimberDesignParameters, LineIds, ResultValue
##
##    def Add_V153(self, LineIds):
##        '-no docstring-'
##        #return TimberDesignParameters, ResultValue
##
##    def GetDesignParameters_V153(self, Index):
##        '-no docstring-'
##        #return TimberDesignParameters, ResultValue
##
##    def SetDesignParameters_V153(self, Index):
##        '-no docstring-'
##        #return TimberDesignParameters, ResultValue
##

IAxisVMSpringParamEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Cleared'),
    DISPMETHOD([dispid(202)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]
class IAxisVMObjectCreator(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMObjectCreator Object'
    _iid_ = GUID('{A54216E8-9464-4C89-86E9-BF5469076168}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMLine2d(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMLine2d Object'
    _iid_ = GUID('{94EB95FA-2824-419F-AD7D-1C23A6430FE4}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMPolygon2d(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMPolygon2d Object'
    _iid_ = GUID('{E722662D-C6CE-4F89-B606-153A221A556E}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMPolygon2dList(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMPolygon2dList Object'
    _iid_ = GUID('{8FDD0046-ED87-4CE4-B44A-AB84FAB1FED5}')
    _idlflags_ = ['dual', 'oleautomation']
IAxisVMObjectCreator._methods_ = [
    COMMETHOD([dispid(201)], HRESULT, 'NewLine2d',
              ( ['out', 'retval'], POINTER(POINTER(IAxisVMLine2d)), 'Value' )),
    COMMETHOD([dispid(202)], HRESULT, 'NewPolygon2d',
              ( ['out', 'retval'], POINTER(POINTER(IAxisVMPolygon2d)), 'Value' )),
    COMMETHOD([dispid(203)], HRESULT, 'NewPolygon2dList',
              ( ['out', 'retval'], POINTER(POINTER(IAxisVMPolygon2dList)), 'Value' )),
    COMMETHOD([dispid(204)], HRESULT, 'NewLines3d',
              ( ['out', 'retval'], POINTER(POINTER(IAxisVMLines3d)), 'Value' )),
    COMMETHOD([dispid(205)], HRESULT, 'NewMovingLoadOnBeam',
              ( ['out', 'retval'], POINTER(POINTER(IAxisVMMovingLoadOnBeam)), 'Value' )),
    COMMETHOD([dispid(206)], HRESULT, 'NewMovingLoadOnDomain',
              ( ['out', 'retval'], POINTER(POINTER(IAxisVMMovingLoadOnDomain)), 'Value' )),
]
################################################################
## code template for IAxisVMObjectCreator implementation
##class IAxisVMObjectCreator_Impl(object):
##    def NewLine2d(self):
##        '-no docstring-'
##        #return Value
##
##    def NewPolygon2d(self):
##        '-no docstring-'
##        #return Value
##
##    def NewPolygon2dList(self):
##        '-no docstring-'
##        #return Value
##
##    def NewLines3d(self):
##        '-no docstring-'
##        #return Value
##
##    def NewMovingLoadOnBeam(self):
##        '-no docstring-'
##        #return Value
##
##    def NewMovingLoadOnDomain(self):
##        '-no docstring-'
##        #return Value
##

class AxisVMSteelDesignResults(CoClass):
    'AxisVMSteelDesignResults Object'
    _reg_clsid_ = GUID('{A0D3B37B-31E2-4FBE-AE24-EEAC3C1C9F41}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMSteelDesignResults(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMSteelDesignResults Object'
    _iid_ = GUID('{86A77413-6E2C-456A-B7B9-9D8C585B4644}')
    _idlflags_ = ['dual', 'oleautomation']
AxisVMSteelDesignResults._com_interfaces_ = [IAxisVMSteelDesignResults]
AxisVMSteelDesignResults._outgoing_interfaces_ = [IAxisVMSteelDesignResultsEvents]


# values for enumeration 'EVirtualBeamForce'
vbfNx = 0
vbfVy = 1
vbfVz = 2
vbfTx = 3
vbfMy = 4
vbfMz = 5
EVirtualBeamForce = c_int # enum

# values for enumeration 'ECrossSectionUnitType'
csut_Size = 0
csut_Area = 1
csut_Static_moment = 2
csut_Area_Moment_Inertia = 3
csut_Warping_constant = 4
ECrossSectionUnitType = c_int # enum
class REdgeConnectionRec(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{6495255E-AB9E-49AA-B881-F5590D21F7F1}')
REdgeConnectionRec._fields_ = [
    ('LineId', c_int),
    ('DomainId', c_int),
    ('Stiffnesses', RStiffnesses),
    ('Resistances', RResistances),
]
assert sizeof(REdgeConnectionRec) == 104, sizeof(REdgeConnectionRec)
assert alignment(REdgeConnectionRec) == 8, alignment(REdgeConnectionRec)
class RRCBeamDesignParameters(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{F7F77BFE-3F0C-486F-9D96-6D90B01EE001}')

# values for enumeration 'ERebarType'
rtRibbed = 0
rtWelded = 1
rtSmooth = 2
ERebarType = c_int # enum
RRCBeamDesignParameters._fields_ = [
    ('ConcreteMaterial', c_int),
    ('Dmax', c_double),
    ('RebarMaterial', c_int),
    ('RebarType', ERebarType),
    ('StirrupMaterial', c_int),
    ('StirrupDiameter', c_double),
    ('StirrupLegs', c_int),
    ('Shape', ERCBeamShape),
    ('c_top', c_double),
    ('c_bottom', c_double),
    ('ds_top', c_double),
    ('ds_bottom', c_double),
    ('TakeConcTensileStrengthNL', ELongBoolean),
    ('UseFctmflNL', ELongBoolean),
    ('ShrinkageEpsNL', c_double),
]
assert sizeof(RRCBeamDesignParameters) == 96, sizeof(RRCBeamDesignParameters)
assert alignment(RRCBeamDesignParameters) == 8, alignment(RRCBeamDesignParameters)
class IAxisVMAcceleration(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMAcceleration Object'
    _iid_ = GUID('{3F70DFC9-A58B-44C3-BCB5-73278BD89BA7}')
    _idlflags_ = ['dual', 'oleautomation']
class RAccelerationValues(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{F1DD724D-1BDD-4038-8D9F-6F7117F03030}')

# values for enumeration 'EAcceleration'
acX = 0
acY = 1
acZ = 2
acXX = 3
acYY = 4
acZZ = 5
acR = 6
acRR = 7
EAcceleration = c_int # enum
RAccelerationValues._fields_ = [
    ('avX', c_double),
    ('avY', c_double),
    ('avZ', c_double),
    ('avXX', c_double),
    ('avYY', c_double),
    ('avZZ', c_double),
    ('avR', c_double),
    ('avRR', c_double),
]
assert sizeof(RAccelerationValues) == 64, sizeof(RAccelerationValues)
assert alignment(RAccelerationValues) == 8, alignment(RAccelerationValues)
IAxisVMAcceleration._methods_ = [
    COMMETHOD([dispid(201)], HRESULT, 'GetNodalAccelerationByLoadCaseId',
              ( ['in'], c_int, 'NodeId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'TimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RAccelerationValues), 'AccelerationValues' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(202)], HRESULT, 'GetEnvelopeNodalAcceleration',
              ( ['in'], c_int, 'NodeId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EAcceleration, 'Component' ),
              ( ['in', 'out'], POINTER(RAccelerationValues), 'AccelerationValues' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(203)], HRESULT, 'GetAllNodalAccelerationsByLoadCaseId',
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'TimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RAccelerationValues)), 'AccelerationValues' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'GetAllEnvelopeNodalAccelerations',
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EAcceleration, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RAccelerationValues)), 'AccelerationValues' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205), 'propget'], HRESULT, 'AnalysisType',
              ( ['out', 'retval'], POINTER(EAnalysisType), 'Value' )),
    COMMETHOD([dispid(205), 'propput'], HRESULT, 'AnalysisType',
              ( ['in'], EAnalysisType, 'Value' )),
    COMMETHOD([dispid(206), 'propget'], HRESULT, 'LoadCaseId',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(206), 'propput'], HRESULT, 'LoadCaseId',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(207), 'propget'], HRESULT, 'MinMaxType',
              ( ['out', 'retval'], POINTER(EMinMaxType), 'Value' )),
    COMMETHOD([dispid(207), 'propput'], HRESULT, 'MinMaxType',
              ( ['in'], EMinMaxType, 'Value' )),
    COMMETHOD([dispid(208), 'propget'], HRESULT, 'TimeStep',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(208), 'propput'], HRESULT, 'TimeStep',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(209), 'propget'], HRESULT, 'Component',
              ( ['out', 'retval'], POINTER(EAcceleration), 'Value' )),
    COMMETHOD([dispid(209), 'propput'], HRESULT, 'Component',
              ( ['in'], EAcceleration, 'Value' )),
    COMMETHOD([dispid(210)], HRESULT, 'NodalAccelerationByLoadCaseId',
              ( ['in'], c_int, 'NodeId' ),
              ( ['in', 'out'], POINTER(RAccelerationValues), 'AccelerationValues' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(211)], HRESULT, 'EnvelopeNodalAcceleration',
              ( ['in'], c_int, 'NodeId' ),
              ( ['in', 'out'], POINTER(RAccelerationValues), 'AccelerationValues' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(212)], HRESULT, 'AllNodalAccelerationsByLoadCaseId',
              ( ['out'], POINTER(_midlSAFEARRAY(RAccelerationValues)), 'AccelerationValues' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(213)], HRESULT, 'AllEnvelopeNodalAccelerations',
              ( ['out'], POINTER(_midlSAFEARRAY(RAccelerationValues)), 'AccelerationValues' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(214), 'propget'], HRESULT, 'EnvelopeUID',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(214), 'propput'], HRESULT, 'EnvelopeUID',
              ( ['in'], c_int, 'Value' )),
]
################################################################
## code template for IAxisVMAcceleration implementation
##class IAxisVMAcceleration_Impl(object):
##    def GetNodalAccelerationByLoadCaseId(self, NodeId, LoadCaseId, TimeStep, AnalysisType):
##        '-no docstring-'
##        #return AccelerationValues, Combination, ResultValue
##
##    def GetEnvelopeNodalAcceleration(self, NodeId, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return AccelerationValues, Combination, ResultValue
##
##    def GetAllNodalAccelerationsByLoadCaseId(self, LoadCaseId, TimeStep, AnalysisType):
##        '-no docstring-'
##        #return AccelerationValues, Combinations, ResultValue
##
##    def GetAllEnvelopeNodalAccelerations(self, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return AccelerationValues, Combinations, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    AnalysisType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LoadCaseId = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    MinMaxType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    TimeStep = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Component = property(_get, _set, doc = _set.__doc__)
##
##    def NodalAccelerationByLoadCaseId(self, NodeId):
##        '-no docstring-'
##        #return AccelerationValues, Combination, ResultValue
##
##    def EnvelopeNodalAcceleration(self, NodeId):
##        '-no docstring-'
##        #return AccelerationValues, Combination, ResultValue
##
##    def AllNodalAccelerationsByLoadCaseId(self):
##        '-no docstring-'
##        #return AccelerationValues, Combinations, ResultValue
##
##    def AllEnvelopeNodalAccelerations(self):
##        '-no docstring-'
##        #return AccelerationValues, Combinations, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    EnvelopeUID = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'ESolutionControl'
scForce = 0
scDisplacement = 1
scArcLength = 2
scPushOver = 3
ESolutionControl = c_int # enum

# values for enumeration 'EGeneralAlignmentVertical'
gavTop = 0
gavBottom = 1
gavCenter = 2
EGeneralAlignmentVertical = c_int # enum

# values for enumeration 'ECompositeInnerCSalign'
cicsa_CentreGravity = 0
cicsa_Centre = 1
ECompositeInnerCSalign = c_int # enum
class RSteelDesignParameters_EC_SIA_ITA_V153(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{91EED3D8-4A4F-4265-B3D5-82436E294E02}')

# values for enumeration 'EStiffeners'
sNo = 0
sTransversal = 1
EStiffeners = c_int # enum

# values for enumeration 'ESteelCantileverFixedEnd'
scfeStartNode = 0
scfeEndNode = 1
ESteelCantileverFixedEnd = c_int # enum

# values for enumeration 'ESteelBucklingLengthMode'
sblm_Factor = 0
sblm_Length = 1
sblm_Auto = 2
sblm_None = 3
ESteelBucklingLengthMode = c_int # enum

# values for enumeration 'ESteelLateralSupports'
ammAuto = 0
ammEstimatedFromKzKw = 1
ammForkSupports = 2
ammUserDefined = 3
ESteelLateralSupports = c_int # enum

# values for enumeration 'ESteelFireParBetaMethod'
sfpbm_Auto = 0
sfpbm_User = 1
ESteelFireParBetaMethod = c_int # enum

# values for enumeration 'ESteelSLSHMethod'
sslshm_Member = 0
sslshm_Structure = 1
sslshm_Custom = 2
sslshm_Level = 3
ESteelSLSHMethod = c_int # enum

# values for enumeration 'ESteelSLSEMethod'
sslsem_No = 0
sslsem_2 = 1
sslsem_Left = 2
sslsem_Right = 3
ESteelSLSEMethod = c_int # enum

# values for enumeration 'ESteelSLSLMethod'
sslslm_Member = 0
sslslm_Custom = 1
sslslm_Conn = 2
ESteelSLSLMethod = c_int # enum

# values for enumeration 'ESteelSLSPreCamberCurve'
sslspcc_Quadratic = 0
sslslm_Linear = 1
ESteelSLSPreCamberCurve = c_int # enum
RSteelDesignParameters_EC_SIA_ITA_V153._fields_ = [
    ('BreakAtElements', ELongBoolean),
    ('Ky', c_double),
    ('Kz', c_double),
    ('Kw', c_double),
    ('C1', c_double),
    ('C2', c_double),
    ('C3', c_double),
    ('Za', c_double),
    ('kt', c_double),
    ('akr', c_double),
    ('a', c_double),
    ('Stiffeners', EStiffeners),
    ('SDP_Class', c_int),
    ('YBraced', ELongBoolean),
    ('ZBraced', ELongBoolean),
    ('McrMethod', EMcrMethod),
    ('DesignApproach', EDesignApproach),
    ('fse', c_double),
    ('Cantilever', ELongBoolean),
    ('CantileverFixedEnd', ESteelCantileverFixedEnd),
    ('FlexuralBuckling', ELongBoolean),
    ('LateralTorsionalBuckling', ELongBoolean),
    ('WebShearBuckling', ELongBoolean),
    ('BucklingLengthModeY', ESteelBucklingLengthMode),
    ('BucklingLengthModeZ', ESteelBucklingLengthMode),
    ('Ly', c_double),
    ('Lz', c_double),
    ('ConsiderN', ELongBoolean),
    ('Eta', c_double),
    ('LateralSupports', ESteelLateralSupports),
    ('Mcr', c_double),
    ('FireResistDef', ELongBoolean),
    ('fpOnlyPrescribed', ELongBoolean),
    ('fpKy', c_double),
    ('fpKz', c_double),
    ('fpKw', c_double),
    ('fpC1', c_double),
    ('fpC2', c_double),
    ('fpC3', c_double),
    ('fpLy', c_double),
    ('fpLz', c_double),
    ('fpMcr', c_double),
    ('fpBetaMethod', ESteelFireParBetaMethod),
    ('fpBetaMy', c_double),
    ('fpBetaMz', c_double),
    ('fpBetaLT', c_double),
    ('slsAngle', c_double),
    ('slsEyLimitDef', ELongBoolean),
    ('slsEzLimitDef', ELongBoolean),
    ('slsHxLimitDef', ELongBoolean),
    ('slsHyLimitDef', ELongBoolean),
    ('slsUyDef', ELongBoolean),
    ('slsUzDef', ELongBoolean),
    ('slsHGlob', ELongBoolean),
    ('slsHMode', ESteelSLSHMethod),
    ('slsEMode', ESteelSLSEMethod),
    ('slsLMode', ESteelSLSLMethod),
    ('slsPreCamberCurve', ESteelSLSPreCamberCurve),
    ('slsEyLimit', c_double),
    ('slsEzLimit', c_double),
    ('slsHxLimit', c_double),
    ('slsHyLimit', c_double),
    ('slsUy', c_double),
    ('slsUz', c_double),
    ('slsCustomLy', c_double),
    ('slsCustomLz', c_double),
    ('slsCustomH', c_double),
    ('slsRatio', c_double),
]
assert sizeof(RSteelDesignParameters_EC_SIA_ITA_V153) == 448, sizeof(RSteelDesignParameters_EC_SIA_ITA_V153)
assert alignment(RSteelDesignParameters_EC_SIA_ITA_V153) == 8, alignment(RSteelDesignParameters_EC_SIA_ITA_V153)
IAxisVMWindSubStructure._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Params',
              ( ['out', 'retval'], POINTER(RWindSubStructParams), 'Value' )),
    COMMETHOD([dispid(201), 'propput'], HRESULT, 'Params',
              ( ['in'], RWindSubStructParams, 'Value' )),
    COMMETHOD([dispid(202)], HRESULT, 'SetPanels',
              ( ['in'], _midlSAFEARRAY(c_int), 'LoadPanels' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(203)], HRESULT, 'GetPanels',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadPanels' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMWindSubStructure implementation
##class IAxisVMWindSubStructure_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Params = property(_get, _set, doc = _set.__doc__)
##
##    def SetPanels(self, LoadPanels):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetPanels(self):
##        '-no docstring-'
##        #return LoadPanels, ResultValue
##


# values for enumeration 'ELinkElementType'
letNN = 0
letLL = 1
ELinkElementType = c_int # enum
class AxisVMCalcCrackWidth(CoClass):
    'AxisVMCalcCrackWidth Object'
    _reg_clsid_ = GUID('{ADCF5A58-3189-42AD-B6C5-F5DB894E39C5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMCalcCrackWidth(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMCalcCrackWidth Object'
    _iid_ = GUID('{6256BF1F-C5DA-4A37-A64B-C5D257CB901F}')
    _idlflags_ = ['dual', 'oleautomation']
AxisVMCalcCrackWidth._com_interfaces_ = [IAxisVMCalcCrackWidth]
AxisVMCalcCrackWidth._outgoing_interfaces_ = [IAxisVMCalcCrackWidthEvents]


# values for enumeration 'ENodalSupportType'
nstNodalGlobal = 0
nstNodalBeamRelative = 1
nstNodalEdgeRelative = 2
nstNodalReference = 3
nstTrieder = 4
nstSeismicIsolator = 5
ENodalSupportType = c_int # enum
class RNodalSupportStiffParams(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{1F75D0E6-6DB0-4ED8-A61D-0060C5720760}')

# values for enumeration 'EPadFootingType'
pftPlate = 0
pftStepped = 1
pftSloped = 2
EPadFootingType = c_int # enum
class RPadFootingDimensions(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{25DF8866-1B2A-4E08-8ADE-80FEB68A47AE}')
class RPadFootingParams(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{8D99B017-9B21-4EE0-BC52-62A014F53699}')
class RPadFootingParams_V153(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{B8DEA287-CA3E-4A74-B8CC-B266780391AD}')
RNodalSupportSpringParams._fields_ = [
    ('SpringParamIndexes', RSpringParamIndexes),
    ('IsolatorParamIndex', c_int),
    ('IsolatorD2', c_double),
]
assert sizeof(RNodalSupportSpringParams) == 40, sizeof(RNodalSupportSpringParams)
assert alignment(RNodalSupportSpringParams) == 8, alignment(RNodalSupportSpringParams)
IAxisVMNodalSupport._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'SupportType',
              ( ['out', 'retval'], POINTER(ENodalSupportType), 'Value' )),
    COMMETHOD([dispid(205), 'propget'], HRESULT, 'NodeId',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(206), 'propget'], HRESULT, 'BeamId',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(207), 'propget'], HRESULT, 'LineId',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(210), 'propget'], HRESULT, 'ReferenceId',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(211)], HRESULT, 'DefineAsNodalGlobal',
              ( ['in', 'out'], POINTER(RStiffnesses), 'Stiffnesses' ),
              ( ['in', 'out'], POINTER(RNonLinearity), 'NonLinearity' ),
              ( ['in', 'out'], POINTER(RResistances), 'Resistances' ),
              ( ['in'], c_int, 'NodeId' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(212)], HRESULT, 'DefineAsNodalBeamRelative',
              ( ['in', 'out'], POINTER(RStiffnesses), 'Stiffnesses' ),
              ( ['in', 'out'], POINTER(RNonLinearity), 'NonLinearity' ),
              ( ['in', 'out'], POINTER(RResistances), 'Resistances' ),
              ( ['in'], c_int, 'NodeId' ),
              ( ['in'], c_int, 'BeamId' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(213)], HRESULT, 'DefineAsNodalEdgeRelative',
              ( ['in', 'out'], POINTER(RStiffnesses), 'Stiffnesses' ),
              ( ['in', 'out'], POINTER(RNonLinearity), 'NonLinearity' ),
              ( ['in', 'out'], POINTER(RResistances), 'Resistances' ),
              ( ['in'], c_int, 'NodeId' ),
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SurfaceId1' ),
              ( ['in'], c_int, 'SurfaceId2' ),
              ( ['in'], c_int, 'DomainId1' ),
              ( ['in'], c_int, 'DomainId2' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(214)], HRESULT, 'DefineAsNodalReference',
              ( ['in', 'out'], POINTER(RStiffnesses), 'Stiffnesses' ),
              ( ['in', 'out'], POINTER(RNonLinearity), 'NonLinearity' ),
              ( ['in', 'out'], POINTER(RResistances), 'Resistances' ),
              ( ['in'], c_int, 'NodeId' ),
              ( ['in'], c_int, 'ReferenceId' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208), 'propget'], HRESULT, 'DomainId1',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(209), 'propget'], HRESULT, 'DomainId2',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(215), 'propget'], HRESULT, 'SurfaceId1',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(216), 'propget'], HRESULT, 'SurfaceId2',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(217)], HRESULT, 'GetStiffnesses',
              ( ['in', 'out'], POINTER(RStiffnesses), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(218)], HRESULT, 'SetStiffnesses',
              ( ['in', 'out'], POINTER(RStiffnesses), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(219)], HRESULT, 'GetNonLinearity',
              ( ['in', 'out'], POINTER(RNonLinearity), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(220)], HRESULT, 'SetNonLinearity',
              ( ['in', 'out'], POINTER(RNonLinearity), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(221)], HRESULT, 'GetResistances',
              ( ['in', 'out'], POINTER(RResistances), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(222)], HRESULT, 'SetResistances',
              ( ['in', 'out'], POINTER(RResistances), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(229)], HRESULT, 'GetStiffnessCalcParams',
              ( ['in', 'out'], POINTER(RNodalSupportStiffParams), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(230)], HRESULT, 'SetStiffnessCalcParams',
              ( ['in', 'out'], POINTER(RNodalSupportStiffParams), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(231), 'propget'], HRESULT, 'HasFooting',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(232), 'propget'], HRESULT, 'FootingType',
              ( ['out', 'retval'], POINTER(EPadFootingType), 'Value' )),
    COMMETHOD([dispid(233)], HRESULT, 'GetFootingDimensions',
              ( ['in', 'out'], POINTER(RPadFootingDimensions), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(234)], HRESULT, 'GetFootingParams',
              ( ['in', 'out'], POINTER(RPadFootingParams), 'Params' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(235)], HRESULT, 'GetFootingParams_V153',
              ( ['in', 'out'], POINTER(RPadFootingParams_V153), 'Params' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(236), 'propget'], HRESULT, 'SpringParams',
              ( ['out', 'retval'], POINTER(RNodalSupportSpringParams), 'Value' )),
    COMMETHOD([dispid(236), 'propput'], HRESULT, 'SpringParams',
              ( ['in'], RNodalSupportSpringParams, 'Value' )),
]
################################################################
## code template for IAxisVMNodalSupport implementation
##class IAxisVMNodalSupport_Impl(object):
##    @property
##    def SupportType(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def NodeId(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def BeamId(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def LineId(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def ReferenceId(self):
##        '-no docstring-'
##        #return Value
##
##    def DefineAsNodalGlobal(self, NodeId):
##        '-no docstring-'
##        #return Stiffnesses, NonLinearity, Resistances, ResultValue
##
##    def DefineAsNodalBeamRelative(self, NodeId, BeamId):
##        '-no docstring-'
##        #return Stiffnesses, NonLinearity, Resistances, ResultValue
##
##    def DefineAsNodalEdgeRelative(self, NodeId, LineId, SurfaceId1, SurfaceId2, DomainId1, DomainId2):
##        '-no docstring-'
##        #return Stiffnesses, NonLinearity, Resistances, ResultValue
##
##    def DefineAsNodalReference(self, NodeId, ReferenceId):
##        '-no docstring-'
##        #return Stiffnesses, NonLinearity, Resistances, ResultValue
##
##    @property
##    def DomainId1(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def DomainId2(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def SurfaceId1(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def SurfaceId2(self):
##        '-no docstring-'
##        #return Value
##
##    def GetStiffnesses(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetStiffnesses(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def GetNonLinearity(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetNonLinearity(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def GetResistances(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetResistances(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def GetStiffnessCalcParams(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetStiffnessCalcParams(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    @property
##    def HasFooting(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def FootingType(self):
##        '-no docstring-'
##        #return Value
##
##    def GetFootingDimensions(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def GetFootingParams(self):
##        '-no docstring-'
##        #return Params, ResultValue
##
##    def GetFootingParams_V153(self):
##        '-no docstring-'
##        #return Params, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    SpringParams = property(_get, _set, doc = _set.__doc__)
##

class RShowGraphicSymbols(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{5D6517A4-A4BD-43C0-A607-0641CA262C84}')
RShowGraphicSymbols._fields_ = [
    ('Mesh', ELongBoolean),
    ('Node', ELongBoolean),
    ('SurfaceCentre', ELongBoolean),
    ('CentreOfCircle', ELongBoolean),
    ('Domain', ELongBoolean),
    ('NodalSupport', ELongBoolean),
    ('LineSupport', ELongBoolean),
    ('SurfaceSupport', ELongBoolean),
    ('Foundation', ELongBoolean),
    ('AutoFoundationDimension', ELongBoolean),
    ('Links', ELongBoolean),
    ('Rigids', ELongBoolean),
    ('Diaphragm', ELongBoolean),
    ('Reference', ELongBoolean),
    ('CrossSectionShape', ELongBoolean),
    ('EndReleases', ELongBoolean),
    ('StructuralMembers', ELongBoolean),
    ('ReinfParams', ELongBoolean),
    ('ReinfDomain', ELongBoolean),
    ('Mass', ELongBoolean),
    ('StoreyCentGrav', ELongBoolean),
    ('StoreyShearCent', ELongBoolean),
    ('ARBO_CRETelems', ELongBoolean),
    ('COBIAXelems', ELongBoolean),
    ('Trusses', ELongBoolean),
    ('Beams', ELongBoolean),
    ('Ribs', ELongBoolean),
    ('Springs', ELongBoolean),
    ('IsolineLabels', ELongBoolean),
    ('RoundIsoValues', ELongBoolean),
    ('Gaps', ELongBoolean),
    ('StructuralGrids', ELongBoolean),
]
assert sizeof(RShowGraphicSymbols) == 128, sizeof(RShowGraphicSymbols)
assert alignment(RShowGraphicSymbols) == 4, alignment(RShowGraphicSymbols)
class RShowLoads(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{9C47BCD1-0ED2-4215-8592-724EE6DF1A36}')
RShowLoads._fields_ = [
    ('Concentrated', ELongBoolean),
    ('Line', ELongBoolean),
    ('Surface', ELongBoolean),
    ('Temperature', ELongBoolean),
    ('SelfWeight', ELongBoolean),
    ('Miscel', ELongBoolean),
    ('LoadDistrScheme', ELongBoolean),
    ('DerivedBeamLoad', ELongBoolean),
    ('MovingLoadPhases', ELongBoolean),
]
assert sizeof(RShowLoads) == 36, sizeof(RShowLoads)
assert alignment(RShowLoads) == 4, alignment(RShowLoads)

# values for enumeration 'EReferenceType'
rtPoint = 0
rtVector = 1
rtAxis = 2
rtPlane = 3
rtBeta = 4
rtNone = 5
EReferenceType = c_int # enum

# values for enumeration 'EImperfectionParMatType'
ipmtConcSteel = 0
ipmtBrick = 1
ipmtOther = 2
EImperfectionParMatType = c_int # enum

# values for enumeration 'EMeshType'
mtAdaptive = 0
mtUniform = 1
EMeshType = c_int # enum

# values for enumeration 'EMeshGeometryType'
mgtTriangle = 0
mgtQuad = 1
mgtMixedQuadTriangle = 2
EMeshGeometryType = c_int # enum
RDomainMeshParameters._fields_ = [
    ('MeshSize', c_double),
    ('MeshType', EMeshType),
    ('IsFitToPointLoad', ELongBoolean),
    ('FitToPointLoadValue', c_double),
    ('IsFitToLineLoad', ELongBoolean),
    ('FitToLineLoadValue', c_double),
    ('IsFitToSurfaceLoad', ELongBoolean),
    ('FitToSurfaceLoadValue', c_double),
    ('MeshGeometryType', EMeshGeometryType),
    ('QuadMeshQuality', c_int),
]
assert sizeof(RDomainMeshParameters) == 64, sizeof(RDomainMeshParameters)
assert alignment(RDomainMeshParameters) == 8, alignment(RDomainMeshParameters)

# values for enumeration 'EGeneralError'
errDatabaseNotReady = -101
errNotFound = -102
errIndexOutOfBounds = -103
errReadOnly = -104
errInternalException = -105
errNotSupportedByNationalDesignCode = -106
errCOMServerInternalError = -107
errNotImplemented = -108
errEnvelopeIdOutOfBounds = -109
errMinMaxNotAllowed = -110
errNoLoadCaseInLoadGroups = -111
errNoResults = -112
errCriticalCombinationNotAllowed = -113
errInvalidName = -114
errCombinationTypeNotAllowed = -115
errInvalidEnvelopeUID = -116
errInvalidPosition = -117
errIndexDuplication = -118
errJSONpropertyMissing = -119
errMembersNotAllowed = -120
errCreepNotSupported = -121
errOutOfMemory = -122
EGeneralError = c_int # enum
IAxisVMNodesSupportsEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Cleared'),
    DISPMETHOD([dispid(202)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]

# values for enumeration 'EMaterialUnitType'
mut_Young_modulus = 0
mut_Mass = 1
mut_Limit_stress = 2
mut_Limit_strain = 3
EMaterialUnitType = c_int # enum

# values for enumeration 'ELinkElementError'
leeLineIndexOutOfBounds = -100001
leeInvalidSystemType = -100002
leeReferenceIndexOutOfBounds = -100003
leeErrorAddingNN = -100004
leeErrorAddingLL = -100005
leeInvalidLinkElementType = -100006
leeNotConnectingMasterLineAndMasterStartLink = -100007
leeNotConnectingMasterLineAndMasterEndLink = -100008
leeNotConnectingSlaveLineAndMasterStartLink = -100009
leeNotConnectingSlaveLineAndMasterEndLink = -100010
ELinkElementError = c_int # enum

# values for enumeration 'ECrossSectionImageExportOptions'
csieoNone = 0
csieoFilled = 1
csieoStressPointsMarks = 2
csieoStressPointsLabels = 4
csieoMainAxis = 8
csieoMainAxisLabels = 16
ECrossSectionImageExportOptions = c_int # enum

# values for enumeration 'EReinforcementCalculation'
rcActual = 0
rcCalculated = 1
EReinforcementCalculation = c_int # enum

# values for enumeration 'EXYchartFillType'
xycftNone = 0
xycftSolid = 1
xycftGradient = 2
EXYchartFillType = c_int # enum
class RSteelDesignParameters_EC_SIA_ITA(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{C7C76732-6396-41A9-8989-66CCA7198B3B}')
RSteelDesignParameters_EC_SIA_ITA._fields_ = [
    ('BreakAtElements', ELongBoolean),
    ('Ky', c_double),
    ('Kz', c_double),
    ('Kw', c_double),
    ('C1', c_double),
    ('C2', c_double),
    ('C3', c_double),
    ('Za', c_double),
    ('kt', c_double),
    ('akr', c_double),
    ('a', c_double),
    ('Stiffeners', EStiffeners),
    ('SDP_Class', c_int),
    ('YBraced', ELongBoolean),
    ('ZBraced', ELongBoolean),
    ('McrMethod', EMcrMethod),
    ('DesignApproach', EDesignApproach),
    ('fse', c_double),
    ('Cantilever', ELongBoolean),
    ('CantileverFixedEnd', ESteelCantileverFixedEnd),
    ('FlexuralBuckling', ELongBoolean),
    ('LateralTorsionalBuckling', ELongBoolean),
    ('WebShearBuckling', ELongBoolean),
    ('BucklingLengthModeY', ESteelBucklingLengthMode),
    ('BucklingLengthModeZ', ESteelBucklingLengthMode),
    ('Ly', c_double),
    ('Lz', c_double),
    ('ConsiderN', ELongBoolean),
    ('Eta', c_double),
    ('LateralSupports', ESteelLateralSupports),
    ('Mcr', c_double),
]
assert sizeof(RSteelDesignParameters_EC_SIA_ITA) == 200, sizeof(RSteelDesignParameters_EC_SIA_ITA)
assert alignment(RSteelDesignParameters_EC_SIA_ITA) == 8, alignment(RSteelDesignParameters_EC_SIA_ITA)
class RSteelDesignParameters_MSZ_STAS(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{705F686C-BC35-43FA-9B5F-19F8D5FDBA35}')
RSteelDesignParameters_MSZ_STAS._fields_ = [
    ('BreakAtElements', ELongBoolean),
    ('nuy', c_double),
    ('nuz', c_double),
    ('nuw', c_double),
    ('d', c_double),
    ('a', c_double),
    ('Stiffeners', EStiffeners),
]
assert sizeof(RSteelDesignParameters_MSZ_STAS) == 56, sizeof(RSteelDesignParameters_MSZ_STAS)
assert alignment(RSteelDesignParameters_MSZ_STAS) == 8, alignment(RSteelDesignParameters_MSZ_STAS)
class RLoadPanelConcentrated(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{569FEE97-B615-4CB6-AD5A-CEECB1BDC278}')
RLoadPanelConcentrated._fields_ = [
    ('LoadCaseId', c_int),
    ('LoadPanelId', c_int),
    ('Fx', c_double),
    ('Fy', c_double),
    ('Fz', c_double),
    ('Mx', c_double),
    ('My', c_double),
    ('Mz', c_double),
    ('x', c_double),
    ('y', c_double),
    ('z', c_double),
    ('SystemGLR', ESystem),
    ('ReferenceId', c_int),
]
assert sizeof(RLoadPanelConcentrated) == 88, sizeof(RLoadPanelConcentrated)
assert alignment(RLoadPanelConcentrated) == 8, alignment(RLoadPanelConcentrated)
IAxisVMXLAMpanelsEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(202)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]

# values for enumeration 'EResultsError'
reInvalidAnalysisType = -100001
reResultCaseIndexOutOfBounds = -100002
reResultCaseIsNotLoadCase = -100003
reResultCaseIsNotLoadCombination = -100004
reLoadCaseIsOutOfBounds = -100005
reLoadCombinationIsOutOfBounds = -100006
reFrequencyIndexOutOfBounds = -100007
reModeShapeIndexOutOfBounds = -100008
reLoadLevelIndexOutOfBounds = -100009
reInvalidArrayLength = -100010
reInvalidLoadCaseType = -100011
reInvalidNationalDesignCode = -100012
reInvalidResponseSpectraParam = -100013
reITAReductionCriterionNotSatisfied = -100014
reSteelDesignResultsDisabled = -100015
reCalculatedReinforcementDisabled = -100016
reReinforcementCheckDisabled = -100017
reMissingAnalysisResults = -100018
reRC3moduleNotAvailable = -100019
reRC1moduleNotAvailable = -100020
reTD1moduleNotAvailable = -100021
reDYNmoduleNotAvailable = -100022
reSE2moduleNotAvailable = -100023
reNLpackageNotAvailable = -100024
rePushoverSpectrumIsNotValid = -100025
rePushoverSpectrumIsNotParametric = -100026
EResultsError = c_int # enum
class RRebarSteelGrade_EC_ITA(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{7347A9FB-5CFA-4A52-B268-64C59FA8AB28}')
RRebarSteelGrade_EC_ITA._fields_ = [
    ('fyd', c_double),
    ('es1', c_double),
    ('esu', c_double),
]
assert sizeof(RRebarSteelGrade_EC_ITA) == 24, sizeof(RRebarSteelGrade_EC_ITA)
assert alignment(RRebarSteelGrade_EC_ITA) == 8, alignment(RRebarSteelGrade_EC_ITA)

# values for enumeration 'EMassControl'
mcConvertLoadToMasses = 0
mcMassesOnly = 1
EMassControl = c_int # enum

# values for enumeration 'EDirectObjectDrawType'
dodt_Column = 0
dodt_BeamHorizontal = 1
dodt_Beam = 2
dodt_Wall = 3
dodt_Slab = 4
dodt_SlabVoids = 5
dodt_Domain = 6
dodt_Hole = 7
EDirectObjectDrawType = c_int # enum

# values for enumeration 'EPartItemType'
pitNode = 0
pitLine = 1
pitSurface = 2
pitDomain = 3
EPartItemType = c_int # enum
IAxisVMTask._methods_ = [
    COMMETHOD([dispid(201)], HRESULT, 'DrawObjectsDirectlyModal',
              ( ['in'], EDirectObjectDrawType, 'ObjectType' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(202)], HRESULT, 'AddSupportModal',
              ( ['in'], EPartItemType, 'ElementType' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(203)], HRESULT, 'ShowLoadCasesAndGroupsFormModal',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'AddLoadModal',
              ( ['in'], ELoadType, 'LoadType' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205)], HRESULT, 'ShowDomainMeshingFormModal',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMTask implementation
##class IAxisVMTask_Impl(object):
##    def DrawObjectsDirectlyModal(self, ObjectType):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddSupportModal(self, ElementType):
##        '-no docstring-'
##        #return ResultValue
##
##    def ShowLoadCasesAndGroupsFormModal(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddLoadModal(self, LoadType):
##        '-no docstring-'
##        #return ResultValue
##
##    def ShowDomainMeshingFormModal(self):
##        '-no docstring-'
##        #return ResultValue
##


# values for enumeration 'EXYchartLabelingStyle'
xyclsArrange = 0
xyclsOverlapFilter = 1
EXYchartLabelingStyle = c_int # enum

# values for enumeration 'EPropertiesUnitType'
put_Beam_length = 0
put_Thickness = 1
put_Surface = 2
put_Volume = 3
put_Mass = 4
put_Mass_per_length = 5
put_Gap_opening = 6
EPropertiesUnitType = c_int # enum
class RNNLinkElementRec(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{2792F4C9-28DD-4157-87C1-73139248B0BE}')
class RLLLinkElementRec(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{680468B0-8169-469C-BEAF-F4AF9EF24E10}')
class RLinkElementRec(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{902BE150-CF5E-4475-94E6-48CA22749661}')
IAxisVMLinkElements._methods_ = [
    COMMETHOD([dispid(201)], HRESULT, 'AddNN',
              ( ['in', 'out'], POINTER(RNNLinkElementRec), 'NNLinkElementRec' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(202)], HRESULT, 'AddLL',
              ( ['in', 'out'], POINTER(RLLLinkElementRec), 'LLLinkElementRec' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(203), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(204), 'propget'], HRESULT, 'LinkElementType',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELinkElementType), 'Value' )),
    COMMETHOD([dispid(205)], HRESULT, 'GetRec',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RLinkElementRec), 'LinkElementRec' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206), helpstring('Ignored: LinkElementRec.NNLinkElementRec.LineId ; LinkElementRec.LLLinkElementRec.MasterLine ; LinkElementRec.LLLinkElementRec.SlaveLine ; LinkElementRec.LLLinkElementRec.MasterStartLink ; LinkElementRec.LLLinkElementRec.MasterEndLink ; MasterLine and SlaveLin')], HRESULT, 'SetRec',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RLinkElementRec), 'LinkElementRec' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208)], HRESULT, 'Clear',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209), 'propget'], HRESULT, 'Selected',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(209), 'propput'], HRESULT, 'Selected',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], ELongBoolean, 'Value' )),
    COMMETHOD([dispid(210), 'propget'], HRESULT, 'SelCount',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(211)], HRESULT, 'DeleteSelected',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(212)], HRESULT, 'SelectAll',
              ( ['in'], ELongBoolean, 'Select' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(213)], HRESULT, 'GetSelectedItemIds',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'ItemIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMLinkElements implementation
##class IAxisVMLinkElements_Impl(object):
##    def AddNN(self):
##        '-no docstring-'
##        #return NNLinkElementRec, ResultValue
##
##    def AddLL(self):
##        '-no docstring-'
##        #return LLLinkElementRec, ResultValue
##
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def LinkElementType(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def GetRec(self, Index):
##        '-no docstring-'
##        #return LinkElementRec, ResultValue
##
##    def SetRec(self, Index):
##        'Ignored: LinkElementRec.NNLinkElementRec.LineId ; LinkElementRec.LLLinkElementRec.MasterLine ; LinkElementRec.LLLinkElementRec.SlaveLine ; LinkElementRec.LLLinkElementRec.MasterStartLink ; LinkElementRec.LLLinkElementRec.MasterEndLink ; MasterLine and SlaveLin'
##        #return LinkElementRec, ResultValue
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def Clear(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    Selected = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SelCount(self):
##        '-no docstring-'
##        #return Value
##
##    def DeleteSelected(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def SelectAll(self, Select):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetSelectedItemIds(self):
##        '-no docstring-'
##        #return ItemIds, ResultValue
##


# values for enumeration 'ELineGeomType'
lgtStraightLine = 0
lgtCircleArc = 1
lgtEllipseArc = 2
ELineGeomType = c_int # enum
class REdgeConnectionForces(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{1473BCCF-C83F-476F-994E-AB01EC9DB4D7}')
class REdgeConnectionForceValues(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{E1F1E95E-75B8-4E43-B706-19C67ABD7F15}')
REdgeConnectionForceValues._fields_ = [
    ('ecfvNx', c_double),
    ('ecfvVy', c_double),
    ('ecfvVz', c_double),
    ('ecfvTx', c_double),
    ('ecfvMy', c_double),
    ('ecfvMz', c_double),
]
assert sizeof(REdgeConnectionForceValues) == 48, sizeof(REdgeConnectionForceValues)
assert alignment(REdgeConnectionForceValues) == 8, alignment(REdgeConnectionForceValues)
REdgeConnectionForces._fields_ = [
    ('ecfSection1', REdgeConnectionForceValues),
    ('ecfSection2', REdgeConnectionForceValues),
    ('ecfSection3', REdgeConnectionForceValues),
]
assert sizeof(REdgeConnectionForces) == 144, sizeof(REdgeConnectionForces)
assert alignment(REdgeConnectionForces) == 8, alignment(REdgeConnectionForces)

# values for enumeration 'ECalculationUserInteraction'
cuiUserInteraction = 0
cuiNoUserInteractionWithAutoCorrect = 1
cuiNoUserInteractionWithoutAutoCorrect = 2
cuiNoUserInteractionWithAutoCorrectNoShow = 3
cuiNoUserInteractionWithoutAutoCorrectNoShow = 4
ECalculationUserInteraction = c_int # enum

# values for enumeration 'EShowStructuralGridLineTitle'
ssgltStart = 0
ssgltEnd = 1
ssgltBoth = 2
EShowStructuralGridLineTitle = c_int # enum
class IAxisVMStrains(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMStrains Object'
    _iid_ = GUID('{39BCFEEF-B388-4326-B76C-0709BA7E7B69}')
    _idlflags_ = ['dual', 'oleautomation']
IAxisVMStrains._methods_ = [
]
################################################################
## code template for IAxisVMStrains implementation
##class IAxisVMStrains_Impl(object):


# values for enumeration 'EVBDefinitionType'
vbdtCentroid = 0
vbdtStraight = 1
vbdt1PAndV = 2
vbdt2P = 3
EVBDefinitionType = c_int # enum
class IAxisVMDomainSupport(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMDomainSupport Object'
    _iid_ = GUID('{4713CEE9-6180-4D40-AD9E-60C4C40B33C4}')
    _idlflags_ = ['dual', 'oleautomation']
IAxisVMDomainsSupports._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'IndexOfUID',
              ( ['in'], c_int, 'UID' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(203), 'propget'], HRESULT, 'Name',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Name' )),
    COMMETHOD([dispid(205), 'propget'], HRESULT, 'DomainId',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(206), 'propget'], HRESULT, 'SelCount',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(207), 'propget'], HRESULT, 'Selected',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(207), 'propput'], HRESULT, 'Selected',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], ELongBoolean, 'Value' )),
    COMMETHOD([dispid(208), 'propget'], HRESULT, 'UID',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(209)], HRESULT, 'GetStiffnesses',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RStiffnesses), 'Stiffness' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(210)], HRESULT, 'GetNonLinearity',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RNonLinearity), 'NonLinearity' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(211)], HRESULT, 'GetResistances',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RResistances), 'Resistances' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(212)], HRESULT, 'GetSelectedItemIds',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'ItemIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(213)], HRESULT, 'AddDomainsSupport',
              ( ['in'], c_int, 'DomainId' ),
              ( ['in', 'out'], POINTER(RStiffnessesXYZ), 'StiffnessesXYZ' ),
              ( ['in', 'out'], POINTER(RNonLinearityXYZ), 'NonLinearityXYZ' ),
              ( ['in', 'out'], POINTER(RResistancesXYZ), 'ResistancesXYZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(214)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(215)], HRESULT, 'DeleteSelected',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(216)], HRESULT, 'RenameSelected',
              ( ['in'], c_int, 'NewBase' ),
              ( ['in'], BSTR, 'FormatStr' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(217)], HRESULT, 'SelectAll',
              ( ['in'], ELongBoolean, 'Select' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(218)], HRESULT, 'SetStiffnesses',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RStiffnesses), 'Stiffness' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(219)], HRESULT, 'SetNonLinearity',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RNonLinearity), 'NonLinearity' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(220)], HRESULT, 'SetResistances',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RResistances), 'Resistances' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(221)], HRESULT, 'AddDomainPasternakSupport',
              ( ['in'], c_int, 'DomainId' ),
              ( ['in', 'out'], POINTER(RStiffnessesXYZ), 'StiffnessesXYZ' ),
              ( ['in'], c_double, 'ShearStiffness' ),
              ( ['in', 'out'], POINTER(RNonLinearityXYZ), 'NonLinearityXYZ' ),
              ( ['in', 'out'], POINTER(RResistancesXYZ), 'ResistancesXYZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(222)], HRESULT, 'GetPasternakStiffness',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(c_double), 'ShearStiffness' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(223)], HRESULT, 'SetPasternakStiffness',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_double, 'ShearStiffness' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(224), 'propget'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAxisVMDomainSupport)), 'Value' )),
]
################################################################
## code template for IAxisVMDomainsSupports implementation
##class IAxisVMDomainsSupports_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def IndexOfUID(self, UID):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Name(self, Index):
##        '-no docstring-'
##        #return Name
##
##    @property
##    def DomainId(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def SelCount(self):
##        '-no docstring-'
##        #return Value
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    Selected = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def UID(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def GetStiffnesses(self, Index):
##        '-no docstring-'
##        #return Stiffness, Value
##
##    def GetNonLinearity(self, Index):
##        '-no docstring-'
##        #return NonLinearity, Value
##
##    def GetResistances(self, Index):
##        '-no docstring-'
##        #return Resistances, Value
##
##    def GetSelectedItemIds(self):
##        '-no docstring-'
##        #return ItemIds, Value
##
##    def AddDomainsSupport(self, DomainId):
##        '-no docstring-'
##        #return StiffnessesXYZ, NonLinearityXYZ, ResistancesXYZ, Value
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def DeleteSelected(self):
##        '-no docstring-'
##        #return Value
##
##    def RenameSelected(self, NewBase, FormatStr):
##        '-no docstring-'
##        #return Value
##
##    def SelectAll(self, Select):
##        '-no docstring-'
##        #return Value
##
##    def SetStiffnesses(self, Index):
##        '-no docstring-'
##        #return Stiffness, Value
##
##    def SetNonLinearity(self, Index):
##        '-no docstring-'
##        #return NonLinearity, Value
##
##    def SetResistances(self, Index):
##        '-no docstring-'
##        #return Resistances, Value
##
##    def AddDomainPasternakSupport(self, DomainId, ShearStiffness):
##        '-no docstring-'
##        #return StiffnessesXYZ, NonLinearityXYZ, ResistancesXYZ, Value
##
##    def GetPasternakStiffness(self, Index):
##        '-no docstring-'
##        #return ShearStiffness, Value
##
##    def SetPasternakStiffness(self, Index, ShearStiffness):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Item(self, Index):
##        '-no docstring-'
##        #return Value
##

class RRebarSteelGrade_MSZ(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{E7774FE3-4DD3-4635-89A2-701C000D053F}')
RRebarSteelGrade_MSZ._fields_ = [
    ('ssh', c_double),
    ('es0', c_double),
    ('esh', c_double),
]
assert sizeof(RRebarSteelGrade_MSZ) == 24, sizeof(RRebarSteelGrade_MSZ)
assert alignment(RRebarSteelGrade_MSZ) == 8, alignment(RRebarSteelGrade_MSZ)
IAxisVMRCColumnCheckingEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]
class RReinforcementParameters_ITA(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{CB8903C7-4F3B-46CE-A345-90A80B2412FC}')

# values for enumeration 'EEnvironmentClass'
ecClassX0 = 0
ecClassXC1 = 1
ecClassXC2 = 2
ecClassXC3 = 3
ecClassXC4 = 4
ecClassXD1 = 5
ecClassXD2 = 6
ecClassXD3 = 7
ecClassXD4 = 8
ecClassXS1 = 9
ecClassXS2 = 10
ecClassXS3 = 11
ecClassXS4 = 12
ecClassXF1 = 13
ecClassXF2 = 14
ecClassXF3 = 15
ecClassXF4 = 16
ecClassXA1 = 17
ecClassXA2 = 18
ecClassXA3 = 19
ecClassXA4 = 20
ecClassXM1 = 21
ecClassXM2 = 22
ecClassXM3 = 23
ecClassXD2B = 24
EEnvironmentClass = c_int # enum

# values for enumeration 'ESlabLoadTransfer'
slt_OneWay = 0
slt_TwoWay = 1
ESlabLoadTransfer = c_int # enum

# values for enumeration 'ESlabLoadTransferDirection'
sltd_OneWayX = 0
sltd_OneWayY = 1
ESlabLoadTransferDirection = c_int # enum

# values for enumeration 'EReinforcementDirection'
rdX = 0
rdY = 1
rdNone = 2
EReinforcementDirection = c_int # enum

# values for enumeration 'ERCNonlinearSurfType'
rcnlst_Shell = 0
rcnlst_Wall = 1
rcnlst_Slab = 2
ERCNonlinearSurfType = c_int # enum

# values for enumeration 'EReinforcementType'
rtyp_Ortho = 0
rtyp_Skew = 1
EReinforcementType = c_int # enum
RReinforcementParameters_ITA._fields_ = [
    ('AggregateSize', c_double),
    ('StructClass', EStructClass_EC),
    ('EnvClass_T', EEnvironmentClass),
    ('EnvClass_B', EEnvironmentClass),
    ('fse', c_double),
    ('UnfavorableEccentricity_Npos', c_double),
    ('UnfavorableEccentricity_Nneg', c_double),
    ('dxt', c_double),
    ('dxb', c_double),
    ('dyt', c_double),
    ('dyb', c_double),
    ('SlabLoadTransfer', ESlabLoadTransfer),
    ('SlabLoadTransferDirection', ESlabLoadTransferDirection),
    ('MainDirectionTop', EReinforcementDirection),
    ('MainDirectionBottom', EReinforcementDirection),
    ('ct', c_double),
    ('cb', c_double),
    ('ApplyMinimumCover', ELongBoolean),
    ('TakeConcTensileStrength', ELongBoolean),
    ('ShortTerm', ELongBoolean),
    ('ShearReinforcementAngle', c_double),
    ('ShearCrackAngle', c_double),
    ('TakeConcTensileStrengthNL', ELongBoolean),
    ('UseFctmfl', ELongBoolean),
    ('ShrinkageEps', c_double),
    ('RCNonlinearSurfType', ERCNonlinearSurfType),
    ('ReinforcementType', EReinforcementType),
    ('AlphaAngle', c_double),
    ('BetaAngle', c_double),
    ('CalcFromLimitingCrackWidth', ELongBoolean),
    ('wk_b', c_double),
    ('wk2_b', c_double),
    ('wk_t', c_double),
    ('wk2_t', c_double),
    ('ApproximateLevelArm', ELongBoolean),
    ('SeelhoferMartiEquation', ELongBoolean),
    ('TrapSheetOnlyFormWork', ELongBoolean),
    ('TrapSheetOneLayerReinf', ELongBoolean),
    ('TrapSheetConsidered', ELongBoolean),
]
assert sizeof(RReinforcementParameters_ITA) == 248, sizeof(RReinforcementParameters_ITA)
assert alignment(RReinforcementParameters_ITA) == 8, alignment(RReinforcementParameters_ITA)
class RLinkElementForces(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{E87BF1BD-0B0A-4CDE-9E93-72A6EA262AEC}')
class RLinkElementForceValues(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{06E0C3B4-FC42-4B2F-A283-7DD10CFAE4FF}')
RLinkElementForceValues._fields_ = [
    ('lefvNx', c_double),
    ('lefvVy', c_double),
    ('lefvVz', c_double),
    ('lefvTx', c_double),
    ('lefvMy', c_double),
    ('lefvMz', c_double),
]
assert sizeof(RLinkElementForceValues) == 48, sizeof(RLinkElementForceValues)
assert alignment(RLinkElementForceValues) == 8, alignment(RLinkElementForceValues)
RLinkElementForces._fields_ = [
    ('lefLinkElementType', ELinkElementType),
    ('lefSection1', RLinkElementForceValues),
    ('lefSection2', RLinkElementForceValues),
    ('lefSection3', RLinkElementForceValues),
]
assert sizeof(RLinkElementForces) == 152, sizeof(RLinkElementForces)
assert alignment(RLinkElementForces) == 8, alignment(RLinkElementForces)
class RSurface(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{8D71C1B7-D594-463D-87D3-2A3C204CA835}')

# values for enumeration 'ESurfaceType'
stHole = 0
stMembraneStress = 1
stMembraneStrain = 2
stPlate = 3
stShell = 4
ESurfaceType = c_int # enum
class RElasticFoundationXYZ(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{2240FDB7-C7DE-4DFD-A5A6-C04C67D1213F}')
RElasticFoundationXYZ._fields_ = [
    ('x', c_double),
    ('y', c_double),
    ('z', c_double),
]
assert sizeof(RElasticFoundationXYZ) == 24, sizeof(RElasticFoundationXYZ)
assert alignment(RElasticFoundationXYZ) == 8, alignment(RElasticFoundationXYZ)
RNonLinearityXYZ._fields_ = [
    ('x', ELineNonLinearity),
    ('y', ELineNonLinearity),
    ('z', ELineNonLinearity),
]
assert sizeof(RNonLinearityXYZ) == 12, sizeof(RNonLinearityXYZ)
assert alignment(RNonLinearityXYZ) == 4, alignment(RNonLinearityXYZ)
RResistancesXYZ._fields_ = [
    ('x', c_double),
    ('y', c_double),
    ('z', c_double),
]
assert sizeof(RResistancesXYZ) == 24, sizeof(RResistancesXYZ)
assert alignment(RResistancesXYZ) == 8, alignment(RResistancesXYZ)

# values for enumeration 'ESurfaceCharacteristics'
schLinear = 0
schTensionOnly = 1
schCompressionOnly = 2
schBilinear = 3
ESurfaceCharacteristics = c_int # enum
RSurfaceAttr._fields_ = [
    ('Thickness', c_double),
    ('SurfaceType', ESurfaceType),
    ('RefZId', c_int),
    ('RefXId', c_int),
    ('MaterialId', c_int),
    ('ElasticFoundation', RElasticFoundationXYZ),
    ('NonLinearity', RNonLinearityXYZ),
    ('Resistance', RResistancesXYZ),
    ('Charactersitics', ESurfaceCharacteristics),
]
assert sizeof(RSurfaceAttr) == 96, sizeof(RSurfaceAttr)
assert alignment(RSurfaceAttr) == 8, alignment(RSurfaceAttr)
RSurface._fields_ = [
    ('N', c_int),
    ('LineIndex1', c_int),
    ('LineIndex2', c_int),
    ('LineIndex3', c_int),
    ('LineIndex4', c_int),
    ('Attr', RSurfaceAttr),
    ('DomainIndex', c_int),
]
assert sizeof(RSurface) == 128, sizeof(RSurface)
assert alignment(RSurface) == 8, alignment(RSurface)
IAxisVMCrossSectionOptimizationEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Cleared'),
    DISPMETHOD([dispid(202)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
    DISPMETHOD([dispid(204)], HRESULT, 'MainProgress',
               ( ['in'], c_double, 'Progress' ),
               ( ['in', 'out'], POINTER(ELongBoolean), 'Abort' )),
]

# values for enumeration 'EEdgeConnectionError'
eceLineIndexOutOfBounds = -100001
eceDomainIndexOutOfBounds = -100002
eceErrorAdding = -100003
EEdgeConnectionError = c_int # enum
class RLoadBeamDistributed(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{4C008358-28E6-458F-9EA5-515F02530227}')

# values for enumeration 'EBeamRibDistributionType'
brdtLength = 0
brdtProjected = 1
EBeamRibDistributionType = c_int # enum
RLoadBeamDistributed._fields_ = [
    ('LoadCaseId', c_int),
    ('LineId', c_int),
    ('qx1', c_double),
    ('qy1', c_double),
    ('qz1', c_double),
    ('mx1', c_double),
    ('my1', c_double),
    ('mz1', c_double),
    ('qx2', c_double),
    ('qy2', c_double),
    ('qz2', c_double),
    ('mx2', c_double),
    ('my2', c_double),
    ('mz2', c_double),
    ('SystemGLR', ESystem),
    ('Position1', c_double),
    ('Position2', c_double),
    ('DistributionType', EBeamRibDistributionType),
    ('Trapezoid', ELongBoolean),
]
assert sizeof(RLoadBeamDistributed) == 136, sizeof(RLoadBeamDistributed)
assert alignment(RLoadBeamDistributed) == 8, alignment(RLoadBeamDistributed)
class RSurfaceStressValues(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{01ADE7C5-DD78-4C1C-9F16-425AD25F902E}')
RSurfaceStressValues._fields_ = [
    ('ssvSxx', c_double),
    ('ssvSyy', c_double),
    ('ssvSxy', c_double),
    ('ssvSxz', c_double),
    ('ssvSyz', c_double),
    ('ssvSVM', c_double),
    ('ssvS1', c_double),
    ('ssvS2', c_double),
    ('ssvAs', c_double),
]
assert sizeof(RSurfaceStressValues) == 72, sizeof(RSurfaceStressValues)
assert alignment(RSurfaceStressValues) == 8, alignment(RSurfaceStressValues)
class RLine3d(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{667ECED6-6B33-438B-A9AC-4B5CA5B30FB6}')

# values for enumeration 'EArcAngleOrientation'
oClockwise = 0
oCounterClockwise = 1
EArcAngleOrientation = c_int # enum
RLine3d._fields_ = [
    ('LineType', ELine3dType),
    ('P1', RPoint3d),
    ('P2', RPoint3d),
    ('ArcCenter', RPoint3d),
    ('ArcOrientation', EArcAngleOrientation),
    ('NormVect', RPoint3d),
]
assert sizeof(RLine3d) == 112, sizeof(RLine3d)
assert alignment(RLine3d) == 8, alignment(RLine3d)
class RRCBeamCrossSections(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{FBC0DB13-9360-4ABD-98A0-441D1C66F04E}')
class RRCBeamSection(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{D10D182A-9B7B-476C-9949-C3F5C4BD8630}')
RRCBeamSection._fields_ = [
    ('bw', c_double),
    ('h', c_double),
    ('hf', c_double),
    ('beff', c_double),
]
assert sizeof(RRCBeamSection) == 32, sizeof(RRCBeamSection)
assert alignment(RRCBeamSection) == 8, alignment(RRCBeamSection)
RRCBeamCrossSections._fields_ = [
    ('StartSection', RRCBeamSection),
    ('EndSection', RRCBeamSection),
]
assert sizeof(RRCBeamCrossSections) == 64, sizeof(RRCBeamCrossSections)
assert alignment(RRCBeamCrossSections) == 8, alignment(RRCBeamCrossSections)
class RLoadRibDistributed(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{0A0F2266-046A-4912-9B99-CCB0852DE2FF}')
RLoadRibDistributed._fields_ = [
    ('LoadCaseId', c_int),
    ('LineId', c_int),
    ('qx1', c_double),
    ('qy1', c_double),
    ('qz1', c_double),
    ('mx1', c_double),
    ('my1', c_double),
    ('mz1', c_double),
    ('qx2', c_double),
    ('qy2', c_double),
    ('qz2', c_double),
    ('mx2', c_double),
    ('my2', c_double),
    ('mz2', c_double),
    ('SystemGLR', ESystem),
    ('Position1', c_double),
    ('Position2', c_double),
    ('DistributionType', EBeamRibDistributionType),
    ('Trapezoid', ELongBoolean),
]
assert sizeof(RLoadRibDistributed) == 136, sizeof(RLoadRibDistributed)
assert alignment(RLoadRibDistributed) == 8, alignment(RLoadRibDistributed)
class RResultBlock(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{11667714-717B-4B85-A3CA-91A7775458DE}')
RResultBlock._fields_ = [
    ('ResultType', EResultType),
    ('LoadCaseId', c_int),
    ('LoadCombinationId', c_int),
    ('LoadLevel', c_int),
    ('AnalysisType', EAnalysisType),
    ('MinMaxType', EMinMaxType),
    ('EnvelopeUID', c_int),
    ('CombinationType', ECombinationType),
]
assert sizeof(RResultBlock) == 32, sizeof(RResultBlock)
assert alignment(RResultBlock) == 4, alignment(RResultBlock)
class RRebarSteelGrade_DIN(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{5F194C56-D99C-4C3D-B624-708E862D206A}')
RRebarSteelGrade_DIN._fields_ = [
    ('fyk', c_double),
    ('Epsuk', c_double),
    ('GammaS', c_double),
]
assert sizeof(RRebarSteelGrade_DIN) == 24, sizeof(RRebarSteelGrade_DIN)
assert alignment(RRebarSteelGrade_DIN) == 8, alignment(RRebarSteelGrade_DIN)

# values for enumeration 'EVSDefinitionType'
vsdtCentroid = 0
vsdtEccentric = 1
EVSDefinitionType = c_int # enum

# values for enumeration 'EStiffnessUnitType'
sut_Translational = 0
sut_Rotational = 1
sut_Line_translational = 2
sut_Line_rotational = 3
sut_Surface = 4
EStiffnessUnitType = c_int # enum
class RLineStressValues(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{E55FB3DF-DCE6-482E-967B-0C4316E9570D}')
RLineStressValues._fields_ = [
    ('lsvLineType', ELineType),
    ('lsvPointCount', c_int),
    ('lsvS1', c_double),
    ('lsvS2', c_double),
    ('lsvS3', c_double),
    ('lsvS4', c_double),
    ('lsvS5', c_double),
    ('lsvS6', c_double),
    ('lsvS7', c_double),
    ('lsvS8', c_double),
    ('lsvS9', c_double),
    ('lsvV1', c_double),
    ('lsvV2', c_double),
    ('lsvV3', c_double),
    ('lsvV4', c_double),
    ('lsvV5', c_double),
    ('lsvV6', c_double),
    ('lsvV7', c_double),
    ('lsvV8', c_double),
    ('lsvV9', c_double),
    ('lsvSo1', c_double),
    ('lsvSo2', c_double),
    ('lsvSo3', c_double),
    ('lsvSo4', c_double),
    ('lsvSo5', c_double),
    ('lsvSo6', c_double),
    ('lsvSo7', c_double),
    ('lsvSo8', c_double),
    ('lsvSo9', c_double),
    ('lsvSeff1', c_double),
    ('lsvSeff2', c_double),
    ('lsvSeff3', c_double),
    ('lsvSeff4', c_double),
    ('lsvSeff5', c_double),
    ('lsvSeff6', c_double),
    ('lsvSeff7', c_double),
    ('lsvSeff8', c_double),
    ('lsvSeff9', c_double),
    ('lsvfy1', c_double),
    ('lsvfy2', c_double),
    ('lsvfy3', c_double),
    ('lsvfy4', c_double),
    ('lsvfy5', c_double),
    ('lsvfy6', c_double),
    ('lsvfy7', c_double),
    ('lsvfy8', c_double),
    ('lsvfy9', c_double),
    ('lsvKih1', c_double),
    ('lsvKih2', c_double),
    ('lsvKih3', c_double),
    ('lsvKih4', c_double),
    ('lsvKih5', c_double),
    ('lsvKih6', c_double),
    ('lsvKih7', c_double),
    ('lsvKih8', c_double),
    ('lsvKih9', c_double),
    ('lsvVymean', c_double),
    ('lsvVzmean', c_double),
    ('lsvSmin', c_int),
    ('lsvSmax', c_int),
    ('lsvVmin', c_int),
    ('lsvVmax', c_int),
    ('lsvSomin', c_int),
    ('lsvSomax', c_int),
]
assert sizeof(RLineStressValues) == 480, sizeof(RLineStressValues)
assert alignment(RLineStressValues) == 8, alignment(RLineStressValues)
class RSurfaceStressValuesTMB(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{55559AE8-F267-40D4-A56F-9EC29E4AF597}')
RSurfaceStressValuesTMB._fields_ = [
    ('ssvTop', RSurfaceStressValues),
    ('ssvMiddle', RSurfaceStressValues),
    ('ssvBottom', RSurfaceStressValues),
]
assert sizeof(RSurfaceStressValuesTMB) == 216, sizeof(RSurfaceStressValuesTMB)
assert alignment(RSurfaceStressValuesTMB) == 8, alignment(RSurfaceStressValuesTMB)
class RRebarSteelGrade_STAS(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{A13CFFD3-8448-4298-BFB3-E8C983DB5B9D}')
RRebarSteelGrade_STAS._fields_ = [
    ('Ra', c_double),
    ('es1', c_double),
    ('esu', c_double),
    ('mat', c_double),
]
assert sizeof(RRebarSteelGrade_STAS) == 32, sizeof(RRebarSteelGrade_STAS)
assert alignment(RRebarSteelGrade_STAS) == 8, alignment(RRebarSteelGrade_STAS)
class RRCBeamSupport(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{BC0626A7-046B-4C5C-A557-EB5DD078122D}')
RRCBeamSupport._fields_ = [
    ('OverWrite', ELongBoolean),
    ('ActualHalfWidth', c_double),
    ('TheoreticalHalfWidth', c_double),
    ('ShearReduction', ELongBoolean),
]
assert sizeof(RRCBeamSupport) == 32, sizeof(RRCBeamSupport)
assert alignment(RRCBeamSupport) == 8, alignment(RRCBeamSupport)
class RReinforcementParameters_SIA(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{0323914F-B1F3-4ED8-BE8F-365277F1104C}')
RReinforcementParameters_SIA._fields_ = [
    ('AggregateSize', c_double),
    ('StructClass', EStructClass_EC),
    ('EnvClass_T', EEnvironmentClass),
    ('EnvClass_B', EEnvironmentClass),
    ('fse', c_double),
    ('dxt', c_double),
    ('dxb', c_double),
    ('dyt', c_double),
    ('dyb', c_double),
    ('SlabLoadTransfer', ESlabLoadTransfer),
    ('SlabLoadTransferDirection', ESlabLoadTransferDirection),
    ('MainDirectionTop', EReinforcementDirection),
    ('MainDirectionBottom', EReinforcementDirection),
    ('ct', c_double),
    ('cb', c_double),
    ('ApplyMinimumCover', ELongBoolean),
    ('MaxCompressionHeight', c_double),
    ('kc_compression', c_double),
    ('kc_tension', c_double),
    ('TakeConcTensileStrength', ELongBoolean),
    ('ShortTerm', ELongBoolean),
    ('ShearReinforcementAngle', c_double),
    ('ShearCrackAngle', c_double),
    ('TakeConcTensileStrengthNL', ELongBoolean),
    ('ShrinkageEps', c_double),
    ('RCNonlinearSurfType', ERCNonlinearSurfType),
    ('ReinforcementType', EReinforcementType),
    ('AlphaAngle', c_double),
    ('BetaAngle', c_double),
    ('CalcFromLimitingCrackWidth', ELongBoolean),
    ('wk_b', c_double),
    ('wk2_b', c_double),
    ('wk_t', c_double),
    ('wk2_t', c_double),
    ('ApproximateLevelArm', ELongBoolean),
    ('SeelhoferMartiEquation', ELongBoolean),
    ('TrapSheetOnlyFormWork', ELongBoolean),
    ('TrapSheetOneLayerReinf', ELongBoolean),
    ('TrapSheetConsidered', ELongBoolean),
]
assert sizeof(RReinforcementParameters_SIA) == 256, sizeof(RReinforcementParameters_SIA)
assert alignment(RReinforcementParameters_SIA) == 8, alignment(RReinforcementParameters_SIA)
class RRebarSteelGrade_SIA(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{7F639E94-0C20-4E90-9FFB-5C5C4CEBD3DF}')
RRebarSteelGrade_SIA._fields_ = [
    ('fsk', c_double),
    ('ks', c_double),
    ('Epsuk', c_double),
    ('Epsud', c_double),
    ('GammaS', c_double),
]
assert sizeof(RRebarSteelGrade_SIA) == 40, sizeof(RRebarSteelGrade_SIA)
assert alignment(RRebarSteelGrade_SIA) == 8, alignment(RRebarSteelGrade_SIA)

# values for enumeration 'ESeismicComponentSumType'
scstUsual = 0
scstCritical = 1
scstNMyMz = 2
scstMyVz = 3
scstMzVy = 4
scstN = 5
scstNVyVz = 6
scstNMyMx = 7
scstNMzMx = 8
scstNAbsMyMz = 9
scstNMy = 10
scstNMz = 11
ESeismicComponentSumType = c_int # enum
class RLoadBeamConcentrated(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{BB61DD2B-96F3-4F73-B2A9-86C7209C804B}')
RLoadBeamConcentrated._fields_ = [
    ('LoadCaseId', c_int),
    ('LineId', c_int),
    ('Fgx', c_double),
    ('Fgy', c_double),
    ('Fgz', c_double),
    ('Mgx', c_double),
    ('Mgy', c_double),
    ('Mgz', c_double),
    ('Position', c_double),
    ('SystemGLR', ESystem),
]
assert sizeof(RLoadBeamConcentrated) == 72, sizeof(RLoadBeamConcentrated)
assert alignment(RLoadBeamConcentrated) == 8, alignment(RLoadBeamConcentrated)
class AxisVMVelocity(CoClass):
    'AxisVMVelocity Object'
    _reg_clsid_ = GUID('{9E952FFC-9C3A-4088-B3E2-4079889AA4AA}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMVelocityEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMVelocity Object'
    _iid_ = GUID('{0B6BFC9D-B069-42E4-9601-C7694A74D224}')
    _idlflags_ = []
    _methods_ = []
AxisVMVelocity._com_interfaces_ = [IAxisVMVelocity]
AxisVMVelocity._outgoing_interfaces_ = [IAxisVMVelocityEvents]

IAxisVMLinesEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Cleared'),
    DISPMETHOD([dispid(202)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
    DISPMETHOD([dispid(204)], HRESULT, 'AfterDeleted',
               ( ['in'], VARIANT, 'UIDs' )),
]
IAxisVMSpectrumEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]
class IAxisVMResultTreeIterator(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMResultTreeIterator Object'
    _iid_ = GUID('{5F221982-4760-4D7D-B151-7CF3684EBDF2}')
    _idlflags_ = ['dual', 'oleautomation']
IAxisVMResultTreeIterator._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetFirstNode',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetNextSibling',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetFirstChild',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(4)], HRESULT, 'HasChildren',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'ResultValue' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'Text',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'ResultRec',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(RResultTreeIteratorRec), 'Value' )),
]
################################################################
## code template for IAxisVMResultTreeIterator implementation
##class IAxisVMResultTreeIterator_Impl(object):
##    def GetFirstNode(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetNextSibling(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetFirstChild(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def HasChildren(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def Text(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def ResultRec(self, Index):
##        '-no docstring-'
##        #return Value
##


# values for enumeration 'EResultComponent'
rc_lsSmin = 0
rc_lsSmax = 1
rc_lsVmin = 2
rc_lsVmax = 3
rc_lsSomin = 4
rc_lsSomax = 5
rc_lsVymean = 6
rc_lsVzmean = 7
rc_lsSminMax = 8
rc_lsVminMax = 9
rc_lsSominMax = 10
rc_lsSeffMin = 11
rc_lsSeffMax = 12
rc_lsSeffMinMax = 13
rc_lsfyMin = 14
rc_lsfyMax = 15
rc_lsfyMinMax = 16
rc_lsUMin = 17
rc_lsUMax = 18
rc_lsUMinMax = 19
rc_lsBMin = 20
rc_lsBMax = 21
rc_lsBMinMax = 22
rc_ssSxx_Top = 100
rc_ssSyy_Top = 101
rc_ssSxy_Top = 102
rc_ssSxz_Top = 103
rc_ssSyz_Top = 104
rc_ssSVM_Top = 105
rc_ssS1_Top = 106
rc_ssS2_Top = 107
rc_ssAs_Top = 108
rc_ssSxx_Middle = 110
rc_ssSyy_Middle = 111
rc_ssSxy_Middle = 112
rc_ssSxz_Middle = 113
rc_ssSyz_Middle = 114
rc_ssSVM_Middle = 115
rc_ssS1_Middle = 116
rc_ssS2_Middle = 117
rc_ssAs_Middle = 118
rc_ssSxx_Bottom = 120
rc_ssSyy_Bottom = 121
rc_ssSxy_Bottom = 122
rc_ssSxz_Bottom = 123
rc_ssSyz_Bottom = 124
rc_ssSVM_Bottom = 125
rc_ssS1_Bottom = 126
rc_ssS2_Bottom = 127
rc_ssAs_Bottom = 128
rc_ssSzz_Top = 129
rc_ssSeff_Top = 130
rc_ssfy_Top = 131
rc_ssU_Top = 132
rc_ssState_Top = 133
rc_ssByy_Top = 134
rc_ssBzz_Top = 135
rc_ssBxy_Top = 136
rc_ssSzz_Middle = 137
rc_ssSeff_Middle = 138
rc_ssfy_Middle = 139
rc_ssU_Middle = 140
rc_ssState_Middle = 141
rc_ssByy_Middle = 142
rc_ssBzz_Middle = 143
rc_ssBxy_Middle = 144
rc_ssSzz_Bottom = 145
rc_ssSeff_Bottom = 146
rc_ssfy_Bottom = 147
rc_ssU_Bottom = 148
rc_ssState_Bottom = 149
rc_ssByy_Bottom = 150
rc_ssBzz_Bottom = 151
rc_ssBxy_Bottom = 152
rc_lfNx = 200
rc_lfVy = 201
rc_lfVz = 202
rc_lfTx = 203
rc_lfMy = 204
rc_lfMz = 205
rc_lfMyD = 206
rc_lfVxz = 207
rc_sfNx = 300
rc_sfNy = 301
rc_sfNxy = 302
rc_sfMx = 303
rc_sfMy = 304
rc_sfMxy = 305
rc_sfVxz = 306
rc_sfVyz = 307
rc_sfvSz = 308
rc_sfN1 = 309
rc_sfN2 = 310
rc_sfAn = 311
rc_sfM1 = 312
rc_sfM2 = 313
rc_sfAm = 314
rc_sfNxD = 315
rc_sfNyD = 316
rc_sfMxDp = 319
rc_sfMxDm = 320
rc_sfMyDp = 321
rc_sfMyDm = 322
rc_sfAvRz = 323
rc_sfAn1 = 324
rc_sfAn2 = 325
rc_sfAm1 = 326
rc_sfAm2 = 327
rc_nsfRx = 400
rc_nsfRy = 401
rc_nsfRz = 402
rc_nsfRxx = 403
rc_nsfRyy = 404
rc_nsfRzz = 405
rc_nsfRr = 406
rc_nsfRrr = 407
rc_nsfRxyz = 408
rc_nsfRxxyyzz = 409
rc_nsfRalpha = 410
rc_lsfRx = 500
rc_lsfRy = 501
rc_lsfRz = 502
rc_lsfRxx = 503
rc_lsfRyy = 504
rc_lsfRzz = 505
rc_lsfRr = 506
rc_lsfRrr = 507
rc_ssfRx = 600
rc_ssfRy = 601
rc_ssfRz = 602
rc_ssfRr = 603
rc_sfRx = 700
rc_sfRy = 701
rc_sfRz = 702
rc_sfRxx = 704
rc_sfRyy = 705
rc_sfRzz = 706
rc_gfNx = 800
rc_ecfNx = 900
rc_ecfVy = 901
rc_ecfVz = 902
rc_ecfTx = 903
rc_ecfMy = 904
rc_ecfMz = 905
rc_lefNx_NN = 1000
rc_lefVy_NN = 1001
rc_lefVz_NN = 1002
rc_lefTx_NN = 1003
rc_lefMy_NN = 1004
rc_lefMz_NN = 1005
rc_lefNx_LL = 1010
rc_lefVy_LL = 1011
rc_lefVz_LL = 1012
rc_lefTx_LL = 1013
rc_lefMy_LL = 1014
rc_lefMz_LL = 1015
rc_d_eX = 1101
rc_d_eY = 1102
rc_d_eZ = 1103
rc_d_fX = 1104
rc_d_fY = 1105
rc_d_fZ = 1106
rc_d_eR = 1107
rc_d_fR = 1108
rc_rAsbx = 1200
rc_rAsby = 1201
rc_rAstx = 1202
rc_rAsty = 1203
rc_rAsxbt = 1204
rc_rAsybt = 1205
rc_rAsxyb = 1206
rc_rAsxyt = 1207
rc_scVRdc = 1300
rc_scVEdMinusVRdc = 1301
rc_scVRdmax = 1302
rc_scVEdDivVRdmax = 1303
rc_scaVEd = 1304
rc_scAsw = 1305
rc_coBottom = 1400
rc_cw_wkb = 1400
rc_coTop = 1401
rc_cw_wkt = 1401
rc_cw_wk2b = 1402
rc_cw_wk2t = 1403
rc_cw_wRb = 1404
rc_cw_wRt = 1405
rc_cw_wS2b = 1406
rc_cw_wS2t = 1407
rc_veX = 1500
rc_veY = 1501
rc_veZ = 1502
rc_veXX = 1503
rc_veYY = 1504
rc_veZZ = 1505
rc_veR = 1506
rc_veRR = 1507
rc_acX = 1600
rc_acY = 1601
rc_acZ = 1602
rc_acXX = 1603
rc_acYY = 1604
rc_acZZ = 1605
rc_acR = 1606
rc_acRR = 1607
rc_arAsxb = 1700
rc_arAsyb = 1701
rc_arAsxt = 1702
rc_arAsyt = 1703
rc_arAsxbt = 1704
rc_arAsybt = 1705
rc_rdAsxb = 1800
rc_rdAsyb = 1801
rc_rdAsxt = 1802
rc_rdAsyt = 1803
rc_ilPx1 = 1900
rc_ilPy1 = 1901
rc_ilPz1 = 1902
rc_sstExx = 2000
rc_sstEyy = 2001
rc_sstExy = 2002
rc_sstFzz = 2003
rc_sstKxx = 2004
rc_sstKyy = 2005
rc_sstKxy = 2006
rc_sstExz = 2007
rc_sstEyz = 2008
rc_sstEsz = 2009
rc_sstE1 = 2010
rc_sstE2 = 2011
rc_sstAe = 2012
rc_sstK1 = 2013
rc_sstK2 = 2014
rc_sstAk = 2015
rc_ivDnx = 2100
rc_ivDny = 2101
rc_ivDnxy = 2102
rc_ivDmx = 2103
rc_ivDmy = 2104
rc_ivDmxy = 2105
rc_ivDqx = 2106
rc_ivDqy = 2107
rc_bd_eX = 2200
rc_bd_eY = 2201
rc_bd_eZ = 2202
rc_bd_fX = 2203
rc_bd_fY = 2204
rc_bd_fZ = 2205
rc_bd_eR = 2206
rc_bd_fR = 2207
rc_rsSxb = 2300
rc_rsSyb = 2301
rc_rsSxt = 2302
rc_rsSyt = 2303
rc_rsSxbt = 2304
rc_rsSybt = 2305
rc_rReinfCheck = 2400
rc_ymEx = 2500
rc_ymEy = 2501
rc_vd_eX = 2600
rc_vd_eY = 2601
rc_vd_eZ = 2602
rc_vd_fX = 2603
rc_vd_fY = 2604
rc_vd_fZ = 2605
rc_vd_eR = 2606
rc_vd_fR = 2607
rc_sfMxD = 2700
rc_sfMyD = 2701
rc_sfMxU = 2702
rc_sfMyU = 2703
rc_sfMxDU = 2704
rc_sfMyDU = 2705
rc_sfMxDcr = 2800
rc_sfMyDcr = 2801
rc_sfMxUcr = 2802
rc_sfMyUcr = 2803
rc_sfMxDUcr = 2804
rc_sfMyDUcr = 2805
rc_arcrUtil = 2901
rc_arcrAvgUtil = 2902
rc_arcrVx = 3000
rc_arcrN = 3001
rc_arcrVz = 3002
rc_arcrM = 3003
rc_arcrDez = 3004
rc_berrdEx = 3100
rc_berrdEy = 3101
rc_berrdEz = 3102
rc_berrdFx = 3103
rc_berrdFy = 3104
rc_berrdFz = 3105
rc_berrdEr = 3106
rc_berrdFr = 3107
rc_bstExx = 3200
rc_bstKyy = 3201
rc_bstKzz = 3202
rc_bstEyz = 3203
rc_bstExy = 3204
rc_bstExz = 3205
rc_vbifNx = 3300
rc_vbifVy = 3301
rc_vbifVz = 3302
rc_vbifTx = 3303
rc_vbifMy = 3304
rc_vbifMz = 3305
rc_bstspExxTMin = 3400
rc_bstspExxTMax = 3401
rc_bstspExxTMinMax = 3402
rc_bstspExxEMin = 3403
rc_bstspExxEMax = 3404
rc_bstspExxEMinMax = 3405
rc_bstspExxPMin = 3406
rc_bstspExxPMax = 3407
rc_bstspExxPMinMax = 3408
rc_bstspEeffMin = 3409
rc_bstspEeffMax = 3410
rc_bstspEeffMinMax = 3411
rc_bstspDeeffMin = 3412
rc_bstspDeeffMax = 3413
rc_bstspDeeffMinMax = 3414
rc_bstspLeeffMin = 3415
rc_bstspLeeffMax = 3416
rc_bstspLeeffMinMax = 3417
rc_vrfaRSelf = 3500
rc_vrfaRExtr = 3501
rc_vrfaRFull = 3502
rc_vbdEx = 3600
rc_vbdEy = 3601
rc_vbdEz = 3602
rc_vbdFx = 3603
rc_vbdFy = 3604
rc_vbdFz = 3605
rc_vbdEr = 3606
rc_vbdFr = 3607
rc_sstspExxTT = 3700
rc_sstspEyyTT = 3701
rc_sstspExyTT = 3702
rc_sstspE1TT = 3703
rc_sstspE2TT = 3704
rc_sstspAeTT = 3705
rc_sstspExxET = 3706
rc_sstspEyyET = 3707
rc_sstspExyET = 3708
rc_sstspE1ET = 3709
rc_sstspE2ET = 3710
rc_sstspAeET = 3711
rc_sstspExxPT = 3712
rc_sstspEyyPT = 3713
rc_sstspExyPT = 3714
rc_sstspE1PT = 3715
rc_sstspE2PT = 3716
rc_sstspAePT = 3717
rc_sstspEeffPT = 3718
rc_sstspDeeffPT = 3719
rc_sstspExxTC = 3720
rc_sstspEyyTC = 3721
rc_sstspExyTC = 3722
rc_sstspE1TC = 3723
rc_sstspE2TC = 3724
rc_sstspAeTC = 3725
rc_sstspExxEC = 3726
rc_sstspEyyEC = 3727
rc_sstspExyEC = 3728
rc_sstspE1EC = 3729
rc_sstspE2EC = 3730
rc_sstspAeEC = 3731
rc_sstspExxPC = 3732
rc_sstspEyyPC = 3733
rc_sstspExyPC = 3734
rc_sstspE1PC = 3735
rc_sstspE2PC = 3736
rc_sstspAePC = 3737
rc_sstspEeffPC = 3738
rc_sstspDeeffPC = 3739
rc_sstspExxTB = 3740
rc_sstspEyyTB = 3741
rc_sstspExyTB = 3742
rc_sstspE1TB = 3743
rc_sstspE2TB = 3744
rc_sstspAeTB = 3745
rc_sstspExxEB = 3746
rc_sstspEyyEB = 3747
rc_sstspExyEB = 3748
rc_sstspE1EB = 3749
rc_sstspE2EB = 3750
rc_sstspAeEB = 3751
rc_sstspExxPB = 3752
rc_sstspEyyPB = 3753
rc_sstspExyPB = 3754
rc_sstspE1PB = 3755
rc_sstspE2PB = 3756
rc_sstspAePB = 3757
rc_sstspEeffPB = 3758
rc_sstspDeeffPB = 3759
rc_sstspLeeffT = 3760
rc_sstspLeeffC = 3761
rc_sstspLeeffB = 3762
rc_vdW1 = 3800
rc_vdW2 = 3801
rc_vdW3 = 3802
rc_vdWTot = 3803
rc_vdWbij = 3804
rc_rccwUBeam = 3900
rc_rccwUStrip = 3901
rc_rccwUOverall = 3902
rc_rsdEx = 4000
rc_rsdEy = 4001
rc_rsdEz = 4002
rc_rsdFx = 4003
rc_rsdFy = 4004
rc_rsdFz = 4005
rc_snlFyx = 4100
rc_snlUx = 4101
rc_snlEEx = 4102
rc_snlPEx = 4103
rc_snlPEeffx = 4104
rc_snlPdeeffx = 4105
rc_snlBx = 4106
rc_snlFyy = 4107
rc_snlUy = 4108
rc_snlEEy = 4109
rc_snlPEy = 4110
rc_snlPEeffy = 4111
rc_snlPdeeffy = 4112
rc_snlBy = 4113
rc_snlFyz = 4114
rc_snlUz = 4115
rc_snlEEz = 4116
rc_snlPEz = 4117
rc_snlPEeffz = 4118
rc_snlPdeeffz = 4119
rc_snlBz = 4120
rc_snlMyxx = 4121
rc_snlUxx = 4122
rc_snlEExx = 4123
rc_snlPExx = 4124
rc_snlPEeffxx = 4125
rc_snlPdeeffxx = 4126
rc_snlBxx = 4127
rc_snlMyyy = 4128
rc_snlUyy = 4129
rc_snlEEyy = 4130
rc_snlPEyy = 4131
rc_snlPEeffyy = 4132
rc_snlPdeeffyy = 4133
rc_snlByy = 4134
rc_snlMyzz = 4135
rc_snlUzz = 4136
rc_snlEEzz = 4137
rc_snlPEzz = 4138
rc_snlPEeffzz = 4139
rc_snlPdeeffzz = 4140
rc_snlBzz = 4141
rc_xsSxxmT = 4200
rc_xsSyymT = 4201
rc_xsSxymT = 4202
rc_xsSxxmB = 4203
rc_xsSyymB = 4204
rc_xsSxymB = 4205
rc_xsSxxn = 4206
rc_xsSyyn = 4207
rc_xsSxyn = 4208
rc_xsSxzmax = 4209
rc_xsSyzmax = 4210
rc_xsSrxmax = 4211
rc_xsSrymax = 4212
rc_xuMN0 = 4300
rc_xuMN90 = 4301
rc_xuVt = 4302
rc_xuVrN = 4303
rc_xuMax = 4304
rc_dcmwU = 4400
rc_sdrVx = 4500
rc_sdrRDx = 4501
rc_sdrRSx = 4502
rc_sdrVy = 4503
rc_sdrRDy = 4504
rc_sdrRSy = 4505
rc_sdrVz = 4506
rc_sdrRDz = 4507
rc_sdrRSz = 4508
rc_sdrVxx = 4509
rc_sdrRDxx = 4510
rc_sdrRSxx = 4511
rc_sdrVyy = 4512
rc_sdrRDyy = 4513
rc_sdrRSyy = 4514
rc_sdrVzz = 4515
rc_sdrRDzz = 4516
rc_sdrRSzz = 4517
rc_rccolUNM = 4518
rc_rccolUVT = 4519
rc_rccolAsl = 4520
rc_rccolUSum = 4521
rc_cw_wkbt = 4522
rc_cw_wk2bt = 4523
rc_sd_eff = 10000
rc_sd_1 = 10001
rc_sd_2 = 10002
rc_sd_3 = 10003
rc_sd_4 = 10004
rc_sd_5 = 10005
rc_sd_6 = 10006
rc_sd_7 = 10007
rc_sd_8 = 10008
rc_sd_9 = 10009
rc_sd_10 = 10010
rc_sd_11 = 10011
rc_sd_12 = 10012
rc_sd_13 = 10013
rc_sd_14 = 10014
rc_sd_15 = 10015
rc_sd_16 = 10016
rc_sd_17 = 10017
rc_sd_18 = 10018
rc_sd_19 = 10019
rc_sd_20 = 10020
rc_sd_21 = 10021
rc_sd_22 = 10022
rc_sd_23 = 10023
rc_sd_24 = 10024
rc_sd_25 = 10025
rc_sd_26 = 10026
rc_sd_27 = 10027
rc_sd_28 = 10028
rc_sd_29 = 10029
rc_sd_30 = 10030
rc_sd_31 = 10031
rc_sd_util_ULS = 10090
rc_sd_util_SLS = 10091
rc_td_eff = 10100
rc_td_1 = 10101
rc_td_2 = 10102
rc_td_3 = 10103
rc_td_4 = 10104
rc_td_5 = 10105
rc_td_6 = 10106
rc_td_7 = 10107
rc_td_8 = 10108
rc_td_9 = 10109
rc_td_10 = 10110
rc_td_11 = 10111
rc_td_12 = 10112
rc_td_13 = 10113
rc_td_14 = 10114
rc_td_15 = 10115
rc_td_util_ULS = 10190
rc_td_util_SLS = 10191
rc_td_util = 10192
EResultComponent = c_int # enum
class AxisVMCrossSectionEditor(CoClass):
    'AxisVMCrossSectionEditor Object'
    _reg_clsid_ = GUID('{2C03D712-C3E5-44E2-98E2-56AECE3442B6}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMCrossSectionEditor(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMCrossSectionEditor Object'
    _iid_ = GUID('{EC5B42C0-A643-4800-8742-EF72EBBBC678}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxisVMCrossSectionEditorEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMCrossSectionEditor Object'
    _iid_ = GUID('{F2B56D40-CBF5-407A-9A0B-0014877C5AEE}')
    _idlflags_ = []
    _methods_ = []
AxisVMCrossSectionEditor._com_interfaces_ = [IAxisVMCrossSectionEditor]
AxisVMCrossSectionEditor._outgoing_interfaces_ = [IAxisVMCrossSectionEditorEvents]

class RLineSupportStiffParams(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{6C03D567-243C-40EC-A60D-057B79D627D2}')
class RLinearFootingParams(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{4E8D678F-4D3C-4803-B60F-7D1796ABAC19}')
class RBulkMemberSupport(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{C812D36D-AC0E-43FC-9FA9-BAC496980E94}')
RBulkMemberSupport._fields_ = [
    ('SupportType', ELineSupportType),
    ('MemberID', c_int),
    ('Stiffnesses', RStiffnesses),
    ('NonLinearity', RNonLinearity),
    ('Resistances', RResistances),
    ('SurfaceId1', c_int),
    ('SurfaceId2', c_int),
    ('DomainId1', c_int),
    ('DomainId2', c_int),
    ('ReferenceId', c_int),
]
assert sizeof(RBulkMemberSupport) == 152, sizeof(RBulkMemberSupport)
assert alignment(RBulkMemberSupport) == 8, alignment(RBulkMemberSupport)
class RBulkMemberWSSupport(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{831A0804-606C-4BD3-BCC4-4661AA05D7F4}')
RBulkMemberWSSupport._fields_ = [
    ('SupportType', ELineSupportType),
    ('MemberID', c_int),
    ('Stiffnesses', RStiffnesses),
    ('NonLinearity', RNonLinearity),
    ('Resistances', RResistances),
    ('ShearStiffness', c_double),
    ('SurfaceId1', c_int),
    ('SurfaceId2', c_int),
    ('DomainId1', c_int),
    ('DomainId2', c_int),
    ('ReferenceId', c_int),
]
assert sizeof(RBulkMemberWSSupport) == 160, sizeof(RBulkMemberWSSupport)
assert alignment(RBulkMemberWSSupport) == 8, alignment(RBulkMemberWSSupport)
IAxisVMMembersSupports._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'HasStiffnessCalcParams',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(203), 'propget'], HRESULT, 'HasFooting',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(204), 'propget'], HRESULT, 'FootingType',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(EPadFootingType), 'Value' )),
    COMMETHOD([dispid(205), 'propget'], HRESULT, 'IndexOfUID',
              ( ['in'], c_int, 'UID' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(206), 'propget'], HRESULT, 'Name',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Name' )),
    COMMETHOD([dispid(207), 'propget'], HRESULT, 'MemberID',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(208), 'propget'], HRESULT, 'SectionCount',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(209), 'propget'], HRESULT, 'SelCount',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(210), 'propget'], HRESULT, 'Selected',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(210), 'propput'], HRESULT, 'Selected',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], ELongBoolean, 'Value' )),
    COMMETHOD([dispid(211), 'propget'], HRESULT, 'SupportType',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELineSupportType), 'Value' )),
    COMMETHOD([dispid(212), 'propget'], HRESULT, 'UID',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(213)], HRESULT, 'GetLineSupportIds',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LineSupportIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(214)], HRESULT, 'GetStiffnesses',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RStiffnesses), 'Stiffness' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(215)], HRESULT, 'GetNonLinearity',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RNonLinearity), 'NonLinearity' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(216)], HRESULT, 'GetResistances',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RResistances), 'Resistances' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(217)], HRESULT, 'GetStiffnessCalcParams',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RLineSupportStiffParams), 'StiffnessParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(218)], HRESULT, 'SetStiffnessCalcParams',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RLineSupportStiffParams), 'StiffnessParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(219)], HRESULT, 'GetSelectedItemIds',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'ItemIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(220)], HRESULT, 'GetTrMatrix',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RMatrix3x3), 'TrMatrix' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(221)], HRESULT, 'GetFootingDimensions',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RPadFootingDimensions), 'Dimensions' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(222)], HRESULT, 'GetFootingParams',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RPadFootingParams), 'FootingParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(224)], HRESULT, 'AddMembersSupport',
              ( ['in'], c_int, 'MemberID' ),
              ( ['in', 'out'], POINTER(RStiffnessesXYZ), 'StiffnessesXYZ' ),
              ( ['in', 'out'], POINTER(RNonLinearityXYZ), 'NonLinearityXYZ' ),
              ( ['in', 'out'], POINTER(RResistancesXYZ), 'ResistancesXYZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(225)], HRESULT, 'AddDomainEdgeSupport',
              ( ['in'], c_int, 'MemberID' ),
              ( ['in'], ELineSupportType, 'SupportType' ),
              ( ['in', 'out'], POINTER(RStiffnesses), 'Stiffnesses' ),
              ( ['in', 'out'], POINTER(RNonLinearity), 'NonLinearity' ),
              ( ['in', 'out'], POINTER(RResistances), 'Resistances' ),
              ( ['in'], c_int, 'DomainId1' ),
              ( ['in'], c_int, 'DomainId2' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(226)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(227)], HRESULT, 'DeleteSelected',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(228)], HRESULT, 'RenameSelected',
              ( ['in'], c_int, 'NewBase' ),
              ( ['in'], BSTR, 'FormatStr' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(229)], HRESULT, 'SelectAll',
              ( ['in'], ELongBoolean, 'Select' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(230)], HRESULT, 'SetStiffnesses',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RStiffnesses), 'Stiffness' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(231)], HRESULT, 'SetNonLinearity',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RNonLinearity), 'NonLinearity' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(232)], HRESULT, 'SetResistances',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RResistances), 'Resistances' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(233)], HRESULT, 'AddDomainEdgeRefSupport',
              ( ['in'], c_int, 'MemberID' ),
              ( ['in'], c_int, 'ReferenceId' ),
              ( ['in', 'out'], POINTER(RStiffnesses), 'Stiffnesses' ),
              ( ['in', 'out'], POINTER(RNonLinearity), 'NonLinearity' ),
              ( ['in', 'out'], POINTER(RResistances), 'Resistances' ),
              ( ['in'], c_int, 'DomainId1' ),
              ( ['in'], c_int, 'DomainId2' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(234), 'propget'], HRESULT, 'ReferenceId',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(235)], HRESULT, 'GetFootingParams_V153',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RLinearFootingParams), 'FootingParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(236)], HRESULT, 'BulkAdd',
              ( ['in'], _midlSAFEARRAY(RBulkMemberSupport), 'MemberSupports' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'Indexes' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(237)], HRESULT, 'AddPasternakSupport',
              ( ['in'], c_int, 'MemberID' ),
              ( ['in', 'out'], POINTER(RStiffnessesXYZ), 'StiffnessesXYZ' ),
              ( ['in'], c_double, 'ShearStiffness' ),
              ( ['in', 'out'], POINTER(RNonLinearityXYZ), 'NonLinearityXYZ' ),
              ( ['in', 'out'], POINTER(RResistancesXYZ), 'ResistancesXYZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(239)], HRESULT, 'AddDomainEdgePasternakSupport',
              ( ['in'], c_int, 'MemberID' ),
              ( ['in'], ELineSupportType, 'SupportType' ),
              ( ['in', 'out'], POINTER(RStiffnesses), 'Stiffnesses' ),
              ( ['in'], c_double, 'ShearStiffness' ),
              ( ['in', 'out'], POINTER(RNonLinearity), 'NonLinearity' ),
              ( ['in', 'out'], POINTER(RResistances), 'Resistances' ),
              ( ['in'], c_int, 'DomainId1' ),
              ( ['in'], c_int, 'DomainId2' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(240)], HRESULT, 'GetPasternakStiffness',
              ( ['in'], c_int, 'MemberID' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(241)], HRESULT, 'SetPasternakStiffness',
              ( ['in'], c_int, 'MemberID' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(242)], HRESULT, 'BulkAddPasternak',
              ( ['in'], _midlSAFEARRAY(RBulkMemberWSSupport), 'MemberSupports' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'Indexes' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMMembersSupports implementation
##class IAxisVMMembersSupports_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def HasStiffnessCalcParams(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def HasFooting(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def FootingType(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def IndexOfUID(self, UID):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Name(self, Index):
##        '-no docstring-'
##        #return Name
##
##    @property
##    def MemberID(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def SectionCount(self, Index, AnalysisType):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def SelCount(self):
##        '-no docstring-'
##        #return Value
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    Selected = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SupportType(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def UID(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def GetLineSupportIds(self, Index):
##        '-no docstring-'
##        #return LineSupportIds, Value
##
##    def GetStiffnesses(self, Index):
##        '-no docstring-'
##        #return Stiffness, Value
##
##    def GetNonLinearity(self, Index):
##        '-no docstring-'
##        #return NonLinearity, Value
##
##    def GetResistances(self, Index):
##        '-no docstring-'
##        #return Resistances, Value
##
##    def GetStiffnessCalcParams(self, Index):
##        '-no docstring-'
##        #return StiffnessParams, Value
##
##    def SetStiffnessCalcParams(self, Index):
##        '-no docstring-'
##        #return StiffnessParams, Value
##
##    def GetSelectedItemIds(self):
##        '-no docstring-'
##        #return ItemIds, Value
##
##    def GetTrMatrix(self, Index):
##        '-no docstring-'
##        #return TrMatrix, Value
##
##    def GetFootingDimensions(self, Index):
##        '-no docstring-'
##        #return Dimensions, Value
##
##    def GetFootingParams(self, Index):
##        '-no docstring-'
##        #return FootingParams, Value
##
##    def AddMembersSupport(self, MemberID):
##        '-no docstring-'
##        #return StiffnessesXYZ, NonLinearityXYZ, ResistancesXYZ, Value
##
##    def AddDomainEdgeSupport(self, MemberID, SupportType, DomainId1, DomainId2):
##        '-no docstring-'
##        #return Stiffnesses, NonLinearity, Resistances, Value
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def DeleteSelected(self):
##        '-no docstring-'
##        #return Value
##
##    def RenameSelected(self, NewBase, FormatStr):
##        '-no docstring-'
##        #return Value
##
##    def SelectAll(self, Select):
##        '-no docstring-'
##        #return Value
##
##    def SetStiffnesses(self, Index):
##        '-no docstring-'
##        #return Stiffness, Value
##
##    def SetNonLinearity(self, Index):
##        '-no docstring-'
##        #return NonLinearity, Value
##
##    def SetResistances(self, Index):
##        '-no docstring-'
##        #return Resistances, Value
##
##    def AddDomainEdgeRefSupport(self, MemberID, ReferenceId, DomainId1, DomainId2):
##        '-no docstring-'
##        #return Stiffnesses, NonLinearity, Resistances, Value
##
##    @property
##    def ReferenceId(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def GetFootingParams_V153(self, Index):
##        '-no docstring-'
##        #return FootingParams, Value
##
##    def BulkAdd(self, MemberSupports):
##        '-no docstring-'
##        #return Indexes, ResultValue
##
##    def AddPasternakSupport(self, MemberID, ShearStiffness):
##        '-no docstring-'
##        #return StiffnessesXYZ, NonLinearityXYZ, ResistancesXYZ, Value
##
##    def AddDomainEdgePasternakSupport(self, MemberID, SupportType, ShearStiffness, DomainId1, DomainId2):
##        '-no docstring-'
##        #return Stiffnesses, NonLinearity, Resistances, Value
##
##    def GetPasternakStiffness(self, MemberID):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetPasternakStiffness(self, MemberID, Value):
##        '-no docstring-'
##        #return ResultValue
##
##    def BulkAddPasternak(self, MemberSupports):
##        '-no docstring-'
##        #return Indexes, ResultValue
##


# values for enumeration 'ERCBeamDesignPlane'
rcbdpQzMy = 0
rcbdpQyMz = 1
ERCBeamDesignPlane = c_int # enum
IAxisVMDomainSupportsEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Cleared'),
    DISPMETHOD([dispid(202)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]
class RSectionSegmentIntegratedResultant(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{9CD5E924-6738-45B5-BCFB-433BEBC9F87F}')
RSectionSegmentIntegratedResultant._fields_ = [
    ('N', c_double),
    ('M', c_double),
    ('V', c_double),
]
assert sizeof(RSectionSegmentIntegratedResultant) == 24, sizeof(RSectionSegmentIntegratedResultant)
assert alignment(RSectionSegmentIntegratedResultant) == 8, alignment(RSectionSegmentIntegratedResultant)
class IAxisVMSurfaceSupport(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMSurfaceSupport Object'
    _iid_ = GUID('{A395D80F-6220-4F2F-8FF2-6D5C2BBD3DAD}')
    _idlflags_ = ['dual', 'oleautomation']

# values for enumeration 'ESurfaceSupportType'
sstSurfaceElasticFoundation = 0
ESurfaceSupportType = c_int # enum
IAxisVMSurfaceSupport._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'SupportType',
              ( ['out', 'retval'], POINTER(ESurfaceSupportType), 'Value' )),
    COMMETHOD([dispid(205)], HRESULT, 'GetStiffnessesXYZ',
              ( ['in', 'out'], POINTER(RStiffnessesXYZ), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'SetStiffnessesXYZ',
              ( ['in', 'out'], POINTER(RStiffnessesXYZ), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'GetNonLinearityXYZ',
              ( ['in', 'out'], POINTER(RNonLinearityXYZ), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208)], HRESULT, 'SetNonLinearityXYZ',
              ( ['in', 'out'], POINTER(RNonLinearityXYZ), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209)], HRESULT, 'GetResistancesXYZ',
              ( ['in', 'out'], POINTER(RResistancesXYZ), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(210)], HRESULT, 'SetResistancesXYZ',
              ( ['in', 'out'], POINTER(RResistancesXYZ), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(211), 'propget'], HRESULT, 'SurfaceId',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(212)], HRESULT, 'GetPasternakStiffness',
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(213)], HRESULT, 'SetPasternakStiffness',
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMSurfaceSupport implementation
##class IAxisVMSurfaceSupport_Impl(object):
##    @property
##    def SupportType(self):
##        '-no docstring-'
##        #return Value
##
##    def GetStiffnessesXYZ(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetStiffnessesXYZ(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def GetNonLinearityXYZ(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetNonLinearityXYZ(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def GetResistancesXYZ(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetResistancesXYZ(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    @property
##    def SurfaceId(self):
##        '-no docstring-'
##        #return Value
##
##    def GetPasternakStiffness(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetPasternakStiffness(self, Value):
##        '-no docstring-'
##        #return ResultValue
##

IAxisVMMembersEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Cleared'),
    DISPMETHOD([dispid(202)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
    DISPMETHOD([dispid(204)], HRESULT, 'AfterDeleted',
               ( ['in'], VARIANT, 'UIDs' )),
]

# values for enumeration 'ESectionsError'
seSegmentDefinitionError = -100001
seSectionTypeIsNotSegment = -100002
seLoadCaseIndexOutOfBounds = -100003
seLoadCombinationIndexOutOfBounds = -100004
seInvalidAnalysisType = -100005
ESectionsError = c_int # enum

# values for enumeration 'ERCBeamDesignError'
rcbdePrestressedBeamsNotSupported = -100001
rcbdeErrorSettingLines = -100002
rcbdeInvalidLoadCaseId = -100003
rcbdeInvalidLoadCombinationId = -100004
rcbdeInvalidCombinationOfLoadCaseAndLoadLevel = -100005
rcbdeInvalidCombinationOfLoadCombinationAndLoadLevel = -100006
rcbdeInvalidMaterialId = -100007
rcbdeInvalidArrayLength = -100008
rcbdeInvalidAnalysisType = -100009
rcbdeInvalidValue_bw = -100010
rcbdeInvalidValue_h = -100011
rcbdeInvalidValue_hf = -100012
rcbdeInvalidValue_beff = -100013
rcbdeInvalidRebarMaterial = -100014
rcbdeInvalidStirrupMaterial = -100015
rcbdeInvalidStirrupDiameter = -100016
rcbdeInvalidStirrupLegs = -100017
rcbdeInvalidBottomPos = -100018
rcbdeInvalidTopPos = -100019
rcbdeInvalidAst_min = -100020
rcbdeInvalidAsb_min = -100021
rcbdeErrorSettingMembers = -100022
rcbdeInvalidThetaValue = -100023
rcbdeDesignCodeParametersNotValidForUsedDesignCode = -100024
rcbdeEnvironmentClassNotValidForUsedDesignCode = -100025
rcbdeInvalidEnvelopeID = -100026
rcbdeInvalidShrinkageValue = -100027
rcbdeInvalidDesignParameters = -100028
rcbdeInvalidPlasticHingeParams = -100029
ERCBeamDesignError = c_int # enum

# values for enumeration 'EWindowSplit'
wsHorizontal = 0
wsVertical = 1
EWindowSplit = c_int # enum

# values for enumeration 'ECrossSectionObjectiveOfOptimization'
csooMinimumWeight = 0
csooMinimumHeight = 1
csooMinimumWidth = 2
ECrossSectionObjectiveOfOptimization = c_int # enum
class AxisVMPolygon2d(CoClass):
    'AxisVMPolygon2d Object'
    _reg_clsid_ = GUID('{34DDF0D6-DDEA-4323-8767-3518F5748617}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
AxisVMPolygon2d._com_interfaces_ = [IAxisVMPolygon2d]

IAxisVMPolygon2dList._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(AxisVMPolygon2d)), 'Value' )),
    COMMETHOD([dispid(202), 'propput'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(AxisVMPolygon2d), 'Value' )),
    COMMETHOD([dispid(203)], HRESULT, 'Add',
              ( ['in'], POINTER(AxisVMPolygon2d), 'Polygon' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'ResultValue' )),
    COMMETHOD([dispid(205)], HRESULT, 'Clear'),
]
################################################################
## code template for IAxisVMPolygon2dList implementation
##class IAxisVMPolygon2dList_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    Item = property(_get, _set, doc = _set.__doc__)
##
##    def Add(self, Polygon):
##        '-no docstring-'
##        #return ResultValue
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def Clear(self):
##        '-no docstring-'
##        #return 
##

class AxisVMLine2d(CoClass):
    'AxisVMLine2d Object'
    _reg_clsid_ = GUID('{A81F2C16-1B84-4846-9F0E-A22682D94F03}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
AxisVMLine2d._com_interfaces_ = [IAxisVMLine2d]


# values for enumeration 'ESmoothing'
smthNone = 0
smthSelective = 1
smthAllSurf = 2
ESmoothing = c_int # enum
class RReference(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{3D11231F-371C-448C-8DCD-F76EA28B83D0}')
IAxisVMReferences._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(203)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'Add',
              ( ['in', 'out'], POINTER(RReference), 'Item' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205), 'propget'], HRESULT, 'Selected',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(205), 'propput'], HRESULT, 'Selected',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], ELongBoolean, 'Value' )),
    COMMETHOD([dispid(206), 'propget'], HRESULT, 'SelCount',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(207)], HRESULT, 'SelectAll',
              ( ['in'], ELongBoolean, 'Select' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208)], HRESULT, 'DeleteSelected',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209)], HRESULT, 'IndexOf',
              ( ['in', 'out'], POINTER(RReference), 'Item' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(210)], HRESULT, 'GetItem',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RReference), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(211)], HRESULT, 'SetItem',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RReference), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(212)], HRESULT, 'GetSelectedItemIds',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'ItemIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMReferences implementation
##class IAxisVMReferences_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def Add(self):
##        '-no docstring-'
##        #return Item, ResultValue
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    Selected = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SelCount(self):
##        '-no docstring-'
##        #return Value
##
##    def SelectAll(self, Select):
##        '-no docstring-'
##        #return ResultValue
##
##    def DeleteSelected(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def IndexOf(self):
##        '-no docstring-'
##        #return Item, ResultValue
##
##    def GetItem(self, Index):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetItem(self, Index):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def GetSelectedItemIds(self):
##        '-no docstring-'
##        #return ItemIds, ResultValue
##

IAxisVMMaterial._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'NationalDesignCode',
              ( ['out', 'retval'], POINTER(ENationalDesignCode), 'Value' )),
    COMMETHOD([dispid(201), 'propput'], HRESULT, 'NationalDesignCode',
              ( ['in'], ENationalDesignCode, 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'NationalDesignName',
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(202), 'propput'], HRESULT, 'NationalDesignName',
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(203), 'propget'], HRESULT, 'MaterialDesignName',
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(203), 'propput'], HRESULT, 'MaterialDesignName',
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(204), 'propget'], HRESULT, 'MaterialType',
              ( ['out', 'retval'], POINTER(EMaterialType), 'Value' )),
    COMMETHOD([dispid(204), 'propput'], HRESULT, 'MaterialType',
              ( ['in'], EMaterialType, 'Value' )),
    COMMETHOD([dispid(205), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(205), 'propput'], HRESULT, 'Name',
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(206), 'propget'], HRESULT, 'FillColour',
              ( ['out', 'retval'], POINTER(c_ulong), 'Value' )),
    COMMETHOD([dispid(206), 'propput'], HRESULT, 'FillColour',
              ( ['in'], c_ulong, 'Value' )),
    COMMETHOD([dispid(207), 'propget'], HRESULT, 'ContourColour',
              ( ['out', 'retval'], POINTER(c_ulong), 'Value' )),
    COMMETHOD([dispid(207), 'propput'], HRESULT, 'ContourColour',
              ( ['in'], c_ulong, 'Value' )),
    COMMETHOD([dispid(208), 'propget'], HRESULT, 'ex',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(208), 'propput'], HRESULT, 'ex',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(209), 'propget'], HRESULT, 'ey',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(209), 'propput'], HRESULT, 'ey',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(210), 'propget'], HRESULT, 'ez',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(210), 'propput'], HRESULT, 'ez',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(211), 'propget'], HRESULT, 'Nux',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(211), 'propput'], HRESULT, 'Nux',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(212), 'propget'], HRESULT, 'nuy',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(212), 'propput'], HRESULT, 'nuy',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(213), 'propget'], HRESULT, 'nuz',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(213), 'propput'], HRESULT, 'nuz',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(214), 'propget'], HRESULT, 'Alfax',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(214), 'propput'], HRESULT, 'Alfax',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(215), 'propget'], HRESULT, 'Alfay',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(215), 'propput'], HRESULT, 'Alfay',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(216), 'propget'], HRESULT, 'Alfaz',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(216), 'propput'], HRESULT, 'Alfaz',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(217), 'propget'], HRESULT, 'Rho',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(217), 'propput'], HRESULT, 'Rho',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(218), 'propget'], HRESULT, 'Fy',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(218), 'propput'], HRESULT, 'Fy',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(219), 'propget'], HRESULT, 'Fu',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(219), 'propput'], HRESULT, 'Fu',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(220), 'propget'], HRESULT, 'Fy40',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(220), 'propput'], HRESULT, 'Fy40',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(221), 'propget'], HRESULT, 'Fu40',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(221), 'propput'], HRESULT, 'Fu40',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(222), 'propget'], HRESULT, 'SigmaH',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(222), 'propput'], HRESULT, 'SigmaH',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(223), 'propget'], HRESULT, 'SigmapH',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(223), 'propput'], HRESULT, 'SigmapH',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(224), 'propget'], HRESULT, 'Ry',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(224), 'propput'], HRESULT, 'Ry',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(225), 'propget'], HRESULT, 'R',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(225), 'propput'], HRESULT, 'R',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(226), 'propget'], HRESULT, 'Rc',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(226), 'propput'], HRESULT, 'Rc',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(227), 'propget'], HRESULT, 'SigmabH',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(227), 'propput'], HRESULT, 'SigmabH',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(228), 'propget'], HRESULT, 'SigmahH',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(228), 'propput'], HRESULT, 'SigmahH',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(229), 'propget'], HRESULT, 'Fit',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(229), 'propput'], HRESULT, 'Fit',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(230), 'propget'], HRESULT, 'GammaC',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(230), 'propput'], HRESULT, 'GammaC',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(231), 'propget'], HRESULT, 'Alfacc',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(231), 'propput'], HRESULT, 'Alfacc',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(232), 'propget'], HRESULT, 'Fck',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(232), 'propput'], HRESULT, 'Fck',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(233), 'propget'], HRESULT, 'Fck_cube',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(233), 'propput'], HRESULT, 'Fck_cube',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(234), 'propget'], HRESULT, 'EpsT',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(235), 'propget'], HRESULT, 'EpsL',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(236), 'propget'], HRESULT, 'EpsP',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(237), 'propget'], HRESULT, 'EpsBH',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(238), 'propget'], HRESULT, 'EpsC1',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(239), 'propget'], HRESULT, 'EpsC1u',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(240), 'propget'], HRESULT, 'EpsC2',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(241), 'propget'], HRESULT, 'EpsC2u',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(242), 'propget'], HRESULT, 'EpsC3',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(243), 'propget'], HRESULT, 'EpsC3u',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(244), 'propget'], HRESULT, 'EpsC1d',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(245), 'propget'], HRESULT, 'EpsC2d',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(246), 'propget'], HRESULT, 'E005',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(246), 'propput'], HRESULT, 'E005',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(247), 'propget'], HRESULT, 'Gmean',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(247), 'propput'], HRESULT, 'Gmean',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(248), 'propget'], HRESULT, 'fmk',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(248), 'propput'], HRESULT, 'fmk',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(249), 'propget'], HRESULT, 'ft0k',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(249), 'propput'], HRESULT, 'ft0k',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(250), 'propget'], HRESULT, 'ft90k',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(250), 'propput'], HRESULT, 'ft90k',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(251), 'propget'], HRESULT, 'fc0k',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(251), 'propput'], HRESULT, 'fc0k',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(252), 'propget'], HRESULT, 'fc90kz',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(252), 'propput'], HRESULT, 'fc90kz',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(253), 'propget'], HRESULT, 'fvkz',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(253), 'propput'], HRESULT, 'fvkz',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(254), 'propget'], HRESULT, 'GammaM',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(254), 'propput'], HRESULT, 'GammaM',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(255), 'propget'], HRESULT, 'fc90ky',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(255), 'propput'], HRESULT, 'fc90ky',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(256), 'propget'], HRESULT, 'fvky',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(256), 'propput'], HRESULT, 'fvky',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(257), 'propget'], HRESULT, 'S',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(257), 'propput'], HRESULT, 'S',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(258), 'propget'], HRESULT, 'TimberType',
              ( ['out', 'retval'], POINTER(ETimberType), 'Value' )),
    COMMETHOD([dispid(258), 'propput'], HRESULT, 'TimberType',
              ( ['in'], ETimberType, 'Value' )),
    COMMETHOD([dispid(259), 'propget'], HRESULT, 'FillColour_vb',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(259), 'propput'], HRESULT, 'FillColour_vb',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(260), 'propget'], HRESULT, 'ContourColour_vb',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(260), 'propput'], HRESULT, 'ContourColour_vb',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(261), 'propget'], HRESULT, 'UID',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
]
################################################################
## code template for IAxisVMMaterial implementation
##class IAxisVMMaterial_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    NationalDesignCode = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    NationalDesignName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    MaterialDesignName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    MaterialType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    FillColour = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    ContourColour = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    ex = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    ey = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    ez = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Nux = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    nuy = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    nuz = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Alfax = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Alfay = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Alfaz = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Rho = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Fy = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Fu = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Fy40 = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Fu40 = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    SigmaH = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    SigmapH = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Ry = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    R = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Rc = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    SigmabH = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    SigmahH = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Fit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    GammaC = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Alfacc = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Fck = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Fck_cube = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def EpsT(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def EpsL(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def EpsP(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def EpsBH(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def EpsC1(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def EpsC1u(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def EpsC2(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def EpsC2u(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def EpsC3(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def EpsC3u(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def EpsC1d(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def EpsC2d(self):
##        '-no docstring-'
##        #return Value
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    E005 = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Gmean = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    fmk = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    ft0k = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    ft90k = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    fc0k = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    fc90kz = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    fvkz = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    GammaM = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    fc90ky = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    fvky = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    S = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    TimberType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    FillColour_vb = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    ContourColour_vb = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def UID(self):
##        '-no docstring-'
##        #return Value
##

class RSteelLateralSupport(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{B249B641-E87C-4DC0-9D39-C3BAAF077B4A}')
RSteelLateralSupport._fields_ = [
    ('Pos', c_double),
    ('Ecc', c_double),
    ('Ry', c_double),
    ('Rxx', c_double),
    ('Rzz', c_double),
    ('Rw', c_double),
]
assert sizeof(RSteelLateralSupport) == 48, sizeof(RSteelLateralSupport)
assert alignment(RSteelLateralSupport) == 8, alignment(RSteelLateralSupport)

# values for enumeration 'ESeismicSensitivityResultsError'
ssreOK = 0
ssreEmptyStorey = 1
ssreInclinedElementExists = 2
ssreTorsionResultsMissing = 3
ESeismicSensitivityResultsError = c_int # enum
class AxisVMLineSupport(CoClass):
    'AxisVMLineSupport Object'
    _reg_clsid_ = GUID('{1B9D96D5-C323-4248-A563-F814C120C203}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMLineSupport(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMLineSupport Object'
    _iid_ = GUID('{51361F4B-1A89-42B5-8C4E-AABA779C58F9}')
    _idlflags_ = ['dual', 'oleautomation']
AxisVMLineSupport._com_interfaces_ = [IAxisVMLineSupport]

IAxisVMLineSupports._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(AxisVMLineSupport)), 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(203), 'propget'], HRESULT, 'Selected',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(203), 'propput'], HRESULT, 'Selected',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], ELongBoolean, 'Value' )),
    COMMETHOD([dispid(204), 'propget'], HRESULT, 'SelCount',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(205)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'DeleteSelected',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'AddEdgeGlobal',
              ( ['in', 'out'], POINTER(RStiffnesses), 'Stiffnesses' ),
              ( ['in', 'out'], POINTER(RNonLinearity), 'NonLinearity' ),
              ( ['in', 'out'], POINTER(RResistances), 'Resistances' ),
              ( ['in'], c_int, 'EdgeId' ),
              ( ['in'], c_int, 'SurfaceId1' ),
              ( ['in'], c_int, 'SurfaceId2' ),
              ( ['in'], c_int, 'DomainId1' ),
              ( ['in'], c_int, 'DomainId2' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208)], HRESULT, 'AddEdgeRelative',
              ( ['in', 'out'], POINTER(RStiffnesses), 'Stiffnesses' ),
              ( ['in', 'out'], POINTER(RNonLinearity), 'NonLinearity' ),
              ( ['in', 'out'], POINTER(RResistances), 'Resistances' ),
              ( ['in'], c_int, 'EdgeId' ),
              ( ['in'], c_int, 'SurfaceId1' ),
              ( ['in'], c_int, 'SurfaceId2' ),
              ( ['in'], c_int, 'DomainId1' ),
              ( ['in'], c_int, 'DomainId2' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209)], HRESULT, 'AddBeamElasticFoundation',
              ( ['in'], c_int, 'BeamLineId' ),
              ( ['in', 'out'], POINTER(RStiffnessesXYZ), 'StiffnessesXYZ' ),
              ( ['in', 'out'], POINTER(RNonLinearityXYZ), 'NonLinearityXYZ' ),
              ( ['in', 'out'], POINTER(RResistancesXYZ), 'ResistancesXYZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(210)], HRESULT, 'AddRibElasticFoundation',
              ( ['in'], c_int, 'RibLineId' ),
              ( ['in', 'out'], POINTER(RStiffnessesXYZ), 'StiffnessesXYZ' ),
              ( ['in', 'out'], POINTER(RNonLinearityXYZ), 'NonLinearityXYZ' ),
              ( ['in', 'out'], POINTER(RResistancesXYZ), 'ResistancesXYZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(211), 'propget'], HRESULT, 'SectionCount',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(212)], HRESULT, 'GetSelectedItemIds',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'ItemIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(213), 'propget'], HRESULT, 'LineId',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(214), 'propget'], HRESULT, 'HaveStiffnessCalcParams',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(215)], HRESULT, 'GetNodeIds',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(c_int), 'StartNodeID' ),
              ( ['out'], POINTER(c_int), 'EndNodeID' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(216)], HRESULT, 'GetTrMatrix',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RMatrix3x3), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(217)], HRESULT, 'BulkAdd',
              ( ['in'], _midlSAFEARRAY(RBulkLineSupport), 'LineSupports' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'Indexes' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(218)], HRESULT, 'AddEdgeGlobalPasternak',
              ( ['in', 'out'], POINTER(RStiffnesses), 'Stiffnesses' ),
              ( ['in'], c_double, 'ShearStiffness' ),
              ( ['in', 'out'], POINTER(RNonLinearity), 'NonLinearity' ),
              ( ['in', 'out'], POINTER(RResistances), 'Resistances' ),
              ( ['in'], c_int, 'EdgeId' ),
              ( ['in'], c_int, 'SurfaceId1' ),
              ( ['in'], c_int, 'SurfaceId2' ),
              ( ['in'], c_int, 'DomainId1' ),
              ( ['in'], c_int, 'DomainId2' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(219)], HRESULT, 'AddEdgeRelativePasternak',
              ( ['in', 'out'], POINTER(RStiffnesses), 'Stiffnesses' ),
              ( ['in'], c_double, 'ShearStiffness' ),
              ( ['in', 'out'], POINTER(RNonLinearity), 'NonLinearity' ),
              ( ['in', 'out'], POINTER(RResistances), 'Resistances' ),
              ( ['in'], c_int, 'EdgeId' ),
              ( ['in'], c_int, 'SurfaceId1' ),
              ( ['in'], c_int, 'SurfaceId2' ),
              ( ['in'], c_int, 'DomainId1' ),
              ( ['in'], c_int, 'DomainId2' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(220)], HRESULT, 'AddBeamPasternakFoundation',
              ( ['in'], c_int, 'BeamLineId' ),
              ( ['in', 'out'], POINTER(RStiffnessesXYZ), 'StiffnessesXYZ' ),
              ( ['in'], c_double, 'ShearStiffness' ),
              ( ['in', 'out'], POINTER(RNonLinearityXYZ), 'NonLinearityXYZ' ),
              ( ['in', 'out'], POINTER(RResistancesXYZ), 'ResistancesXYZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(221)], HRESULT, 'AddRibPasternakFoundation',
              ( ['in'], c_int, 'RibLineId' ),
              ( ['in', 'out'], POINTER(RStiffnessesXYZ), 'StiffnessesXYZ' ),
              ( ['in'], c_double, 'ShearStiffness' ),
              ( ['in', 'out'], POINTER(RNonLinearityXYZ), 'NonLinearityXYZ' ),
              ( ['in', 'out'], POINTER(RResistancesXYZ), 'ResistancesXYZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(222)], HRESULT, 'BulkAddPasternak',
              ( ['in'], _midlSAFEARRAY(RBulkWSLineSupport), 'LineSupports' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'Indexes' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMLineSupports implementation
##class IAxisVMLineSupports_Impl(object):
##    @property
##    def Item(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    Selected = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SelCount(self):
##        '-no docstring-'
##        #return Value
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def DeleteSelected(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddEdgeGlobal(self, EdgeId, SurfaceId1, SurfaceId2, DomainId1, DomainId2):
##        '-no docstring-'
##        #return Stiffnesses, NonLinearity, Resistances, ResultValue
##
##    def AddEdgeRelative(self, EdgeId, SurfaceId1, SurfaceId2, DomainId1, DomainId2):
##        '-no docstring-'
##        #return Stiffnesses, NonLinearity, Resistances, ResultValue
##
##    def AddBeamElasticFoundation(self, BeamLineId):
##        '-no docstring-'
##        #return StiffnessesXYZ, NonLinearityXYZ, ResistancesXYZ, ResultValue
##
##    def AddRibElasticFoundation(self, RibLineId):
##        '-no docstring-'
##        #return StiffnessesXYZ, NonLinearityXYZ, ResistancesXYZ, ResultValue
##
##    @property
##    def SectionCount(self, Index, AnalysisType):
##        '-no docstring-'
##        #return Value
##
##    def GetSelectedItemIds(self):
##        '-no docstring-'
##        #return ItemIds, ResultValue
##
##    @property
##    def LineId(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def HaveStiffnessCalcParams(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def GetNodeIds(self, Index):
##        '-no docstring-'
##        #return StartNodeID, EndNodeID, ResultValue
##
##    def GetTrMatrix(self, Index):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def BulkAdd(self, LineSupports):
##        '-no docstring-'
##        #return Indexes, ResultValue
##
##    def AddEdgeGlobalPasternak(self, ShearStiffness, EdgeId, SurfaceId1, SurfaceId2, DomainId1, DomainId2):
##        '-no docstring-'
##        #return Stiffnesses, NonLinearity, Resistances, ResultValue
##
##    def AddEdgeRelativePasternak(self, ShearStiffness, EdgeId, SurfaceId1, SurfaceId2, DomainId1, DomainId2):
##        '-no docstring-'
##        #return Stiffnesses, NonLinearity, Resistances, ResultValue
##
##    def AddBeamPasternakFoundation(self, BeamLineId, ShearStiffness):
##        '-no docstring-'
##        #return StiffnessesXYZ, NonLinearityXYZ, ResistancesXYZ, ResultValue
##
##    def AddRibPasternakFoundation(self, RibLineId, ShearStiffness):
##        '-no docstring-'
##        #return StiffnessesXYZ, NonLinearityXYZ, ResistancesXYZ, ResultValue
##
##    def BulkAddPasternak(self, LineSupports):
##        '-no docstring-'
##        #return Indexes, ResultValue
##


# values for enumeration 'EMemberMeshType'
mmtMaxDeviationFromArc = 0
mmtMaxElementSize = 1
mmtSegments = 2
mmtAngle = 3
EMemberMeshType = c_int # enum

# values for enumeration 'ECrossSectionOptimizationType'
csotPreDefinedShapes = 0
csotParametric = 1
ECrossSectionOptimizationType = c_int # enum

# values for enumeration 'EDomainCompRibEccType'
dcret_top = 1
dcret_midplane = 2
dcret_bottom = 3
dcret_custom = 4
EDomainCompRibEccType = c_int # enum
IAxisVMSurfaces._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(AxisVMSurface)), 'Value' )),
    COMMETHOD([dispid(203), 'propget'], HRESULT, 'Selected',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(203), 'propput'], HRESULT, 'Selected',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], ELongBoolean, 'Value' )),
    COMMETHOD([dispid(204), 'propget'], HRESULT, 'SelCount',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(205)], HRESULT, 'Add',
              ( ['in'], _midlSAFEARRAY(c_int), 'LineIds' ),
              ( ['in'], c_int, 'DomainId' ),
              ( ['in', 'out'], POINTER(RSurfaceAttr), 'SurfaceAttr' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'DeleteSelected',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208)], HRESULT, 'SelectAll',
              ( ['in'], ELongBoolean, 'Select' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209)], HRESULT, 'GetSelectedItemIds',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'ItemIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(210)], HRESULT, 'GetAllCoordinatesOfSurfaces',
              ( ['in'], _midlSAFEARRAY(c_int), 'ItemIds' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceCoordinates)), 'SurfacesCoordinates' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(211)], HRESULT, 'DeleteReinforcementParametersFromSelectedSurfaces',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(212), 'propget'], HRESULT, 'UID',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(213)], HRESULT, 'Add_vb',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['in'], c_int, 'DomainId' ),
              ( ['in', 'out'], POINTER(RSurfaceAttr), 'SurfaceAttr' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(214)], HRESULT, 'GetAllCoordinatesOfSurfaces_vb',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ItemIds' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceCoordinates)), 'SurfacesCoordinates' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(215), 'propget'], HRESULT, 'IndexOfUID',
              ( ['in'], c_int, 'UID' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(216), 'propget'], HRESULT, 'StiffnessReduction',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(216), 'propput'], HRESULT, 'StiffnessReduction',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(217), 'propget'], HRESULT, 'Attributes',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMAttributes)), 'Value' )),
    COMMETHOD([dispid(218), 'propget'], HRESULT, 'Attachments',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMAttachments)), 'Value' )),
    COMMETHOD([dispid(219)], HRESULT, 'BulkAdd',
              ( ['in'], _midlSAFEARRAY(RSurface), 'Surfaces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SurfaceIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(220)], HRESULT, 'BulkGetSurfaces',
              ( ['in'], _midlSAFEARRAY(c_int), 'SurfaceIDs' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSurface)), 'Surfaces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(221)], HRESULT, 'BulkSetSurfaces',
              ( ['in'], _midlSAFEARRAY(c_int), 'SurfaceIDs' ),
              ( ['in'], _midlSAFEARRAY(RSurface), 'Surfaces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(222), 'propget'], HRESULT, 'StiffnessReduction_V153',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], ESurfaceStiffnessReduction, 'Component' ),
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(222), 'propput'], HRESULT, 'StiffnessReduction_V153',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], ESurfaceStiffnessReduction, 'Component' ),
              ( ['in'], c_double, 'Value' )),
]
################################################################
## code template for IAxisVMSurfaces implementation
##class IAxisVMSurfaces_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Item(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    Selected = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SelCount(self):
##        '-no docstring-'
##        #return Value
##
##    def Add(self, LineIds, DomainId):
##        '-no docstring-'
##        #return SurfaceAttr, ResultValue
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def DeleteSelected(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def SelectAll(self, Select):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetSelectedItemIds(self):
##        '-no docstring-'
##        #return ItemIds, ResultValue
##
##    def GetAllCoordinatesOfSurfaces(self, ItemIds):
##        '-no docstring-'
##        #return SurfacesCoordinates, ResultValue
##
##    def DeleteReinforcementParametersFromSelectedSurfaces(self):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def UID(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def Add_vb(self, DomainId):
##        '-no docstring-'
##        #return LineIds, SurfaceAttr, ResultValue
##
##    def GetAllCoordinatesOfSurfaces_vb(self):
##        '-no docstring-'
##        #return ItemIds, SurfacesCoordinates, ResultValue
##
##    @property
##    def IndexOfUID(self, UID):
##        '-no docstring-'
##        #return Value
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    StiffnessReduction = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Attributes(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Attachments(self):
##        '-no docstring-'
##        #return Value
##
##    def BulkAdd(self, Surfaces):
##        '-no docstring-'
##        #return SurfaceIDs, ResultValue
##
##    def BulkGetSurfaces(self, SurfaceIDs):
##        '-no docstring-'
##        #return Surfaces, ResultValue
##
##    def BulkSetSurfaces(self, SurfaceIDs, Surfaces):
##        '-no docstring-'
##        #return ResultValue
##
##    def _get(self, Index, Component):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Component, Value):
##        '-no docstring-'
##    StiffnessReduction_V153 = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'EIntensityReferenceValue'
irvAbsMaxModel = 0
irvAbsMaxParts = 1
irvCustomVal = 2
EIntensityReferenceValue = c_int # enum
IAxisVMSettingsEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Error',
               ( ['in'], c_int, 'ErrorCode' )),
]
class RRCBeamDesignDeflectionResult(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{361A648A-EA8E-4A16-98CB-DBA057F1E73C}')
RRCBeamDesignDeflectionResult._fields_ = [
    ('CombinationOrLoadCaseID', c_int),
    ('ez', c_double),
]
assert sizeof(RRCBeamDesignDeflectionResult) == 16, sizeof(RRCBeamDesignDeflectionResult)
assert alignment(RRCBeamDesignDeflectionResult) == 8, alignment(RRCBeamDesignDeflectionResult)
IAxisVMColumnRebarsEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]

# values for enumeration 'ESeismicStoreysError'
sseSeismicResultsMissing = -100001
ESeismicStoreysError = c_int # enum
IAxisVMMathTextsEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'FillMathText',
               ( ['in'], c_int, 'MathTextUID' ),
               ( ['out'], POINTER(BSTR), 'API_Name' ),
               ( ['out'], POINTER(BSTR), 'MathTextTitle' ),
               ( ['out'], POINTER(BSTR), 'MathText' )),
    DISPMETHOD([dispid(202)], HRESULT, 'ValidMathText',
               ( ['in'], c_int, 'MathTextUID' ),
               ( ['out'], POINTER(BSTR), 'API_Name' ),
               ( ['out'], POINTER(BSTR), 'MathTextTitle' ),
               ( ['in', 'out'], POINTER(ELongBoolean), 'Valid' )),
]

# values for enumeration 'EMassMatrixType'
mtDiagonal = 0
mtConsistent = 1
EMassMatrixType = c_int # enum

# values for enumeration 'ECriticalCombinationFormula'
ccfAuto = 0
ccfCustom = 1
ccfSemiAuto = 2
ECriticalCombinationFormula = c_int # enum

# values for enumeration 'EMemberExcType'
mexcNone = 0
mexcDomainRib = 1
mexcLocal = 2
mexcRelOffs = 3
mexcGroup = 4
mexcRefLine = 5
EMemberExcType = c_int # enum
class IAxisVMForces(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMForces Object'
    _iid_ = GUID('{0A1812F7-AEA6-4605-A8D0-C22A3EAA9EFB}')
    _idlflags_ = ['dual', 'oleautomation']
class RLineForceValues(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{A6FDC197-267C-48DE-9D0E-A0F2E760C588}')

# values for enumeration 'ELineForce'
lfNx = 0
lfVy = 1
lfVz = 2
lfTx = 3
lfMy = 4
lfMz = 5
lfMyD = 6
ELineForce = c_int # enum
RLineForceValues._fields_ = [
    ('lfvLineType', ELineType),
    ('lfvNx', c_double),
    ('lfvVy', c_double),
    ('lfvVz', c_double),
    ('lfvTx', c_double),
    ('lfvMy', c_double),
    ('lfvMz', c_double),
    ('lfvMyD', c_double),
]
assert sizeof(RLineForceValues) == 64, sizeof(RLineForceValues)
assert alignment(RLineForceValues) == 8, alignment(RLineForceValues)
class RResultBlockInfo(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{867AEC16-5103-4BCE-89C3-466769D1DF0E}')
RResultBlockInfo._fields_ = [
    ('ResultCase', c_int),
    ('LoadLevelOrModeShapeOrTimeStep', c_int),
]
assert sizeof(RResultBlockInfo) == 8, sizeof(RResultBlockInfo)
assert alignment(RResultBlockInfo) == 4, alignment(RResultBlockInfo)
class RSurfaceForceValues(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{CAB30910-3AA0-450F-B6F6-9C023B32F7EB}')

# values for enumeration 'ESurfaceForce'
sfNx = 0
sfNy = 1
sfNxy = 2
sfMx = 3
sfMy = 4
sfMxy = 5
sfVxz = 6
sfVyz = 7
sfvSz = 8
sfN1 = 9
sfN2 = 10
sfAn = 11
sfM1 = 12
sfM2 = 13
sfAm = 14
sfNxD = 15
sfNyD = 16
sfMxDp = 17
sfMxDm = 18
sfMyDp = 19
sfMyDm = 20
ESurfaceForce = c_int # enum
class RSurfaceForces(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{9ABA0627-FD1B-46B2-AD13-83308D1EF424}')
RSurfaceForceValues._fields_ = [
    ('sfvNx', c_double),
    ('sfvNy', c_double),
    ('sfvNxy', c_double),
    ('sfvMx', c_double),
    ('sfvMy', c_double),
    ('sfvMxy', c_double),
    ('sfvVxz', c_double),
    ('sfvVyz', c_double),
    ('sfvVSz', c_double),
    ('sfvN1', c_double),
    ('sfvN2', c_double),
    ('sfvAn', c_double),
    ('sfvM1', c_double),
    ('sfvM2', c_double),
    ('sfvAm', c_double),
    ('sfvNxD', c_double),
    ('sfvNyD', c_double),
    ('sfvMxDp', c_double),
    ('sfvMxDm', c_double),
    ('sfvMyDp', c_double),
    ('sfvMyDm', c_double),
]
assert sizeof(RSurfaceForceValues) == 168, sizeof(RSurfaceForceValues)
assert alignment(RSurfaceForceValues) == 8, alignment(RSurfaceForceValues)
RSurfaceForces._fields_ = [
    ('ContourPointCount', c_int),
    ('ContourPoint1Id', c_int),
    ('ContourPoint2Id', c_int),
    ('ContourPoint3Id', c_int),
    ('ContourPoint4Id', c_int),
    ('ContourLine1Id', c_int),
    ('ContourLine2Id', c_int),
    ('ContourLine3Id', c_int),
    ('ContourLine4Id', c_int),
    ('sfvCenterPoint', RSurfaceForceValues),
    ('sfvContourPoint1', RSurfaceForceValues),
    ('sfvContourPoint2', RSurfaceForceValues),
    ('sfvContourPoint3', RSurfaceForceValues),
    ('sfvContourPoint4', RSurfaceForceValues),
    ('sfvContourLineMidPoint1', RSurfaceForceValues),
    ('sfvContourLineMidPoint2', RSurfaceForceValues),
    ('sfvContourLineMidPoint3', RSurfaceForceValues),
    ('sfvContourLineMidPoint4', RSurfaceForceValues),
]
assert sizeof(RSurfaceForces) == 1552, sizeof(RSurfaceForces)
assert alignment(RSurfaceForces) == 8, alignment(RSurfaceForces)

# values for enumeration 'ENodalSupportForce'
nsfRx = 0
nsfRy = 1
nsfRz = 2
nsfRxx = 3
nsfRyy = 4
nsfRzz = 5
nsfRr = 6
nsfRrr = 7
nsfRalpha = 8
ENodalSupportForce = c_int # enum

# values for enumeration 'ELineSupportForce'
lsfRx = 0
lsfRy = 1
lsfRz = 2
lsfRxx = 3
lsfRyy = 4
lsfRzz = 5
lsfRr = 6
lsfRrr = 7
ELineSupportForce = c_int # enum
class RSurfaceSupportForceValues(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{E2359A7F-33FB-4476-9F6E-9E08E8D69094}')

# values for enumeration 'ESurfaceSupportForce'
ssfRx = 0
ssfRy = 1
ssfRz = 2
ESurfaceSupportForce = c_int # enum
class RSurfaceSupportForces(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{1F7E3828-AA9E-4B42-A795-51B5C976C91B}')
RSurfaceSupportForceValues._fields_ = [
    ('Rx', c_double),
    ('Ry', c_double),
    ('Rz', c_double),
]
assert sizeof(RSurfaceSupportForceValues) == 24, sizeof(RSurfaceSupportForceValues)
assert alignment(RSurfaceSupportForceValues) == 8, alignment(RSurfaceSupportForceValues)
RSurfaceSupportForces._fields_ = [
    ('ContourPointCount', c_int),
    ('ContourPoint1Id', c_int),
    ('ContourPoint2Id', c_int),
    ('ContourPoint3Id', c_int),
    ('ContourPoint4Id', c_int),
    ('ContourLine1Id', c_int),
    ('ContourLine2Id', c_int),
    ('ContourLine3Id', c_int),
    ('ContourLine4Id', c_int),
    ('ssfvCenterPoint', RSurfaceSupportForceValues),
    ('ssfvContourPoint1', RSurfaceSupportForceValues),
    ('ssfvContourPoint2', RSurfaceSupportForceValues),
    ('ssfvContourPoint3', RSurfaceSupportForceValues),
    ('ssfvContourPoint4', RSurfaceSupportForceValues),
    ('ssfvContourLineMidPoint1', RSurfaceSupportForceValues),
    ('ssfvContourLineMidPoint2', RSurfaceSupportForceValues),
    ('ssfvContourLineMidPoint3', RSurfaceSupportForceValues),
    ('ssfvContourLineMidPoint4', RSurfaceSupportForceValues),
]
assert sizeof(RSurfaceSupportForces) == 256, sizeof(RSurfaceSupportForces)
assert alignment(RSurfaceSupportForces) == 8, alignment(RSurfaceSupportForces)
class RSpringForceValues(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{5ED07E4C-9C77-4F1B-867F-8B33EC235A5C}')

# values for enumeration 'ESpringForce'
sfRx = 0
sfRy = 1
sfRz = 2
sfRxx = 4
sfRyy = 5
sfRzz = 6
ESpringForce = c_int # enum
RSpringForceValues._fields_ = [
    ('Rx', c_double),
    ('Ry', c_double),
    ('Rz', c_double),
    ('Rxx', c_double),
    ('Ryy', c_double),
    ('Rzz', c_double),
]
assert sizeof(RSpringForceValues) == 48, sizeof(RSpringForceValues)
assert alignment(RSpringForceValues) == 8, alignment(RSpringForceValues)

# values for enumeration 'EWindowColourMode'
wcmColour = 0
wcmGreyScale = 1
wcmBlackAndWhite = 2
EWindowColourMode = c_int # enum

# values for enumeration 'EConnectedToNodeType'
ctntAll = 1
ctntSelected = 2
ctntVisible = 3
EConnectedToNodeType = c_int # enum
class RVirtualBeamForceValues(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{F93C9418-8AD0-400B-91EA-CB13A4068D8F}')
RVirtualBeamForceValues._fields_ = [
    ('vbfvNx', c_double),
    ('vbfvVy', c_double),
    ('vbfvVz', c_double),
    ('vbfvTx', c_double),
    ('vbfvMy', c_double),
    ('vbfvMz', c_double),
]
assert sizeof(RVirtualBeamForceValues) == 48, sizeof(RVirtualBeamForceValues)
assert alignment(RVirtualBeamForceValues) == 8, alignment(RVirtualBeamForceValues)
class RCombinationElement(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{9B5353B8-F0FB-4720-9D44-CA738A164ABE}')
RCombinationElement._fields_ = [
    ('LoadCase', c_int),
    ('Factor', c_double),
]
assert sizeof(RCombinationElement) == 16, sizeof(RCombinationElement)
assert alignment(RCombinationElement) == 8, alignment(RCombinationElement)
IAxisVMForces._methods_ = [
    COMMETHOD([dispid(201)], HRESULT, 'GetLineForceByLoadCaseId',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RLineForceValues), 'Force' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(202)], HRESULT, 'GetLineForceByLoadCombinationId',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RLineForceValues), 'Force' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(203)], HRESULT, 'GetEnvelopeLineForce',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELineForce, 'Component' ),
              ( ['in', 'out'], POINTER(RLineForceValues), 'Force' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'GetCriticalLineForce',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELineForce, 'Component' ),
              ( ['in', 'out'], POINTER(RLineForceValues), 'Force' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205)], HRESULT, 'GetLineForcesByLoadCaseId',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'GetLineForcesByLoadCombinationId',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'GetEnvelopeLineForces',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELineForce, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208)], HRESULT, 'GetCriticalLineForces',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELineForce, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209)], HRESULT, 'GetAllLineForcesByLoadCaseId',
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(210)], HRESULT, 'GetAllLineForcesByLoadCombinationId',
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(211)], HRESULT, 'GetAllEnvelopeLineForces',
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELineForce, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(212)], HRESULT, 'GetAllCriticalLineForces',
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELineForce, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(213)], HRESULT, 'GetLineForcesForResultBlocks',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RResultBlockInfo)), 'ResultBlockInfo' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineForceValues)), 'Forces' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(215)], HRESULT, 'GetSurfaceForceByLoadCaseId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RSurfaceForceValues), 'Force' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(216)], HRESULT, 'GetSurfaceForceByLoadCombinationId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RSurfaceForceValues), 'Force' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(217)], HRESULT, 'GetEnvelopeSurfaceForce',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ESurfaceForce, 'Component' ),
              ( ['in', 'out'], POINTER(RSurfaceForceValues), 'Force' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(218)], HRESULT, 'GetCriticalSurfaceForce',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ESurfaceForce, 'Component' ),
              ( ['in', 'out'], POINTER(RSurfaceForceValues), 'Force' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(219)], HRESULT, 'GetSurfaceForcesByLoadCaseId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RSurfaceForces), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(220)], HRESULT, 'GetSurfaceForcesByLoadCombinationId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RSurfaceForces), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(221)], HRESULT, 'GetEnvelopeSurfaceForces',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ESurfaceForce, 'Component' ),
              ( ['in', 'out'], POINTER(RSurfaceForces), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(222)], HRESULT, 'GetCriticalSurfaceForces',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ESurfaceForce, 'Component' ),
              ( ['in', 'out'], POINTER(RSurfaceForces), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(223)], HRESULT, 'GetAllSurfaceForcesByLoadCaseId',
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceForces)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(224)], HRESULT, 'GetAllSurfaceForcesByLoadCombinationId',
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceForces)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(225)], HRESULT, 'GetAllEnvelopeSurfaceForces',
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ESurfaceForce, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceForces)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(226)], HRESULT, 'GetAllCriticalSurfaceForces',
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ESurfaceForce, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceForces)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(227)], HRESULT, 'GetSurfaceForcesForResultBlocks',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RResultBlockInfo)), 'ResultBlockInfo' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceForces)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(228)], HRESULT, 'GetSurfaceForceValuesForResultBlocks',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RResultBlockInfo)), 'ResultBlockInfo' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceForceValues)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(229)], HRESULT, 'GetNodalSupportForceByLoadCaseId',
              ( ['in'], c_int, 'NodalSupportId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RNodalSupportForceValues), 'Force' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(230)], HRESULT, 'GetNodalSupportForceByLoadCombinationId',
              ( ['in'], c_int, 'NodalSupportId' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RNodalSupportForceValues), 'Force' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(231)], HRESULT, 'GetEnvelopeNodalSupportForce',
              ( ['in'], c_int, 'NodalSupportId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ENodalSupportForce, 'Component' ),
              ( ['in', 'out'], POINTER(RNodalSupportForceValues), 'Force' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(232)], HRESULT, 'GetCriticalNodalSupportForce',
              ( ['in'], c_int, 'NodalSupportId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ENodalSupportForce, 'Component' ),
              ( ['in', 'out'], POINTER(RNodalSupportForceValues), 'Force' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(233)], HRESULT, 'GetAllNodalSupportForcesByLoadCaseId',
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RNodalSupportForceValues)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(234)], HRESULT, 'GetAllNodalSupportForcesByLoadCombinationId',
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RNodalSupportForceValues)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(235)], HRESULT, 'GetAllEnvelopeNodalSupportForces',
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ENodalSupportForce, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RNodalSupportForceValues)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(236)], HRESULT, 'GetAllCriticalNodalSupportForces',
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ENodalSupportForce, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RNodalSupportForceValues)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(237)], HRESULT, 'GetNodalSupportForcesForResultBlocks',
              ( ['in'], c_int, 'NodalSupportId' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RResultBlockInfo)), 'ResultBlockInfo' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RNodalSupportForceValues)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(238)], HRESULT, 'GetLineSupportForceByLoadCaseId',
              ( ['in'], c_int, 'LineSupportId' ),
              ( ['in'], c_int, 'LineSectionId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RLineSupportForceValues), 'Force' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(239)], HRESULT, 'GetLineSupportForceByLoadCombinationId',
              ( ['in'], c_int, 'LineSupportId' ),
              ( ['in'], c_int, 'LineSectionId' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RLineSupportForceValues), 'Force' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(240)], HRESULT, 'GetEnvelopeLineSupportForce',
              ( ['in'], c_int, 'LineSupportId' ),
              ( ['in'], c_int, 'LineSectionId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELineSupportForce, 'Component' ),
              ( ['in', 'out'], POINTER(RLineSupportForceValues), 'Force' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(241)], HRESULT, 'GetCriticalLineSupportForce',
              ( ['in'], c_int, 'LineSupportId' ),
              ( ['in'], c_int, 'LineSectionId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELineSupportForce, 'Component' ),
              ( ['in', 'out'], POINTER(RLineSupportForceValues), 'Force' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(242)], HRESULT, 'GetLineSupportForcesByLoadCaseId',
              ( ['in'], c_int, 'LineSupportId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineSupportForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(243)], HRESULT, 'GetLineSupportForcesByLoadCombinationId',
              ( ['in'], c_int, 'LineSupportId' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineSupportForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(244)], HRESULT, 'GetEnvelopeLineSupportForces',
              ( ['in'], c_int, 'LineSupportId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELineSupportForce, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineSupportForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(245)], HRESULT, 'GetCriticalLineSupportForces',
              ( ['in'], c_int, 'LineSupportId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELineSupportForce, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineSupportForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(246)], HRESULT, 'GetAllLineSupportForcesByLoadCaseId',
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineSupportForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(247)], HRESULT, 'GetAllLineSupportForcesByLoadCombinationId',
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineSupportForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(248)], HRESULT, 'GetAllEnvelopeLineSupportForces',
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELineSupportForce, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineSupportForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(249)], HRESULT, 'GetAllCriticalLineSupportForces',
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELineSupportForce, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineSupportForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(250)], HRESULT, 'GetLineSupportForcesForResultBlocks',
              ( ['in'], c_int, 'LineSupportId' ),
              ( ['in'], c_int, 'LineSectionId' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RResultBlockInfo)), 'ResultBlockInfo' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineSupportForceValues)), 'Forces' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(251)], HRESULT, 'GetSurfaceSupportForceByLoadCaseId',
              ( ['in'], c_int, 'SurfaceSupportId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RSurfaceSupportForceValues), 'Force' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(252)], HRESULT, 'GetSurfaceSupportForceByLoadCombinationId',
              ( ['in'], c_int, 'SurfaceSupportId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RSurfaceSupportForceValues), 'Force' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(253)], HRESULT, 'GetEnvelopeSurfaceSupportForce',
              ( ['in'], c_int, 'SurfaceSupportId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ESurfaceSupportForce, 'Component' ),
              ( ['in', 'out'], POINTER(RSurfaceSupportForceValues), 'Force' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(254)], HRESULT, 'GetCriticalSurfaceSupportForce',
              ( ['in'], c_int, 'SurfaceSupportId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ESurfaceSupportForce, 'Component' ),
              ( ['in', 'out'], POINTER(RSurfaceSupportForceValues), 'Force' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(255)], HRESULT, 'GetSurfaceSupportForcesByLoadCaseId',
              ( ['in'], c_int, 'SurfaceSupportId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RSurfaceSupportForces), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(256)], HRESULT, 'GetSurfaceSupportForcesByLoadCombinationId',
              ( ['in'], c_int, 'SurfaceSupportId' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RSurfaceSupportForces), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(257)], HRESULT, 'GetEnvelopeSurfaceSupportForces',
              ( ['in'], c_int, 'SurfaceSupportId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ESurfaceSupportForce, 'Component' ),
              ( ['in', 'out'], POINTER(RSurfaceSupportForces), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(258)], HRESULT, 'GetCriticalSurfaceSupportForces',
              ( ['in'], c_int, 'SurfaceSupportId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ESurfaceSupportForce, 'Component' ),
              ( ['in', 'out'], POINTER(RSurfaceSupportForces), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(259)], HRESULT, 'GetAllSurfaceSupportForcesByLoadCaseId',
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceSupportForces)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(260)], HRESULT, 'GetAllSurfaceSupportForcesByLoadCombinationId',
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceSupportForces)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(261)], HRESULT, 'GetAllEnvelopeSurfaceSupportForces',
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ESurfaceSupportForce, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceSupportForces)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(262)], HRESULT, 'GetAllCriticalSurfaceSupportForces',
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ESurfaceSupportForce, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceSupportForces)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(263)], HRESULT, 'GetSurfaceSupportForcesForResultBlocks',
              ( ['in'], c_int, 'SurfaceSupportId' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RResultBlockInfo)), 'ResultBlockInfo' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceSupportForces)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(264)], HRESULT, 'GetSurfaceSupportForceValuesForResultBlocks',
              ( ['in'], c_int, 'SurfaceSupportId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RResultBlockInfo)), 'ResultBlockInfo' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceSupportForceValues)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(265)], HRESULT, 'GetSpringForceByLoadCaseId',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RSpringForceValues), 'Force' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(266)], HRESULT, 'GetSpringForceByLoadCombinationId',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RSpringForceValues), 'Force' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(267)], HRESULT, 'GetEnvelopeSpringForce',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ESpringForce, 'Component' ),
              ( ['in', 'out'], POINTER(RSpringForceValues), 'Force' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(268)], HRESULT, 'GetCriticalSpringForce',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ESpringForce, 'Component' ),
              ( ['in', 'out'], POINTER(RSpringForceValues), 'Force' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(269)], HRESULT, 'GetAllSpringForcesByLoadCaseId',
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSpringForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(270)], HRESULT, 'GetAllSpringForcesByLoadCombinationId',
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSpringForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(271)], HRESULT, 'GetAllEnvelopeSpringForces',
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ESpringForce, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSpringForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(272)], HRESULT, 'GetAllCriticalSpringForces',
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ESpringForce, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSpringForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(273)], HRESULT, 'GetSpringForcesForResultBlocks',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RResultBlockInfo)), 'ResultBlockInfo' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSpringForceValues)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(274)], HRESULT, 'GetGapForceByLoadCaseId',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(c_double), 'Force' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(275)], HRESULT, 'GetGapForceByLoadCombinationId',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(c_double), 'Force' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(276)], HRESULT, 'GetEnvelopeGapForce',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(c_double), 'Force' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(277)], HRESULT, 'GetCriticalGapForce',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(c_double), 'Force' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(278)], HRESULT, 'GetAllGapForcesByLoadCaseId',
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(279)], HRESULT, 'GetAllGapForcesByLoadCombinationId',
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(280)], HRESULT, 'GetAllEnvelopeGapForces',
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(281)], HRESULT, 'GetAllCriticalGapForces',
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(282)], HRESULT, 'GetGapForcesForResultBlocks',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RResultBlockInfo)), 'ResultBlockInfo' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(283), 'propget'], HRESULT, 'AnalysisType',
              ( ['out', 'retval'], POINTER(EAnalysisType), 'Value' )),
    COMMETHOD([dispid(283), 'propput'], HRESULT, 'AnalysisType',
              ( ['in'], EAnalysisType, 'Value' )),
    COMMETHOD([dispid(284), 'propget'], HRESULT, 'LoadCaseId',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(284), 'propput'], HRESULT, 'LoadCaseId',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(285), 'propget'], HRESULT, 'LoadCombinationId',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(285), 'propput'], HRESULT, 'LoadCombinationId',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(286), 'propget'], HRESULT, 'MinMaxType',
              ( ['out', 'retval'], POINTER(EMinMaxType), 'Value' )),
    COMMETHOD([dispid(286), 'propput'], HRESULT, 'MinMaxType',
              ( ['in'], EMinMaxType, 'Value' )),
    COMMETHOD([dispid(287), 'propget'], HRESULT, 'CombinationType',
              ( ['out', 'retval'], POINTER(ECombinationType), 'Value' )),
    COMMETHOD([dispid(287), 'propput'], HRESULT, 'CombinationType',
              ( ['in'], ECombinationType, 'Value' )),
    COMMETHOD([dispid(288), 'propget'], HRESULT, 'LoadLevelOrTimeStep',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(288), 'propput'], HRESULT, 'LoadLevelOrTimeStep',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(289), 'propget'], HRESULT, 'LineForceComponent',
              ( ['out', 'retval'], POINTER(ELineForce), 'Value' )),
    COMMETHOD([dispid(289), 'propput'], HRESULT, 'LineForceComponent',
              ( ['in'], ELineForce, 'Value' )),
    COMMETHOD([dispid(290), 'propget'], HRESULT, 'SurfaceForceComponent',
              ( ['out', 'retval'], POINTER(ESurfaceForce), 'Value' )),
    COMMETHOD([dispid(290), 'propput'], HRESULT, 'SurfaceForceComponent',
              ( ['in'], ESurfaceForce, 'Value' )),
    COMMETHOD([dispid(291), 'propget'], HRESULT, 'NodalSupportForceComponent',
              ( ['out', 'retval'], POINTER(ENodalSupportForce), 'Value' )),
    COMMETHOD([dispid(291), 'propput'], HRESULT, 'NodalSupportForceComponent',
              ( ['in'], ENodalSupportForce, 'Value' )),
    COMMETHOD([dispid(292), 'propget'], HRESULT, 'LineSupportForceComponent',
              ( ['out', 'retval'], POINTER(ELineSupportForce), 'Value' )),
    COMMETHOD([dispid(292), 'propput'], HRESULT, 'LineSupportForceComponent',
              ( ['in'], ELineSupportForce, 'Value' )),
    COMMETHOD([dispid(293), 'propget'], HRESULT, 'SurfaceSupportForceComponent',
              ( ['out', 'retval'], POINTER(ESurfaceSupportForce), 'Value' )),
    COMMETHOD([dispid(293), 'propput'], HRESULT, 'SurfaceSupportForceComponent',
              ( ['in'], ESurfaceSupportForce, 'Value' )),
    COMMETHOD([dispid(294), 'propget'], HRESULT, 'SpringForceComponent',
              ( ['out', 'retval'], POINTER(ESpringForce), 'Value' )),
    COMMETHOD([dispid(294), 'propput'], HRESULT, 'SpringForceComponent',
              ( ['in'], ESpringForce, 'Value' )),
    COMMETHOD([dispid(295)], HRESULT, 'LineForceByLoadCaseId',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in', 'out'], POINTER(RLineForceValues), 'Force' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(296)], HRESULT, 'LineForceByLoadCombinationId',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in', 'out'], POINTER(RLineForceValues), 'Force' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(297)], HRESULT, 'EnvelopeLineForce',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in', 'out'], POINTER(RLineForceValues), 'Force' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(298)], HRESULT, 'CriticalLineForce',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in', 'out'], POINTER(RLineForceValues), 'Force' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(299)], HRESULT, 'LineForcesByLoadCaseId',
              ( ['in'], c_int, 'LineId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(300)], HRESULT, 'LineForcesByLoadCombinationId',
              ( ['in'], c_int, 'LineId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(301)], HRESULT, 'EnvelopeLineForces',
              ( ['in'], c_int, 'LineId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(302)], HRESULT, 'CriticalLineForces',
              ( ['in'], c_int, 'LineId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(303)], HRESULT, 'AllLineForcesByLoadCaseId',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(304)], HRESULT, 'AllLineForcesByLoadCombinationId',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(305)], HRESULT, 'AllEnvelopeLineForces',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(306)], HRESULT, 'AllCriticalLineForces',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(307)], HRESULT, 'LineForcesForResultBlocks',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RResultBlockInfo)), 'ResultBlockInfo' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineForceValues)), 'Forces' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(308)], HRESULT, 'SurfaceForceByLoadCaseId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in', 'out'], POINTER(RSurfaceForceValues), 'Force' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(309)], HRESULT, 'SurfaceForceByLoadCombinationId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in', 'out'], POINTER(RSurfaceForceValues), 'Force' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(310)], HRESULT, 'EnvelopeSurfaceForce',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in', 'out'], POINTER(RSurfaceForceValues), 'Force' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(311)], HRESULT, 'CriticalSurfaceForce',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in', 'out'], POINTER(RSurfaceForceValues), 'Force' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(312)], HRESULT, 'SurfaceForcesByLoadCaseId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in', 'out'], POINTER(RSurfaceForces), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(313)], HRESULT, 'SurfaceForcesByLoadCombinationId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in', 'out'], POINTER(RSurfaceForces), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(314)], HRESULT, 'EnvelopeSurfaceForces',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in', 'out'], POINTER(RSurfaceForces), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(315)], HRESULT, 'CriticalSurfaceForces',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in', 'out'], POINTER(RSurfaceForces), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(316)], HRESULT, 'AllSurfaceForcesByLoadCaseId',
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceForces)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(317)], HRESULT, 'AllSurfaceForcesByLoadCombinationId',
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceForces)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(318)], HRESULT, 'AllEnvelopeSurfaceForces',
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceForces)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(319)], HRESULT, 'AllCriticalSurfaceForces',
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceForces)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(320)], HRESULT, 'SurfaceForcesForResultBlocks',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RResultBlockInfo)), 'ResultBlockInfo' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceForces)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(321)], HRESULT, 'SurfaceForceValuesForResultBlocks',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RResultBlockInfo)), 'ResultBlockInfo' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceForceValues)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(322)], HRESULT, 'NodalSupportForceByLoadCaseId',
              ( ['in'], c_int, 'NodalSupportId' ),
              ( ['in', 'out'], POINTER(RNodalSupportForceValues), 'Force' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(323)], HRESULT, 'NodalSupportForceByLoadCombinationId',
              ( ['in'], c_int, 'NodalSupportId' ),
              ( ['in', 'out'], POINTER(RNodalSupportForceValues), 'Force' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(324)], HRESULT, 'EnvelopeNodalSupportForce',
              ( ['in'], c_int, 'NodalSupportId' ),
              ( ['in', 'out'], POINTER(RNodalSupportForceValues), 'Force' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(325)], HRESULT, 'CriticalNodalSupportForce',
              ( ['in'], c_int, 'NodalSupportId' ),
              ( ['in', 'out'], POINTER(RNodalSupportForceValues), 'Force' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(326)], HRESULT, 'AllNodalSupportForcesByLoadCaseId',
              ( ['out'], POINTER(_midlSAFEARRAY(RNodalSupportForceValues)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(327)], HRESULT, 'AllNodalSupportForcesByLoadCombinationId',
              ( ['out'], POINTER(_midlSAFEARRAY(RNodalSupportForceValues)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(328)], HRESULT, 'AllEnvelopeNodalSupportForces',
              ( ['out'], POINTER(_midlSAFEARRAY(RNodalSupportForceValues)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(329)], HRESULT, 'AllCriticalNodalSupportForces',
              ( ['out'], POINTER(_midlSAFEARRAY(RNodalSupportForceValues)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(330)], HRESULT, 'NodalSupportForcesForResultBlocks',
              ( ['in'], c_int, 'NodalSupportId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RResultBlockInfo)), 'ResultBlockInfo' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RNodalSupportForceValues)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(331)], HRESULT, 'LineSupportForceByLoadCaseId',
              ( ['in'], c_int, 'LineSupportId' ),
              ( ['in'], c_int, 'LineSectionId' ),
              ( ['in', 'out'], POINTER(RLineSupportForceValues), 'Force' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(332)], HRESULT, 'LineSupportForceByLoadCombinationId',
              ( ['in'], c_int, 'LineSupportId' ),
              ( ['in'], c_int, 'LineSectionId' ),
              ( ['in', 'out'], POINTER(RLineSupportForceValues), 'Force' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(333)], HRESULT, 'EnvelopeLineSupportForce',
              ( ['in'], c_int, 'LineSupportId' ),
              ( ['in'], c_int, 'LineSectionId' ),
              ( ['in', 'out'], POINTER(RLineSupportForceValues), 'Force' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(334)], HRESULT, 'CriticalLineSupportForce',
              ( ['in'], c_int, 'LineSupportId' ),
              ( ['in'], c_int, 'LineSectionId' ),
              ( ['in', 'out'], POINTER(RLineSupportForceValues), 'Force' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(335)], HRESULT, 'LineSupportForcesByLoadCaseId',
              ( ['in'], c_int, 'LineSupportId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineSupportForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(336)], HRESULT, 'LineSupportForcesByLoadCombinationId',
              ( ['in'], c_int, 'LineSupportId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineSupportForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(337)], HRESULT, 'EnvelopeLineSupportForces',
              ( ['in'], c_int, 'LineSupportId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineSupportForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(338)], HRESULT, 'CriticalLineSupportForces',
              ( ['in'], c_int, 'LineSupportId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineSupportForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(339)], HRESULT, 'AllLineSupportForcesByLoadCaseId',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineSupportForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(340)], HRESULT, 'AllLineSupportForcesByLoadCombinationId',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineSupportForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(341)], HRESULT, 'AllEnvelopeLineSupportForces',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineSupportForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(342)], HRESULT, 'AllCriticalLineSupportForces',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineSupportForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(343)], HRESULT, 'LineSupportForcesForResultBlocks',
              ( ['in'], c_int, 'LineSupportId' ),
              ( ['in'], c_int, 'LineSectionId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RResultBlockInfo)), 'ResultBlockInfo' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineSupportForceValues)), 'Forces' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(344)], HRESULT, 'SurfaceSupportForceByLoadCaseId',
              ( ['in'], c_int, 'SurfaceSupportId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in', 'out'], POINTER(RSurfaceSupportForceValues), 'Force' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(345)], HRESULT, 'SurfaceSupportForceByLoadCombinationId',
              ( ['in'], c_int, 'SurfaceSupportId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in', 'out'], POINTER(RSurfaceSupportForceValues), 'Force' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(346)], HRESULT, 'EnvelopeSurfaceSupportForce',
              ( ['in'], c_int, 'SurfaceSupportId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in', 'out'], POINTER(RSurfaceSupportForceValues), 'Force' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(347)], HRESULT, 'CriticalSurfaceSupportForce',
              ( ['in'], c_int, 'SurfaceSupportId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in', 'out'], POINTER(RSurfaceSupportForceValues), 'Force' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(348)], HRESULT, 'SurfaceSupportForcesByLoadCaseId',
              ( ['in'], c_int, 'SurfaceSupportId' ),
              ( ['in', 'out'], POINTER(RSurfaceSupportForces), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(349)], HRESULT, 'SurfaceSupportForcesByLoadCombinationId',
              ( ['in'], c_int, 'SurfaceSupportId' ),
              ( ['in', 'out'], POINTER(RSurfaceSupportForces), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(350)], HRESULT, 'EnvelopeSurfaceSupportForces',
              ( ['in'], c_int, 'SurfaceSupportId' ),
              ( ['in', 'out'], POINTER(RSurfaceSupportForces), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(351)], HRESULT, 'CriticalSurfaceSupportForces',
              ( ['in'], c_int, 'SurfaceSupportId' ),
              ( ['in', 'out'], POINTER(RSurfaceSupportForces), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(352)], HRESULT, 'AllSurfaceSupportForcesByLoadCaseId',
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceSupportForces)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(353)], HRESULT, 'AllSurfaceSupportForcesByLoadCombinationId',
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceSupportForces)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(354)], HRESULT, 'AllEnvelopeSurfaceSupportForces',
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceSupportForces)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(355)], HRESULT, 'AllCriticalSurfaceSupportForces',
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceSupportForces)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(356)], HRESULT, 'SurfaceSupportForcesForResultBlocks',
              ( ['in'], c_int, 'SurfaceSupportId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RResultBlockInfo)), 'ResultBlockInfo' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceSupportForces)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(357)], HRESULT, 'SurfaceSupportForceValuesForResultBlocks',
              ( ['in'], c_int, 'SurfaceSupportId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RResultBlockInfo)), 'ResultBlockInfo' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceSupportForceValues)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(358)], HRESULT, 'SpringForceByLoadCaseId',
              ( ['in'], c_int, 'LineId' ),
              ( ['in', 'out'], POINTER(RSpringForceValues), 'Force' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(359)], HRESULT, 'SpringForceByLoadCombinationId',
              ( ['in'], c_int, 'LineId' ),
              ( ['in', 'out'], POINTER(RSpringForceValues), 'Force' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(360)], HRESULT, 'EnvelopeSpringForce',
              ( ['in'], c_int, 'LineId' ),
              ( ['in', 'out'], POINTER(RSpringForceValues), 'Force' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(361)], HRESULT, 'CriticalSpringForce',
              ( ['in'], c_int, 'LineId' ),
              ( ['in', 'out'], POINTER(RSpringForceValues), 'Force' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(362)], HRESULT, 'AllSpringForcesByLoadCaseId',
              ( ['out'], POINTER(_midlSAFEARRAY(RSpringForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(363)], HRESULT, 'AllSpringForcesByLoadCombinationId',
              ( ['out'], POINTER(_midlSAFEARRAY(RSpringForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(364)], HRESULT, 'AllEnvelopeSpringForces',
              ( ['out'], POINTER(_midlSAFEARRAY(RSpringForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(365)], HRESULT, 'AllCriticalSpringForces',
              ( ['out'], POINTER(_midlSAFEARRAY(RSpringForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(366)], HRESULT, 'SpringForcesForResultBlocks',
              ( ['in'], c_int, 'LineId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RResultBlockInfo)), 'ResultBlockInfo' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSpringForceValues)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(367)], HRESULT, 'GapForceByLoadCaseId',
              ( ['in'], c_int, 'LineId' ),
              ( ['out'], POINTER(c_double), 'Force' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(368)], HRESULT, 'GapForceByLoadCombinationId',
              ( ['in'], c_int, 'LineId' ),
              ( ['out'], POINTER(c_double), 'Force' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(369)], HRESULT, 'EnvelopeGapForce',
              ( ['in'], c_int, 'LineId' ),
              ( ['out'], POINTER(c_double), 'Force' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(370)], HRESULT, 'CriticalGapForce',
              ( ['in'], c_int, 'LineId' ),
              ( ['out'], POINTER(c_double), 'Force' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(371)], HRESULT, 'AllGapForcesByLoadCaseId',
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(372)], HRESULT, 'AllGapForcesByLoadCombinationId',
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(373)], HRESULT, 'AllEnvelopeGapForces',
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(374)], HRESULT, 'AllCriticalGapForces',
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(375)], HRESULT, 'GapForcesForResultBlocks',
              ( ['in'], c_int, 'LineId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RResultBlockInfo)), 'ResultBlockInfo' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(376)], HRESULT, 'GetEdgeConnectionForcesByLoadCaseId',
              ( ['in'], c_int, 'EdgeConnectionId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(REdgeConnectionForces), 'Forces' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(377)], HRESULT, 'GetEdgeConnectionForcesByLoadCombinationId',
              ( ['in'], c_int, 'EdgeConnectionId' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(REdgeConnectionForces), 'Forces' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(378)], HRESULT, 'GetEnvelopeEdgeConnectionForces',
              ( ['in'], c_int, 'EdgeConnectionId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EEdgeConnectionForce, 'Component' ),
              ( ['in', 'out'], POINTER(REdgeConnectionForces), 'Forces' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(379)], HRESULT, 'GetCriticalEdgeConnectionForces',
              ( ['in'], c_int, 'EdgeConnectionId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EEdgeConnectionForce, 'Component' ),
              ( ['in', 'out'], POINTER(REdgeConnectionForces), 'Forces' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(380)], HRESULT, 'GetAllEdgeConnectionForcesByLoadCaseId',
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(REdgeConnectionForces)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(381)], HRESULT, 'GetAllEdgeConnectionForcesByLoadCombinationId',
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(REdgeConnectionForces)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(382)], HRESULT, 'GetAllEnvelopeEdgeConnectionForces',
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EEdgeConnectionForce, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(REdgeConnectionForces)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(383)], HRESULT, 'GetAllCriticalEdgeConnectionForces',
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EEdgeConnectionForce, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(REdgeConnectionForces)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(384)], HRESULT, 'GetEdgeConnectionForcesForResultBlocks',
              ( ['in'], c_int, 'EdgeConnectionId' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RResultBlockInfo)), 'ResultBlockInfo' ),
              ( ['out'], POINTER(_midlSAFEARRAY(REdgeConnectionForces)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(385), 'propget'], HRESULT, 'EdgeConnectionForceComponent',
              ( ['out', 'retval'], POINTER(EEdgeConnectionForce), 'Value' )),
    COMMETHOD([dispid(385), 'propput'], HRESULT, 'EdgeConnectionForceComponent',
              ( ['in'], EEdgeConnectionForce, 'Value' )),
    COMMETHOD([dispid(386)], HRESULT, 'EdgeConnectionForcesByLoadCaseId',
              ( ['in'], c_int, 'EdgeConnectionId' ),
              ( ['in', 'out'], POINTER(REdgeConnectionForces), 'Forces' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(387)], HRESULT, 'EdgeConnectionForcesByLoadCombinationId',
              ( ['in'], c_int, 'EdgeConnectionId' ),
              ( ['in', 'out'], POINTER(REdgeConnectionForces), 'Forces' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(388)], HRESULT, 'EnvelopeEdgeConnectionForces',
              ( ['in'], c_int, 'EdgeConnectionId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in', 'out'], POINTER(REdgeConnectionForces), 'Forces' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(389)], HRESULT, 'CriticalEdgeConnectionForces',
              ( ['in'], c_int, 'EdgeConnectionId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in', 'out'], POINTER(REdgeConnectionForces), 'Forces' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(390)], HRESULT, 'AllEdgeConnectionForcesByLoadCaseId',
              ( ['out'], POINTER(_midlSAFEARRAY(REdgeConnectionForces)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(391)], HRESULT, 'AllEdgeConnectionForcesByLoadCombinationId',
              ( ['out'], POINTER(_midlSAFEARRAY(REdgeConnectionForces)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(392)], HRESULT, 'AllEnvelopeEdgeConnectionForces',
              ( ['out'], POINTER(_midlSAFEARRAY(REdgeConnectionForces)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(393)], HRESULT, 'AllCriticalEdgeConnectionForces',
              ( ['out'], POINTER(_midlSAFEARRAY(REdgeConnectionForces)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(394)], HRESULT, 'EdgeConnectionForcesForResultBlocks',
              ( ['in'], c_int, 'EdgeConnectionId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RResultBlockInfo)), 'ResultBlockInfo' ),
              ( ['out'], POINTER(_midlSAFEARRAY(REdgeConnectionForces)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(395)], HRESULT, 'GetLinkElementForcesByLoadCaseId',
              ( ['in'], c_int, 'LinkElementId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RLinkElementForces), 'Forces' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(396)], HRESULT, 'GetLinkElementForcesByLoadCombinationId',
              ( ['in'], c_int, 'LinkElementId' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RLinkElementForces), 'Forces' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(397)], HRESULT, 'GetEnvelopeLinkElementForces',
              ( ['in'], c_int, 'LinkElementId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELinkElementForce, 'Component' ),
              ( ['in', 'out'], POINTER(RLinkElementForces), 'Forces' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(398)], HRESULT, 'GetCriticalLinkElementForces',
              ( ['in'], c_int, 'LinkElementId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELinkElementForce, 'Component' ),
              ( ['in', 'out'], POINTER(RLinkElementForces), 'Forces' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(399)], HRESULT, 'GetAllLinkElementForcesByLoadCaseId',
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLinkElementForces)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(400)], HRESULT, 'GetAllLinkElementForcesByLoadCombinationId',
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLinkElementForces)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(401)], HRESULT, 'GetAllEnvelopeLinkElementForces',
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELinkElementForce, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLinkElementForces)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(402)], HRESULT, 'GetAllCriticalLinkElementForces',
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELinkElementForce, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLinkElementForces)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(403)], HRESULT, 'GetLinkElementForcesForResultBlocks',
              ( ['in'], c_int, 'LinkElementId' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RResultBlockInfo)), 'ResultBlockInfo' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLinkElementForces)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(404), 'propget'], HRESULT, 'LinkElementForceComponent',
              ( ['out', 'retval'], POINTER(ELinkElementForce), 'Value' )),
    COMMETHOD([dispid(404), 'propput'], HRESULT, 'LinkElementForceComponent',
              ( ['in'], ELinkElementForce, 'Value' )),
    COMMETHOD([dispid(405)], HRESULT, 'LinkElementForcesByLoadCaseId',
              ( ['in'], c_int, 'LinkElementId' ),
              ( ['in', 'out'], POINTER(RLinkElementForces), 'Forces' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(406)], HRESULT, 'LinkElementForcesByLoadCombinationId',
              ( ['in'], c_int, 'LinkElementId' ),
              ( ['in', 'out'], POINTER(RLinkElementForces), 'Forces' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(407)], HRESULT, 'EnvelopeLinkElementForces',
              ( ['in'], c_int, 'LinkElementId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in', 'out'], POINTER(RLinkElementForces), 'Forces' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(408)], HRESULT, 'CriticalLinkElementForces',
              ( ['in'], c_int, 'LinkElementId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in', 'out'], POINTER(RLinkElementForces), 'Forces' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(409)], HRESULT, 'AllLinkElementForcesByLoadCaseId',
              ( ['out'], POINTER(_midlSAFEARRAY(RLinkElementForces)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(410)], HRESULT, 'AllLinkElementForcesByLoadCombinationId',
              ( ['out'], POINTER(_midlSAFEARRAY(RLinkElementForces)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(411)], HRESULT, 'AllEnvelopeLinkElementForces',
              ( ['out'], POINTER(_midlSAFEARRAY(RLinkElementForces)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(412)], HRESULT, 'AllCriticalLinkElementForces',
              ( ['out'], POINTER(_midlSAFEARRAY(RLinkElementForces)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(413)], HRESULT, 'LinkElementForcesForResultBlocks',
              ( ['in'], c_int, 'LinkElementId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RResultBlockInfo)), 'ResultBlockInfo' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLinkElementForces)), 'Forces' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(414), 'propget'], HRESULT, 'EnvelopeUID',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(414), 'propput'], HRESULT, 'EnvelopeUID',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(417), helpstring('LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count')], HRESULT, 'GetEnvelopeLineForce2',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELineForce, 'Component' ),
              ( ['in', 'out'], POINTER(RLineForceValues), 'Force' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'LoadLevel' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(418)], HRESULT, 'GetCriticalLineForce2',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELineForce, 'Component' ),
              ( ['in', 'out'], POINTER(RLineForceValues), 'Force' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(ECombinationType), 'CriticalCombinationType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Factors' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(421), helpstring('LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count')], HRESULT, 'GetEnvelopeSurfaceForce2',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ESurfaceForce, 'Component' ),
              ( ['in', 'out'], POINTER(RSurfaceForceValues), 'Force' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'LoadLevel' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(422)], HRESULT, 'GetCriticalSurfaceForce2',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ESurfaceForce, 'Component' ),
              ( ['in', 'out'], POINTER(RSurfaceForceValues), 'Force' ),
              ( ['out'], POINTER(ECombinationType), 'CriticalCombinationType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Factors' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(425), helpstring('LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count')], HRESULT, 'GetEnvelopeNodalSupportForce2',
              ( ['in'], c_int, 'NodalSupportId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ENodalSupportForce, 'Component' ),
              ( ['in', 'out'], POINTER(RNodalSupportForceValues), 'Force' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'LoadLevel' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(426)], HRESULT, 'GetCriticalNodalSupportForce2',
              ( ['in'], c_int, 'NodalSupportId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ENodalSupportForce, 'Component' ),
              ( ['in', 'out'], POINTER(RNodalSupportForceValues), 'Force' ),
              ( ['out'], POINTER(ECombinationType), 'CriticalCombinationType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Factors' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(429), helpstring('LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count')], HRESULT, 'GetEnvelopeLineSupportForce2',
              ( ['in'], c_int, 'LineSupportId' ),
              ( ['in'], c_int, 'LineSectionId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELineSupportForce, 'Component' ),
              ( ['in', 'out'], POINTER(RLineSupportForceValues), 'Force' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'LoadLevel' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(430)], HRESULT, 'GetCriticalLineSupportForce2',
              ( ['in'], c_int, 'LineSupportId' ),
              ( ['in'], c_int, 'LineSectionId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELineSupportForce, 'Component' ),
              ( ['in', 'out'], POINTER(RLineSupportForceValues), 'Force' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(ECombinationType), 'CriticalCombinationType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Factors' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(433), helpstring('LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count')], HRESULT, 'GetEnvelopeSurfaceSupportForce2',
              ( ['in'], c_int, 'SurfaceSupportId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ESurfaceSupportForce, 'Component' ),
              ( ['in', 'out'], POINTER(RSurfaceSupportForceValues), 'Force' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'LoadLevel' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(434)], HRESULT, 'GetCriticalSurfaceSupportForce2',
              ( ['in'], c_int, 'SurfaceSupportId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ESurfaceSupportForce, 'Component' ),
              ( ['in', 'out'], POINTER(RSurfaceSupportForceValues), 'Force' ),
              ( ['out'], POINTER(ECombinationType), 'CriticalCombinationType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Factors' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(437), helpstring('LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count')], HRESULT, 'GetEnvelopeSpringForce2',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ESpringForce, 'Component' ),
              ( ['in', 'out'], POINTER(RSpringForceValues), 'Force' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'LoadLevel' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(438)], HRESULT, 'GetCriticalSpringForce2',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ESpringForce, 'Component' ),
              ( ['in', 'out'], POINTER(RSpringForceValues), 'Force' ),
              ( ['out'], POINTER(ECombinationType), 'CriticalCombinationType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Factors' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(441), helpstring('LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count')], HRESULT, 'GetEnvelopeGapForce2',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(c_double), 'Force' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'LoadLevel' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(442)], HRESULT, 'GetCriticalGapForce2',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(c_double), 'Force' ),
              ( ['out'], POINTER(ECombinationType), 'CriticalCombinationType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Factors' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(445), helpstring('LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count')], HRESULT, 'EnvelopeLineForce2',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in', 'out'], POINTER(RLineForceValues), 'Force' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'LoadLevel' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(446)], HRESULT, 'CriticalLineForce2',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in', 'out'], POINTER(RLineForceValues), 'Force' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(ECombinationType), 'CriticalCombinationType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Factors' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(449), helpstring('LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count')], HRESULT, 'EnvelopeSurfaceForce2',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in', 'out'], POINTER(RSurfaceForceValues), 'Force' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'LoadLevel' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(450)], HRESULT, 'CriticalSurfaceForce2',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in', 'out'], POINTER(RSurfaceForceValues), 'Force' ),
              ( ['out'], POINTER(ECombinationType), 'CriticalCombinationType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Factors' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(453), helpstring('LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count')], HRESULT, 'EnvelopeNodalSupportForce2',
              ( ['in'], c_int, 'NodalSupportId' ),
              ( ['in', 'out'], POINTER(RNodalSupportForceValues), 'Force' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'LoadLevel' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(454)], HRESULT, 'CriticalNodalSupportForce2',
              ( ['in'], c_int, 'NodalSupportId' ),
              ( ['in', 'out'], POINTER(RNodalSupportForceValues), 'Force' ),
              ( ['out'], POINTER(ECombinationType), 'CriticalCombinationType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Factors' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(457), helpstring('LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count')], HRESULT, 'EnvelopeLineSupportForce2',
              ( ['in'], c_int, 'LineSupportId' ),
              ( ['in'], c_int, 'LineSectionId' ),
              ( ['in', 'out'], POINTER(RLineSupportForceValues), 'Force' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'LoadLevel' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(458)], HRESULT, 'CriticalLineSupportForce2',
              ( ['in'], c_int, 'LineSupportId' ),
              ( ['in'], c_int, 'LineSectionId' ),
              ( ['in', 'out'], POINTER(RLineSupportForceValues), 'Force' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(ECombinationType), 'CriticalCombinationType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Factors' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(461), helpstring('LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count')], HRESULT, 'EnvelopeSurfaceSupportForce2',
              ( ['in'], c_int, 'SurfaceSupportId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in', 'out'], POINTER(RSurfaceSupportForceValues), 'Force' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'LoadLevel' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(462)], HRESULT, 'CriticalSurfaceSupportForce2',
              ( ['in'], c_int, 'SurfaceSupportId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in', 'out'], POINTER(RSurfaceSupportForceValues), 'Force' ),
              ( ['out'], POINTER(ECombinationType), 'CriticalCombinationType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Factors' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(465), helpstring('LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count')], HRESULT, 'EnvelopeSpringForce2',
              ( ['in'], c_int, 'LineId' ),
              ( ['in', 'out'], POINTER(RSpringForceValues), 'Force' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'LoadLevel' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(466)], HRESULT, 'CriticalSpringForce2',
              ( ['in'], c_int, 'LineId' ),
              ( ['in', 'out'], POINTER(RSpringForceValues), 'Force' ),
              ( ['out'], POINTER(ECombinationType), 'CriticalCombinationType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Factors' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(469), helpstring('LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count')], HRESULT, 'EnvelopeGapForce2',
              ( ['in'], c_int, 'LineId' ),
              ( ['out'], POINTER(c_double), 'Force' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'LoadLevel' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(470)], HRESULT, 'CriticalGapForce2',
              ( ['in'], c_int, 'LineId' ),
              ( ['out'], POINTER(c_double), 'Force' ),
              ( ['out'], POINTER(ECombinationType), 'CriticalCombinationType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Factors' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(473), helpstring('LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count')], HRESULT, 'GetEnvelopeEdgeConnectionForces2',
              ( ['in'], c_int, 'EdgeConnectionId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EEdgeConnectionForce, 'Component' ),
              ( ['in', 'out'], POINTER(REdgeConnectionForces), 'Forces' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'LoadLevel' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(474)], HRESULT, 'GetCriticalEdgeConnectionForces2',
              ( ['in'], c_int, 'EdgeConnectionId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EEdgeConnectionForce, 'Component' ),
              ( ['in', 'out'], POINTER(REdgeConnectionForces), 'Forces' ),
              ( ['out'], POINTER(ECombinationType), 'CriticalCombinationType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Factors' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(477), helpstring('LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count')], HRESULT, 'EnvelopeEdgeConnectionForces2',
              ( ['in'], c_int, 'EdgeConnectionId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in', 'out'], POINTER(REdgeConnectionForces), 'Forces' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'LoadLevel' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(478)], HRESULT, 'CriticalEdgeConnectionForces2',
              ( ['in'], c_int, 'EdgeConnectionId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in', 'out'], POINTER(REdgeConnectionForces), 'Forces' ),
              ( ['out'], POINTER(ECombinationType), 'CriticalCombinationType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Factors' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(481), helpstring('LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count')], HRESULT, 'GetEnvelopeLinkElementForces2',
              ( ['in'], c_int, 'LinkElementId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELinkElementForce, 'Component' ),
              ( ['in', 'out'], POINTER(RLinkElementForces), 'Forces' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'LoadLevel' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(482)], HRESULT, 'GetCriticalLinkElementForces2',
              ( ['in'], c_int, 'LinkElementId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELinkElementForce, 'Component' ),
              ( ['in', 'out'], POINTER(RLinkElementForces), 'Forces' ),
              ( ['out'], POINTER(ECombinationType), 'CriticalCombinationType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Factors' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(485), helpstring('LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count')], HRESULT, 'EnvelopeLinkElementForces2',
              ( ['in'], c_int, 'LinkElementId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in', 'out'], POINTER(RLinkElementForces), 'Forces' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'LoadLevel' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(486)], HRESULT, 'CriticalLinkElementForces2',
              ( ['in'], c_int, 'LinkElementId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in', 'out'], POINTER(RLinkElementForces), 'Forces' ),
              ( ['out'], POINTER(ECombinationType), 'CriticalCombinationType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Factors' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(487)], HRESULT, 'GetMemberForcesByLoadCaseId',
              ( ['in'], c_int, 'MemberID' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(488)], HRESULT, 'GetMemberForcesByLoadCombinationId',
              ( ['in'], c_int, 'MemberID' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(489)], HRESULT, 'GetEnvelopeMemberForces',
              ( ['in'], c_int, 'MemberID' ),
              ( ['in'], c_int, 'EnvelopeUID' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELineForce, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseOrCombinationIds' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadLevels' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(490)], HRESULT, 'GetCriticalMemberForces',
              ( ['in'], c_int, 'MemberID' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELineForce, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(491), helpstring('minHeight = 580, minWidth = 640 ')], HRESULT, 'SaveMemberForcesToMetaFileByLoadCaseID',
              ( ['in'], BSTR, 'FileName' ),
              ( ['in'], c_int, 'MemberID' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], c_int, 'Width' ),
              ( ['in'], c_int, 'Height' ),
              ( ['in'], c_double, 'Position' ),
              ( ['in'], EWindowColourMode, 'ColourMode' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(492), helpstring('minHeight = 580, minWidth = 640 ')], HRESULT, 'SaveMemberForcesToMetaFileByLoadCombinationID',
              ( ['in'], BSTR, 'FileName' ),
              ( ['in'], c_int, 'MemberID' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], c_int, 'Width' ),
              ( ['in'], c_int, 'Height' ),
              ( ['in'], c_double, 'Position' ),
              ( ['in'], EWindowColourMode, 'ColourMode' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(493), helpstring('minHeight = 580, minWidth = 640 ')], HRESULT, 'SaveEnvelopeMemberForcesToMetaFile',
              ( ['in'], BSTR, 'FileName' ),
              ( ['in'], c_int, 'MemberID' ),
              ( ['in'], c_int, 'EnvelopeUID' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], c_int, 'Width' ),
              ( ['in'], c_int, 'Height' ),
              ( ['in'], ELongBoolean, 'EnvelopeOnly' ),
              ( ['in'], c_double, 'Position' ),
              ( ['in'], EWindowColourMode, 'ColourMode' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(494), helpstring('minHeight = 580, minWidth = 640 ')], HRESULT, 'SaveCriticalMemberForcesToMetaFile',
              ( ['in'], BSTR, 'FileName' ),
              ( ['in'], c_int, 'MemberID' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], c_int, 'Width' ),
              ( ['in'], c_int, 'Height' ),
              ( ['in'], ELongBoolean, 'EnvelopeOnly' ),
              ( ['in'], c_double, 'Position' ),
              ( ['in'], EWindowColourMode, 'ColourMode' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(495)], HRESULT, 'GetLineForcesByLoadCaseIdConnectedToNode',
              ( ['in'], c_int, 'NodeId' ),
              ( ['in'], c_int, 'WindowId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EConnectedToNodeType, 'ConnectedToNodeType' ),
              ( ['in'], ESeismicComponentSumType, 'SeismicSum' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(496)], HRESULT, 'LineForcesByLoadCaseIdConnectedToNode',
              ( ['in'], c_int, 'NodeId' ),
              ( ['in'], c_int, 'WindowId' ),
              ( ['in'], EConnectedToNodeType, 'ConnectedToNodeType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(497)], HRESULT, 'GetLineForcesByLoadCombinationIdConnectedToNode',
              ( ['in'], c_int, 'NodeId' ),
              ( ['in'], c_int, 'WindowId' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EConnectedToNodeType, 'ConnectedToNodeType' ),
              ( ['in'], ESeismicComponentSumType, 'SeismicSum' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(498)], HRESULT, 'LineForcesByLoadCombinationIdConnectedToNode',
              ( ['in'], c_int, 'NodeId' ),
              ( ['in'], c_int, 'WindowId' ),
              ( ['in'], EConnectedToNodeType, 'ConnectedToNodeType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(499)], HRESULT, 'GetEnvelopeLineForcesConnectedToNode',
              ( ['in'], c_int, 'NodeId' ),
              ( ['in'], c_int, 'WindowId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EConnectedToNodeType, 'ConnectedToNodeType' ),
              ( ['in'], ELineForce, 'Component' ),
              ( ['in'], ESeismicComponentSumType, 'SeismicSum' ),
              ( ['in'], c_int, 'LineId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(500)], HRESULT, 'EnvelopeLineForcesConnectedToNode',
              ( ['in'], c_int, 'NodeId' ),
              ( ['in'], c_int, 'WindowId' ),
              ( ['in'], EConnectedToNodeType, 'ConnectedToNodeType' ),
              ( ['in'], c_int, 'LineId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(501)], HRESULT, 'GetCriticalLineForcesConnectedToNode',
              ( ['in'], c_int, 'NodeId' ),
              ( ['in'], c_int, 'WindowId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EConnectedToNodeType, 'ConnectedToNodeType' ),
              ( ['in'], ELineForce, 'Component' ),
              ( ['in'], ESeismicComponentSumType, 'SeismicSum' ),
              ( ['in'], c_int, 'LineId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(502)], HRESULT, 'CriticalLineForcesConnectedToNode',
              ( ['in'], c_int, 'NodeId' ),
              ( ['in'], c_int, 'WindowId' ),
              ( ['in'], EConnectedToNodeType, 'ConnectedToNodeType' ),
              ( ['in'], c_int, 'LineId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(503)], HRESULT, 'GetVirtualBeamOrStripForcesByLoadCaseId',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RVirtualBeamForceValues)), 'Forces' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Pos' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(504)], HRESULT, 'VirtualBeamOrStripForcesByLoadCaseId',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RVirtualBeamForceValues)), 'Forces' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Pos' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(505)], HRESULT, 'GetVirtualBeamOrStripForcesByLoadCombinationId',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainId' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RVirtualBeamForceValues)), 'Forces' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Pos' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(506)], HRESULT, 'VirtualBeamOrStripForcesByLoadCombinationId',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RVirtualBeamForceValues)), 'Forces' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Pos' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(507)], HRESULT, 'GetEnvelopeVirtualBeamOrStripForces',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELineForce, 'Component' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RVirtualBeamForceValues)), 'Forces' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Pos' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCasesOrLoadCombinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(508)], HRESULT, 'EnvelopeVirtualBeamOrStripForces',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RVirtualBeamForceValues)), 'Forces' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Pos' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCasesOrLoadCombinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(509)], HRESULT, 'GetCriticalVirtualBeamOrStripForces',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELineForce, 'Component' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RVirtualBeamForceValues)), 'Forces' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Pos' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(510)], HRESULT, 'CriticalVirtualBeamOrStripForces',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RVirtualBeamForceValues)), 'Forces' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Pos' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(511), 'propget'], HRESULT, 'VirtualBeamForceComponent',
              ( ['out', 'retval'], POINTER(EVirtualBeamForce), 'Value' )),
    COMMETHOD([dispid(511), 'propput'], HRESULT, 'VirtualBeamForceComponent',
              ( ['in'], EVirtualBeamForce, 'Value' )),
    COMMETHOD([dispid(512)], HRESULT, 'GetEnvelopeVirtualBeamOrStripForces2',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELineForce, 'Component' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RVirtualBeamForceValues)), 'Forces' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Pos' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseOrCombinationIds' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadLevels' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(513)], HRESULT, 'EnvelopeVirtualBeamOrStripForces2',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RVirtualBeamForceValues)), 'Forces' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Pos' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseOrCombinationIds' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadLevels' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(514)], HRESULT, 'GetCriticalVirtualBeamOrStripForce',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELineForce, 'Component' ),
              ( ['in', 'out'], POINTER(RVirtualBeamForceValues), 'Forces' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'Pos' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(515)], HRESULT, 'CriticalVirtualBeamOrStripForce',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in', 'out'], POINTER(RVirtualBeamForceValues), 'Forces' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'Pos' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(516)], HRESULT, 'GetCriticalVirtualBeamOrStripForce2',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELineForce, 'Component' ),
              ( ['in', 'out'], POINTER(RVirtualBeamForceValues), 'Forces' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'Pos' ),
              ( ['out'], POINTER(ECombinationType), 'CriticalCombinationType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Factors' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(517)], HRESULT, 'CriticalVirtualBeamOrStripForce2',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in', 'out'], POINTER(RVirtualBeamForceValues), 'Forces' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'Pos' ),
              ( ['out'], POINTER(ECombinationType), 'CriticalCombinationType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Factors' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(518), 'propget'], HRESULT, 'SeismicComponentSumType',
              ( ['out', 'retval'], POINTER(ESeismicComponentSumType), 'Value' )),
    COMMETHOD([dispid(518), 'propput'], HRESULT, 'SeismicComponentSumType',
              ( ['in'], ESeismicComponentSumType, 'Value' )),
    COMMETHOD([dispid(519)], HRESULT, 'GetLineForceByLoadCombinationIdEQ',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ESeismicComponentSumType, 'SeismicSum' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineForceValues)), 'Forces' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(520)], HRESULT, 'GetEnvelopeLineForceEQ',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ESeismicComponentSumType, 'SeismicSum' ),
              ( ['in'], ELineForce, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineForceValues)), 'Forces' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(521)], HRESULT, 'GetCriticalLineForceEQ',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ESeismicComponentSumType, 'SeismicSum' ),
              ( ['in'], ELineForce, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineForceValues)), 'Forces' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(522)], HRESULT, 'LineForceByLoadCombinationIdEQ',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineForceValues)), 'Forces' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(523)], HRESULT, 'EnvelopeLineForceEQ',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineForceValues)), 'Forces' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(524)], HRESULT, 'CriticalLineForceEQ',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineForceValues)), 'Forces' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(525), helpstring('minHeight = 580, minWidth = 640 ')], HRESULT, 'SaveVirtualBeamOrStripForcesToMetaFileByLoadCaseID',
              ( ['in'], BSTR, 'FileName' ),
              ( ['in'], c_int, 'MemberID' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], c_int, 'Width' ),
              ( ['in'], c_int, 'Height' ),
              ( ['in'], c_double, 'Position' ),
              ( ['in'], EWindowColourMode, 'ColourMode' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(526), helpstring('minHeight = 580, minWidth = 640 ')], HRESULT, 'SaveVirtualBeamOrStripForcesToMetaFileByLoadCombinationID',
              ( ['in'], BSTR, 'FileName' ),
              ( ['in'], c_int, 'MemberID' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], c_int, 'Width' ),
              ( ['in'], c_int, 'Height' ),
              ( ['in'], c_double, 'Position' ),
              ( ['in'], EWindowColourMode, 'ColourMode' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(527), helpstring('minHeight = 580, minWidth = 640 ')], HRESULT, 'SaveEnvelopeVirtualBeamOrStripForcesToMetaFile',
              ( ['in'], BSTR, 'FileName' ),
              ( ['in'], c_int, 'MemberID' ),
              ( ['in'], c_int, 'EnvelopeUID' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], c_int, 'Width' ),
              ( ['in'], c_int, 'Height' ),
              ( ['in'], ELongBoolean, 'EnvelopeOnly' ),
              ( ['in'], c_double, 'Position' ),
              ( ['in'], EWindowColourMode, 'ColourMode' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(528), helpstring('minHeight = 580, minWidth = 640 ')], HRESULT, 'SaveCriticalVirtualBeamOrStripForcesToMetaFile',
              ( ['in'], BSTR, 'FileName' ),
              ( ['in'], c_int, 'MemberID' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], c_int, 'Width' ),
              ( ['in'], c_int, 'Height' ),
              ( ['in'], ELongBoolean, 'EnvelopeOnly' ),
              ( ['in'], c_double, 'Position' ),
              ( ['in'], EWindowColourMode, 'ColourMode' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(529)], HRESULT, 'SetUserCreep',
              ( ['in'], ELongBoolean, 'Creep' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(530), 'propget'], HRESULT, 'UserCreep',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(531)], HRESULT, 'GetMembersSupportForcesByLoadCaseId',
              ( ['in'], c_int, 'MembersSupportId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineSupportForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(532)], HRESULT, 'GetMembersSupportForcesByLoadCombinationId',
              ( ['in'], c_int, 'MembersSupportId' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineSupportForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(533)], HRESULT, 'GetEnvelopeMembersSupportForces',
              ( ['in'], c_int, 'MembersSupportId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELineSupportForce, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineSupportForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(534)], HRESULT, 'GetCriticalMembersSupportForces',
              ( ['in'], c_int, 'MembersSupportId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELineSupportForce, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineSupportForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(535)], HRESULT, 'NodalSupportForceByLoadCombinationIdEQ',
              ( ['in'], c_int, 'NodalSupportId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RNodalSupportForceValues)), 'Forces' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(536)], HRESULT, 'EnvelopeNodalSupportForceEQ',
              ( ['in'], c_int, 'NodalSupportId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RNodalSupportForceValues)), 'Forces' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(537)], HRESULT, 'CriticalNodalSupportForceEQ',
              ( ['in'], c_int, 'NodalSupportId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RNodalSupportForceValues)), 'Forces' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(538)], HRESULT, 'LineSupportForceByLoadCombinationIdEQ',
              ( ['in'], c_int, 'LineSupportId' ),
              ( ['in'], c_int, 'LineSectionId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RLineSupportForceValues)), 'Forces' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(539)], HRESULT, 'EnvelopeLineSupportForceEQ',
              ( ['in'], c_int, 'LineSupportId' ),
              ( ['in'], c_int, 'LineSectionId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RLineSupportForceValues)), 'Forces' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(540)], HRESULT, 'CriticalLineSupportForceEQ',
              ( ['in'], c_int, 'LineSupportId' ),
              ( ['in'], c_int, 'LineSectionId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RLineSupportForceValues)), 'Forces' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(541), 'propget'], HRESULT, 'SupportSeismicSumType',
              ( ['out', 'retval'], POINTER(ESupportSeismicComponentSumType), 'Value' )),
    COMMETHOD([dispid(541), 'propput'], HRESULT, 'SupportSeismicSumType',
              ( ['in'], ESupportSeismicComponentSumType, 'Value' )),
    COMMETHOD([dispid(542)], HRESULT, 'SurfaceForceByLoadCombinationIdEQ',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RSurfaceForceValues)), 'Forces' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(543)], HRESULT, 'EnvelopeSurfaceForceEQ',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RSurfaceForceValues)), 'Forces' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(544)], HRESULT, 'CriticalSurfaceForceEQ',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RSurfaceForceValues)), 'Forces' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(545)], HRESULT, 'CriticalLineForce2EQ',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineForceValues)), 'Forces' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RCombinationElement)), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMForces implementation
##class IAxisVMForces_Impl(object):
##    def GetLineForceByLoadCaseId(self, LineId, SectionId, LoadCaseId, LoadLevelOrTimeStep, AnalysisType):
##        '-no docstring-'
##        #return Force, PosX, Combination, ResultValue
##
##    def GetLineForceByLoadCombinationId(self, LineId, SectionId, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Force, PosX, Combination, ResultValue
##
##    def GetEnvelopeLineForce(self, LineId, SectionId, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return Force, PosX, Combination, ResultValue
##
##    def GetCriticalLineForce(self, LineId, SectionId, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Force, PosX, Combination, ResultValue
##
##    def GetLineForcesByLoadCaseId(self, LineId, LoadCaseId, LoadLevelOrTimeStep, AnalysisType):
##        '-no docstring-'
##        #return Forces, PosX, ResultValue
##
##    def GetLineForcesByLoadCombinationId(self, LineId, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Forces, PosX, ResultValue
##
##    def GetEnvelopeLineForces(self, LineId, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return Forces, PosX, ResultValue
##
##    def GetCriticalLineForces(self, LineId, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Forces, PosX, ResultValue
##
##    def GetAllLineForcesByLoadCaseId(self, LoadCaseId, LoadLevelOrTimeStep, AnalysisType):
##        '-no docstring-'
##        #return SectionCounts, Forces, PosX, ResultValue
##
##    def GetAllLineForcesByLoadCombinationId(self, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return SectionCounts, Forces, PosX, ResultValue
##
##    def GetAllEnvelopeLineForces(self, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return SectionCounts, Forces, PosX, ResultValue
##
##    def GetAllCriticalLineForces(self, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return SectionCounts, Forces, PosX, ResultValue
##
##    def GetLineForcesForResultBlocks(self, LineId, SectionId, AnalysisType):
##        '-no docstring-'
##        #return ResultBlockInfo, Forces, PosX, ResultValue
##
##    def GetSurfaceForceByLoadCaseId(self, SurfaceId, SurfaceVertexType, SurfaceVertexId, LoadCaseId, LoadLevelOrTimeStep, AnalysisType):
##        '-no docstring-'
##        #return Force, Combination, ResultValue
##
##    def GetSurfaceForceByLoadCombinationId(self, SurfaceId, SurfaceVertexType, SurfaceVertexId, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Force, Combination, ResultValue
##
##    def GetEnvelopeSurfaceForce(self, SurfaceId, SurfaceVertexType, SurfaceVertexId, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return Force, Combination, ResultValue
##
##    def GetCriticalSurfaceForce(self, SurfaceId, SurfaceVertexType, SurfaceVertexId, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Force, Combination, ResultValue
##
##    def GetSurfaceForcesByLoadCaseId(self, SurfaceId, LoadCaseId, LoadLevelOrTimeStep, AnalysisType):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def GetSurfaceForcesByLoadCombinationId(self, SurfaceId, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def GetEnvelopeSurfaceForces(self, SurfaceId, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def GetCriticalSurfaceForces(self, SurfaceId, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def GetAllSurfaceForcesByLoadCaseId(self, LoadCaseId, LoadLevelOrTimeStep, AnalysisType):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def GetAllSurfaceForcesByLoadCombinationId(self, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def GetAllEnvelopeSurfaceForces(self, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def GetAllCriticalSurfaceForces(self, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def GetSurfaceForcesForResultBlocks(self, SurfaceId, AnalysisType):
##        '-no docstring-'
##        #return ResultBlockInfo, Forces, ResultValue
##
##    def GetSurfaceForceValuesForResultBlocks(self, SurfaceId, SurfaceVertexType, SurfaceVertexId, AnalysisType):
##        '-no docstring-'
##        #return ResultBlockInfo, Forces, ResultValue
##
##    def GetNodalSupportForceByLoadCaseId(self, NodalSupportId, LoadCaseId, LoadLevelOrTimeStep, AnalysisType):
##        '-no docstring-'
##        #return Force, Combination, ResultValue
##
##    def GetNodalSupportForceByLoadCombinationId(self, NodalSupportId, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Force, Combination, ResultValue
##
##    def GetEnvelopeNodalSupportForce(self, NodalSupportId, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return Force, Combination, ResultValue
##
##    def GetCriticalNodalSupportForce(self, NodalSupportId, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Force, Combination, ResultValue
##
##    def GetAllNodalSupportForcesByLoadCaseId(self, LoadCaseId, LoadLevelOrTimeStep, AnalysisType):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def GetAllNodalSupportForcesByLoadCombinationId(self, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def GetAllEnvelopeNodalSupportForces(self, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def GetAllCriticalNodalSupportForces(self, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def GetNodalSupportForcesForResultBlocks(self, NodalSupportId, AnalysisType):
##        '-no docstring-'
##        #return ResultBlockInfo, Forces, ResultValue
##
##    def GetLineSupportForceByLoadCaseId(self, LineSupportId, LineSectionId, LoadCaseId, LoadLevelOrTimeStep, AnalysisType):
##        '-no docstring-'
##        #return Force, PosX, Combination, ResultValue
##
##    def GetLineSupportForceByLoadCombinationId(self, LineSupportId, LineSectionId, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Force, PosX, Combination, ResultValue
##
##    def GetEnvelopeLineSupportForce(self, LineSupportId, LineSectionId, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return Force, PosX, Combination, ResultValue
##
##    def GetCriticalLineSupportForce(self, LineSupportId, LineSectionId, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Force, PosX, Combination, ResultValue
##
##    def GetLineSupportForcesByLoadCaseId(self, LineSupportId, LoadCaseId, LoadLevelOrTimeStep, AnalysisType):
##        '-no docstring-'
##        #return Forces, PosX, ResultValue
##
##    def GetLineSupportForcesByLoadCombinationId(self, LineSupportId, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Forces, PosX, ResultValue
##
##    def GetEnvelopeLineSupportForces(self, LineSupportId, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return Forces, PosX, ResultValue
##
##    def GetCriticalLineSupportForces(self, LineSupportId, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Forces, PosX, ResultValue
##
##    def GetAllLineSupportForcesByLoadCaseId(self, LoadCaseId, LoadLevelOrTimeStep, AnalysisType):
##        '-no docstring-'
##        #return SectionCounts, Forces, PosX, ResultValue
##
##    def GetAllLineSupportForcesByLoadCombinationId(self, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return SectionCounts, Forces, PosX, ResultValue
##
##    def GetAllEnvelopeLineSupportForces(self, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return SectionCounts, Forces, PosX, ResultValue
##
##    def GetAllCriticalLineSupportForces(self, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return SectionCounts, Forces, PosX, ResultValue
##
##    def GetLineSupportForcesForResultBlocks(self, LineSupportId, LineSectionId, AnalysisType):
##        '-no docstring-'
##        #return ResultBlockInfo, Forces, PosX, ResultValue
##
##    def GetSurfaceSupportForceByLoadCaseId(self, SurfaceSupportId, SurfaceVertexType, SurfaceVertexId, LoadCaseId, LoadLevelOrTimeStep, AnalysisType):
##        '-no docstring-'
##        #return Force, Combination, ResultValue
##
##    def GetSurfaceSupportForceByLoadCombinationId(self, SurfaceSupportId, SurfaceVertexType, SurfaceVertexId, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Force, Combination, ResultValue
##
##    def GetEnvelopeSurfaceSupportForce(self, SurfaceSupportId, SurfaceVertexType, SurfaceVertexId, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return Force, Combination, ResultValue
##
##    def GetCriticalSurfaceSupportForce(self, SurfaceSupportId, SurfaceVertexType, SurfaceVertexId, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Force, Combination, ResultValue
##
##    def GetSurfaceSupportForcesByLoadCaseId(self, SurfaceSupportId, LoadCaseId, LoadLevelOrTimeStep, AnalysisType):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def GetSurfaceSupportForcesByLoadCombinationId(self, SurfaceSupportId, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def GetEnvelopeSurfaceSupportForces(self, SurfaceSupportId, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def GetCriticalSurfaceSupportForces(self, SurfaceSupportId, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def GetAllSurfaceSupportForcesByLoadCaseId(self, LoadCaseId, LoadLevelOrTimeStep, AnalysisType):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def GetAllSurfaceSupportForcesByLoadCombinationId(self, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def GetAllEnvelopeSurfaceSupportForces(self, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def GetAllCriticalSurfaceSupportForces(self, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def GetSurfaceSupportForcesForResultBlocks(self, SurfaceSupportId, AnalysisType):
##        '-no docstring-'
##        #return ResultBlockInfo, Forces, ResultValue
##
##    def GetSurfaceSupportForceValuesForResultBlocks(self, SurfaceSupportId, SurfaceVertexType, SurfaceVertexId, AnalysisType):
##        '-no docstring-'
##        #return ResultBlockInfo, Forces, ResultValue
##
##    def GetSpringForceByLoadCaseId(self, LineId, LoadCaseId, LoadLevelOrTimeStep, AnalysisType):
##        '-no docstring-'
##        #return Force, Combination, ResultValue
##
##    def GetSpringForceByLoadCombinationId(self, LineId, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Force, Combination, ResultValue
##
##    def GetEnvelopeSpringForce(self, LineId, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return Force, Combination, ResultValue
##
##    def GetCriticalSpringForce(self, LineId, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Force, Combination, ResultValue
##
##    def GetAllSpringForcesByLoadCaseId(self, LoadCaseId, LoadLevelOrTimeStep, AnalysisType):
##        '-no docstring-'
##        #return Forces, LineIds, ResultValue
##
##    def GetAllSpringForcesByLoadCombinationId(self, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Forces, LineIds, ResultValue
##
##    def GetAllEnvelopeSpringForces(self, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return Forces, LineIds, ResultValue
##
##    def GetAllCriticalSpringForces(self, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Forces, LineIds, ResultValue
##
##    def GetSpringForcesForResultBlocks(self, LineId, AnalysisType):
##        '-no docstring-'
##        #return ResultBlockInfo, Forces, ResultValue
##
##    def GetGapForceByLoadCaseId(self, LineId, LoadCaseId, LoadLevelOrTimeStep, AnalysisType):
##        '-no docstring-'
##        #return Force, Combination, ResultValue
##
##    def GetGapForceByLoadCombinationId(self, LineId, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Force, Combination, ResultValue
##
##    def GetEnvelopeGapForce(self, LineId, MinMaxType, AnalysisType):
##        '-no docstring-'
##        #return Force, Combination, ResultValue
##
##    def GetCriticalGapForce(self, LineId, MinMaxType, CombinationType, AnalysisType):
##        '-no docstring-'
##        #return Force, Combination, ResultValue
##
##    def GetAllGapForcesByLoadCaseId(self, LoadCaseId, LoadLevelOrTimeStep, AnalysisType):
##        '-no docstring-'
##        #return Forces, LineIds, ResultValue
##
##    def GetAllGapForcesByLoadCombinationId(self, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Forces, LineIds, ResultValue
##
##    def GetAllEnvelopeGapForces(self, MinMaxType, AnalysisType):
##        '-no docstring-'
##        #return Forces, LineIds, ResultValue
##
##    def GetAllCriticalGapForces(self, MinMaxType, CombinationType, AnalysisType):
##        '-no docstring-'
##        #return Forces, LineIds, ResultValue
##
##    def GetGapForcesForResultBlocks(self, LineId, AnalysisType):
##        '-no docstring-'
##        #return ResultBlockInfo, Forces, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    AnalysisType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LoadCaseId = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LoadCombinationId = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    MinMaxType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    CombinationType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LoadLevelOrTimeStep = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LineForceComponent = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    SurfaceForceComponent = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    NodalSupportForceComponent = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LineSupportForceComponent = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    SurfaceSupportForceComponent = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    SpringForceComponent = property(_get, _set, doc = _set.__doc__)
##
##    def LineForceByLoadCaseId(self, LineId, SectionId):
##        '-no docstring-'
##        #return Force, PosX, Combination, ResultValue
##
##    def LineForceByLoadCombinationId(self, LineId, SectionId):
##        '-no docstring-'
##        #return Force, PosX, Combination, ResultValue
##
##    def EnvelopeLineForce(self, LineId, SectionId):
##        '-no docstring-'
##        #return Force, PosX, Combination, ResultValue
##
##    def CriticalLineForce(self, LineId, SectionId):
##        '-no docstring-'
##        #return Force, PosX, Combination, ResultValue
##
##    def LineForcesByLoadCaseId(self, LineId):
##        '-no docstring-'
##        #return Forces, PosX, ResultValue
##
##    def LineForcesByLoadCombinationId(self, LineId):
##        '-no docstring-'
##        #return Forces, PosX, ResultValue
##
##    def EnvelopeLineForces(self, LineId):
##        '-no docstring-'
##        #return Forces, PosX, ResultValue
##
##    def CriticalLineForces(self, LineId):
##        '-no docstring-'
##        #return Forces, PosX, ResultValue
##
##    def AllLineForcesByLoadCaseId(self):
##        '-no docstring-'
##        #return SectionCounts, Forces, PosX, ResultValue
##
##    def AllLineForcesByLoadCombinationId(self):
##        '-no docstring-'
##        #return SectionCounts, Forces, PosX, ResultValue
##
##    def AllEnvelopeLineForces(self):
##        '-no docstring-'
##        #return SectionCounts, Forces, PosX, ResultValue
##
##    def AllCriticalLineForces(self):
##        '-no docstring-'
##        #return SectionCounts, Forces, PosX, ResultValue
##
##    def LineForcesForResultBlocks(self, LineId, SectionId):
##        '-no docstring-'
##        #return ResultBlockInfo, Forces, PosX, ResultValue
##
##    def SurfaceForceByLoadCaseId(self, SurfaceId, SurfaceVertexType, SurfaceVertexId):
##        '-no docstring-'
##        #return Force, Combination, ResultValue
##
##    def SurfaceForceByLoadCombinationId(self, SurfaceId, SurfaceVertexType, SurfaceVertexId):
##        '-no docstring-'
##        #return Force, Combination, ResultValue
##
##    def EnvelopeSurfaceForce(self, SurfaceId, SurfaceVertexType, SurfaceVertexId):
##        '-no docstring-'
##        #return Force, Combination, ResultValue
##
##    def CriticalSurfaceForce(self, SurfaceId, SurfaceVertexType, SurfaceVertexId):
##        '-no docstring-'
##        #return Force, Combination, ResultValue
##
##    def SurfaceForcesByLoadCaseId(self, SurfaceId):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def SurfaceForcesByLoadCombinationId(self, SurfaceId):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def EnvelopeSurfaceForces(self, SurfaceId):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def CriticalSurfaceForces(self, SurfaceId):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def AllSurfaceForcesByLoadCaseId(self):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def AllSurfaceForcesByLoadCombinationId(self):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def AllEnvelopeSurfaceForces(self):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def AllCriticalSurfaceForces(self):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def SurfaceForcesForResultBlocks(self, SurfaceId):
##        '-no docstring-'
##        #return ResultBlockInfo, Forces, ResultValue
##
##    def SurfaceForceValuesForResultBlocks(self, SurfaceId, SurfaceVertexType, SurfaceVertexId):
##        '-no docstring-'
##        #return ResultBlockInfo, Forces, ResultValue
##
##    def NodalSupportForceByLoadCaseId(self, NodalSupportId):
##        '-no docstring-'
##        #return Force, Combination, ResultValue
##
##    def NodalSupportForceByLoadCombinationId(self, NodalSupportId):
##        '-no docstring-'
##        #return Force, Combination, ResultValue
##
##    def EnvelopeNodalSupportForce(self, NodalSupportId):
##        '-no docstring-'
##        #return Force, Combination, ResultValue
##
##    def CriticalNodalSupportForce(self, NodalSupportId):
##        '-no docstring-'
##        #return Force, Combination, ResultValue
##
##    def AllNodalSupportForcesByLoadCaseId(self):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def AllNodalSupportForcesByLoadCombinationId(self):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def AllEnvelopeNodalSupportForces(self):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def AllCriticalNodalSupportForces(self):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def NodalSupportForcesForResultBlocks(self, NodalSupportId):
##        '-no docstring-'
##        #return ResultBlockInfo, Forces, ResultValue
##
##    def LineSupportForceByLoadCaseId(self, LineSupportId, LineSectionId):
##        '-no docstring-'
##        #return Force, PosX, Combination, ResultValue
##
##    def LineSupportForceByLoadCombinationId(self, LineSupportId, LineSectionId):
##        '-no docstring-'
##        #return Force, PosX, Combination, ResultValue
##
##    def EnvelopeLineSupportForce(self, LineSupportId, LineSectionId):
##        '-no docstring-'
##        #return Force, PosX, Combination, ResultValue
##
##    def CriticalLineSupportForce(self, LineSupportId, LineSectionId):
##        '-no docstring-'
##        #return Force, PosX, Combination, ResultValue
##
##    def LineSupportForcesByLoadCaseId(self, LineSupportId):
##        '-no docstring-'
##        #return Forces, PosX, ResultValue
##
##    def LineSupportForcesByLoadCombinationId(self, LineSupportId):
##        '-no docstring-'
##        #return Forces, PosX, ResultValue
##
##    def EnvelopeLineSupportForces(self, LineSupportId):
##        '-no docstring-'
##        #return Forces, PosX, ResultValue
##
##    def CriticalLineSupportForces(self, LineSupportId):
##        '-no docstring-'
##        #return Forces, PosX, ResultValue
##
##    def AllLineSupportForcesByLoadCaseId(self):
##        '-no docstring-'
##        #return SectionCounts, Forces, PosX, ResultValue
##
##    def AllLineSupportForcesByLoadCombinationId(self):
##        '-no docstring-'
##        #return SectionCounts, Forces, PosX, ResultValue
##
##    def AllEnvelopeLineSupportForces(self):
##        '-no docstring-'
##        #return SectionCounts, Forces, PosX, ResultValue
##
##    def AllCriticalLineSupportForces(self):
##        '-no docstring-'
##        #return SectionCounts, Forces, PosX, ResultValue
##
##    def LineSupportForcesForResultBlocks(self, LineSupportId, LineSectionId):
##        '-no docstring-'
##        #return ResultBlockInfo, Forces, PosX, ResultValue
##
##    def SurfaceSupportForceByLoadCaseId(self, SurfaceSupportId, SurfaceVertexType, SurfaceVertexId):
##        '-no docstring-'
##        #return Force, Combination, ResultValue
##
##    def SurfaceSupportForceByLoadCombinationId(self, SurfaceSupportId, SurfaceVertexType, SurfaceVertexId):
##        '-no docstring-'
##        #return Force, Combination, ResultValue
##
##    def EnvelopeSurfaceSupportForce(self, SurfaceSupportId, SurfaceVertexType, SurfaceVertexId):
##        '-no docstring-'
##        #return Force, Combination, ResultValue
##
##    def CriticalSurfaceSupportForce(self, SurfaceSupportId, SurfaceVertexType, SurfaceVertexId):
##        '-no docstring-'
##        #return Force, Combination, ResultValue
##
##    def SurfaceSupportForcesByLoadCaseId(self, SurfaceSupportId):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def SurfaceSupportForcesByLoadCombinationId(self, SurfaceSupportId):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def EnvelopeSurfaceSupportForces(self, SurfaceSupportId):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def CriticalSurfaceSupportForces(self, SurfaceSupportId):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def AllSurfaceSupportForcesByLoadCaseId(self):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def AllSurfaceSupportForcesByLoadCombinationId(self):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def AllEnvelopeSurfaceSupportForces(self):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def AllCriticalSurfaceSupportForces(self):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def SurfaceSupportForcesForResultBlocks(self, SurfaceSupportId):
##        '-no docstring-'
##        #return ResultBlockInfo, Forces, ResultValue
##
##    def SurfaceSupportForceValuesForResultBlocks(self, SurfaceSupportId, SurfaceVertexType, SurfaceVertexId):
##        '-no docstring-'
##        #return ResultBlockInfo, Forces, ResultValue
##
##    def SpringForceByLoadCaseId(self, LineId):
##        '-no docstring-'
##        #return Force, Combination, ResultValue
##
##    def SpringForceByLoadCombinationId(self, LineId):
##        '-no docstring-'
##        #return Force, Combination, ResultValue
##
##    def EnvelopeSpringForce(self, LineId):
##        '-no docstring-'
##        #return Force, Combination, ResultValue
##
##    def CriticalSpringForce(self, LineId):
##        '-no docstring-'
##        #return Force, Combination, ResultValue
##
##    def AllSpringForcesByLoadCaseId(self):
##        '-no docstring-'
##        #return Forces, LineIds, ResultValue
##
##    def AllSpringForcesByLoadCombinationId(self):
##        '-no docstring-'
##        #return Forces, LineIds, ResultValue
##
##    def AllEnvelopeSpringForces(self):
##        '-no docstring-'
##        #return Forces, LineIds, ResultValue
##
##    def AllCriticalSpringForces(self):
##        '-no docstring-'
##        #return Forces, LineIds, ResultValue
##
##    def SpringForcesForResultBlocks(self, LineId):
##        '-no docstring-'
##        #return ResultBlockInfo, Forces, ResultValue
##
##    def GapForceByLoadCaseId(self, LineId):
##        '-no docstring-'
##        #return Force, Combination, ResultValue
##
##    def GapForceByLoadCombinationId(self, LineId):
##        '-no docstring-'
##        #return Force, Combination, ResultValue
##
##    def EnvelopeGapForce(self, LineId):
##        '-no docstring-'
##        #return Force, Combination, ResultValue
##
##    def CriticalGapForce(self, LineId):
##        '-no docstring-'
##        #return Force, Combination, ResultValue
##
##    def AllGapForcesByLoadCaseId(self):
##        '-no docstring-'
##        #return Forces, LineIds, ResultValue
##
##    def AllGapForcesByLoadCombinationId(self):
##        '-no docstring-'
##        #return Forces, LineIds, ResultValue
##
##    def AllEnvelopeGapForces(self):
##        '-no docstring-'
##        #return Forces, LineIds, ResultValue
##
##    def AllCriticalGapForces(self):
##        '-no docstring-'
##        #return Forces, LineIds, ResultValue
##
##    def GapForcesForResultBlocks(self, LineId):
##        '-no docstring-'
##        #return ResultBlockInfo, Forces, ResultValue
##
##    def GetEdgeConnectionForcesByLoadCaseId(self, EdgeConnectionId, LoadCaseId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Forces, Combination, ResultValue
##
##    def GetEdgeConnectionForcesByLoadCombinationId(self, EdgeConnectionId, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Forces, Combination, ResultValue
##
##    def GetEnvelopeEdgeConnectionForces(self, EdgeConnectionId, SectionId, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return Forces, Combination, ResultValue
##
##    def GetCriticalEdgeConnectionForces(self, EdgeConnectionId, SectionId, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Forces, Combination, ResultValue
##
##    def GetAllEdgeConnectionForcesByLoadCaseId(self, LoadCaseId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def GetAllEdgeConnectionForcesByLoadCombinationId(self, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def GetAllEnvelopeEdgeConnectionForces(self, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def GetAllCriticalEdgeConnectionForces(self, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def GetEdgeConnectionForcesForResultBlocks(self, EdgeConnectionId, AnalysisType):
##        '-no docstring-'
##        #return ResultBlockInfo, Forces, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    EdgeConnectionForceComponent = property(_get, _set, doc = _set.__doc__)
##
##    def EdgeConnectionForcesByLoadCaseId(self, EdgeConnectionId):
##        '-no docstring-'
##        #return Forces, Combination, ResultValue
##
##    def EdgeConnectionForcesByLoadCombinationId(self, EdgeConnectionId):
##        '-no docstring-'
##        #return Forces, Combination, ResultValue
##
##    def EnvelopeEdgeConnectionForces(self, EdgeConnectionId, SectionId):
##        '-no docstring-'
##        #return Forces, Combination, ResultValue
##
##    def CriticalEdgeConnectionForces(self, EdgeConnectionId, SectionId):
##        '-no docstring-'
##        #return Forces, Combination, ResultValue
##
##    def AllEdgeConnectionForcesByLoadCaseId(self):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def AllEdgeConnectionForcesByLoadCombinationId(self):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def AllEnvelopeEdgeConnectionForces(self):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def AllCriticalEdgeConnectionForces(self):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def EdgeConnectionForcesForResultBlocks(self, EdgeConnectionId):
##        '-no docstring-'
##        #return ResultBlockInfo, Forces, ResultValue
##
##    def GetLinkElementForcesByLoadCaseId(self, LinkElementId, LoadCaseId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Forces, Combination, ResultValue
##
##    def GetLinkElementForcesByLoadCombinationId(self, LinkElementId, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Forces, Combination, ResultValue
##
##    def GetEnvelopeLinkElementForces(self, LinkElementId, SectionId, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return Forces, Combination, ResultValue
##
##    def GetCriticalLinkElementForces(self, LinkElementId, SectionId, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Forces, Combination, ResultValue
##
##    def GetAllLinkElementForcesByLoadCaseId(self, LoadCaseId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def GetAllLinkElementForcesByLoadCombinationId(self, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def GetAllEnvelopeLinkElementForces(self, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def GetAllCriticalLinkElementForces(self, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def GetLinkElementForcesForResultBlocks(self, LinkElementId, AnalysisType):
##        '-no docstring-'
##        #return ResultBlockInfo, Forces, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LinkElementForceComponent = property(_get, _set, doc = _set.__doc__)
##
##    def LinkElementForcesByLoadCaseId(self, LinkElementId):
##        '-no docstring-'
##        #return Forces, Combination, ResultValue
##
##    def LinkElementForcesByLoadCombinationId(self, LinkElementId):
##        '-no docstring-'
##        #return Forces, Combination, ResultValue
##
##    def EnvelopeLinkElementForces(self, LinkElementId, SectionId):
##        '-no docstring-'
##        #return Forces, Combination, ResultValue
##
##    def CriticalLinkElementForces(self, LinkElementId, SectionId):
##        '-no docstring-'
##        #return Forces, Combination, ResultValue
##
##    def AllLinkElementForcesByLoadCaseId(self):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def AllLinkElementForcesByLoadCombinationId(self):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def AllEnvelopeLinkElementForces(self):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def AllCriticalLinkElementForces(self):
##        '-no docstring-'
##        #return Forces, ResultValue
##
##    def LinkElementForcesForResultBlocks(self, LinkElementId):
##        '-no docstring-'
##        #return ResultBlockInfo, Forces, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    EnvelopeUID = property(_get, _set, doc = _set.__doc__)
##
##    def GetEnvelopeLineForce2(self, LineId, SectionId, MinMaxType, AnalysisType, Component):
##        'LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count'
##        #return Force, PosX, LoadCaseOrCombinationId, LoadLevel, ResultValue
##
##    def GetCriticalLineForce2(self, LineId, SectionId, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Force, PosX, CriticalCombinationType, Factors, LoadCaseIds, ResultValue
##
##    def GetEnvelopeSurfaceForce2(self, SurfaceId, SurfaceVertexType, SurfaceVertexId, MinMaxType, AnalysisType, Component):
##        'LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count'
##        #return Force, LoadCaseOrCombinationId, LoadLevel, ResultValue
##
##    def GetCriticalSurfaceForce2(self, SurfaceId, SurfaceVertexType, SurfaceVertexId, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Force, CriticalCombinationType, Factors, LoadCaseIds, ResultValue
##
##    def GetEnvelopeNodalSupportForce2(self, NodalSupportId, MinMaxType, AnalysisType, Component):
##        'LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count'
##        #return Force, LoadCaseOrCombinationId, LoadLevel, ResultValue
##
##    def GetCriticalNodalSupportForce2(self, NodalSupportId, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Force, CriticalCombinationType, Factors, LoadCaseIds, ResultValue
##
##    def GetEnvelopeLineSupportForce2(self, LineSupportId, LineSectionId, MinMaxType, AnalysisType, Component):
##        'LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count'
##        #return Force, PosX, LoadCaseOrCombinationId, LoadLevel, ResultValue
##
##    def GetCriticalLineSupportForce2(self, LineSupportId, LineSectionId, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Force, PosX, CriticalCombinationType, Factors, LoadCaseIds, ResultValue
##
##    def GetEnvelopeSurfaceSupportForce2(self, SurfaceSupportId, SurfaceVertexType, SurfaceVertexId, MinMaxType, AnalysisType, Component):
##        'LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count'
##        #return Force, LoadCaseOrCombinationId, LoadLevel, ResultValue
##
##    def GetCriticalSurfaceSupportForce2(self, SurfaceSupportId, SurfaceVertexType, SurfaceVertexId, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Force, CriticalCombinationType, Factors, LoadCaseIds, ResultValue
##
##    def GetEnvelopeSpringForce2(self, LineId, MinMaxType, AnalysisType, Component):
##        'LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count'
##        #return Force, LoadCaseOrCombinationId, LoadLevel, ResultValue
##
##    def GetCriticalSpringForce2(self, LineId, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Force, CriticalCombinationType, Factors, LoadCaseIds, ResultValue
##
##    def GetEnvelopeGapForce2(self, LineId, MinMaxType, AnalysisType):
##        'LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count'
##        #return Force, LoadCaseOrCombinationId, LoadLevel, ResultValue
##
##    def GetCriticalGapForce2(self, LineId, MinMaxType, CombinationType, AnalysisType):
##        '-no docstring-'
##        #return Force, CriticalCombinationType, Factors, LoadCaseIds, ResultValue
##
##    def EnvelopeLineForce2(self, LineId, SectionId):
##        'LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count'
##        #return Force, PosX, LoadCaseOrCombinationId, LoadLevel, ResultValue
##
##    def CriticalLineForce2(self, LineId, SectionId):
##        '-no docstring-'
##        #return Force, PosX, CriticalCombinationType, Factors, LoadCaseIds, ResultValue
##
##    def EnvelopeSurfaceForce2(self, SurfaceId, SurfaceVertexType, SurfaceVertexId):
##        'LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count'
##        #return Force, LoadCaseOrCombinationId, LoadLevel, ResultValue
##
##    def CriticalSurfaceForce2(self, SurfaceId, SurfaceVertexType, SurfaceVertexId):
##        '-no docstring-'
##        #return Force, CriticalCombinationType, Factors, LoadCaseIds, ResultValue
##
##    def EnvelopeNodalSupportForce2(self, NodalSupportId):
##        'LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count'
##        #return Force, LoadCaseOrCombinationId, LoadLevel, ResultValue
##
##    def CriticalNodalSupportForce2(self, NodalSupportId):
##        '-no docstring-'
##        #return Force, CriticalCombinationType, Factors, LoadCaseIds, ResultValue
##
##    def EnvelopeLineSupportForce2(self, LineSupportId, LineSectionId):
##        'LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count'
##        #return Force, PosX, LoadCaseOrCombinationId, LoadLevel, ResultValue
##
##    def CriticalLineSupportForce2(self, LineSupportId, LineSectionId):
##        '-no docstring-'
##        #return Force, PosX, CriticalCombinationType, Factors, LoadCaseIds, ResultValue
##
##    def EnvelopeSurfaceSupportForce2(self, SurfaceSupportId, SurfaceVertexType, SurfaceVertexId):
##        'LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count'
##        #return Force, LoadCaseOrCombinationId, LoadLevel, ResultValue
##
##    def CriticalSurfaceSupportForce2(self, SurfaceSupportId, SurfaceVertexType, SurfaceVertexId):
##        '-no docstring-'
##        #return Force, CriticalCombinationType, Factors, LoadCaseIds, ResultValue
##
##    def EnvelopeSpringForce2(self, LineId):
##        'LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count'
##        #return Force, LoadCaseOrCombinationId, LoadLevel, ResultValue
##
##    def CriticalSpringForce2(self, LineId):
##        '-no docstring-'
##        #return Force, CriticalCombinationType, Factors, LoadCaseIds, ResultValue
##
##    def EnvelopeGapForce2(self, LineId):
##        'LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count'
##        #return Force, LoadCaseOrCombinationId, LoadLevel, ResultValue
##
##    def CriticalGapForce2(self, LineId):
##        '-no docstring-'
##        #return Force, CriticalCombinationType, Factors, LoadCaseIds, ResultValue
##
##    def GetEnvelopeEdgeConnectionForces2(self, EdgeConnectionId, SectionId, MinMaxType, AnalysisType, Component):
##        'LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count'
##        #return Forces, LoadCaseOrCombinationId, LoadLevel, ResultValue
##
##    def GetCriticalEdgeConnectionForces2(self, EdgeConnectionId, SectionId, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Forces, CriticalCombinationType, Factors, LoadCaseIds, ResultValue
##
##    def EnvelopeEdgeConnectionForces2(self, EdgeConnectionId, SectionId):
##        'LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count'
##        #return Forces, LoadCaseOrCombinationId, LoadLevel, ResultValue
##
##    def CriticalEdgeConnectionForces2(self, EdgeConnectionId, SectionId):
##        '-no docstring-'
##        #return Forces, CriticalCombinationType, Factors, LoadCaseIds, ResultValue
##
##    def GetEnvelopeLinkElementForces2(self, LinkElementId, SectionId, MinMaxType, AnalysisType, Component):
##        'LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count'
##        #return Forces, LoadCaseOrCombinationId, LoadLevel, ResultValue
##
##    def GetCriticalLinkElementForces2(self, LinkElementId, SectionId, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Forces, CriticalCombinationType, Factors, LoadCaseIds, ResultValue
##
##    def EnvelopeLinkElementForces2(self, LinkElementId, SectionId):
##        'LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count'
##        #return Forces, LoadCaseOrCombinationId, LoadLevel, ResultValue
##
##    def CriticalLinkElementForces2(self, LinkElementId, SectionId):
##        '-no docstring-'
##        #return Forces, CriticalCombinationType, Factors, LoadCaseIds, ResultValue
##
##    def GetMemberForcesByLoadCaseId(self, MemberID, LoadCaseId, LoadLevelOrTimeStep, AnalysisType):
##        '-no docstring-'
##        #return Forces, PosX, ResultValue
##
##    def GetMemberForcesByLoadCombinationId(self, MemberID, LoadCombinationId, LoadLevelOrTimeStep, AnalysisType):
##        '-no docstring-'
##        #return Forces, PosX, ResultValue
##
##    def GetEnvelopeMemberForces(self, MemberID, EnvelopeUID, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return Forces, PosX, LoadCaseOrCombinationIds, LoadLevels, ResultValue
##
##    def GetCriticalMemberForces(self, MemberID, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Forces, PosX, ResultValue
##
##    def SaveMemberForcesToMetaFileByLoadCaseID(self, FileName, MemberID, LoadCaseId, LoadLevel, AnalysisType, Width, Height, Position, ColourMode):
##        'minHeight = 580, minWidth = 640 '
##        #return ResultValue
##
##    def SaveMemberForcesToMetaFileByLoadCombinationID(self, FileName, MemberID, LoadCombinationId, LoadLevel, AnalysisType, Width, Height, Position, ColourMode):
##        'minHeight = 580, minWidth = 640 '
##        #return ResultValue
##
##    def SaveEnvelopeMemberForcesToMetaFile(self, FileName, MemberID, EnvelopeUID, AnalysisType, Width, Height, EnvelopeOnly, Position, ColourMode):
##        'minHeight = 580, minWidth = 640 '
##        #return ResultValue
##
##    def SaveCriticalMemberForcesToMetaFile(self, FileName, MemberID, CombinationType, AnalysisType, Width, Height, EnvelopeOnly, Position, ColourMode):
##        'minHeight = 580, minWidth = 640 '
##        #return ResultValue
##
##    def GetLineForcesByLoadCaseIdConnectedToNode(self, NodeId, WindowId, LoadCaseId, LoadLevelOrTimeStep, AnalysisType, ConnectedToNodeType, SeismicSum):
##        '-no docstring-'
##        #return Forces, LineIds, Combinations, ResultValue
##
##    def LineForcesByLoadCaseIdConnectedToNode(self, NodeId, WindowId, ConnectedToNodeType):
##        '-no docstring-'
##        #return Forces, LineIds, Combinations, ResultValue
##
##    def GetLineForcesByLoadCombinationIdConnectedToNode(self, NodeId, WindowId, LoadCombinationId, LoadLevelOrTimeStep, AnalysisType, ConnectedToNodeType, SeismicSum):
##        '-no docstring-'
##        #return Forces, LineIds, Combinations, ResultValue
##
##    def LineForcesByLoadCombinationIdConnectedToNode(self, NodeId, WindowId, ConnectedToNodeType):
##        '-no docstring-'
##        #return Forces, LineIds, Combinations, ResultValue
##
##    def GetEnvelopeLineForcesConnectedToNode(self, NodeId, WindowId, MinMaxType, AnalysisType, ConnectedToNodeType, Component, SeismicSum, LineId):
##        '-no docstring-'
##        #return Forces, LineIds, Combinations, ResultValue
##
##    def EnvelopeLineForcesConnectedToNode(self, NodeId, WindowId, ConnectedToNodeType, LineId):
##        '-no docstring-'
##        #return Forces, LineIds, Combinations, ResultValue
##
##    def GetCriticalLineForcesConnectedToNode(self, NodeId, WindowId, MinMaxType, CombinationType, AnalysisType, ConnectedToNodeType, Component, SeismicSum, LineId):
##        '-no docstring-'
##        #return Forces, LineIds, Combinations, ResultValue
##
##    def CriticalLineForcesConnectedToNode(self, NodeId, WindowId, ConnectedToNodeType, LineId):
##        '-no docstring-'
##        #return Forces, LineIds, Combinations, ResultValue
##
##    def GetVirtualBeamOrStripForcesByLoadCaseId(self, Index, ChainId, LoadCaseId, LoadLevelOrTimeStep, AnalysisType):
##        '-no docstring-'
##        #return Forces, Pos, ResultValue
##
##    def VirtualBeamOrStripForcesByLoadCaseId(self, Index, ChainId):
##        '-no docstring-'
##        #return Forces, Pos, ResultValue
##
##    def GetVirtualBeamOrStripForcesByLoadCombinationId(self, Index, ChainId, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Forces, Pos, ResultValue
##
##    def VirtualBeamOrStripForcesByLoadCombinationId(self, Index, ChainId):
##        '-no docstring-'
##        #return Forces, Pos, ResultValue
##
##    def GetEnvelopeVirtualBeamOrStripForces(self, Index, ChainId, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return Forces, Pos, LoadCasesOrLoadCombinations, ResultValue
##
##    def EnvelopeVirtualBeamOrStripForces(self, Index, ChainId):
##        '-no docstring-'
##        #return Forces, Pos, LoadCasesOrLoadCombinations, ResultValue
##
##    def GetCriticalVirtualBeamOrStripForces(self, Index, ChainId, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Forces, Pos, Combinations, ResultValue
##
##    def CriticalVirtualBeamOrStripForces(self, Index, ChainId):
##        '-no docstring-'
##        #return Forces, Pos, Combinations, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    VirtualBeamForceComponent = property(_get, _set, doc = _set.__doc__)
##
##    def GetEnvelopeVirtualBeamOrStripForces2(self, Index, ChainId, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return Forces, Pos, LoadCaseOrCombinationIds, LoadLevels, ResultValue
##
##    def EnvelopeVirtualBeamOrStripForces2(self, Index, ChainId):
##        '-no docstring-'
##        #return Forces, Pos, LoadCaseOrCombinationIds, LoadLevels, ResultValue
##
##    def GetCriticalVirtualBeamOrStripForce(self, Index, ChainId, SectionId, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Forces, Pos, Combination, ResultValue
##
##    def CriticalVirtualBeamOrStripForce(self, Index, ChainId, SectionId):
##        '-no docstring-'
##        #return Forces, Pos, Combination, ResultValue
##
##    def GetCriticalVirtualBeamOrStripForce2(self, Index, ChainId, SectionId, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Forces, Pos, CriticalCombinationType, Factors, LoadCaseIds, ResultValue
##
##    def CriticalVirtualBeamOrStripForce2(self, Index, ChainId, SectionId):
##        '-no docstring-'
##        #return Forces, Pos, CriticalCombinationType, Factors, LoadCaseIds, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    SeismicComponentSumType = property(_get, _set, doc = _set.__doc__)
##
##    def GetLineForceByLoadCombinationIdEQ(self, LineId, SectionId, LoadCombinationId, LoadLevel, AnalysisType, SeismicSum):
##        '-no docstring-'
##        #return Forces, PosX, Combination, ResultValue
##
##    def GetEnvelopeLineForceEQ(self, LineId, SectionId, MinMaxType, AnalysisType, SeismicSum, Component):
##        '-no docstring-'
##        #return Forces, PosX, Combination, ResultValue
##
##    def GetCriticalLineForceEQ(self, LineId, SectionId, MinMaxType, CombinationType, AnalysisType, SeismicSum, Component):
##        '-no docstring-'
##        #return Forces, PosX, Combination, ResultValue
##
##    def LineForceByLoadCombinationIdEQ(self, LineId, SectionId):
##        '-no docstring-'
##        #return Forces, PosX, Combination, ResultValue
##
##    def EnvelopeLineForceEQ(self, LineId, SectionId):
##        '-no docstring-'
##        #return Forces, PosX, Combination, ResultValue
##
##    def CriticalLineForceEQ(self, LineId, SectionId):
##        '-no docstring-'
##        #return Forces, PosX, Combination, ResultValue
##
##    def SaveVirtualBeamOrStripForcesToMetaFileByLoadCaseID(self, FileName, MemberID, LoadCaseId, LoadLevel, AnalysisType, Width, Height, Position, ColourMode):
##        'minHeight = 580, minWidth = 640 '
##        #return ResultValue
##
##    def SaveVirtualBeamOrStripForcesToMetaFileByLoadCombinationID(self, FileName, MemberID, LoadCombinationId, LoadLevel, AnalysisType, Width, Height, Position, ColourMode):
##        'minHeight = 580, minWidth = 640 '
##        #return ResultValue
##
##    def SaveEnvelopeVirtualBeamOrStripForcesToMetaFile(self, FileName, MemberID, EnvelopeUID, AnalysisType, Width, Height, EnvelopeOnly, Position, ColourMode):
##        'minHeight = 580, minWidth = 640 '
##        #return ResultValue
##
##    def SaveCriticalVirtualBeamOrStripForcesToMetaFile(self, FileName, MemberID, CombinationType, AnalysisType, Width, Height, EnvelopeOnly, Position, ColourMode):
##        'minHeight = 580, minWidth = 640 '
##        #return ResultValue
##
##    def SetUserCreep(self, Creep):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def UserCreep(self):
##        '-no docstring-'
##        #return Value
##
##    def GetMembersSupportForcesByLoadCaseId(self, MembersSupportId, LoadCaseId, LoadLevelOrTimeStep, AnalysisType):
##        '-no docstring-'
##        #return Forces, PosX, ResultValue
##
##    def GetMembersSupportForcesByLoadCombinationId(self, MembersSupportId, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Forces, PosX, ResultValue
##
##    def GetEnvelopeMembersSupportForces(self, MembersSupportId, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return Forces, PosX, ResultValue
##
##    def GetCriticalMembersSupportForces(self, MembersSupportId, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Forces, PosX, ResultValue
##
##    def NodalSupportForceByLoadCombinationIdEQ(self, NodalSupportId):
##        '-no docstring-'
##        #return Forces, Combination, ResultValue
##
##    def EnvelopeNodalSupportForceEQ(self, NodalSupportId):
##        '-no docstring-'
##        #return Forces, Combination, ResultValue
##
##    def CriticalNodalSupportForceEQ(self, NodalSupportId):
##        '-no docstring-'
##        #return Forces, Combination, ResultValue
##
##    def LineSupportForceByLoadCombinationIdEQ(self, LineSupportId, LineSectionId):
##        '-no docstring-'
##        #return Forces, PosX, Combination, ResultValue
##
##    def EnvelopeLineSupportForceEQ(self, LineSupportId, LineSectionId):
##        '-no docstring-'
##        #return Forces, PosX, Combination, ResultValue
##
##    def CriticalLineSupportForceEQ(self, LineSupportId, LineSectionId):
##        '-no docstring-'
##        #return Forces, PosX, Combination, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    SupportSeismicSumType = property(_get, _set, doc = _set.__doc__)
##
##    def SurfaceForceByLoadCombinationIdEQ(self, SurfaceId, SurfaceVertexType, SurfaceVertexId):
##        '-no docstring-'
##        #return Forces, Combination, ResultValue
##
##    def EnvelopeSurfaceForceEQ(self, SurfaceId, SurfaceVertexType, SurfaceVertexId):
##        '-no docstring-'
##        #return Forces, Combination, ResultValue
##
##    def CriticalSurfaceForceEQ(self, SurfaceId, SurfaceVertexType, SurfaceVertexId):
##        '-no docstring-'
##        #return Forces, Combination, ResultValue
##
##    def CriticalLineForce2EQ(self, LineId, SectionId):
##        '-no docstring-'
##        #return Forces, PosX, Combination, ResultValue
##

class RRCBeamDesignDeflectionResults(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{691C6D74-8216-4702-BF2D-173C2AA803FF}')
RRCBeamDesignDeflectionResults._fields_ = [
    ('Min', RRCBeamDesignDeflectionResult),
    ('Max', RRCBeamDesignDeflectionResult),
]
assert sizeof(RRCBeamDesignDeflectionResults) == 32, sizeof(RRCBeamDesignDeflectionResults)
assert alignment(RRCBeamDesignDeflectionResults) == 8, alignment(RRCBeamDesignDeflectionResults)
class RWallStiffnessParams(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{2F835DE2-6795-4C36-A17F-66F4B8810000}')
class RElementStiffnessParams(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{EE1E2C5F-1F87-4EFB-BD1B-224A0A69FCDE}')
RElementStiffnessParams._fields_ = [
    ('MaterialId', c_int),
    ('Height', c_double),
    ('EndReleaseXTop', ELongBoolean),
    ('EndReleaseXBottom', ELongBoolean),
]
assert sizeof(RElementStiffnessParams) == 24, sizeof(RElementStiffnessParams)
assert alignment(RElementStiffnessParams) == 8, alignment(RElementStiffnessParams)
RWallStiffnessParams._fields_ = [
    ('CalcParams', RElementStiffnessParams),
    ('WallThickness', c_double),
]
assert sizeof(RWallStiffnessParams) == 32, sizeof(RWallStiffnessParams)
assert alignment(RWallStiffnessParams) == 8, alignment(RWallStiffnessParams)
class RRefPoint(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{A8C7D0E1-D561-44EE-9951-BABF878EE6DF}')
RRefPoint._fields_ = [
    ('P', RPoint3d),
]
assert sizeof(RRefPoint) == 24, sizeof(RRefPoint)
assert alignment(RRefPoint) == 8, alignment(RRefPoint)
class RLoadBeamMemberDistributed(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{4E549D5F-F919-410B-B51F-5E0544C6F0A6}')
RLoadBeamMemberDistributed._fields_ = [
    ('LoadCaseId', c_int),
    ('MemberID', c_int),
    ('qx1', c_double),
    ('qy1', c_double),
    ('qz1', c_double),
    ('mx1', c_double),
    ('my1', c_double),
    ('mz1', c_double),
    ('qx2', c_double),
    ('qy2', c_double),
    ('qz2', c_double),
    ('mx2', c_double),
    ('my2', c_double),
    ('mz2', c_double),
    ('SystemGLR', ESystem),
    ('Position1', c_double),
    ('Position2', c_double),
    ('DistributionType', EBeamRibDistributionType),
    ('Trapezoid', ELongBoolean),
]
assert sizeof(RLoadBeamMemberDistributed) == 136, sizeof(RLoadBeamMemberDistributed)
assert alignment(RLoadBeamMemberDistributed) == 8, alignment(RLoadBeamMemberDistributed)

# values for enumeration 'EMassesTakenIntoAccount'
mtiaAll = 0
mtiaAboveHeightZ = 1
mtiaAboveSelectedStory = 2
EMassesTakenIntoAccount = c_int # enum
class IAxisVMMovingLoadOnBeamEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMMovingLoadOnBeam Object'
    _iid_ = GUID('{91495EFB-ADE3-4A8B-8A81-D147A7F9CA94}')
    _idlflags_ = []
    _methods_ = []
IAxisVMMovingLoadOnBeamEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]
class RMyMzFi(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{AB607180-A148-4933-A5C4-AF5871BB2A87}')
RMyMzFi._fields_ = [
    ('My', c_double),
    ('Mz', c_double),
    ('fi', c_double),
]
assert sizeof(RMyMzFi) == 24, sizeof(RMyMzFi)
assert alignment(RMyMzFi) == 8, alignment(RMyMzFi)
class RColumnReinforcementParameters(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{7DE44155-93F1-4F7F-BD71-D7E49A33C055}')
class RMyMz(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{05273AB4-3C20-469E-9C11-CB0E6E5FE68E}')
RMyMz._fields_ = [
    ('My', c_double),
    ('Mz', c_double),
]
assert sizeof(RMyMz) == 16, sizeof(RMyMz)
assert alignment(RMyMz) == 8, alignment(RMyMz)
class RNMInteractionDiagMinMax(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{B78A08F6-B2D3-40E6-B88D-C2F30D7E6BB2}')
class RColumnCheckResult(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{8684E513-E420-4E41-A358-0B583F52D412}')
RColumnCheckResult._fields_ = [
    ('xRelPos', c_double),
    ('Passed', ELongBoolean),
    ('Eff_Const_N', c_double),
    ('Eff_Const_e', c_double),
    ('My_c', c_double),
    ('My_e2y_P', c_double),
    ('My_e2y_N', c_double),
    ('My_e2z_P', c_double),
    ('My_e2z_N', c_double),
    ('Mz_c', c_double),
    ('Mz_e2y_P', c_double),
    ('Mz_e2y_N', c_double),
    ('Mz_e2z_P', c_double),
    ('Mz_e2z_N', c_double),
]
assert sizeof(RColumnCheckResult) == 112, sizeof(RColumnCheckResult)
assert alignment(RColumnCheckResult) == 8, alignment(RColumnCheckResult)
class RColumnForces(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{321CA80E-E040-4B71-84A9-95E2DA8DD91C}')
RColumnForces._fields_ = [
    ('Nx', c_double),
    ('My', c_double),
    ('Mz', c_double),
    ('Vy', c_double),
    ('Vz', c_double),
    ('Tx', c_double),
]
assert sizeof(RColumnForces) == 48, sizeof(RColumnForces)
assert alignment(RColumnForces) == 8, alignment(RColumnForces)
class RColumnVTCheckResult(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{B986EB3B-9DCA-46BA-ABFF-0E11CBDF104A}')
RColumnVTCheckResult._fields_ = [
    ('xRelPos', c_double),
    ('Passed', ELongBoolean),
    ('VyR', c_double),
    ('VzR', c_double),
    ('kt', c_double),
    ('Ast', c_double),
    ('Eff_Vy', c_double),
    ('Eff_Vz', c_double),
    ('Eff_Vy_Vz', c_double),
    ('Eff_Vy_Vz_Tx', c_double),
    ('Eff_Vy_Vz_Tx_max', c_double),
]
assert sizeof(RColumnVTCheckResult) == 88, sizeof(RColumnVTCheckResult)
assert alignment(RColumnVTCheckResult) == 8, alignment(RColumnVTCheckResult)
IAxisVMRCColumnChecking._methods_ = [
    COMMETHOD([dispid(201)], HRESULT, 'GenererateNMInteractionDiagByLine',
              ( ['in'], c_int, 'LineId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'N' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'ItemCounts' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RMyMzFi)), 'MyMzFi' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(202)], HRESULT, 'GenererateNMInteractionDiagByMember',
              ( ['in'], c_int, 'MemberID' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'N' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'ItemCounts' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RMyMzFi)), 'MyMzFi' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(203)], HRESULT, 'GenererateNMInteractionDiagByParameters',
              ( ['in', 'out'], POINTER(RColumnReinforcementParameters), 'Parameters' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'N' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'ItemCounts' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RMyMzFi)), 'MyMzFi' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'GetMyMzPolyByNx',
              ( ['in'], c_double, 'Nx' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RMyMz)), 'Poly' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205)], HRESULT, 'GetNMInteractionDiagMinMax',
              ( ['in', 'out'], POINTER(RNMInteractionDiagMinMax), 'NMInteractionDiagMinMax' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'CheckMembers',
              ( ['in'], _midlSAFEARRAY(c_int), 'MemberIds' ),
              ( ['in'], EResultType, 'ResultType' ),
              ( ['in'], c_int, 'LoadCaseOrCombinationOrEnvelopeUID' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELongBoolean, 'Creep' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RColumnCheckResult)), 'ColumnCheckResults' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'CheckByParameters',
              ( ['in', 'out'], POINTER(RColumnReinforcementParameters), 'Parameters' ),
              ( ['in'], _midlSAFEARRAY(c_double), 'xPos' ),
              ( ['in'], _midlSAFEARRAY(RColumnForces), 'ColumnForces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RColumnCheckResult)), 'ColumnCheckResults' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208)], HRESULT, 'Clear',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209)], HRESULT, 'CheckMembers_vb',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MemberIds' ),
              ( ['in'], EResultType, 'ResultType' ),
              ( ['in'], c_int, 'LoadCaseOrCombinationOrEnvelopeUID' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELongBoolean, 'Creep' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RColumnCheckResult)), 'ColumnCheckResults' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(210)], HRESULT, 'CheckByParameters_vb',
              ( ['in', 'out'], POINTER(RColumnReinforcementParameters), 'Parameters' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'xPos' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RColumnForces)), 'ColumnForces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RColumnCheckResult)), 'ColumnCheckResults' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(211)], HRESULT, 'CheckVTMembers',
              ( ['in'], _midlSAFEARRAY(c_int), 'MemberIds' ),
              ( ['in'], EResultType, 'ResultType' ),
              ( ['in'], c_int, 'LoadCaseOrCombinationOrEnvelopeUID' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELongBoolean, 'Creep' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RColumnVTCheckResult)), 'ColumnVTCheckResults' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(212)], HRESULT, 'CheckVTByParameters',
              ( ['in', 'out'], POINTER(RColumnReinforcementParameters), 'Parameters' ),
              ( ['in'], _midlSAFEARRAY(c_double), 'xPos' ),
              ( ['in'], _midlSAFEARRAY(RColumnForces), 'ColumnForces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RColumnVTCheckResult)), 'ColumnVTCheckResults' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(213)], HRESULT, 'CheckVTMembers_vb',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MemberIds' ),
              ( ['in'], EResultType, 'ResultType' ),
              ( ['in'], c_int, 'LoadCaseOrCombinationOrEnvelopeUID' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELongBoolean, 'Creep' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RColumnVTCheckResult)), 'ColumnVTCheckResults' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(214)], HRESULT, 'CheckVTByParameters_vb',
              ( ['in', 'out'], POINTER(RColumnReinforcementParameters), 'Parameters' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'xPos' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RColumnForces)), 'ColumnForces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RColumnVTCheckResult)), 'ColumnVTCheckResults' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(215)], HRESULT, 'CheckVTByParameters_EQCapacityDesign',
              ( ['in', 'out'], POINTER(RColumnReinforcementParameters), 'Parameters' ),
              ( ['in'], _midlSAFEARRAY(c_double), 'xPos' ),
              ( ['in'], _midlSAFEARRAY(RColumnForces), 'ColumnForces' ),
              ( ['in'], _midlSAFEARRAY(RColumnForces), 'EQColumnForces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RColumnVTCheckResult)), 'ColumnVTCheckResults' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(216)], HRESULT, 'CheckVTByParameters_EQCapacityDesign_vb',
              ( ['in', 'out'], POINTER(RColumnReinforcementParameters), 'Parameters' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'xPos' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RColumnForces)), 'ColumnForces' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RColumnForces)), 'EQColumnForces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RColumnVTCheckResult)), 'ColumnVTCheckResults' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMRCColumnChecking implementation
##class IAxisVMRCColumnChecking_Impl(object):
##    def GenererateNMInteractionDiagByLine(self, LineId):
##        '-no docstring-'
##        #return N, ItemCounts, MyMzFi, ResultValue
##
##    def GenererateNMInteractionDiagByMember(self, MemberID):
##        '-no docstring-'
##        #return N, ItemCounts, MyMzFi, ResultValue
##
##    def GenererateNMInteractionDiagByParameters(self):
##        '-no docstring-'
##        #return Parameters, N, ItemCounts, MyMzFi, ResultValue
##
##    def GetMyMzPolyByNx(self, Nx):
##        '-no docstring-'
##        #return Poly, ResultValue
##
##    def GetNMInteractionDiagMinMax(self):
##        '-no docstring-'
##        #return NMInteractionDiagMinMax, ResultValue
##
##    def CheckMembers(self, MemberIds, ResultType, LoadCaseOrCombinationOrEnvelopeUID, LoadLevel, AnalysisType, Creep):
##        '-no docstring-'
##        #return ColumnCheckResults, Combinations, ResultValue
##
##    def CheckByParameters(self, xPos, ColumnForces):
##        '-no docstring-'
##        #return Parameters, ColumnCheckResults, ResultValue
##
##    def Clear(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def CheckMembers_vb(self, ResultType, LoadCaseOrCombinationOrEnvelopeUID, LoadLevel, AnalysisType, Creep):
##        '-no docstring-'
##        #return MemberIds, ColumnCheckResults, Combinations, ResultValue
##
##    def CheckByParameters_vb(self):
##        '-no docstring-'
##        #return Parameters, xPos, ColumnForces, ColumnCheckResults, ResultValue
##
##    def CheckVTMembers(self, MemberIds, ResultType, LoadCaseOrCombinationOrEnvelopeUID, LoadLevel, AnalysisType, Creep):
##        '-no docstring-'
##        #return ColumnVTCheckResults, Combinations, ResultValue
##
##    def CheckVTByParameters(self, xPos, ColumnForces):
##        '-no docstring-'
##        #return Parameters, ColumnVTCheckResults, ResultValue
##
##    def CheckVTMembers_vb(self, ResultType, LoadCaseOrCombinationOrEnvelopeUID, LoadLevel, AnalysisType, Creep):
##        '-no docstring-'
##        #return MemberIds, ColumnVTCheckResults, Combinations, ResultValue
##
##    def CheckVTByParameters_vb(self):
##        '-no docstring-'
##        #return Parameters, xPos, ColumnForces, ColumnVTCheckResults, ResultValue
##
##    def CheckVTByParameters_EQCapacityDesign(self, xPos, ColumnForces, EQColumnForces):
##        '-no docstring-'
##        #return Parameters, ColumnVTCheckResults, ResultValue
##
##    def CheckVTByParameters_EQCapacityDesign_vb(self):
##        '-no docstring-'
##        #return Parameters, xPos, ColumnForces, EQColumnForces, ColumnVTCheckResults, ResultValue
##


# values for enumeration 'EDisplayMode'
dmDiagram = 0
dmDiagramAvgVals = 1
dmSectionLine = 2
dmIsolines = 3
dmIsosurfaces2D = 4
dmIsosurfaces3D = 5
dmNone = 6
dmDiagramFilled = 7
dmSectionFilled = 8
dmIsosurfacesAvgVals = 9
dmSolidModel = 10
EDisplayMode = c_int # enum
class RRefVector(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{07D00A10-CFD0-459A-8630-8F9E106ECA96}')
RRefVector._fields_ = [
    ('P1', RPoint3d),
    ('P2', RPoint3d),
]
assert sizeof(RRefVector) == 48, sizeof(RRefVector)
assert alignment(RRefVector) == 8, alignment(RRefVector)
class RInfoWindowSwitch(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{DA568509-4058-4EA2-AFE4-E7150905A4F2}')
RInfoWindowSwitch._fields_ = [
    ('Coordinates', ELongBoolean),
    ('Info', ELongBoolean),
    ('ColourCoding', ELongBoolean),
    ('ColourLegend', ELongBoolean),
]
assert sizeof(RInfoWindowSwitch) == 16, sizeof(RInfoWindowSwitch)
assert alignment(RInfoWindowSwitch) == 4, alignment(RInfoWindowSwitch)

# values for enumeration 'EMaterialColour'
mclOther = 44732672
mclOtherContour = 0
mclSteel = 39134390
mclSteelContour = 39124992
mclConcrete = 44742326
mclConcreteContour = 33554432
mclTimber = 33582518
mclTimberContour = 33563720
mclAluminium = 50313837
mclAluminiumContour = 39143496
mclBrick = 8031416
mclBrickContour = 3424867
EMaterialColour = c_int # enum

# values for enumeration 'EMathTextError'
mteMathTextUIDandAPI_NameDontMatch = -100001
mteAPI_NameNotFound = -100002
mteMathTextUIDnotValid = -100003
EMathTextError = c_int # enum
class RPartialRCBeamDesignParameters(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{D18BCF8F-C931-4EDD-928C-1F062A4DC25C}')
class RRCBeamSupports(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{2A7CEC63-ECAD-475A-8E7F-7C00EBF8074E}')
RRCBeamSupports._fields_ = [
    ('StartSupport', RRCBeamSupport),
    ('EndSupport', RRCBeamSupport),
]
assert sizeof(RRCBeamSupports) == 64, sizeof(RRCBeamSupports)
assert alignment(RRCBeamSupports) == 8, alignment(RRCBeamSupports)
RPartialRCBeamDesignParameters._fields_ = [
    ('RCBeamCrossSections', RRCBeamCrossSections),
    ('RCBeamSupports', RRCBeamSupports),
]
assert sizeof(RPartialRCBeamDesignParameters) == 128, sizeof(RPartialRCBeamDesignParameters)
assert alignment(RPartialRCBeamDesignParameters) == 8, alignment(RPartialRCBeamDesignParameters)
class RColumnStiffnessParams(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{0B158C5E-15BA-4A78-B557-5B41022FB417}')
RColumnStiffnessParams._fields_ = [
    ('CalcParams', RElementStiffnessParams),
    ('CrossSectionID', c_int),
    ('EndReleaseYTop', ELongBoolean),
    ('EndReleaseYBottom', ELongBoolean),
]
assert sizeof(RColumnStiffnessParams) == 40, sizeof(RColumnStiffnessParams)
assert alignment(RColumnStiffnessParams) == 8, alignment(RColumnStiffnessParams)
RNodalSupportStiffParams._fields_ = [
    ('Top', RColumnStiffnessParams),
    ('Bottom', RColumnStiffnessParams),
]
assert sizeof(RNodalSupportStiffParams) == 80, sizeof(RNodalSupportStiffParams)
assert alignment(RNodalSupportStiffParams) == 8, alignment(RNodalSupportStiffParams)
IAxisVMXLAMpanels._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202)], HRESULT, 'Add',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LayerThicknesses' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(203)], HRESULT, 'AddFromCatalog',
              ( ['in'], BSTR, 'Manufacturer' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'GetLayerThicknesses',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'LayerThicknesses' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'IndexOf',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'ReplaceFromCatalog',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Manufacturer' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208), 'propget'], HRESULT, 'Name',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(BSTR), 'ResultValue' )),
]
################################################################
## code template for IAxisVMXLAMpanels implementation
##class IAxisVMXLAMpanels_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def Add(self, Name):
##        '-no docstring-'
##        #return LayerThicknesses, ResultValue
##
##    def AddFromCatalog(self, Manufacturer, Name):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetLayerThicknesses(self, Index):
##        '-no docstring-'
##        #return LayerThicknesses, ResultValue
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def IndexOf(self, Name):
##        '-no docstring-'
##        #return ResultValue
##
##    def ReplaceFromCatalog(self, Index, Manufacturer, Name):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def Name(self, Index):
##        '-no docstring-'
##        #return ResultValue
##

class RImperfectionParams(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{65E5A89D-C605-44A2-BC57-90089A816DA8}')
RImperfectionParams._fields_ = [
    ('SwayDirection', ESwayDirection),
    ('SwayAngle', c_double),
    ('BaseHeightType', EBaseHeightType),
    ('BaseHeight', c_double),
    ('StructureAutoHeight', ELongBoolean),
    ('StructureHeight', c_double),
    ('ColumnsInvolved', c_int),
    ('Alpha_h', c_double),
    ('Alpha_m', c_double),
    ('Phi0', c_double),
]
assert sizeof(RImperfectionParams) == 80, sizeof(RImperfectionParams)
assert alignment(RImperfectionParams) == 8, alignment(RImperfectionParams)

# values for enumeration 'ELoadCombinationsError'
lcoeDifferentFactorsAndCaseIdsCount = -100001
lcoeNameExists = -100002
lcoeAutoGenerationFailed = -100003
lcoeAutoGenerationFailedNoCriticalGroup = -100004
lcoeInvalidCombinationTypesValue = -100005
ELoadCombinationsError = c_int # enum

# values for enumeration 'EMemberExcOffsPos'
offsNone = 0
offsTopLeft = 1
offsTopCenter = 2
offsTopRight = 3
offsCenterLeft = 4
offsCenterRight = 5
offsBottomLeft = 6
offsBottomCenter = 7
offsBottomRight = 8
EMemberExcOffsPos = c_int # enum
class RTextBoxParameters(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{F249F8D1-ACEA-4E15-AC3F-58957DD5693B}')

# values for enumeration 'EDimensionLabelOrientation'
dloAutomatic = 0
dloHorizontal = 1
dloVertical = 2
dloAligned = 3
dloRadial = 4
dloTangential = 5
dloLeft = 6
dloCentre = 7
dloRight = 8
EDimensionLabelOrientation = c_int # enum

# values for enumeration 'EDimensionStyle'
dsNormalTick = 0
dsBoldTick = 1
dsArrow = 2
dsTriangle = 3
dsTriangleStr = 4
dsTriangleFilled = 5
dsCircleStr = 6
dsCircleFilled = 7
dsPlus = 8
dsLevelCircleCheck = 9
dsLevelCircle = 10
dsLevelCircleExt = 11
dsLevelCross = 12
dsLevelCrossExt = 13
dsElevCorner = 14
dsElevTriangleExt = 15
dsElevTriangleRight = 16
dsElevTriangleTop = 17
dsElevTriangleTopRight = 18
dsNothing = 19
dsExtLine = 20
dsInBox = 21
EDimensionStyle = c_int # enum
RTextBoxParameters._fields_ = [
    ('NodeId', c_int),
    ('LayerID', c_int),
    ('Position', RPoint3d),
    ('LabelOrientation', EDimensionLabelOrientation),
    ('TextBoxStyle', EDimensionStyle),
]
assert sizeof(RTextBoxParameters) == 40, sizeof(RTextBoxParameters)
assert alignment(RTextBoxParameters) == 8, alignment(RTextBoxParameters)
IAxisVMLines3d._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(203)], HRESULT, 'Add',
              ( ['in', 'out'], POINTER(RLine3d), 'Item' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205)], HRESULT, 'Clear'),
    COMMETHOD([dispid(206)], HRESULT, 'GetItem',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RLine3d), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'SetItem',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RLine3d), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMLines3d implementation
##class IAxisVMLines3d_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def Add(self):
##        '-no docstring-'
##        #return Item, ResultValue
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def Clear(self):
##        '-no docstring-'
##        #return 
##
##    def GetItem(self, Index):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetItem(self, Index):
##        '-no docstring-'
##        #return Value, ResultValue
##


# values for enumeration 'EDomainVariableThicknessType'
dvtvNone = 0
dvtvOneDirection = 1
dvtvTwoDirections = 2
EDomainVariableThicknessType = c_int # enum
IAxisVMLineSupportsEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Cleared'),
    DISPMETHOD([dispid(202)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]
class RCSOptimizationParamsGeneral(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{2542B9B5-885A-4CA5-8946-923C0C6130D4}')
RCSOptimizationParamsGeneral._fields_ = [
    ('ObjectiveOfOptimization', ECrossSectionObjectiveOfOptimization),
    ('Constraint_h_min', c_double),
    ('Constraint_h_max', c_double),
    ('Constraint_b_min', c_double),
    ('Constraint_b_max', c_double),
    ('MaximumEfficiency', c_double),
    ('Custom', ELongBoolean),
    ('NumberOfIterations', c_int),
    ('Beams', c_int),
]
assert sizeof(RCSOptimizationParamsGeneral) == 64, sizeof(RCSOptimizationParamsGeneral)
assert alignment(RCSOptimizationParamsGeneral) == 8, alignment(RCSOptimizationParamsGeneral)
class RNodalMass(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{2630B7BA-B84A-475D-BB82-F133D57515C2}')
RNodalMass._fields_ = [
    ('Node', c_int),
    ('Mx', c_double),
    ('My', c_double),
    ('Mz', c_double),
]
assert sizeof(RNodalMass) == 32, sizeof(RNodalMass)
assert alignment(RNodalMass) == 8, alignment(RNodalMass)
IAxisVMMaterialsEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Cleared'),
    DISPMETHOD([dispid(202)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]
class RRefAxis(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{79B4B830-0AA1-4E1F-B3B6-6E85190C005A}')
RRefAxis._fields_ = [
    ('P1', RPoint3d),
    ('P2', RPoint3d),
]
assert sizeof(RRefAxis) == 48, sizeof(RRefAxis)
assert alignment(RRefAxis) == 8, alignment(RRefAxis)
class RLoadCombinationGenParameters(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{726679E3-B97B-4FF1-9B0E-5EC300D7D3BB}')
RLoadCombinationGenParameters._fields_ = [
    ('ConsiderImperfections', ELongBoolean),
    ('OverwriteGeneratedCombos', ELongBoolean),
    ('OverWriteDuplComboSameType', ELongBoolean),
]
assert sizeof(RLoadCombinationGenParameters) == 12, sizeof(RLoadCombinationGenParameters)
assert alignment(RLoadCombinationGenParameters) == 4, alignment(RLoadCombinationGenParameters)
class RRefData(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{C073A8BE-F541-4AEE-B92D-D8256F18BE2D}')
class RRefPlane(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{CD58E181-B177-42A0-B0A9-1F4F7FB24D95}')
RRefPlane._fields_ = [
    ('P1', RPoint3d),
    ('P2', RPoint3d),
    ('P3', RPoint3d),
]
assert sizeof(RRefPlane) == 72, sizeof(RRefPlane)
assert alignment(RRefPlane) == 8, alignment(RRefPlane)
class RRefBeta(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{6C262D32-199F-45A5-B355-98EB0C02B41D}')
RRefBeta._fields_ = [
    ('Beta', c_double),
]
assert sizeof(RRefBeta) == 8, sizeof(RRefBeta)
assert alignment(RRefBeta) == 8, alignment(RRefBeta)
RRefData._fields_ = [
    ('Point', RRefPoint),
    ('Vector', RRefVector),
    ('Axis', RRefAxis),
    ('Plane', RRefPlane),
    ('Beta', RRefBeta),
]
assert sizeof(RRefData) == 200, sizeof(RRefData)
assert alignment(RRefData) == 8, alignment(RRefData)
RReference._fields_ = [
    ('ReferenceType', EReferenceType),
    ('ReferenceData', RRefData),
]
assert sizeof(RReference) == 208, sizeof(RReference)
assert alignment(RReference) == 8, alignment(RReference)
RLineSupportStiffParams._fields_ = [
    ('Top', RWallStiffnessParams),
    ('Bottom', RWallStiffnessParams),
]
assert sizeof(RLineSupportStiffParams) == 64, sizeof(RLineSupportStiffParams)
assert alignment(RLineSupportStiffParams) == 8, alignment(RLineSupportStiffParams)
class RDisplaySwitch(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{1A79D64F-12F9-4DC5-8A2C-23A70DBFF5F5}')
RDisplaySwitch._fields_ = [
    ('Parts', ELongBoolean),
    ('NonVisiblePartsGreyed', ELongBoolean),
    ('Guidlines', ELongBoolean),
    ('StructuralGrid', ELongBoolean),
]
assert sizeof(RDisplaySwitch) == 16, sizeof(RDisplaySwitch)
assert alignment(RDisplaySwitch) == 4, alignment(RDisplaySwitch)
class RDomainTrapezoidal(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{E6D4DA68-4F68-42E0-BE67-E4B6E22FB981}')
RDomainTrapezoidal._fields_ = [
    ('PlateMaterial', c_int),
    ('InfillMaterial', c_int),
    ('Direction', EXYDirection),
    ('Origin', RPoint3d),
    ('h', c_double),
    ('t', c_double),
    ('V', c_double),
    ('d', c_double),
    ('b', c_double),
    ('w', c_double),
    ('P', c_double),
    ('Eta', c_double),
]
assert sizeof(RDomainTrapezoidal) == 104, sizeof(RDomainTrapezoidal)
assert alignment(RDomainTrapezoidal) == 8, alignment(RDomainTrapezoidal)
IAxisVMMovingLoads._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202)], HRESULT, 'GetMovingLoadType',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(EMovingLoadType), 'MovingLoadType' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(203)], HRESULT, 'GetMovingLoadOnBeam',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(POINTER(IAxisVMMovingLoadOnBeam)), 'AxisVMMovingLoadOnBeam' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'GetMovingLoadOnDomain',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(POINTER(IAxisVMMovingLoadOnDomain)), 'AxisVMMovingLoadOnDomain' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205)], HRESULT, 'SetAsMovingLoadOnBeam',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IAxisVMMovingLoadOnBeam), 'AxisVMMovingLoadOnBeam' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'SetAsMovingLoadOnDomain',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IAxisVMMovingLoadOnDomain), 'AxisVMMovingLoadOnDomain' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'AddMovingLoadOnBeam',
              ( ['in'], POINTER(IAxisVMMovingLoadOnBeam), 'MovingLoadOnBeam' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208)], HRESULT, 'AddMovingLoadOnDomain',
              ( ['in'], POINTER(IAxisVMMovingLoadOnDomain), 'MovingLoadOnDomain' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMMovingLoads implementation
##class IAxisVMMovingLoads_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def GetMovingLoadType(self, Index):
##        '-no docstring-'
##        #return MovingLoadType, ResultValue
##
##    def GetMovingLoadOnBeam(self, Index):
##        '-no docstring-'
##        #return AxisVMMovingLoadOnBeam, ResultValue
##
##    def GetMovingLoadOnDomain(self, Index):
##        '-no docstring-'
##        #return AxisVMMovingLoadOnDomain, ResultValue
##
##    def SetAsMovingLoadOnBeam(self, Index, AxisVMMovingLoadOnBeam):
##        '-no docstring-'
##        #return ResultValue
##
##    def SetAsMovingLoadOnDomain(self, Index, AxisVMMovingLoadOnDomain):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddMovingLoadOnBeam(self, MovingLoadOnBeam):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddMovingLoadOnDomain(self, MovingLoadOnDomain):
##        '-no docstring-'
##        #return ResultValue
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return ResultValue
##


# values for enumeration 'EDomainExcentricityType'
detNone = 0
detConstant = 1
detOneDirection = 2
detTwoDirections = 3
detTopSurface = 4
detBottomSurface = 5
EDomainExcentricityType = c_int # enum
class RSteelDesignResult(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{33EB4DDB-1B4A-4EC1-8CC3-8B6B1BDF6B9E}')
RSteelDesignResult._fields_ = [
    ('PosX', c_double),
    ('DesignValue', c_double),
    ('LimitValue', c_double),
]
assert sizeof(RSteelDesignResult) == 24, sizeof(RSteelDesignResult)
assert alignment(RSteelDesignResult) == 8, alignment(RSteelDesignResult)
class AxisVMMovingLoadOnBeam(CoClass):
    'AxisVMMovingLoadOnBeam Object'
    _reg_clsid_ = GUID('{4842A4F8-DB16-4FBE-B91F-3F4CE9262E74}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
AxisVMMovingLoadOnBeam._com_interfaces_ = [IAxisVMMovingLoadOnBeam]
AxisVMMovingLoadOnBeam._outgoing_interfaces_ = [IAxisVMMovingLoadOnBeamEvents]

class RSectionSegmentChainIntegratedParameters(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{43D4E38D-5F5D-4A99-9E2A-5D33ED95A702}')
RSectionSegmentChainIntegratedParameters._fields_ = [
    ('StartPoint', RPoint3d),
    ('EndPoint', RPoint3d),
    ('CentreRatio', c_double),
]
assert sizeof(RSectionSegmentChainIntegratedParameters) == 56, sizeof(RSectionSegmentChainIntegratedParameters)
assert alignment(RSectionSegmentChainIntegratedParameters) == 8, alignment(RSectionSegmentChainIntegratedParameters)
class RGlobalForces(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{2D9EDF8C-5681-4AA9-85F9-07D8023D76AA}')
RGlobalForces._fields_ = [
    ('Fx', c_double),
    ('Fy', c_double),
    ('Fz', c_double),
    ('Mx', c_double),
    ('My', c_double),
    ('Mz', c_double),
]
assert sizeof(RGlobalForces) == 48, sizeof(RGlobalForces)
assert alignment(RGlobalForces) == 8, alignment(RGlobalForces)
IAxisVMEdgeConnections._methods_ = [
    COMMETHOD([dispid(201)], HRESULT, 'Add',
              ( ['in', 'out'], POINTER(REdgeConnectionRec), 'EdgeConnectionRec' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(203)], HRESULT, 'GetRec',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(REdgeConnectionRec), 'EdgeConnectionRec' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204), helpstring('Ignored: EdgeConnectionRec.LineId ; EdgeConnectionRec.DomainId')], HRESULT, 'SetRec',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(REdgeConnectionRec), 'EdgeConnectionRec' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'Clear',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207), 'propget'], HRESULT, 'Selected',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(207), 'propput'], HRESULT, 'Selected',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], ELongBoolean, 'Value' )),
    COMMETHOD([dispid(208), 'propget'], HRESULT, 'SelCount',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(209)], HRESULT, 'DeleteSelected',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(210)], HRESULT, 'SelectAll',
              ( ['in'], ELongBoolean, 'Select' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(211)], HRESULT, 'GetSelectedItemIds',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'ItemIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMEdgeConnections implementation
##class IAxisVMEdgeConnections_Impl(object):
##    def Add(self):
##        '-no docstring-'
##        #return EdgeConnectionRec, ResultValue
##
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def GetRec(self, Index):
##        '-no docstring-'
##        #return EdgeConnectionRec, ResultValue
##
##    def SetRec(self, Index):
##        'Ignored: EdgeConnectionRec.LineId ; EdgeConnectionRec.DomainId'
##        #return EdgeConnectionRec, ResultValue
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def Clear(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    Selected = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SelCount(self):
##        '-no docstring-'
##        #return Value
##
##    def DeleteSelected(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def SelectAll(self, Select):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetSelectedItemIds(self):
##        '-no docstring-'
##        #return ItemIds, ResultValue
##

class RMiscellaneousSettings(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{7B8C9490-B046-43C8-9F10-FF06AD3351F8}')
RMiscellaneousSettings._fields_ = [
    ('Smoothing', ESmoothing),
    ('MaxAngleLocZ', c_double),
    ('MaxAngleLocX', c_double),
    ('IntensityRefVal', EIntensityReferenceValue),
    ('CustomVal', c_double),
    ('SupportsAvgResultsPerMember', ELongBoolean),
]
assert sizeof(RMiscellaneousSettings) == 48, sizeof(RMiscellaneousSettings)
assert alignment(RMiscellaneousSettings) == 8, alignment(RMiscellaneousSettings)

# values for enumeration 'EDisplayShape'
dsUndeformed = 0
dsDeformed = 1
EDisplayShape = c_int # enum
class RCommonDisplayParameters(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{97306DCE-0113-4291-8978-9658A58D4DD3}')
class RCommonCriticalResultsSettings(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{346573CD-229A-46E3-8BED-7FF971C970A5}')

# values for enumeration 'ECombinationMethod'
cmULS = 0
cmULSab = 1
ECombinationMethod = c_int # enum
RCommonCriticalResultsSettings._fields_ = [
    ('InvestigateAllCombos', ELongBoolean),
    ('CritComboFormula', ECriticalCombinationFormula),
    ('InPersistentAndTransientDesignSituations', ECombinationMethod),
]
assert sizeof(RCommonCriticalResultsSettings) == 12, sizeof(RCommonCriticalResultsSettings)
assert alignment(RCommonCriticalResultsSettings) == 4, alignment(RCommonCriticalResultsSettings)
RCommonDisplayParameters._fields_ = [
    ('CriticalResSettings', RCommonCriticalResultsSettings),
    ('CutMomentPeaks', ELongBoolean),
    ('DrawInPlane', ELongBoolean),
    ('MiscelSettings', RMiscellaneousSettings),
]
assert sizeof(RCommonDisplayParameters) == 72, sizeof(RCommonDisplayParameters)
assert alignment(RCommonDisplayParameters) == 8, alignment(RCommonDisplayParameters)
IAxisVMVelocityEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrCode' )),
]

# values for enumeration 'ERCColumnCheckingError'
rccceInvalidLineId = -100001
rccceInvalidMemberId = -100002
rccceInvalidLoadCaseId = -100003
rccceInvalidLoadCombinationId = -100004
rccceInvalidCombinationOfLoadCaseAndLoadLevel = -100005
rccceInvalidCombinationOfLoadCombinationAndLoadLevel = -100006
rccceColumnReinforcementParametersNotSet = -100007
rccceCapacityCurveCannotBeGenerated = -100008
rccceInvalidRebarSteelGradeId = -100009
rccceInvalidConcreteMaterialId = -100010
rccceInvalidColumnRebarsId = -100011
rccceCapacityCurveNotYetGenerated = -100012
rccceDifferentColumnReinforcementParameters = -100013
rccceInvalidArrayLength = -100014
rccceInvalidAnalysisType = -100015
rccceExcentricity = -100016
rccceColumnReinforcementNoForces = -100017
rccceInvalidEnvelopeID = -100018
rccceInvalidDesignParameters = -100019
rccceShrinkageEpsMustBePositive = -100020
rccceVTCheckIsNotSupported = -100021
rccceStirrupParametersAreInvalid = -100022
rccceShearCrackAngleIsInvalid = -100023
rccceVTCapacityDesignIsNotSupported = -100024
rccceInvalidSteelMaterialId = -100025
rccceColumnCheckingIsNotSupported = -100026
ERCColumnCheckingError = c_int # enum
class RCircleArcGeomData(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{F126EE23-F69B-4198-8134-315FDB55C2A3}')
RCircleArcGeomData._fields_ = [
    ('Center', RPoint3d),
    ('NormalVector', RPoint3d),
    ('Alfa', c_double),
]
assert sizeof(RCircleArcGeomData) == 56, sizeof(RCircleArcGeomData)
assert alignment(RCircleArcGeomData) == 8, alignment(RCircleArcGeomData)
class RShowSwitches(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{06B7C5D7-BBBE-4F05-B608-320D5505D9F1}')
RShowSwitches._fields_ = [
    ('InfoWindowSwitch', RInfoWindowSwitch),
    ('DisplaySwitch', RDisplaySwitch),
]
assert sizeof(RShowSwitches) == 32, sizeof(RShowSwitches)
assert alignment(RShowSwitches) == 4, alignment(RShowSwitches)

# values for enumeration 'EMaterialError'
meEmtpy_Name = -100001
meNegative_Nux = -100002
meNegative_Nuy = -100003
meNegative_Nuz = -100004
meGreaterThan05_Nux = -100005
meGreaterThan05_Nuy = -100006
meGreaterThan05_Nuz = -100007
meNegative_Alfax = -100008
meNegative_Alfay = -100009
meNegative_Alfaz = -100010
meNonPositive_Ex = -100011
meNonPositive_Ey = -100012
meNonPositive_Ez = -100013
meNonPositive_Rho = -100014
meNonPositive_SigmaH = -100015
meNonPositive_SigmapH = -100016
meNonPositive_Ry = -100017
meNonPositive_Fy = -100018
meNonPositive_Fu = -100019
meNonPositive_Fy40 = -100020
meNonPositive_Fu40 = -100021
meNonPositive_R = -100022
meNonPositive_Rc = -100023
meNonPositive_SigmabH = -100024
meNonPositive_SigmahH = -100025
meNonPositive_Fit = -100026
meNonPositive_Fck = -100027
meNonPositive_GammaC = -100028
meNonPositive_Alfacc = -100029
meNonPositive_Fck_cube = -100030
meInvalid_MaterialType = -100031
meInvalid_NationalDesignCode = -100032
meNameAlreadyExists = -100033
meNonPositive_E005 = -100034
meNonPositive_Gmean = -100035
meNonPositive_fmk = -100036
meNonPositive_ft0k = -100037
meNonPositive_ft90k = -100038
meNonPositive_fc0k = -100039
meNonPositive_fc90kz = -100040
meNonPositive_fvkz = -100041
meNonPositive_GammaM = -100042
meNonPositive_fc90ky = -100043
meNonPositive_fvky = -100044
meNonPositive_s = -100045
meErrorAdding = -100046
EMaterialError = c_int # enum
class RFrequencyParameters(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{46A18F0E-6A7E-4A2F-AB73-7F65FDF4A2A3}')
RFrequencyParameters._fields_ = [
    ('Frequency', c_double),
    ('EigenValConv', c_double),
    ('EigenVecConv', c_double),
    ('EigenValConvLimit', c_double),
    ('EigenVecConvLimit', c_double),
    ('Iteration', c_int),
]
assert sizeof(RFrequencyParameters) == 48, sizeof(RFrequencyParameters)
assert alignment(RFrequencyParameters) == 8, alignment(RFrequencyParameters)
class RSteelDesignParameters(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{E266915B-58D0-42B6-8296-82FC4CC67EA9}')
class RSteelDesignParameters_NEN(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{F2D7A701-1D6A-46B4-8D65-4D44E68678DE}')

# values for enumeration 'ETorsion'
tFree = 0
tPartial = 1
tFixed = 2
ETorsion = c_int # enum
RSteelDesignParameters_NEN._fields_ = [
    ('BreakAtElements', ELongBoolean),
    ('Kapy', c_double),
    ('Kapz', c_double),
    ('y', c_double),
    ('l1F', c_double),
    ('l1A', c_double),
    ('lgF', c_double),
    ('lgA', c_double),
    ('ak', c_double),
    ('Fytot', c_double),
    ('Fztot', c_double),
    ('YBraced', ELongBoolean),
    ('ZBraced', ELongBoolean),
    ('Torsion', ETorsion),
]
assert sizeof(RSteelDesignParameters_NEN) == 104, sizeof(RSteelDesignParameters_NEN)
assert alignment(RSteelDesignParameters_NEN) == 8, alignment(RSteelDesignParameters_NEN)
RSteelDesignParameters._fields_ = [
    ('MSZ_STAS', RSteelDesignParameters_MSZ_STAS),
    ('EC_SIA_ITA', RSteelDesignParameters_EC_SIA_ITA),
    ('NEN', RSteelDesignParameters_NEN),
]
assert sizeof(RSteelDesignParameters) == 360, sizeof(RSteelDesignParameters)
assert alignment(RSteelDesignParameters) == 8, alignment(RSteelDesignParameters)
class RCursorSnap(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{888C4197-B77A-4877-B91B-00F199E43BB4}')
RCursorSnap._fields_ = [
    ('MouseSnap', ELongBoolean),
    ('DeltaX', c_double),
    ('DeltaY', c_double),
    ('DeltaZ', c_double),
    ('CtrlX', c_double),
]
assert sizeof(RCursorSnap) == 40, sizeof(RCursorSnap)
assert alignment(RCursorSnap) == 8, alignment(RCursorSnap)

# values for enumeration 'EColumnRebarsError'
crbeInvalidCrossSectionId = -100001
EColumnRebarsError = c_int # enum

# values for enumeration 'EDisplayAnalysisType'
datLinear = 0
datNonLinear = 1
EDisplayAnalysisType = c_int # enum
class RTimberDesignParameters_EC_SIA_ITA(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{15981CDA-F565-44A1-8FC9-6B8B93ED58DA}')

# values for enumeration 'ELoadPositionType'
lptUpper = 0
lptAxis = 1
lptLower = 2
ELoadPositionType = c_int # enum

# values for enumeration 'ETimberGrain'
tgTopEdge = 0
tgBottomEdge = 1
ETimberGrain = c_int # enum
RTimberDesignParameters_EC_SIA_ITA._fields_ = [
    ('Ky', c_double),
    ('Kz', c_double),
    ('Klt', c_double),
    ('LoadPosition', ELoadPositionType),
    ('Grain', ETimberGrain),
    ('LayerThickness', c_double),
]
assert sizeof(RTimberDesignParameters_EC_SIA_ITA) == 40, sizeof(RTimberDesignParameters_EC_SIA_ITA)
assert alignment(RTimberDesignParameters_EC_SIA_ITA) == 8, alignment(RTimberDesignParameters_EC_SIA_ITA)
class RCSOptimizationResultsParametric(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{D981D602-74BB-47BF-BF6C-F9FEB4826CE0}')
RCSOptimizationResultsParametric._fields_ = [
    ('OptimizationEfficiency', c_double),
    ('Efficiency', c_double),
    ('M', c_double),
    ('DeltaM', c_double),
    ('b', c_double),
    ('h', c_double),
    ('tw', c_double),
    ('tf', c_double),
    ('b2', c_double),
    ('tf2', c_double),
    ('a', c_double),
]
assert sizeof(RCSOptimizationResultsParametric) == 88, sizeof(RCSOptimizationResultsParametric)
assert alignment(RCSOptimizationResultsParametric) == 8, alignment(RCSOptimizationResultsParametric)

# values for enumeration 'EXLAMpanelsError'
xpeInvalidLayers = -100001
xpeLayersNotSymmetric = -100002
xpeThicknessesMustBePositive = -100003
EXLAMpanelsError = c_int # enum

# values for enumeration 'EWindLoadError'
wleNoWindLoadDefined = -100001
EWindLoadError = c_int # enum
class REllipseArcGeomData(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{FD66245C-85C2-41CF-AC02-7C8CD6AC23C2}')
REllipseArcGeomData._fields_ = [
    ('Center', RPoint3d),
    ('NormalVector', RPoint3d),
    ('Alfa', c_double),
    ('MajorEndPoint', RPoint3d),
    ('Ratio', c_double),
    ('StartAlfa', c_double),
    ('EndAlfa', c_double),
]
assert sizeof(REllipseArcGeomData) == 104, sizeof(REllipseArcGeomData)
assert alignment(REllipseArcGeomData) == 8, alignment(REllipseArcGeomData)
class RNcrParameters(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{47761E37-2D84-4C1F-BC91-E7A3DB3DE791}')
RNcrParameters._fields_ = [
    ('Ncr', c_double),
    ('EigenValConv', c_double),
    ('EigenVecConv', c_double),
    ('EigenValConvLimit', c_double),
    ('EigenVecConvLimit', c_double),
    ('Iteration', c_int),
]
assert sizeof(RNcrParameters) == 48, sizeof(RNcrParameters)
assert alignment(RNcrParameters) == 8, alignment(RNcrParameters)
class RReinforcementCheckValues(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{3CD3DC7E-38FA-40E3-8C1A-7107D9D517EF}')
RReinforcementCheckValues._fields_ = [
    ('rmxdmin_ULS', c_double),
    ('rmxdmax_ULS', c_double),
    ('rmydmin_ULS', c_double),
    ('rmydmax_ULS', c_double),
    ('rmxumin_ULS', c_double),
    ('rmxumax_ULS', c_double),
    ('rmyumin_ULS', c_double),
    ('rmyumax_ULS', c_double),
    ('rmxdmin_SLS', c_double),
    ('rmxdmax_SLS', c_double),
    ('rmydmin_SLS', c_double),
    ('rmydmax_SLS', c_double),
    ('rmxumin_SLS', c_double),
    ('rmxumax_SLS', c_double),
    ('rmyumin_SLS', c_double),
    ('rmyumax_SLS', c_double),
    ('Status', EReinforcementCheckStatus),
]
assert sizeof(RReinforcementCheckValues) == 136, sizeof(RReinforcementCheckValues)
assert alignment(RReinforcementCheckValues) == 8, alignment(RReinforcementCheckValues)
class RCSParametricOptimizationParams(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{90913129-99B3-46B4-9050-DFA65488B501}')
RCSParametricOptimizationParams._fields_ = [
    ('General', RCSOptimizationParamsGeneral),
    ('fixed_h', ELongBoolean),
    ('delta_h', c_double),
    ('fixed_b', ELongBoolean),
    ('delta_b', c_double),
    ('fixed_tw', ELongBoolean),
    ('delta_tw', c_double),
    ('fixed_tf', ELongBoolean),
    ('delta_tf', c_double),
    ('fixed_b2', ELongBoolean),
    ('b2_min', c_double),
    ('b2_max', c_double),
    ('delta_b2', c_double),
    ('fixed_tf2', ELongBoolean),
    ('tf2_min', c_double),
    ('tf2_max', c_double),
    ('delta_tf2', c_double),
    ('fixed_a', ELongBoolean),
    ('a_min', c_double),
    ('a_max', c_double),
    ('delta_a', c_double),
]
assert sizeof(RCSParametricOptimizationParams) == 224, sizeof(RCSParametricOptimizationParams)
assert alignment(RCSParametricOptimizationParams) == 8, alignment(RCSParametricOptimizationParams)
class RSteelLTBSupport(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{06043B94-88EF-465A-A3D7-C00FEA6FD9D8}')
RSteelLTBSupport._fields_ = [
    ('AbsPos', c_double),
    ('Ecc', c_double),
    ('Ry', c_double),
    ('Rxx', c_double),
    ('Rzz', c_double),
    ('Rw', c_double),
]
assert sizeof(RSteelLTBSupport) == 48, sizeof(RSteelLTBSupport)
assert alignment(RSteelLTBSupport) == 8, alignment(RSteelLTBSupport)
class RLoadEmptySurfaceLine(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{2C2308C3-8B15-41E6-A313-5058A3D1F818}')
RLoadEmptySurfaceLine._fields_ = [
    ('px1', c_double),
    ('px2', c_double),
    ('py1', c_double),
    ('py2', c_double),
    ('pz1', c_double),
    ('pz2', c_double),
    ('pm1', c_double),
    ('pm2', c_double),
    ('DistributionType', EDistributionType),
    ('SegmentId', c_int),
    ('GlbStartx', c_double),
    ('GlbStarty', c_double),
    ('GlbStartz', c_double),
    ('GlbEndx', c_double),
    ('GlbEndy', c_double),
    ('GlbEndz', c_double),
]
assert sizeof(RLoadEmptySurfaceLine) == 120, sizeof(RLoadEmptySurfaceLine)
assert alignment(RLoadEmptySurfaceLine) == 8, alignment(RLoadEmptySurfaceLine)
class RTimberDesignParameters_EC_V153(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{58886909-81AB-47B1-8A70-746C292A8FD3}')

# values for enumeration 'ETimberSLSEMethod'
tslsem_No = 0
tslsem_2 = 1
tslsem_Left = 2
tslsem_Right = 3
ETimberSLSEMethod = c_int # enum

# values for enumeration 'ETimberSLSLMethod'
tslslm_Member = 0
tslslm_Custom = 1
tslslm_Conn = 2
ETimberSLSLMethod = c_int # enum

# values for enumeration 'ETimberSLSPreCamberCurve'
tslspcc_Quadratic = 0
tslslm_Linear = 1
ETimberSLSPreCamberCurve = c_int # enum

# values for enumeration 'ETimberSLSDesignCreepMode'
tslsdcm_Code = 0
tslsdcm_User = 1
ETimberSLSDesignCreepMode = c_int # enum
RTimberDesignParameters_EC_V153._fields_ = [
    ('Ky', c_double),
    ('Kz', c_double),
    ('Klt', c_double),
    ('LoadPosition', ELoadPositionType),
    ('Grain', ETimberGrain),
    ('LayerThickness', c_double),
    ('slsEyLimitDef', ELongBoolean),
    ('slsEzLimitDef', ELongBoolean),
    ('slsUyDef', ELongBoolean),
    ('slsUzDef', ELongBoolean),
    ('slsEMode', ETimberSLSEMethod),
    ('slsLMode', ETimberSLSLMethod),
    ('slsPreCamberCurve', ETimberSLSPreCamberCurve),
    ('slsEyLimit', c_double),
    ('slsEzLimit', c_double),
    ('slsCustomLy', c_double),
    ('slsCustomLz', c_double),
    ('slsUy', c_double),
    ('slsUz', c_double),
    ('slsCreepMode', ETimberSLSDesignCreepMode),
    ('slsPhi', c_double),
    ('FireResistDef', ELongBoolean),
    ('fpKy', c_double),
    ('fpKz', c_double),
    ('fpKLT', c_double),
]
assert sizeof(RTimberDesignParameters_EC_V153) == 168, sizeof(RTimberDesignParameters_EC_V153)
assert alignment(RTimberDesignParameters_EC_V153) == 8, alignment(RTimberDesignParameters_EC_V153)

# values for enumeration 'EActualReinforcementLabelType'
arltRebarsAndReinfValues = 0
arltRebarsAndQuantity = 1
EActualReinforcementLabelType = c_int # enum
class RCrackWidths(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{ECF493ED-26CA-4543-A94D-4044531BC1A8}')
class RCrackWidthValues(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{9FD9CF69-27A4-4344-9B78-5D2A4B0B8984}')
RCrackWidthValues._fields_ = [
    ('Asbx', c_double),
    ('Asby', c_double),
    ('Astx', c_double),
    ('Asty', c_double),
    ('Nx', c_double),
    ('Ny', c_double),
    ('Nxy', c_double),
    ('Mx', c_double),
    ('My', c_double),
    ('Mxy', c_double),
    ('wR_p', c_double),
    ('wR_s', c_double),
    ('wk_p', c_double),
    ('wk_s', c_double),
    ('wk2_p', c_double),
    ('wk2_s', c_double),
    ('xs2_p', c_double),
    ('xs2_s', c_double),
    ('Ss2_p', c_double),
    ('Ss2_s', c_double),
    ('Sb1_p', c_double),
    ('Sb1_s', c_double),
]
assert sizeof(RCrackWidthValues) == 176, sizeof(RCrackWidthValues)
assert alignment(RCrackWidthValues) == 8, alignment(RCrackWidthValues)
RCrackWidths._fields_ = [
    ('ContourPointCount', c_int),
    ('ContourPoint1Id', c_int),
    ('ContourPoint2Id', c_int),
    ('ContourPoint3Id', c_int),
    ('ContourPoint4Id', c_int),
    ('ContourLine1Id', c_int),
    ('ContourLine2Id', c_int),
    ('ContourLine3Id', c_int),
    ('ContourLine4Id', c_int),
    ('cwvCenterPoint_Bottom', RCrackWidthValues),
    ('cwvCenterPoint_Top', RCrackWidthValues),
    ('cwvContourPoint1_Bottom', RCrackWidthValues),
    ('cwvContourPoint1_Top', RCrackWidthValues),
    ('cwvContourPoint2_Bottom', RCrackWidthValues),
    ('cwvContourPoint2_Top', RCrackWidthValues),
    ('cwvContourPoint3_Bottom', RCrackWidthValues),
    ('cwvContourPoint3_Top', RCrackWidthValues),
    ('cwvContourPoint4_Bottom', RCrackWidthValues),
    ('cwvContourPoint4_Top', RCrackWidthValues),
    ('cwvContourLineMidPoint1_Bottom', RCrackWidthValues),
    ('cwvContourLineMidPoint1_Top', RCrackWidthValues),
    ('cwvContourLineMidPoint2_Bottom', RCrackWidthValues),
    ('cwvContourLineMidPoint2_Top', RCrackWidthValues),
    ('cwvContourLineMidPoint3_Bottom', RCrackWidthValues),
    ('cwvContourLineMidPoint3_Top', RCrackWidthValues),
    ('cwvContourLineMidPoint4_Bottom', RCrackWidthValues),
    ('cwvContourLineMidPoint4_Top', RCrackWidthValues),
]
assert sizeof(RCrackWidths) == 3208, sizeof(RCrackWidths)
assert alignment(RCrackWidths) == 8, alignment(RCrackWidths)
RNMInteractionDiagMinMax._fields_ = [
    ('NMin', c_double),
    ('NMax', c_double),
    ('MyMin', c_double),
    ('MyMax', c_double),
    ('MzMin', c_double),
    ('MzMax', c_double),
]
assert sizeof(RNMInteractionDiagMinMax) == 48, sizeof(RNMInteractionDiagMinMax)
assert alignment(RNMInteractionDiagMinMax) == 8, alignment(RNMInteractionDiagMinMax)
class RCommonCriticalResultsSettings_V161(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{2B9F208B-3912-400E-B677-45D692A8E800}')
RCommonCriticalResultsSettings_V161._fields_ = [
    ('InvestigateAllCombos', ELongBoolean),
    ('CritComboFormula', ECriticalCombinationFormula),
    ('InPersistentAndTransientDesignSituations', ECombinationMethod),
    ('SemiAutoSLS', ECombinationType),
]
assert sizeof(RCommonCriticalResultsSettings_V161) == 16, sizeof(RCommonCriticalResultsSettings_V161)
assert alignment(RCommonCriticalResultsSettings_V161) == 4, alignment(RCommonCriticalResultsSettings_V161)
class RGridOptions(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{C526B7FF-D2AC-4DDB-8FD2-4F13E69A4E1A}')

# values for enumeration 'EGridType'
gtGridLines = 0
gtDotGrid = 1
EGridType = c_int # enum
RGridOptions._fields_ = [
    ('DisplayGrid', ELongBoolean),
    ('DeltaX', c_double),
    ('DeltaY', c_double),
    ('DeltaZ', c_double),
    ('GridType', EGridType),
]
assert sizeof(RGridOptions) == 40, sizeof(RGridOptions)
assert alignment(RGridOptions) == 8, alignment(RGridOptions)
class RLoadSurfaceLine(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{F2887229-14E9-4C29-AB15-CA823CC4BA19}')
RLoadSurfaceLine._fields_ = [
    ('px1', c_double),
    ('px2', c_double),
    ('py1', c_double),
    ('py2', c_double),
    ('pz1', c_double),
    ('pz2', c_double),
    ('pm1', c_double),
    ('pm2', c_double),
    ('DistributionType', EDistributionType),
    ('SegmentId', c_int),
    ('GlbStartx', c_double),
    ('GlbStarty', c_double),
    ('GlbStartz', c_double),
    ('GlbEndx', c_double),
    ('GlbEndy', c_double),
    ('GlbEndz', c_double),
]
assert sizeof(RLoadSurfaceLine) == 120, sizeof(RLoadSurfaceLine)
assert alignment(RLoadSurfaceLine) == 8, alignment(RLoadSurfaceLine)
class REditingOptions(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{E76189AA-2F62-4BEE-AEFE-0937F06EB587}')
REditingOptions._fields_ = [
    ('ConstAngle_DeltaAlpha', c_double),
    ('ConstAngle_CustomAlpha', c_double),
    ('EditingToler', c_double),
]
assert sizeof(REditingOptions) == 24, sizeof(REditingOptions)
assert alignment(REditingOptions) == 8, alignment(REditingOptions)
class RTotalLoads(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{281D36BE-A2A5-44B5-A306-A281539A8833}')
RTotalLoads._fields_ = [
    ('ExternalForces', RGlobalForces),
    ('UnbalancedLoads', RGlobalForces),
]
assert sizeof(RTotalLoads) == 96, sizeof(RTotalLoads)
assert alignment(RTotalLoads) == 8, alignment(RTotalLoads)
class RLoadDomainPolyArea(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{B230C525-3FA5-4F56-9CDB-731BEDFF822A}')

# values for enumeration 'ELoadDistributionType'
ldtConst = 0
ldtLinear = 1
ELoadDistributionType = c_int # enum
RLoadDomainPolyArea._fields_ = [
    ('LoadCaseId', c_int),
    ('DistributionType', EDistributionType),
    ('LoadDistributionType', ELoadDistributionType),
    ('Component', EAxis),
    ('P1', c_double),
    ('P2', c_double),
    ('P3', c_double),
    ('x1', c_double),
    ('x2', c_double),
    ('x3', c_double),
    ('y1', c_double),
    ('y2', c_double),
    ('y3', c_double),
    ('z1', c_double),
    ('z2', c_double),
    ('z3', c_double),
    ('WindowLoad', ELongBoolean),
]
assert sizeof(RLoadDomainPolyArea) == 120, sizeof(RLoadDomainPolyArea)
assert alignment(RLoadDomainPolyArea) == 8, alignment(RLoadDomainPolyArea)
class RSegmentChainPointCrackWidthValues(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{E16ACD85-0D35-4DD8-B93E-844A91DA10B3}')
class RSegmentChainCrackWidthValues(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{A37F199E-7BBA-41C4-B547-E11DE0B97439}')
RSegmentChainCrackWidthValues._fields_ = [
    ('wk_p', c_double),
    ('wk_s', c_double),
    ('wk2_p', c_double),
    ('wk2_s', c_double),
]
assert sizeof(RSegmentChainCrackWidthValues) == 32, sizeof(RSegmentChainCrackWidthValues)
assert alignment(RSegmentChainCrackWidthValues) == 8, alignment(RSegmentChainCrackWidthValues)
RSegmentChainPointCrackWidthValues._fields_ = [
    ('covBottom', RSegmentChainCrackWidthValues),
    ('covTop', RSegmentChainCrackWidthValues),
]
assert sizeof(RSegmentChainPointCrackWidthValues) == 64, sizeof(RSegmentChainPointCrackWidthValues)
assert alignment(RSegmentChainPointCrackWidthValues) == 8, alignment(RSegmentChainPointCrackWidthValues)

# values for enumeration 'ECriticalGroupCombinationsError'
cgceLoadGroupIdOutOfBounds = 0
cgceNotEditable = 1
ECriticalGroupCombinationsError = c_int # enum

# values for enumeration 'ELayerError'
laeInvalidName = -100001
laeInvalidPenWidth = -100002
laeInvalidFontName = -100003
ELayerError = c_int # enum
class RActualReinforcement(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{0592D768-65D9-41BF-A9CD-3CECD6C963A9}')
RActualReinforcement._fields_ = [
    ('ds', c_double),
    ('spacing', c_double),
    ('RebarType', ERebarType),
    ('Cover', c_double),
    ('Alpha', c_double),
]
assert sizeof(RActualReinforcement) == 40, sizeof(RActualReinforcement)
assert alignment(RActualReinforcement) == 8, alignment(RActualReinforcement)
class RSteelDesignParameters_V153(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{A20033E9-E597-4F2E-9D95-6F231D95F5FE}')
RSteelDesignParameters_V153._fields_ = [
    ('EC_SIA_ITA', RSteelDesignParameters_EC_SIA_ITA_V153),
    ('MSZ_STAS', RSteelDesignParameters_MSZ_STAS),
    ('NEN', RSteelDesignParameters_NEN),
]
assert sizeof(RSteelDesignParameters_V153) == 608, sizeof(RSteelDesignParameters_V153)
assert alignment(RSteelDesignParameters_V153) == 8, alignment(RSteelDesignParameters_V153)
class RCircularFootingCalced(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{235DBEEC-0519-47D3-B44C-1D7A119C028D}')

# values for enumeration 'EPadFootingStepMeasureSource'
pfsms_Interior = 0
pfsms_Edge = 1
EPadFootingStepMeasureSource = c_int # enum
RCircularFootingCalced._fields_ = [
    ('Calculated', ELongBoolean),
    ('Diam', c_double),
    ('StepMeasureSource', EPadFootingStepMeasureSource),
    ('DeltaR', c_double),
]
assert sizeof(RCircularFootingCalced) == 32, sizeof(RCircularFootingCalced)
assert alignment(RCircularFootingCalced) == 8, alignment(RCircularFootingCalced)
class AxisVMLine(CoClass):
    'AxisVMLine Object'
    _reg_clsid_ = GUID('{5867A6F8-666F-4EFB-9841-BDFE55FA4C3A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMLine(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMLine Object'
    _iid_ = GUID('{8231FEA5-0AA7-497F-96A7-8D338E1CE048}')
    _idlflags_ = ['dual', 'oleautomation']
AxisVMLine._com_interfaces_ = [IAxisVMLine]

class RLineGeomData(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{B750F1DF-F935-49C8-8506-BD0EF3DDF52C}')
class RLineData(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{401D7EEC-EE6D-44B8-B9C0-40A3CA8C12B9}')
RLineData._fields_ = [
    ('NodeId1', c_int),
    ('NodeId2', c_int),
    ('GeomType', ELineGeomType),
    ('CircleArc', RCircleArcGeomData),
    ('EllipseArc', REllipseArcGeomData),
]
assert sizeof(RLineData) == 176, sizeof(RLineData)
assert alignment(RLineData) == 8, alignment(RLineData)
IAxisVMLines._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(AxisVMLine)), 'Value' )),
    COMMETHOD([dispid(203)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'Clear',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205), 'propget'], HRESULT, 'Selected',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(205), 'propput'], HRESULT, 'Selected',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], ELongBoolean, 'Value' )),
    COMMETHOD([dispid(206), 'propget'], HRESULT, 'SelCount',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(207)], HRESULT, 'DeleteSelected',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208)], HRESULT, 'SelectAll',
              ( ['in'], ELongBoolean, 'Select' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209)], HRESULT, 'Add',
              ( ['in'], c_int, 'StartNode' ),
              ( ['in'], c_int, 'EndNode' ),
              ( ['in'], ELineGeomType, 'GeomType' ),
              ( ['in', 'out'], POINTER(RLineGeomData), 'GeomData' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(210)], HRESULT, 'AddWithXYZ',
              ( ['in', 'out'], POINTER(RPoint3d), 'StartNode' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'EndNode' ),
              ( ['in'], ELineGeomType, 'GeomType' ),
              ( ['in', 'out'], POINTER(RLineGeomData), 'GeomData' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(211)], HRESULT, 'AddWithXYZDOF',
              ( ['in', 'out'], POINTER(RPoint3d), 'StartNode' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'EndNode' ),
              ( ['in'], c_int, 'StartDof' ),
              ( ['in'], c_int, 'EndDof' ),
              ( ['in'], ELineGeomType, 'GeomType' ),
              ( ['in', 'out'], POINTER(RLineGeomData), 'GeomData' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(212)], HRESULT, 'DefineSelectedLinesAsRigidBody',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(213)], HRESULT, 'IndexOf',
              ( ['in'], c_int, 'StartNode' ),
              ( ['in'], c_int, 'EndNode' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(214), 'propget'], HRESULT, 'RigidBodyCount',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(215)], HRESULT, 'IndexOf2',
              ( ['in'], c_int, 'StartNode' ),
              ( ['in'], c_int, 'EndNode' ),
              ( ['in'], c_int, 'FirstLine' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(216), 'propget'], HRESULT, 'MidPointId',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(218), 'propget'], HRESULT, 'SectionCount',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(219), 'propget'], HRESULT, 'MidPointDOF',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(219), 'propput'], HRESULT, 'MidPointDOF',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(220)], HRESULT, 'GetMidPoint',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(221)], HRESULT, 'CrossLines',
              ( ['in'], _midlSAFEARRAY(c_int), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(222)], HRESULT, 'ChangeLocalDirection',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(223), 'propget'], HRESULT, 'MidPointCount',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(224), 'propget'], HRESULT, 'LineByMidPoint',
              ( ['in'], c_int, 'MidPointIndex' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(225)], HRESULT, 'GetSelectedItemIds',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'ItemIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(226)], HRESULT, 'SelectAllColumns',
              ( ['in'], ELongBoolean, 'Select' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(227)], HRESULT, 'SelectAllBeams',
              ( ['in'], ELongBoolean, 'Select' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(228)], HRESULT, 'SelectAllOthers',
              ( ['in'], ELongBoolean, 'Select' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(229)], HRESULT, 'SelectAllColumnsAtStorey',
              ( ['in'], ELongBoolean, 'Select' ),
              ( ['in'], c_int, 'StoreyId' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(230)], HRESULT, 'SelectAllBeamsAtStorey',
              ( ['in'], ELongBoolean, 'Select' ),
              ( ['in'], c_int, 'StoreyId' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(231)], HRESULT, 'SelectAllOthersAtStorey',
              ( ['in'], ELongBoolean, 'Select' ),
              ( ['in'], c_int, 'StoreyId' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(232)], HRESULT, 'GetSelectedColumnIds',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(233)], HRESULT, 'GetSelectedBeamIds',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(234)], HRESULT, 'GetSelectedOtherIds',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(235)], HRESULT, 'RenameSelectedTrusses',
              ( ['in'], c_int, 'NewBase' ),
              ( ['in'], BSTR, 'FormatStr' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(236)], HRESULT, 'DeleteNameOfAllTrusses',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(237)], HRESULT, 'CrossLines_vb',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(238), 'propget'], HRESULT, 'UID',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(239), 'propget'], HRESULT, 'IndexOfUID',
              ( ['in'], c_int, 'UID' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(240), 'propget'], HRESULT, 'StiffnessReduction_A',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(240), 'propput'], HRESULT, 'StiffnessReduction_A',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(241), 'propget'], HRESULT, 'StiffnessReduction_I',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(241), 'propput'], HRESULT, 'StiffnessReduction_I',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(242), 'propget'], HRESULT, 'Attributes',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMAttributes)), 'Value' )),
    COMMETHOD([dispid(243), 'propget'], HRESULT, 'Attachments',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMAttachments)), 'Value' )),
    COMMETHOD([dispid(244), 'propget'], HRESULT, 'LocalX_is_ij',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'ResultValue' )),
    COMMETHOD([dispid(245), 'propget'], HRESULT, 'Name',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(246)], HRESULT, 'IndexOfFiniteElementNumber',
              ( ['in'], ELineType, 'LineType' ),
              ( ['in'], c_int, 'FiniteElementNumber' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(247)], HRESULT, 'GetFiniteElementCount',
              ( ['in'], ELineType, 'LineType' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(248)], HRESULT, 'GetContinuousLineIDs',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['in'], c_double, 'MaxAngleDifferenceX' ),
              ( ['in'], c_double, 'MaxAngleDifferenceZ' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'ContinousLineIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(249)], HRESULT, 'BulkGetLineData',
              ( ['in'], _midlSAFEARRAY(c_int), 'LineIds' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineData)), 'LineData' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(250)], HRESULT, 'BulkSetLineData',
              ( ['in'], _midlSAFEARRAY(c_int), 'LineIds' ),
              ( ['in'], _midlSAFEARRAY(RLineData), 'LineData' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(251)], HRESULT, 'BulkAdd',
              ( ['in'], _midlSAFEARRAY(RLineData), 'LineData' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(252)], HRESULT, 'BulkGetAttr',
              ( ['in'], _midlSAFEARRAY(c_int), 'LineIds' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineAttr)), 'LineAttr' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(253)], HRESULT, 'BulkSetAttr',
              ( ['in'], _midlSAFEARRAY(c_int), 'LineIds' ),
              ( ['in'], _midlSAFEARRAY(RLineAttr), 'LineAttr' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(254)], HRESULT, 'BulkGetMemberIds',
              ( ['in'], _midlSAFEARRAY(c_int), 'LineIds' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'MemberIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(255)], HRESULT, 'GetSurfaces',
              ( ['in'], c_int, 'LineId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SurfaceIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(256), 'propget'], HRESULT, 'StiffnessReduction',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], ELineStiffnessReduction, 'Component' ),
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(256), 'propput'], HRESULT, 'StiffnessReduction',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], ELineStiffnessReduction, 'Component' ),
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(257)], HRESULT, 'BulkGetAttr_V161',
              ( ['in'], _midlSAFEARRAY(c_int), 'LineIds' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineAttr_V161)), 'LineAttr' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(258)], HRESULT, 'BulkSetAttr_V161',
              ( ['in'], _midlSAFEARRAY(c_int), 'LineIds' ),
              ( ['in'], _midlSAFEARRAY(RLineAttr_V161), 'LineAttr' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMLines implementation
##class IAxisVMLines_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Item(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def Clear(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    Selected = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SelCount(self):
##        '-no docstring-'
##        #return Value
##
##    def DeleteSelected(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def SelectAll(self, Select):
##        '-no docstring-'
##        #return ResultValue
##
##    def Add(self, StartNode, EndNode, GeomType):
##        '-no docstring-'
##        #return GeomData, ResultValue
##
##    def AddWithXYZ(self, GeomType):
##        '-no docstring-'
##        #return StartNode, EndNode, GeomData, ResultValue
##
##    def AddWithXYZDOF(self, StartDof, EndDof, GeomType):
##        '-no docstring-'
##        #return StartNode, EndNode, GeomData, ResultValue
##
##    def DefineSelectedLinesAsRigidBody(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def IndexOf(self, StartNode, EndNode):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def RigidBodyCount(self):
##        '-no docstring-'
##        #return Value
##
##    def IndexOf2(self, StartNode, EndNode, FirstLine):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def MidPointId(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def SectionCount(self, Index, AnalysisType):
##        '-no docstring-'
##        #return Value
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    MidPointDOF = property(_get, _set, doc = _set.__doc__)
##
##    def GetMidPoint(self, Index):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def CrossLines(self, LineIds):
##        '-no docstring-'
##        #return ResultValue
##
##    def ChangeLocalDirection(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def MidPointCount(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def LineByMidPoint(self, MidPointIndex):
##        '-no docstring-'
##        #return Value
##
##    def GetSelectedItemIds(self):
##        '-no docstring-'
##        #return ItemIds, ResultValue
##
##    def SelectAllColumns(self, Select):
##        '-no docstring-'
##        #return ResultValue
##
##    def SelectAllBeams(self, Select):
##        '-no docstring-'
##        #return ResultValue
##
##    def SelectAllOthers(self, Select):
##        '-no docstring-'
##        #return ResultValue
##
##    def SelectAllColumnsAtStorey(self, Select, StoreyId):
##        '-no docstring-'
##        #return ResultValue
##
##    def SelectAllBeamsAtStorey(self, Select, StoreyId):
##        '-no docstring-'
##        #return ResultValue
##
##    def SelectAllOthersAtStorey(self, Select, StoreyId):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetSelectedColumnIds(self):
##        '-no docstring-'
##        #return LineIds, ResultValue
##
##    def GetSelectedBeamIds(self):
##        '-no docstring-'
##        #return LineIds, ResultValue
##
##    def GetSelectedOtherIds(self):
##        '-no docstring-'
##        #return LineIds, ResultValue
##
##    def RenameSelectedTrusses(self, NewBase, FormatStr):
##        '-no docstring-'
##        #return ResultValue
##
##    def DeleteNameOfAllTrusses(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def CrossLines_vb(self):
##        '-no docstring-'
##        #return LineIds, ResultValue
##
##    @property
##    def UID(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def IndexOfUID(self, UID):
##        '-no docstring-'
##        #return Value
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    StiffnessReduction_A = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    StiffnessReduction_I = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Attributes(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Attachments(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def LocalX_is_ij(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def Name(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def IndexOfFiniteElementNumber(self, LineType, FiniteElementNumber):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetFiniteElementCount(self, LineType):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetContinuousLineIDs(self, MaxAngleDifferenceX, MaxAngleDifferenceZ):
##        '-no docstring-'
##        #return LineIds, ContinousLineIDs, ResultValue
##
##    def BulkGetLineData(self, LineIds):
##        '-no docstring-'
##        #return LineData, ResultValue
##
##    def BulkSetLineData(self, LineIds, LineData):
##        '-no docstring-'
##        #return ResultValue
##
##    def BulkAdd(self, LineData):
##        '-no docstring-'
##        #return LineIds, ResultValue
##
##    def BulkGetAttr(self, LineIds):
##        '-no docstring-'
##        #return LineAttr, ResultValue
##
##    def BulkSetAttr(self, LineIds, LineAttr):
##        '-no docstring-'
##        #return ResultValue
##
##    def BulkGetMemberIds(self, LineIds):
##        '-no docstring-'
##        #return MemberIds, ResultValue
##
##    def GetSurfaces(self, LineId):
##        '-no docstring-'
##        #return SurfaceIDs, ResultValue
##
##    def _get(self, LineId, Component):
##        '-no docstring-'
##        #return Value
##    def _set(self, LineId, Component, Value):
##        '-no docstring-'
##    StiffnessReduction = property(_get, _set, doc = _set.__doc__)
##
##    def BulkGetAttr_V161(self, LineIds):
##        '-no docstring-'
##        #return LineAttr, ResultValue
##
##    def BulkSetAttr_V161(self, LineIds, LineAttr):
##        '-no docstring-'
##        #return ResultValue
##


# values for enumeration 'EAttachmentsError'
attaeCannotAddAttachment = -100001
attaeCannotGetAttachment = -100002
attaeInvalidName = -100003
attaeInvalidOrEmptyItemData = -100004
attaeAttachmentNotFound = -100005
attaeItemIndexOutOfBounds = -100006
attaeCannotDeleteAttachment = -100007
attaeItemHasNoAttachment = -100008
attaeInvalidOrEmptyItemIndexes = -100009
EAttachmentsError = c_int # enum
IAxisVMPushoverHingeFunctionsEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Cleared'),
    DISPMETHOD([dispid(202)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]

# values for enumeration 'ELoadsUnitType'
lut_Force = 0
lut_Moment = 1
lut_Line_force = 2
lut_Line_force_moment = 3
lut_Surface_force = 4
lut_Temperature = 5
lut_Temperature_variation = 6
lut_Design_fire_load_density = 7
lut_Specific_heat = 8
lut_Section_factor = 9
lut_Fire_duration = 10
ELoadsUnitType = c_int # enum

# values for enumeration 'EReinforcementCheckError'
rceCOMError = -100001
rceLoadCaseIdIndexOutOfBounds = -100002
rceLoadCombinationIdIndexOutOfBounds = -100003
rceInvalidAnalysisType = -100004
rceCombinationTypeNotValidForCurrentNationalDesignCode = -100005
rceInvalidCombinationOfLoadCaseAndLoadLevel = -100006
rceInvalidCombinationOfLoadCombinationAndLoadLevel = -100007
EReinforcementCheckError = c_int # enum
IAxisVMTimeIncrementFunctionsEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Cleared'),
    DISPMETHOD([dispid(202)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]

# values for enumeration 'EDisplacementsError'
deNodeIndexOutOfBounds = -100001
deLoadCaseIndexOutofBounds = -100002
deLoadCombinationIndexOutofBounds = -100003
deCombinationTypeNotValidForCurrentNationalDesignCode = -100004
deCOMError = -100005
deNoNodesInTheModel = -100006
deNoLoadCasesInTheModel = -100007
deNoLoadCombinationsInTheModel = -100008
deSectionIndexOutOfBounds = -100009
deLineIndexOutOfBounds = -100010
deLineHasNoSections = -100011
deNoValidLinesInTheModel = -100012
deInvalidAnalysisType = -100013
deInvalidCombinationOfLoadCaseAndLoadLevel = -100014
deInvalidCombinationOfLoadCombinationAndLoadLevel = -100015
deNoResultBlocksInTheModel = -100016
deInvalidLineType = -100017
deMemberIndexOutOfBounds = -100018
deVirtualBeamIndexOutOfBounds = -100019
deVirtualBeamChainIndexOutOfBounds = -100020
deVirtualBeamSectionIndexOutOfBounds = -100021
EDisplacementsError = c_int # enum

# values for enumeration 'EDomainSupportType'
dstDomainElasticFoundation = 0
EDomainSupportType = c_int # enum
class AxisVMResultTreeIterator(CoClass):
    'AxisVMResultTreeIterator Object'
    _reg_clsid_ = GUID('{6667C1A9-BE6C-49F3-94C2-FE5E26255CDE}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
AxisVMResultTreeIterator._com_interfaces_ = [IAxisVMResultTreeIterator]

IAxisVMIncrementFunctions._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202)], HRESULT, 'Clear',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(203)], HRESULT, 'Add',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], _midlSAFEARRAY(RPoint2d), 'FunctionPoints' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205), 'propget'], HRESULT, 'Name',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(205), 'propput'], HRESULT, 'Name',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(206), 'propget'], HRESULT, 'PointCount',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(207)], HRESULT, 'DeletePoint',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'PointIndex' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208)], HRESULT, 'DeletePoints',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'StartPointIndex' ),
              ( ['in'], c_int, 'EndPointIndex' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209)], HRESULT, 'AddPoint',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RPoint2d), 'FunctionPoint' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(210)], HRESULT, 'GetPoints',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint2d)), 'FunctionPoints' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(211)], HRESULT, 'Modify',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], _midlSAFEARRAY(RPoint2d), 'FunctionPoints' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(212)], HRESULT, 'IndexOf',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(213)], HRESULT, 'AddFromFile',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'FileName' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(214)], HRESULT, 'SaveToFile',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'FileName' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(215)], HRESULT, 'Add_vb',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPoint2d)), 'FunctionPoints' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(216)], HRESULT, 'Modify_vb',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPoint2d)), 'FunctionPoints' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMIncrementFunctions implementation
##class IAxisVMIncrementFunctions_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def Clear(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def Add(self, Name, FunctionPoints):
##        '-no docstring-'
##        #return ResultValue
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def PointCount(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def DeletePoint(self, Index, PointIndex):
##        '-no docstring-'
##        #return ResultValue
##
##    def DeletePoints(self, Index, StartPointIndex, EndPointIndex):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddPoint(self, Index):
##        '-no docstring-'
##        #return FunctionPoint, ResultValue
##
##    def GetPoints(self, Index):
##        '-no docstring-'
##        #return FunctionPoints, ResultValue
##
##    def Modify(self, Index, FunctionPoints):
##        '-no docstring-'
##        #return ResultValue
##
##    def IndexOf(self, Name):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddFromFile(self, Name, FileName):
##        '-no docstring-'
##        #return ResultValue
##
##    def SaveToFile(self, Index, FileName):
##        '-no docstring-'
##        #return ResultValue
##
##    def Add_vb(self, Name):
##        '-no docstring-'
##        #return FunctionPoints, ResultValue
##
##    def Modify_vb(self, Index):
##        '-no docstring-'
##        #return FunctionPoints, ResultValue
##


# values for enumeration 'ERoofType'
rtUndefined = 0
rtFlat = 1
rtMonopitch = 2
rtDuopitch = 3
rtHip = 4
rtBarrel = 5
ERoofType = c_int # enum

# values for enumeration 'EShearCapacitiesError'
sceCOMError = -100001
sceLoadCaseIdIndexOutOfBounds = -100002
sceLoadCombinationIdIndexOutOfBounds = -100003
sceInvalidAnalysisType = -100004
sceCombinationTypeNotValidForCurrentNationalDesignCode = -100005
sceInvalidCombinationOfLoadCaseAndLoadLevel = -100006
sceInvalidCombinationOfLoadCombinationAndLoadLevel = -100007
EShearCapacitiesError = c_int # enum

# values for enumeration 'EAxisVMPlatform'
avmp32 = 0
avmp64 = 1
EAxisVMPlatform = c_int # enum
IAxisVMRigidBodies._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202)], HRESULT, 'Clear',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(203)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'DefineSelectedLinesAsRigidBody',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205)], HRESULT, 'AddSelectedLines',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'Add',
              ( ['in'], _midlSAFEARRAY(c_int), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'GetLines',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208)], HRESULT, 'RemoveLinesFromRigidBodies',
              ( ['in'], _midlSAFEARRAY(c_int), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209)], HRESULT, 'Add_vb',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(210)], HRESULT, 'RemoveLinesFromRigidBodies_vb',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMRigidBodies implementation
##class IAxisVMRigidBodies_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def Clear(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def DefineSelectedLinesAsRigidBody(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddSelectedLines(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def Add(self, LineIds):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetLines(self, Index):
##        '-no docstring-'
##        #return LineIds, ResultValue
##
##    def RemoveLinesFromRigidBodies(self, LineIds):
##        '-no docstring-'
##        #return ResultValue
##
##    def Add_vb(self):
##        '-no docstring-'
##        #return LineIds, ResultValue
##
##    def RemoveLinesFromRigidBodies_vb(self):
##        '-no docstring-'
##        #return LineIds, ResultValue
##


# values for enumeration 'EDisplayedEnvelopes'
de_Current = 0
de_Custom = 1
de_All = 2
EDisplayedEnvelopes = c_int # enum

# values for enumeration 'EStaticUnitType'
sut_Displacement = 0
sut_Rotation = 1
sut_Force = 2
sut_Moment = 3
sut_DistrForce = 4
sut_DistrMoment = 5
sut_DistrSurfaceForce = 6
sut_Stress = 7
EStaticUnitType = c_int # enum

# values for enumeration 'ELoadGroupType'
lgtPermanent = 0
lgtIncidental = 1
lgtExceptional = 2
lgtSeismic = 3
lgtPrestress = 4
lgtMoving = 5
lgtImperfection = 6
lgtSnow = 7
lgtSnowExcept = 8
lgtWind = 9
lgtManualSeismic = 10
lgtManualPreStress = 11
lgtFire = 12
ELoadGroupType = c_int # enum

# values for enumeration 'ESurfaceDomainDistributionType'
sddtSurface = 0
sddtProjected = 1
ESurfaceDomainDistributionType = c_int # enum
IAxisVMCrossSectionEditorEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]

# values for enumeration 'ELoadsError'
leInvalidLineType = -100001
leErrorAddingLoad = -100002
leErrorSettingLoad = -100003
leInvalidLoadType = -100004
leNotValidLineTypeForThisLoad = -100005
leErrorSettingLines = -100006
leErrorSettingPoly = -100007
leLoadCaseIndexOutOfBounds = -100008
leErrorSettingLoadCaseId = -100009
leDomainIndexOutOfBounds = -100010
leMemberIndexOutOfBounds = -100011
leThereAreNoSeismicStoreys = -100012
loeNotDynamicLoadCase = -100013
loeReferenceIndexOutOfBounds = -100014
loeErrorCreatingPushOverLoads = -100015
loeInvalidLoadCaseType = -100016
loeInvalidRoofType = -100017
loeLoadPanelIndexlListEmpty = -100018
loeNoPushOverLoadCase = -100019
loeSE1moduleNotAvailable = -100020
loeSE2moduleNotAvailable = -100021
loeDYNmoduleNotAvailable = -100022
loeSWGmoduleNotAvailable = -100023
loeNoSnowLoadCase = -100024
loeNoWindLoadCase = -100025
loeNoSeismicLoadCase = -100026
loePointIsOutOfLoadPanel = -100027
loeZeroLoadValueOnLoadPanel = -100028
loeDerivedSurfaceLoadsNotConverted = -100029
loeLoadComponentMustBeZero = -100030
loeInvalidLoad = -100031
loeNoMassLoadOnNode = -100032
ELoadsError = c_int # enum

# values for enumeration 'ESpringParError'
speNLEInconsistency = -100001
speNegativeValueMustBePositive = -100002
speNLPInconsistency = -100003
speWFOutOfRange = -100004
ESpringParError = c_int # enum
class RRCBeamDesignParameters_ITA(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{DD28DBBC-E8F6-417A-B029-BECBF6EC2264}')
class RRCBeamPlasticHinges(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{A00D9201-9373-4FA2-8AFE-D9E64A8A6F29}')
class RRCBeamPlasticHingeParams(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{9BFBD1EF-62A5-4DB6-BDB0-016CEC99F64F}')
RRCBeamPlasticHingeParams._fields_ = [
    ('Active', ELongBoolean),
    ('AppliedReinforcement', ELongBoolean),
    ('As_Bottom', c_double),
    ('As_Top', c_double),
    ('Depth_Bottom', c_double),
    ('Depth_Top', c_double),
]
assert sizeof(RRCBeamPlasticHingeParams) == 40, sizeof(RRCBeamPlasticHingeParams)
assert alignment(RRCBeamPlasticHingeParams) == 8, alignment(RRCBeamPlasticHingeParams)
RRCBeamPlasticHinges._fields_ = [
    ('EnablePlasticHinges', ELongBoolean),
    ('Hinge1', RRCBeamPlasticHingeParams),
    ('Hinge2', RRCBeamPlasticHingeParams),
    ('Pos_Hinge1', c_double),
    ('Pos_Hinge2', c_double),
    ('MinRebarDiameter', c_double),
    ('GammaRd', c_double),
]
assert sizeof(RRCBeamPlasticHinges) == 120, sizeof(RRCBeamPlasticHinges)
assert alignment(RRCBeamPlasticHinges) == 8, alignment(RRCBeamPlasticHinges)
RRCBeamDesignParameters_ITA._fields_ = [
    ('VariableAngleTrussMethod', ELongBoolean),
    ('Theta', c_double),
    ('fse', c_double),
    ('CrackWidthCheck', ELongBoolean),
    ('MaxCrackWidth_Top', c_double),
    ('MaxCrackWidth_Bottom', c_double),
    ('TakeConcTensileStrength', ELongBoolean),
    ('ShortTerm', ELongBoolean),
    ('Deflection_Beam_L_div', c_double),
    ('Deflection_Cantilever_L_div', c_double),
    ('SeismicZone', ERCBeam_EC_SIA_SeismicZone),
    ('PlasticHinges', RRCBeamPlasticHinges),
]
assert sizeof(RRCBeamDesignParameters_ITA) == 200, sizeof(RRCBeamDesignParameters_ITA)
assert alignment(RRCBeamDesignParameters_ITA) == 8, alignment(RRCBeamDesignParameters_ITA)

# values for enumeration 'ERCDesignUnitType'
rcdut_RebarDia = 0
rcdut_RebarDistance = 1
rcdut_ReinfArea = 2
rcdut_ShearReinfArea = 3
rcdut_Cracking = 4
rcdut_Eccentricity = 5
ERCDesignUnitType = c_int # enum

# values for enumeration 'ESeismicLimitState'
selsOther = 0
selsOperational = 1
selsDamage = 2
selsLifeSafety = 3
selsCollapse = 4
ESeismicLimitState = c_int # enum
IAxisVMTimberDesignMembersEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Cleared'),
    DISPMETHOD([dispid(202)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]

# values for enumeration 'ESurfaceCheck'
sch_CanBeChecked = 0
sch_CanNotBeChecked = 1
sch_ManipulatedAfterwards = 2
ESurfaceCheck = c_int # enum

# values for enumeration 'ECrackWidthsError'
cweCOMError = -100001
cweLoadCaseIdIndexOutOfBounds = -100002
cweLoadCombinationIdIndexOutOfBounds = -100003
cweInvalidAnalysisType = -100004
cweCombinationTypeNotValidForCurrentNationalDesignCode = -100005
cweInvalidCombinationOfLoadCaseAndLoadLevel = -100006
cweInvalidCombinationOfLoadCombinationAndLoadLevel = -100007
ECrackWidthsError = c_int # enum
class RSpectrumData_ITA(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{258CEDF9-5A99-49B7-9EE3-BA03E3B46A1F}')

# values for enumeration 'ESubsoilClass'
scA_Type1 = 1
scB_Type1 = 2
scC_Type1 = 3
scD_Type1 = 4
scE_Type1 = 5
scA_Type2 = 6
scB_Type2 = 7
scC_Type2 = 8
scD_Type2 = 9
scE_Type2 = 10
ESubsoilClass = c_int # enum

# values for enumeration 'ETopographicCategory'
tcT1 = 1
tcT2 = 2
tcT3 = 3
tcT4 = 4
ETopographicCategory = c_int # enum
RSpectrumData_ITA._fields_ = [
    ('SubsoilClass', ESubsoilClass),
    ('agr', c_double),
    ('F0', c_double),
    ('Tsc', c_double),
    ('TopographicCategory', ETopographicCategory),
    ('qx', c_double),
    ('qy', c_double),
]
assert sizeof(RSpectrumData_ITA) == 56, sizeof(RSpectrumData_ITA)
assert alignment(RSpectrumData_ITA) == 8, alignment(RSpectrumData_ITA)
class RRCBeamDesignParameters_EC(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{8E215811-1812-400B-908A-1FE20A17761E}')
RRCBeamDesignParameters_EC._fields_ = [
    ('VariableAngleTrussMethod', ELongBoolean),
    ('Theta', c_double),
    ('fse', c_double),
    ('ApplyMinimumCover', ELongBoolean),
    ('CrackWidthCheck', ELongBoolean),
    ('MaxCrackWidth_Top', c_double),
    ('MaxCrackWidth_Bottom', c_double),
    ('TakeConcTensileStrength', ELongBoolean),
    ('ShortTerm', ELongBoolean),
    ('Deflection_Beam_L_div', c_double),
    ('Deflection_Cantilever_L_div', c_double),
    ('TopSurface', EEnvironmentClass),
    ('BottomSurface', EEnvironmentClass),
    ('StructClass', EStructClass_EC),
    ('SeismicZone', ERCBeam_EC_SIA_SeismicZone),
    ('PlasticHinges', RRCBeamPlasticHinges),
]
assert sizeof(RRCBeamDesignParameters_EC) == 208, sizeof(RRCBeamDesignParameters_EC)
assert alignment(RRCBeamDesignParameters_EC) == 8, alignment(RRCBeamDesignParameters_EC)
class RRCBeamDesignParameters_SIA(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{96F7ED1A-C7CF-4935-8E9C-ADB18AE84838}')
RRCBeamDesignParameters_SIA._fields_ = [
    ('ApplyMinimumCover', ELongBoolean),
    ('TopSurface', EEnvironmentClass),
    ('BottomSurface', EEnvironmentClass),
    ('Deflection_Beam_L_div', c_double),
    ('Deflection_Cantilever_L_div', c_double),
    ('VariableAngleTrussMethod', ELongBoolean),
    ('Theta', c_double),
    ('CrackWidthCheck', ELongBoolean),
    ('MaxCrackWidth_Top', c_double),
    ('MaxCrackWidth_Bottom', c_double),
    ('TakeConcTensileStrength', ELongBoolean),
    ('SeismicZone', ERCBeam_EC_SIA_SeismicZone),
    ('PlasticHinges', RRCBeamPlasticHinges),
]
assert sizeof(RRCBeamDesignParameters_SIA) == 200, sizeof(RRCBeamDesignParameters_SIA)
assert alignment(RRCBeamDesignParameters_SIA) == 8, alignment(RRCBeamDesignParameters_SIA)
class IAxisVMApplicationEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMApplication Object'
    _iid_ = GUID('{B09422D5-D17D-4AED-8E7A-3C5613B95A0D}')
    _idlflags_ = []
    _methods_ = []
IAxisVMApplicationEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Loaded'),
    DISPMETHOD([dispid(202)], HRESULT, 'MainFormActivated'),
    DISPMETHOD([dispid(203)], HRESULT, 'MainFormDeactivated'),
    DISPMETHOD([dispid(204)], HRESULT, 'ClientAliveTestCall'),
    DISPMETHOD([dispid(205)], HRESULT, 'ModelLoaded',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(206)], HRESULT, 'ModelSaved',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], BSTR, 'OldFileName' ),
               ( ['in'], BSTR, 'NewFileName' )),
    DISPMETHOD([dispid(207)], HRESULT, 'ModelClosed',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], BSTR, 'FileName' )),
    DISPMETHOD([dispid(208)], HRESULT, 'NewModel',
               ( ['in'], c_int, 'Index' )),
]

# values for enumeration 'EGroupCombinationType'
gctOld = 0
gctExclusive = 1
gctAdditive = 2
EGroupCombinationType = c_int # enum

# values for enumeration 'EDisplacement'
d_eX = 1
d_eY = 2
d_eZ = 3
d_fX = 4
d_fY = 5
d_fZ = 6
d_eR = 7
d_fR = 8
EDisplacement = c_int # enum

# values for enumeration 'EDimensioningUnitType'
dut_Dim_Distance = 0
dut_Dim_Angle = 1
dut_Level_symobol = 2
dut_Graphics_size = 3
EDimensioningUnitType = c_int # enum
class RSeismicSensitivityResults(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{F6C249FC-35AD-4F2C-96BD-75EFDA0CD9DC}')
IAxisVMSeismicStoreys._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202)], HRESULT, 'Clear',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(203)], HRESULT, 'Add',
              ( ['in'], c_double, 'z' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'IndexOfZ',
              ( ['in'], c_double, 'z' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206), 'propget'], HRESULT, 'HasEmptyStorey',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(207)], HRESULT, 'DeleteEmptyStoreys',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208), 'propget'], HRESULT, 'Name',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(208), 'propput'], HRESULT, 'Name',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(209), 'propget'], HRESULT, 'LevelId',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(210), 'propget'], HRESULT, 'LevelZ',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(210), 'propput'], HRESULT, 'LevelZ',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(211), 'propget'], HRESULT, 'Height',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(212)], HRESULT, 'GetItem',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(BSTR), 'Name' ),
              ( ['out'], POINTER(c_int), 'LevelId' ),
              ( ['out'], POINTER(c_double), 'z' ),
              ( ['out'], POINTER(c_double), 'Height' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(213)], HRESULT, 'SetItem',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'z' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(214)], HRESULT, 'GetSeismicSensitivityResults',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RSeismicSensitivityResults), 'SeismicSensitivityResults' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMSeismicStoreys implementation
##class IAxisVMSeismicStoreys_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def Clear(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def Add(self, z, Name):
##        '-no docstring-'
##        #return ResultValue
##
##    def IndexOfZ(self, z):
##        '-no docstring-'
##        #return ResultValue
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def HasEmptyStorey(self):
##        '-no docstring-'
##        #return Value
##
##    def DeleteEmptyStoreys(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def LevelId(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    LevelZ = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Height(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def GetItem(self, Index):
##        '-no docstring-'
##        #return Name, LevelId, z, Height, ResultValue
##
##    def SetItem(self, Index, Name, z):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetSeismicSensitivityResults(self, Index):
##        '-no docstring-'
##        #return SeismicSensitivityResults, ResultValue
##


# values for enumeration 'ESteelDesignUnitType'
sdut_Buckling_factor = 0
sdut_Check_components = 1
ESteelDesignUnitType = c_int # enum

# values for enumeration 'ETimberDesignUnitType'
tdut_Check_components = 0
ETimberDesignUnitType = c_int # enum

# values for enumeration 'ECrackWidth'
cwBottom = 0
cwTop = 1
ECrackWidth = c_int # enum
class RSpectrumData_STAS(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{722B2C53-91CA-4940-A44B-72AC893ED083}')
RSpectrumData_STAS._fields_ = [
    ('SubsoilClass', ESubsoilClass),
    ('agr', c_double),
    ('beta0', c_double),
    ('TB', c_double),
    ('TC', c_double),
    ('TD', c_double),
    ('gammaI', c_double),
    ('qx', c_double),
    ('qy', c_double),
]
assert sizeof(RSpectrumData_STAS) == 72, sizeof(RSpectrumData_STAS)
assert alignment(RSpectrumData_STAS) == 8, alignment(RSpectrumData_STAS)
class RStructuralGridParams(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{7425E54F-81B2-4A00-BE5B-1507854F6864}')

# values for enumeration 'EStructuralGridVisibility'
sgvDefault = 0
sgvVisibleAtAllStories = 1
sgvOnlyIfActive = 2
EStructuralGridVisibility = c_int # enum
RStructuralGridParams._fields_ = [
    ('Plane', EStructuralGridPlane),
    ('WorkPlaneOrStoreyIndex', c_int),
    ('PlaneOffset', c_double),
    ('Visibility', EStructuralGridVisibility),
]
assert sizeof(RStructuralGridParams) == 24, sizeof(RStructuralGridParams)
assert alignment(RStructuralGridParams) == 8, alignment(RStructuralGridParams)
class RSpectrumData_SIA(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{63AE636C-0407-40A8-BD69-B0BAE4BD7CB2}')
RSpectrumData_SIA._fields_ = [
    ('SubsoilClass', ESubsoilClass),
    ('agr', c_double),
    ('S', c_double),
    ('TB', c_double),
    ('TC', c_double),
    ('TD', c_double),
    ('gammaI', c_double),
    ('qx', c_double),
    ('qy', c_double),
]
assert sizeof(RSpectrumData_SIA) == 72, sizeof(RSpectrumData_SIA)
assert alignment(RSpectrumData_SIA) == 8, alignment(RSpectrumData_SIA)

# values for enumeration 'ETimberDesignMemberError'
tdmeLineListIsEmpty = -100001
tdmeNotConnectingLines = -100002
tdmeInvalidNationalDesignCode = -100003
ETimberDesignMemberError = c_int # enum
class RSpectrumData_DIN(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{D79FF405-A20B-4F1A-B5E0-AC9769BEFA57}')
RSpectrumData_DIN._fields_ = [
    ('SubsoilClass', ESubsoilClass),
    ('agr', c_double),
    ('S', c_double),
    ('beta0', c_double),
    ('TB', c_double),
    ('TC', c_double),
    ('TD', c_double),
    ('gammaI', c_double),
    ('qx', c_double),
    ('qy', c_double),
]
assert sizeof(RSpectrumData_DIN) == 80, sizeof(RSpectrumData_DIN)
assert alignment(RSpectrumData_DIN) == 8, alignment(RSpectrumData_DIN)
class RXLAMSurfaceEfficiencies(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{5EC5BFA5-8790-43D0-B68B-0A6F4FB3A48A}')
class RXLAMSurfaceEfficiencyValues(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{A57884A9-A70D-49FD-93A3-62507FF533D6}')
RXLAMSurfaceEfficiencyValues._fields_ = [
    ('xsev_M_N_0', c_double),
    ('xsev_M_N_90', c_double),
    ('xsev_V_T', c_double),
    ('xsev_Vr_N', c_double),
    ('xsev_Max', c_double),
]
assert sizeof(RXLAMSurfaceEfficiencyValues) == 40, sizeof(RXLAMSurfaceEfficiencyValues)
assert alignment(RXLAMSurfaceEfficiencyValues) == 8, alignment(RXLAMSurfaceEfficiencyValues)
RXLAMSurfaceEfficiencies._fields_ = [
    ('ContourPointCount', c_int),
    ('ContourPoint1Id', c_int),
    ('ContourPoint2Id', c_int),
    ('ContourPoint3Id', c_int),
    ('ContourPoint4Id', c_int),
    ('ContourLine1Id', c_int),
    ('ContourLine2Id', c_int),
    ('ContourLine3Id', c_int),
    ('ContourLine4Id', c_int),
    ('xsevCenterPoint', RXLAMSurfaceEfficiencyValues),
    ('xsevContourPoint1', RXLAMSurfaceEfficiencyValues),
    ('xsevContourPoint2', RXLAMSurfaceEfficiencyValues),
    ('xsevContourPoint3', RXLAMSurfaceEfficiencyValues),
    ('xsevContourPoint4', RXLAMSurfaceEfficiencyValues),
    ('xsevContourLineMidPoint1', RXLAMSurfaceEfficiencyValues),
    ('xsevContourLineMidPoint2', RXLAMSurfaceEfficiencyValues),
    ('xsevContourLineMidPoint3', RXLAMSurfaceEfficiencyValues),
    ('xsevContourLineMidPoint4', RXLAMSurfaceEfficiencyValues),
]
assert sizeof(RXLAMSurfaceEfficiencies) == 400, sizeof(RXLAMSurfaceEfficiencies)
assert alignment(RXLAMSurfaceEfficiencies) == 8, alignment(RXLAMSurfaceEfficiencies)
class AxisVMApplication(CoClass):
    'AxisVMApplication Object'
    _reg_clsid_ = GUID('{E00B240E-1EA4-4EC7-8C4F-BD3C047B0190}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMApplication(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMApplication Object'
    _iid_ = GUID('{ED8E232C-87F3-496D-B52A-3068A0153482}')
    _idlflags_ = ['dual', 'oleautomation']
AxisVMApplication._com_interfaces_ = [IAxisVMApplication]
AxisVMApplication._outgoing_interfaces_ = [IAxisVMApplicationEvents]


# values for enumeration 'EVerticalDisplacement'
vd_w1 = 1
vd_w2 = 2
vd_w3 = 3
vd_wtot = 4
vd_wbij = 5
EVerticalDisplacement = c_int # enum

# values for enumeration 'ENL_ConsequenceClass'
nlcc_Invalid = 0
nlcc_CC1 = 1
nlcc_CC2 = 2
nlcc_CC3 = 3
ENL_ConsequenceClass = c_int # enum

# values for enumeration 'EFunctionsError'
fuePointIndexOutOfBounds = -100001
fueFailedToModifyFunction = -100002
fueFileExists = -100003
fueFailedToAddFromFile = -100004
fueNameAlreadyExists = -100005
fueInvalidFunction = -100006
EFunctionsError = c_int # enum

# values for enumeration 'ELine2dPointIndex'
piStart = 0
piEnd = 1
ELine2dPointIndex = c_int # enum
RDXFimportParameters._fields_ = [
    ('CoordinateUnit', ELengthUnit),
    ('MaxDeviation', c_double),
    ('GeometryCheckTolerance', c_double),
    ('CoordinateScaleFactor', c_double),
    ('ImportAs', EFileImportAs),
    ('ImportMode', EFileImportMode),
    ('BasePlane', EFileImportPlane),
    ('WorkPlaneIndex', c_int),
    ('PlaceOffset', RPoint3d),
    ('VisibleLayersOnly', ELongBoolean),
    ('ImportHatch', ELongBoolean),
    ('ActivateDXFonAllDrawings', ELongBoolean),
]
assert sizeof(RDXFimportParameters) == 88, sizeof(RDXFimportParameters)
assert alignment(RDXFimportParameters) == 8, alignment(RDXFimportParameters)
class RStructuralGridGenerationParams(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{C8ECD6F8-20D0-48AA-B200-29FB622EE42D}')

# values for enumeration 'EStructuralGridLabelType'
sgltLetters = 0
sgltNumbers = 1
EStructuralGridLabelType = c_int # enum
RStructuralGridGenerationParams._fields_ = [
    ('Offset', RPoint2d),
    ('RotDeg', c_double),
    ('Colour', c_int),
    ('Extension', c_double),
    ('LabelTypeX', EStructuralGridLabelType),
    ('GenerateInPositiveX', ELongBoolean),
    ('LabelTypeY', EStructuralGridLabelType),
    ('GenerateInPositiveY', ELongBoolean),
    ('ShowStructuralGridLineTitle', EShowStructuralGridLineTitle),
]
assert sizeof(RStructuralGridGenerationParams) == 64, sizeof(RStructuralGridGenerationParams)
assert alignment(RStructuralGridGenerationParams) == 8, alignment(RStructuralGridGenerationParams)
IAxisVMLayersEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Cleared'),
    DISPMETHOD([dispid(202)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]

# values for enumeration 'EVerticalDisplacementsError'
vdeNoNonlinearResults = 100001
vdeNoVerticalDisplacements = 100002
EVerticalDisplacementsError = c_int # enum
class IAxisVMVerticalDisplacements(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMVerticalDisplacements Object'
    _iid_ = GUID('{D265EA5F-B18E-4A3F-8069-989A5D7C9A22}')
    _idlflags_ = ['dual', 'oleautomation']
class RVerticalDisplacementValues(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{9264E75C-6124-4B4C-A7AB-9882059B9DD6}')
RVerticalDisplacementValues._fields_ = [
    ('w1', c_double),
    ('w2', c_double),
    ('w3', c_double),
    ('wtot', c_double),
    ('wbij', c_double),
]
assert sizeof(RVerticalDisplacementValues) == 40, sizeof(RVerticalDisplacementValues)
assert alignment(RVerticalDisplacementValues) == 8, alignment(RVerticalDisplacementValues)
IAxisVMVerticalDisplacements._methods_ = [
    COMMETHOD([dispid(201)], HRESULT, 'GetEnvelopeNodalDisplacement',
              ( ['in'], c_int, 'NodeId' ),
              ( ['in'], c_int, 'EnvelopeID' ),
              ( ['in'], EVerticalDisplacement, 'Component' ),
              ( ['in', 'out'], POINTER(RVerticalDisplacementValues), 'VerticalDisplacement' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(202)], HRESULT, 'GetAllEnvelopeNodalDisplacements',
              ( ['in'], c_int, 'EnvelopeID' ),
              ( ['in'], EVerticalDisplacement, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RVerticalDisplacementValues)), 'VerticalDisplacements' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(203), 'propget'], HRESULT, 'EnvelopeUID',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(203), 'propput'], HRESULT, 'EnvelopeUID',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(204), 'propget'], HRESULT, 'Component',
              ( ['out', 'retval'], POINTER(EVerticalDisplacement), 'Value' )),
    COMMETHOD([dispid(204), 'propput'], HRESULT, 'Component',
              ( ['in'], EVerticalDisplacement, 'Value' )),
    COMMETHOD([dispid(205)], HRESULT, 'EnvelopeNodalDisplacement',
              ( ['in'], c_int, 'NodeId' ),
              ( ['in', 'out'], POINTER(RVerticalDisplacementValues), 'VerticalDisplacement' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'AllEnvelopeNodalDisplacements',
              ( ['out'], POINTER(_midlSAFEARRAY(RVerticalDisplacementValues)), 'VerticalDisplacements' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMVerticalDisplacements implementation
##class IAxisVMVerticalDisplacements_Impl(object):
##    def GetEnvelopeNodalDisplacement(self, NodeId, EnvelopeID, Component):
##        '-no docstring-'
##        #return VerticalDisplacement, Combination, ResultValue
##
##    def GetAllEnvelopeNodalDisplacements(self, EnvelopeID, Component):
##        '-no docstring-'
##        #return VerticalDisplacements, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    EnvelopeUID = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Component = property(_get, _set, doc = _set.__doc__)
##
##    def EnvelopeNodalDisplacement(self, NodeId):
##        '-no docstring-'
##        #return VerticalDisplacement, Combination, ResultValue
##
##    def AllEnvelopeNodalDisplacements(self):
##        '-no docstring-'
##        #return VerticalDisplacements, ResultValue
##


# values for enumeration 'ELoadGroupsError'
lgePropertyNotValidForThisType = -100001
lgeNameExists = -100002
lgeInvalidType = -100003
ELoadGroupsError = c_int # enum
class AxisVMForces(CoClass):
    'AxisVMForces Object'
    _reg_clsid_ = GUID('{5DB08684-081B-44FA-BB27-644399FBA0B0}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMForcesEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMForces Object'
    _iid_ = GUID('{A756DC4D-4CBA-4DB4-B9A1-EFD056F4A585}')
    _idlflags_ = []
    _methods_ = []
AxisVMForces._com_interfaces_ = [IAxisVMForces]
AxisVMForces._outgoing_interfaces_ = [IAxisVMForcesEvents]

class IAxisVMTimberDesignResults(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMTimberDesignResults Object'
    _iid_ = GUID('{65EA5CAF-E443-49B6-8A4E-52C6A7A11675}')
    _idlflags_ = ['dual', 'oleautomation']
class RTimberDesignResult(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{299A6400-9105-4D4F-A44A-5CCD32F7092A}')
RTimberDesignResult._fields_ = [
    ('PosX', c_double),
    ('DesignValue', c_double),
    ('LimitValue', c_double),
]
assert sizeof(RTimberDesignResult) == 24, sizeof(RTimberDesignResult)
assert alignment(RTimberDesignResult) == 8, alignment(RTimberDesignResult)
IAxisVMTimberDesignResults._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202)], HRESULT, 'GetTimberDesignResultsByLoadCaseId',
              ( ['in'], c_int, 'TimberDesignMemberId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(c_int), 'ResultsPerSection' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RTimberDesignResult)), 'TimberDesignResults' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(203)], HRESULT, 'GetTimberDesignResultsByLoadCombinationId',
              ( ['in'], c_int, 'TimberDesignMemberId' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(c_int), 'ResultsPerSection' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RTimberDesignResult)), 'TimberDesignResults' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'GetEnvelopeTimberDesignResults',
              ( ['in'], c_int, 'TimberDesignMemberId' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(c_int), 'ResultsPerSection' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RTimberDesignResult)), 'TimberDesignResults' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205)], HRESULT, 'GetCriticalTimberDesignResults',
              ( ['in'], c_int, 'TimberDesignMemberId' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(c_int), 'ResultsPerSection' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RTimberDesignResult)), 'TimberDesignResults' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'GetAllTimberDesignResultsByLoadCaseId',
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(c_int), 'ResultsPerSection' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RTimberDesignResult)), 'TimberDesignResults' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'GetAllTimberDesignResultsByLoadCombinationId',
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(c_int), 'ResultsPerSection' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RTimberDesignResult)), 'TimberDesignResults' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208)], HRESULT, 'GetAllEnvelopeTimberDesignResults',
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(c_int), 'ResultsPerSection' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RTimberDesignResult)), 'TimberDesignResults' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209)], HRESULT, 'GetAllCriticalTimberDesignResults',
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(c_int), 'ResultsPerSection' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RTimberDesignResult)), 'TimberDesignResults' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(210), 'propget'], HRESULT, 'AnalysisType',
              ( ['out', 'retval'], POINTER(EAnalysisType), 'Value' )),
    COMMETHOD([dispid(210), 'propput'], HRESULT, 'AnalysisType',
              ( ['in'], EAnalysisType, 'Value' )),
    COMMETHOD([dispid(211), 'propget'], HRESULT, 'LoadCaseId',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(211), 'propput'], HRESULT, 'LoadCaseId',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(212), 'propget'], HRESULT, 'LoadCombinationId',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(212), 'propput'], HRESULT, 'LoadCombinationId',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(214), 'propget'], HRESULT, 'CombinationType',
              ( ['out', 'retval'], POINTER(ECombinationType), 'Value' )),
    COMMETHOD([dispid(214), 'propput'], HRESULT, 'CombinationType',
              ( ['in'], ECombinationType, 'Value' )),
    COMMETHOD([dispid(215), 'propget'], HRESULT, 'LoadLevel',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(215), 'propput'], HRESULT, 'LoadLevel',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(216)], HRESULT, 'TimberDesignResultsByLoadCaseId',
              ( ['in'], c_int, 'TimberDesignMemberId' ),
              ( ['out'], POINTER(c_int), 'ResultsPerSection' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RTimberDesignResult)), 'TimberDesignResults' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(217)], HRESULT, 'TimberDesignResultsByLoadCombinationId',
              ( ['in'], c_int, 'TimberDesignMemberId' ),
              ( ['out'], POINTER(c_int), 'ResultsPerSection' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RTimberDesignResult)), 'TimberDesignResults' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(218)], HRESULT, 'EnvelopeTimberDesignResults',
              ( ['in'], c_int, 'TimberDesignMemberId' ),
              ( ['out'], POINTER(c_int), 'ResultsPerSection' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RTimberDesignResult)), 'TimberDesignResults' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(219)], HRESULT, 'CriticalTimberDesignResults',
              ( ['in'], c_int, 'TimberDesignMemberId' ),
              ( ['out'], POINTER(c_int), 'ResultsPerSection' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RTimberDesignResult)), 'TimberDesignResults' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(220)], HRESULT, 'AllTimberDesignResultsByLoadCaseId',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(c_int), 'ResultsPerSection' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RTimberDesignResult)), 'TimberDesignResults' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(221)], HRESULT, 'AllTimberDesignResultsByLoadCombinationId',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(c_int), 'ResultsPerSection' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RTimberDesignResult)), 'TimberDesignResults' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(222)], HRESULT, 'AllEnvelopeTimberDesignResults',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(c_int), 'ResultsPerSection' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RTimberDesignResult)), 'TimberDesignResults' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(223)], HRESULT, 'AllCriticalTimberDesignResults',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(c_int), 'ResultsPerSection' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RTimberDesignResult)), 'TimberDesignResults' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(224)], HRESULT, 'GetEfficiencyAndCombination',
              ( ['in'], c_int, 'TimberDesignMemberId' ),
              ( ['in'], EResultType, 'ResultType' ),
              ( ['out'], POINTER(c_double), 'Efficiency' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(225), 'propget'], HRESULT, 'EnvelopeUID',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(225), 'propput'], HRESULT, 'EnvelopeUID',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(234)], HRESULT, 'GetEfficiencyAndCombinationByLoadCaseId',
              ( ['in'], c_int, 'TimberDesignMemberId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(c_double), 'Efficiency' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(235)], HRESULT, 'GetEfficiencyAndCombinationByLoadCombinationId',
              ( ['in'], c_int, 'TimberDesignMemberId' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(c_double), 'Efficiency' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(236)], HRESULT, 'GetEnvelopeEfficiencyAndCombination',
              ( ['in'], c_int, 'TimberDesignMemberId' ),
              ( ['in'], c_int, 'EnvelopeUID' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(c_double), 'Efficiency' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(237)], HRESULT, 'GetCriticalEfficiencyAndCombination',
              ( ['in'], c_int, 'TimberDesignMemberId' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(c_double), 'Efficiency' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(238)], HRESULT, 'GetEnvelopeTimberDesignResults2',
              ( ['in'], c_int, 'TimberDesignMemberId' ),
              ( ['in'], c_int, 'EnvelopeUID' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(c_int), 'ResultsPerSection' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RTimberDesignResult)), 'TimberDesignResults' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(239)], HRESULT, 'GetTimberDesignResultsByLoadCaseId_Abs',
              ( ['in'], c_int, 'TimberDesignMemberId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(c_int), 'ResultsPerSection' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RTimberDesignResult)), 'TimberDesignResults' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(240)], HRESULT, 'GetTimberDesignResultsByLoadCombinationId_Abs',
              ( ['in'], c_int, 'TimberDesignMemberId' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(c_int), 'ResultsPerSection' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RTimberDesignResult)), 'TimberDesignResults' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(241)], HRESULT, 'GetEnvelopeTimberDesignResults_Abs',
              ( ['in'], c_int, 'TimberDesignMemberId' ),
              ( ['in'], c_int, 'EnvelopeUID' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(c_int), 'ResultsPerSection' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RTimberDesignResult)), 'TimberDesignResults' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(242)], HRESULT, 'GetCriticalTimberDesignResults_Abs',
              ( ['in'], c_int, 'TimberDesignMemberId' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(c_int), 'ResultsPerSection' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RTimberDesignResult)), 'TimberDesignResults' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMTimberDesignResults implementation
##class IAxisVMTimberDesignResults_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def GetTimberDesignResultsByLoadCaseId(self, TimberDesignMemberId, LoadCaseId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return ResultsPerSection, TimberDesignResults, Combination, ResultValue
##
##    def GetTimberDesignResultsByLoadCombinationId(self, TimberDesignMemberId, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return ResultsPerSection, TimberDesignResults, Combination, ResultValue
##
##    def GetEnvelopeTimberDesignResults(self, TimberDesignMemberId, AnalysisType):
##        '-no docstring-'
##        #return ResultsPerSection, TimberDesignResults, Combination, ResultValue
##
##    def GetCriticalTimberDesignResults(self, TimberDesignMemberId, CombinationType, AnalysisType):
##        '-no docstring-'
##        #return ResultsPerSection, TimberDesignResults, Combination, ResultValue
##
##    def GetAllTimberDesignResultsByLoadCaseId(self, LoadCaseId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return SectionCounts, ResultsPerSection, TimberDesignResults, Combinations, ResultValue
##
##    def GetAllTimberDesignResultsByLoadCombinationId(self, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return SectionCounts, ResultsPerSection, TimberDesignResults, Combinations, ResultValue
##
##    def GetAllEnvelopeTimberDesignResults(self, AnalysisType):
##        '-no docstring-'
##        #return SectionCounts, ResultsPerSection, TimberDesignResults, Combinations, ResultValue
##
##    def GetAllCriticalTimberDesignResults(self, CombinationType, AnalysisType):
##        '-no docstring-'
##        #return SectionCounts, ResultsPerSection, TimberDesignResults, Combinations, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    AnalysisType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LoadCaseId = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LoadCombinationId = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    CombinationType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LoadLevel = property(_get, _set, doc = _set.__doc__)
##
##    def TimberDesignResultsByLoadCaseId(self, TimberDesignMemberId):
##        '-no docstring-'
##        #return ResultsPerSection, TimberDesignResults, Combination, ResultValue
##
##    def TimberDesignResultsByLoadCombinationId(self, TimberDesignMemberId):
##        '-no docstring-'
##        #return ResultsPerSection, TimberDesignResults, Combination, ResultValue
##
##    def EnvelopeTimberDesignResults(self, TimberDesignMemberId):
##        '-no docstring-'
##        #return ResultsPerSection, TimberDesignResults, Combination, ResultValue
##
##    def CriticalTimberDesignResults(self, TimberDesignMemberId):
##        '-no docstring-'
##        #return ResultsPerSection, TimberDesignResults, Combination, ResultValue
##
##    def AllTimberDesignResultsByLoadCaseId(self):
##        '-no docstring-'
##        #return SectionCounts, ResultsPerSection, TimberDesignResults, Combinations, ResultValue
##
##    def AllTimberDesignResultsByLoadCombinationId(self):
##        '-no docstring-'
##        #return SectionCounts, ResultsPerSection, TimberDesignResults, Combinations, ResultValue
##
##    def AllEnvelopeTimberDesignResults(self):
##        '-no docstring-'
##        #return SectionCounts, ResultsPerSection, TimberDesignResults, Combinations, ResultValue
##
##    def AllCriticalTimberDesignResults(self):
##        '-no docstring-'
##        #return SectionCounts, ResultsPerSection, TimberDesignResults, Combinations, ResultValue
##
##    def GetEfficiencyAndCombination(self, TimberDesignMemberId, ResultType):
##        '-no docstring-'
##        #return Efficiency, Combination, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    EnvelopeUID = property(_get, _set, doc = _set.__doc__)
##
##    def GetEfficiencyAndCombinationByLoadCaseId(self, TimberDesignMemberId, LoadCaseId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Efficiency, Combination, ResultValue
##
##    def GetEfficiencyAndCombinationByLoadCombinationId(self, TimberDesignMemberId, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Efficiency, Combination, ResultValue
##
##    def GetEnvelopeEfficiencyAndCombination(self, TimberDesignMemberId, EnvelopeUID, AnalysisType):
##        '-no docstring-'
##        #return Efficiency, Combination, ResultValue
##
##    def GetCriticalEfficiencyAndCombination(self, TimberDesignMemberId, CombinationType, AnalysisType):
##        '-no docstring-'
##        #return Efficiency, Combination, ResultValue
##
##    def GetEnvelopeTimberDesignResults2(self, TimberDesignMemberId, EnvelopeUID, AnalysisType):
##        '-no docstring-'
##        #return ResultsPerSection, TimberDesignResults, Combination, ResultValue
##
##    def GetTimberDesignResultsByLoadCaseId_Abs(self, TimberDesignMemberId, LoadCaseId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return ResultsPerSection, TimberDesignResults, Combination, ResultValue
##
##    def GetTimberDesignResultsByLoadCombinationId_Abs(self, TimberDesignMemberId, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return ResultsPerSection, TimberDesignResults, Combination, ResultValue
##
##    def GetEnvelopeTimberDesignResults_Abs(self, TimberDesignMemberId, EnvelopeUID, AnalysisType):
##        '-no docstring-'
##        #return ResultsPerSection, TimberDesignResults, Combination, ResultValue
##
##    def GetCriticalTimberDesignResults_Abs(self, TimberDesignMemberId, CombinationType, AnalysisType):
##        '-no docstring-'
##        #return ResultsPerSection, TimberDesignResults, Combination, ResultValue
##


# values for enumeration 'EWindowState'
wsMaximized = 0
wsMinimized = 1
wsNormal = 2
EWindowState = c_int # enum
class AxisVMVerticalDisplacements(CoClass):
    'AxisVMVerticalDisplacements Object'
    _reg_clsid_ = GUID('{2AA63602-B75C-4AC3-8E79-277E6C2CAAE6}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMVerticalDisplacementsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMDisplacements Object'
    _iid_ = GUID('{227ED940-CBA6-43F6-A8FB-7DFF2E68ACBF}')
    _idlflags_ = []
    _methods_ = []
AxisVMVerticalDisplacements._com_interfaces_ = [IAxisVMVerticalDisplacements]
AxisVMVerticalDisplacements._outgoing_interfaces_ = [IAxisVMVerticalDisplacementsEvents]


# values for enumeration 'ESelectMode'
smSelect = 0
smDeselect = 1
smInvert = 2
ESelectMode = c_int # enum
class RPartItem(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{D0481179-D350-4596-93F0-EAF92FF7F6EB}')
RPartItem._fields_ = [
    ('ItemType', EPartItemType),
    ('Id', c_int),
]
assert sizeof(RPartItem) == 8, sizeof(RPartItem)
assert alignment(RPartItem) == 4, alignment(RPartItem)

# values for enumeration 'EArchitecturalLineElementType'
aletColumn = 0
aletBeam = 1
aletDiagonal = 2
EArchitecturalLineElementType = c_int # enum

# values for enumeration 'EDomainElementType'
detMembrane = 0
detPlate = 1
detShell = 2
EDomainElementType = c_int # enum

# values for enumeration 'EArchitecturalDomainElementType'
adetWall = 0
adetSlab = 1
adetRamp = 2
EArchitecturalDomainElementType = c_int # enum
class REnabledLogicalParts(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{E97A7B9B-27FC-478D-8A68-3529EEECA4F2}')
IAxisVMLogicalParts._methods_ = [
    COMMETHOD([dispid(201)], HRESULT, 'GetBy_Material',
              ( ['in'], c_int, 'MaterialId' ),
              ( ['in'], ELongBoolean, 'SelectParts' ),
              ( ['in'], ESelectMode, 'SelectMode' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPartItem)), 'PartItems' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202)], HRESULT, 'GetBy_CrossSection',
              ( ['in'], c_int, 'CrossSectionID' ),
              ( ['in'], c_int, 'CrossSectionId2' ),
              ( ['in'], ELongBoolean, 'SelectParts' ),
              ( ['in'], ESelectMode, 'SelectMode' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPartItem)), 'PartItems' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(203)], HRESULT, 'GetBy_CrossSection_LineType',
              ( ['in'], c_int, 'CrossSectionID' ),
              ( ['in'], c_int, 'CrossSectionId2' ),
              ( ['in'], ELineType, 'LineType' ),
              ( ['in'], ELongBoolean, 'SelectParts' ),
              ( ['in'], ESelectMode, 'SelectMode' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPartItem)), 'PartItems' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(204)], HRESULT, 'GetBy_CrossSection_ArchitecturalLineElementType',
              ( ['in'], c_int, 'CrossSectionID' ),
              ( ['in'], c_int, 'CrossSectionId2' ),
              ( ['in'], EArchitecturalLineElementType, 'ArchitecturalLineElementType' ),
              ( ['in'], ELongBoolean, 'SelectParts' ),
              ( ['in'], ESelectMode, 'SelectMode' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPartItem)), 'PartItems' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(205)], HRESULT, 'GetBy_CrossSection_LineType_Storey',
              ( ['in'], c_int, 'CrossSectionID' ),
              ( ['in'], c_int, 'CrossSectionId2' ),
              ( ['in'], ELineType, 'LineType' ),
              ( ['in'], c_int, 'StoreyId' ),
              ( ['in'], ELongBoolean, 'SelectParts' ),
              ( ['in'], ESelectMode, 'SelectMode' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPartItem)), 'PartItems' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(206)], HRESULT, 'GetBy_CrossSection_ArchitecturalLineElementType_Storey',
              ( ['in'], c_int, 'CrossSectionID' ),
              ( ['in'], c_int, 'CrossSectionId2' ),
              ( ['in'], EArchitecturalLineElementType, 'ArchitecturalLineElementType' ),
              ( ['in'], c_int, 'StoreyId' ),
              ( ['in'], ELongBoolean, 'SelectParts' ),
              ( ['in'], ESelectMode, 'SelectMode' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPartItem)), 'PartItems' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(207)], HRESULT, 'GetBy_DomainElementType_Thickness',
              ( ['in'], EDomainElementType, 'DomainElementType' ),
              ( ['in'], c_double, 'Thickness' ),
              ( ['in'], ELongBoolean, 'SelectParts' ),
              ( ['in'], ESelectMode, 'SelectMode' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPartItem)), 'PartItems' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(208)], HRESULT, 'GetBy_ArchitecturalDomainElementType_Thickness',
              ( ['in'], EArchitecturalDomainElementType, 'ArchitecturalDomainElementType' ),
              ( ['in'], c_double, 'Thickness' ),
              ( ['in'], ELongBoolean, 'SelectParts' ),
              ( ['in'], ESelectMode, 'SelectMode' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPartItem)), 'PartItems' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(209)], HRESULT, 'GetBy_DomainElementType_Thickness_Storey',
              ( ['in'], EDomainElementType, 'DomainElementType' ),
              ( ['in'], c_double, 'Thickness' ),
              ( ['in'], c_int, 'StoreyId' ),
              ( ['in'], ELongBoolean, 'SelectParts' ),
              ( ['in'], ESelectMode, 'SelectMode' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPartItem)), 'PartItems' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(210)], HRESULT, 'GetBy_ArchitecturalDomainElementType_Thickness_Storey',
              ( ['in'], EArchitecturalDomainElementType, 'ArchitecturalDomainElementType' ),
              ( ['in'], c_double, 'Thickness' ),
              ( ['in'], c_int, 'StoreyId' ),
              ( ['in'], ELongBoolean, 'SelectParts' ),
              ( ['in'], ESelectMode, 'SelectMode' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPartItem)), 'PartItems' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(211)], HRESULT, 'GetEnabledLogicalParts',
              ( ['in', 'out'], POINTER(REnabledLogicalParts), 'EnabledLogicalParts' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(212)], HRESULT, 'SetEnabledLogicalParts',
              ( ['in', 'out'], POINTER(REnabledLogicalParts), 'EnabledLogicalParts' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(213)], HRESULT, 'SaveDefaultEnabledLogicalParts',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(214), 'propget'], HRESULT, 'IsLogicalPart',
              ( ['in'], c_int, 'PartUID' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(215)], HRESULT, 'GetBy_StructuralGridLineUID',
              ( ['in'], c_int, 'StructuralGridLineUID' ),
              ( ['in'], ELongBoolean, 'SelectParts' ),
              ( ['in'], ESelectMode, 'SelectMode' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPartItem)), 'PartItems' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(216)], HRESULT, 'GetPartItemsByUID',
              ( ['in'], c_int, 'PartUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPartItem)), 'PartItems' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(217), 'propget'], HRESULT, 'Name',
              ( ['in'], c_int, 'PartUID' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(218), 'propget'], HRESULT, 'FullName',
              ( ['in'], c_int, 'PartUID' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
]
################################################################
## code template for IAxisVMLogicalParts implementation
##class IAxisVMLogicalParts_Impl(object):
##    def GetBy_Material(self, MaterialId, SelectParts, SelectMode):
##        '-no docstring-'
##        #return PartItems, Value
##
##    def GetBy_CrossSection(self, CrossSectionID, CrossSectionId2, SelectParts, SelectMode):
##        '-no docstring-'
##        #return PartItems, Value
##
##    def GetBy_CrossSection_LineType(self, CrossSectionID, CrossSectionId2, LineType, SelectParts, SelectMode):
##        '-no docstring-'
##        #return PartItems, Value
##
##    def GetBy_CrossSection_ArchitecturalLineElementType(self, CrossSectionID, CrossSectionId2, ArchitecturalLineElementType, SelectParts, SelectMode):
##        '-no docstring-'
##        #return PartItems, Value
##
##    def GetBy_CrossSection_LineType_Storey(self, CrossSectionID, CrossSectionId2, LineType, StoreyId, SelectParts, SelectMode):
##        '-no docstring-'
##        #return PartItems, Value
##
##    def GetBy_CrossSection_ArchitecturalLineElementType_Storey(self, CrossSectionID, CrossSectionId2, ArchitecturalLineElementType, StoreyId, SelectParts, SelectMode):
##        '-no docstring-'
##        #return PartItems, Value
##
##    def GetBy_DomainElementType_Thickness(self, DomainElementType, Thickness, SelectParts, SelectMode):
##        '-no docstring-'
##        #return PartItems, Value
##
##    def GetBy_ArchitecturalDomainElementType_Thickness(self, ArchitecturalDomainElementType, Thickness, SelectParts, SelectMode):
##        '-no docstring-'
##        #return PartItems, Value
##
##    def GetBy_DomainElementType_Thickness_Storey(self, DomainElementType, Thickness, StoreyId, SelectParts, SelectMode):
##        '-no docstring-'
##        #return PartItems, Value
##
##    def GetBy_ArchitecturalDomainElementType_Thickness_Storey(self, ArchitecturalDomainElementType, Thickness, StoreyId, SelectParts, SelectMode):
##        '-no docstring-'
##        #return PartItems, Value
##
##    def GetEnabledLogicalParts(self):
##        '-no docstring-'
##        #return EnabledLogicalParts, Value
##
##    def SetEnabledLogicalParts(self):
##        '-no docstring-'
##        #return EnabledLogicalParts, Value
##
##    def SaveDefaultEnabledLogicalParts(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def IsLogicalPart(self, PartUID):
##        '-no docstring-'
##        #return Value
##
##    def GetBy_StructuralGridLineUID(self, StructuralGridLineUID, SelectParts, SelectMode):
##        '-no docstring-'
##        #return PartItems, Value
##
##    def GetPartItemsByUID(self, PartUID):
##        '-no docstring-'
##        #return PartItems, Value
##
##    @property
##    def Name(self, PartUID):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def FullName(self, PartUID):
##        '-no docstring-'
##        #return Value
##


# values for enumeration 'ELineSupportsError'
lseSectionIdOutOfBounds = -100001
lsePadFootingNotDefined = -100002
lseMaterialIndexOutOfBounds = -100003
ELineSupportsError = c_int # enum
IAxisVMMembersSupportsEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Cleared'),
    DISPMETHOD([dispid(202)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]
IAxisVMReferencesEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Cleared'),
    DISPMETHOD([dispid(202)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]
class Library(object):
    'AxisVM Library'
    name = 'AxisVM'
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)


# values for enumeration 'ESurfacesError'
seLineCountCanBeOnly3Or4 = -100001
seCannotModify = -100002
seCOMError = -100003
seReinforcementParametersNotExists = -100004
seConcreteIdIndexOutOfBounds = -100005
seRebarSteelGradeIdIndexOutOfBounds = -100006
seThicknessMustBePositive = -100007
seRebarPosMustBePositive = -100008
sePhiMustBePositiveOrZero = -100009
seNuMustBePositiveOrZero = -100010
seTauaMustBePositiveOrZero = -100011
seAggregateSizeMustBePositive = -100012
sePropertyNotValidForThisSurfaceType = -100013
sefseMustBePositive = -100014
seParametersRecordNotValidForUsedDesignCode = -100015
seConcreteCoverMustBePositive = -100016
seRebarDiameterMustBePositive = -100017
seEnvironmentClassNotValidForUsedDesignCode = -100018
seAlphaVRdmaxIsInvalid = -100019
seThetaVRdmaxIsInvalid = -100020
seShrinkageEpsMustBePositive = -100021
seRCNonlinearSurfTypeIsInvalid = -100022
seAlphaAngleIsInvalid = -100023
seBetaAngleIsInvalid = -100024
se_k_torsionIsInvalid = -100025
se_k_shearIsInvalid = -100026
se_k_bendingIsInvalid = -100027
seLimitingCrackWidthIsInvalid = -100028
seMaterialIndex = -100029
seSurfaceReferenceIndexOutOfBounds = -100030
seInvalidType = -100031
seElasticFoundationNegative = -100032
seInvalidCharacteristics = -100033
seInvalidStiffnessReduction = -100034
seStiffnessReductionNotAllowed = -100035
seInvalidStiffnessReductionMat = -100036
seInvalidReinfParamForTrapezoidal = -100037
ESurfacesError = c_int # enum
class AxisVMObjectCreator(CoClass):
    'AxisVMObjectCreator Object'
    _reg_clsid_ = GUID('{FF291CB0-5AEF-40A8-A6A3-5A140C81EE4C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
AxisVMObjectCreator._com_interfaces_ = [IAxisVMObjectCreator]


# values for enumeration 'EForcesError'
feLineIndexOutOfBounds = -100001
feLoadCaseIndexOutofBounds = -100002
feLoadCombinationIndexOutofBounds = -100003
feNotValidLineType = -100004
feSectionIndexOutOfBounds = -100005
feCombinationTypeNotValidForCurrentNationalDesignCode = -100006
feCOMError = -100007
feLineHasNoSections = -100008
feNoValidLinesInTheModel = -100009
feSurfaceIndexOutOfBounds = -100010
feInvalidSurfaceVertexType = -100011
feInvalidAnalysisType = -100012
feInvalidCombinationOfLoadCaseAndLoadLevel = -100013
feInvalidCombinationOfLoadCombinationAndLoadLevel = -100014
feNoResultBlocksInTheModel = -100015
feNodeIndexOutOfBounds = -100016
feNoSurfacesInTheModel = -100017
feNodalSupportIndexOutOfBounds = -100018
feLineSupportIndexOutOfBounds = -100019
feNoNodalSupportsInTheModel = -100020
feNoLineSupportsInTheModel = -100021
feSurfaceSupportIndexOutOfBounds = -100022
feNoSurfaceSupportsInTheModel = -100023
feInvalidLineType = -100024
feNoSpringsInTheModel = -100025
feNoGapsInTheModel = -100026
feEdgeConnectionIndexOutOfBounds = -100027
feNoEdgeConnectionsInTheModel = -100028
feLinkElementIndexOutOfBounds = -100029
feNoLinkElementsInTheModel = -100030
feMemberIndexOutOfBounds = -100031
feInvalidEnvelopeUID = -100032
feZeroValidLineNumber = -100033
feVirtualBeamIndexOutOfBounds = -100034
feVirtualBeamChainIndexOutOfBounds = -100035
feVirtualBeamSectionIndexOutOfBounds = -100036
feWindowIdNotValid = -100037
feMembersSupportIndexOutOfBounds = -100038
EForcesError = c_int # enum
class RReinforcementCheck(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{393D0074-617A-41D1-A98F-A593AADBA806}')
RReinforcementCheck._fields_ = [
    ('ContourPointCount', c_int),
    ('ContourPoint1Id', c_int),
    ('ContourPoint2Id', c_int),
    ('ContourPoint3Id', c_int),
    ('ContourPoint4Id', c_int),
    ('ContourLine1Id', c_int),
    ('ContourLine2Id', c_int),
    ('ContourLine3Id', c_int),
    ('ContourLine4Id', c_int),
    ('rcvCenterPoint', RReinforcementCheckValues),
    ('rcvContourPoint1', RReinforcementCheckValues),
    ('rcvContourPoint2', RReinforcementCheckValues),
    ('rcvContourPoint3', RReinforcementCheckValues),
    ('rcvContourPoint4', RReinforcementCheckValues),
    ('rcvContourLineMidPoint1', RReinforcementCheckValues),
    ('rcvContourLineMidPoint2', RReinforcementCheckValues),
    ('rcvContourLineMidPoint3', RReinforcementCheckValues),
    ('rcvContourLineMidPoint4', RReinforcementCheckValues),
]
assert sizeof(RReinforcementCheck) == 1264, sizeof(RReinforcementCheck)
assert alignment(RReinforcementCheck) == 8, alignment(RReinforcementCheck)
IAxisVMSteelDesignMembersEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Cleared'),
    DISPMETHOD([dispid(202)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]

# values for enumeration 'EMainFormTab'
mftGeometry = 0
mftElements = 1
mftLoads = 2
mftMesh = 3
mftStatic = 4
mftVibration = 5
mftDynamic = 6
mftBuckling = 7
mftRCDesign = 8
mftSteelDesign = 9
mftTimberDesign = 10
EMainFormTab = c_int # enum

# values for enumeration 'EApplicationClose'
acEnableShowWarning = 0
acEnableNoWarning = 1
acDisable = 2
EApplicationClose = c_int # enum
class AxisVMCatalog(CoClass):
    'AxisVMCatalog Object'
    _reg_clsid_ = GUID('{5A61B8D4-F302-436D-A085-2501F8D29822}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
AxisVMCatalog._com_interfaces_ = [IAxisVMCatalog]

class RWindowPosition(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{25483130-286E-43EF-808B-4FDDBBA9BBC4}')
RWindowPosition._fields_ = [
    ('Top', c_int),
    ('Left', c_int),
    ('Width', c_int),
    ('Height', c_int),
]
assert sizeof(RWindowPosition) == 16, sizeof(RWindowPosition)
assert alignment(RWindowPosition) == 4, alignment(RWindowPosition)

# values for enumeration 'EClientAliveTest'
catNone = 0
catShowWarning = 1
catExitApplication = 2
EClientAliveTest = c_int # enum
IAxisVMApplication._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Visible',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(201), 'propput'], HRESULT, 'Visible',
              ( ['in'], ELongBoolean, 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'Loaded',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(203), 'propget'], HRESULT, 'Models',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMModels)), 'Value' )),
    COMMETHOD([dispid(204), 'propget'], HRESULT, 'AskCloseOnLastReleased',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(204), 'propput'], HRESULT, 'AskCloseOnLastReleased',
              ( ['in'], ELongBoolean, 'Value' )),
    COMMETHOD([dispid(205), 'propget'], HRESULT, 'LibraryMajorVersion',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(206), 'propget'], HRESULT, 'Version',
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(207), 'propget'], HRESULT, 'LibraryMinorVersion',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(208), 'propget'], HRESULT, 'CloseOnLastReleased',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(208), 'propput'], HRESULT, 'CloseOnLastReleased',
              ( ['in'], ELongBoolean, 'Value' )),
    COMMETHOD([dispid(209), 'propget'], HRESULT, 'MainFormTab',
              ( ['out', 'retval'], POINTER(EMainFormTab), 'Value' )),
    COMMETHOD([dispid(209), 'propput'], HRESULT, 'MainFormTab',
              ( ['in'], EMainFormTab, 'Value' )),
    COMMETHOD([dispid(210)], HRESULT, 'MessageDlg',
              ( ['in'], BSTR, 'Title' ),
              ( ['in'], BSTR, 'Message' ),
              ( ['in'], EMessageDialogType, 'DlgType' ),
              ( ['in'], c_ulong, 'Buttons' ),
              ( ['out', 'retval'], POINTER(EMessageDialogButton), 'ResultValue' )),
    COMMETHOD([dispid(211), 'propget'], HRESULT, 'ApplicationClose',
              ( ['out', 'retval'], POINTER(EApplicationClose), 'Value' )),
    COMMETHOD([dispid(211), 'propput'], HRESULT, 'ApplicationClose',
              ( ['in'], EApplicationClose, 'Value' )),
    COMMETHOD([dispid(212), 'propget'], HRESULT, 'Catalog',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMCatalog)), 'Value' )),
    COMMETHOD([dispid(213), 'propget'], HRESULT, 'MainFormWindowState',
              ( ['out', 'retval'], POINTER(EWindowState), 'Value' )),
    COMMETHOD([dispid(213), 'propput'], HRESULT, 'MainFormWindowState',
              ( ['in'], EWindowState, 'Value' )),
    COMMETHOD([dispid(214), 'propget'], HRESULT, 'MainFormWindowPosition',
              ( ['out', 'retval'], POINTER(RWindowPosition), 'Value' )),
    COMMETHOD([dispid(214), 'propput'], HRESULT, 'MainFormWindowPosition',
              ( ['in'], RWindowPosition, 'Value' )),
    COMMETHOD([dispid(215), 'propget'], HRESULT, 'MainFormWindowLeft',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(215), 'propput'], HRESULT, 'MainFormWindowLeft',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(216), 'propget'], HRESULT, 'MainFormWindowTop',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(216), 'propput'], HRESULT, 'MainFormWindowTop',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(217), 'propget'], HRESULT, 'MainFormWindowWidth',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(217), 'propput'], HRESULT, 'MainFormWindowWidth',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(218), 'propget'], HRESULT, 'MainFormWindowHeight',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(218), 'propput'], HRESULT, 'MainFormWindowHeight',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(219)], HRESULT, 'BringToFront',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(220), 'propget'], HRESULT, 'ModalLevel',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(221), 'propget'], HRESULT, 'ObjectCreator',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMObjectCreator)), 'Value' )),
    COMMETHOD([dispid(222)], HRESULT, 'ChangeUnitSystem',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(223), 'propget'], HRESULT, 'CrossSectionEditor',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMCrossSectionEditor)), 'Value' )),
    COMMETHOD([dispid(224), 'propget'], HRESULT, 'ClientAliveTest',
              ( ['out', 'retval'], POINTER(EClientAliveTest), 'Value' )),
    COMMETHOD([dispid(224), 'propput'], HRESULT, 'ClientAliveTest',
              ( ['in'], EClientAliveTest, 'Value' )),
    COMMETHOD([dispid(225), 'propget'], HRESULT, 'ClientAliveTestIntervalSec',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(225), 'propput'], HRESULT, 'ClientAliveTestIntervalSec',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(226)], HRESULT, 'MessageDlg_vb',
              ( ['in'], BSTR, 'Title' ),
              ( ['in'], BSTR, 'Message' ),
              ( ['in'], EMessageDialogType, 'DlgType' ),
              ( ['in'], c_int, 'Buttons' ),
              ( ['out', 'retval'], POINTER(EMessageDialogButton), 'ResultValue' )),
    COMMETHOD([dispid(227), 'propget'], HRESULT, 'FullExePath',
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(228)], HRESULT, 'EnableMainForm'),
    COMMETHOD([dispid(229)], HRESULT, 'DisableMainForm'),
    COMMETHOD([dispid(230), 'propget'], HRESULT, 'AxisVMPlatform',
              ( ['out', 'retval'], POINTER(EAxisVMPlatform), 'Value' )),
    COMMETHOD([dispid(231), 'propget'], HRESULT, 'AskSaveOnLastReleased',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(231), 'propput'], HRESULT, 'AskSaveOnLastReleased',
              ( ['in'], ELongBoolean, 'Value' )),
    COMMETHOD([dispid(232)], HRESULT, 'CustomFunction',
              ( ['in'], c_int, 'CustomID' ),
              ( ['in'], BSTR, 'jsonIN' ),
              ( ['out'], POINTER(BSTR), 'jsonOUT' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(233)], HRESULT, 'Quit',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(234), 'propget'], HRESULT, 'COMclientsLoaded',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(235)], HRESULT, 'UnLoadCOMclients',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(236)], HRESULT, 'HandleMessages'),
    COMMETHOD([dispid(237)], HRESULT, 'InitThread'),
]
################################################################
## code template for IAxisVMApplication implementation
##class IAxisVMApplication_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Visible = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Loaded(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Models(self):
##        '-no docstring-'
##        #return Value
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    AskCloseOnLastReleased = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def LibraryMajorVersion(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Version(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def LibraryMinorVersion(self):
##        '-no docstring-'
##        #return Value
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    CloseOnLastReleased = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    MainFormTab = property(_get, _set, doc = _set.__doc__)
##
##    def MessageDlg(self, Title, Message, DlgType, Buttons):
##        '-no docstring-'
##        #return ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    ApplicationClose = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Catalog(self):
##        '-no docstring-'
##        #return Value
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    MainFormWindowState = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    MainFormWindowPosition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    MainFormWindowLeft = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    MainFormWindowTop = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    MainFormWindowWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    MainFormWindowHeight = property(_get, _set, doc = _set.__doc__)
##
##    def BringToFront(self):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def ModalLevel(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def ObjectCreator(self):
##        '-no docstring-'
##        #return Value
##
##    def ChangeUnitSystem(self, Name):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def CrossSectionEditor(self):
##        '-no docstring-'
##        #return Value
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    ClientAliveTest = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    ClientAliveTestIntervalSec = property(_get, _set, doc = _set.__doc__)
##
##    def MessageDlg_vb(self, Title, Message, DlgType, Buttons):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def FullExePath(self):
##        '-no docstring-'
##        #return Value
##
##    def EnableMainForm(self):
##        '-no docstring-'
##        #return 
##
##    def DisableMainForm(self):
##        '-no docstring-'
##        #return 
##
##    @property
##    def AxisVMPlatform(self):
##        '-no docstring-'
##        #return Value
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    AskSaveOnLastReleased = property(_get, _set, doc = _set.__doc__)
##
##    def CustomFunction(self, CustomID, jsonIN):
##        '-no docstring-'
##        #return jsonOUT, ResultValue
##
##    def Quit(self):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def COMclientsLoaded(self):
##        '-no docstring-'
##        #return Value
##
##    def UnLoadCOMclients(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def HandleMessages(self):
##        '-no docstring-'
##        #return 
##
##    def InitThread(self):
##        '-no docstring-'
##        #return 
##

class IAxisVMDisplacementsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMDisplacements Object'
    _iid_ = GUID('{5D931F23-992D-4F54-ACCF-6D8A34525B78}')
    _idlflags_ = []
    _methods_ = []
IAxisVMDisplacementsEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrCode' )),
]
class AxisVMPolygon2dList(CoClass):
    'AxisVMPolygon2dList Object'
    _reg_clsid_ = GUID('{AFF8FB96-571A-496C-89C6-809D22A00CAD}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
AxisVMPolygon2dList._com_interfaces_ = [IAxisVMPolygon2dList]

class RCrossSectionUserParams(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{947CD768-BBE2-4822-8C97-21BFCDF96E79}')
class RDoubleWedgedI(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{7B4BCD84-CA5F-401D-BF4C-A6A89662EBCD}')
RDoubleWedgedI._fields_ = [
    ('Process', ECrossSectionProcess),
    ('h1', c_double),
    ('b1', c_double),
    ('tw1', c_double),
    ('tf1', c_double),
    ('R', c_double),
    ('h2', c_double),
    ('b2', c_double),
    ('tw2', c_double),
    ('tf2', c_double),
    ('h3', c_double),
    ('b3', c_double),
    ('tw3', c_double),
    ('tf3', c_double),
]
assert sizeof(RDoubleWedgedI) == 112, sizeof(RDoubleWedgedI)
assert alignment(RDoubleWedgedI) == 8, alignment(RDoubleWedgedI)
class RCrossSectionHSQ(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{31C4B442-673F-4D29-B27C-3CB367A53A76}')
RCrossSectionHSQ._fields_ = [
    ('h', c_double),
    ('b', c_double),
    ('b1', c_double),
    ('tw', c_double),
    ('tf1', c_double),
    ('tf', c_double),
]
assert sizeof(RCrossSectionHSQ) == 48, sizeof(RCrossSectionHSQ)
assert alignment(RCrossSectionHSQ) == 8, alignment(RCrossSectionHSQ)
class RCrossSectionHSQA(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{06686FD3-9F72-4A57-B4ED-C77D2216BC9E}')
RCrossSectionHSQA._fields_ = [
    ('h', c_double),
    ('b', c_double),
    ('b1', c_double),
    ('tw', c_double),
    ('tf1', c_double),
    ('tf', c_double),
    ('C', c_double),
]
assert sizeof(RCrossSectionHSQA) == 56, sizeof(RCrossSectionHSQA)
assert alignment(RCrossSectionHSQA) == 8, alignment(RCrossSectionHSQA)
class RCrossSection2IX(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{AE97C9F8-D676-456A-BB0B-29D0B02F74B2}')
RCrossSection2IX._fields_ = [
    ('h', c_double),
    ('b', c_double),
    ('tw', c_double),
    ('tf', c_double),
    ('R', c_double),
    ('Process', ECrossSectionProcess),
]
assert sizeof(RCrossSection2IX) == 48, sizeof(RCrossSection2IX)
assert alignment(RCrossSection2IX) == 8, alignment(RCrossSection2IX)
class RCrossSectionComposite(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{4E17755D-F62C-4524-874B-75A2CCB03D86}')
RCrossSectionComposite._fields_ = [
    ('CrossSectionIndex', c_int),
    ('OuterMaterialIndex', c_int),
    ('CrossSectionMaterialIndex', c_int),
    ('CrossSectionFillMaterialIndex', c_int),
    ('CrossSectionAlign', ECompositeInnerCSalign),
]
assert sizeof(RCrossSectionComposite) == 20, sizeof(RCrossSectionComposite)
assert alignment(RCrossSectionComposite) == 4, alignment(RCrossSectionComposite)
class RCrossSectionIFB(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{EF4DFDAC-A9EE-499D-A3D6-5CA215E2E3A0}')
RCrossSectionIFB._fields_ = [
    ('h', c_double),
    ('b', c_double),
    ('tw', c_double),
    ('tf', c_double),
    ('R', c_double),
    ('b2', c_double),
    ('v2', c_double),
    ('Process', ECrossSectionProcess),
]
assert sizeof(RCrossSectionIFB) == 64, sizeof(RCrossSectionIFB)
assert alignment(RCrossSectionIFB) == 8, alignment(RCrossSectionIFB)
class RDoubleLClosed(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{0B039AC7-7B7C-4F25-AF14-29EA8174A8B1}')
RDoubleLClosed._fields_ = [
    ('h', c_double),
    ('b', c_double),
    ('tw', c_double),
    ('tf', c_double),
    ('R', c_double),
    ('a', c_double),
    ('Process', ECrossSectionProcess),
]
assert sizeof(RDoubleLClosed) == 56, sizeof(RDoubleLClosed)
assert alignment(RDoubleLClosed) == 8, alignment(RDoubleLClosed)
IAxisVMCrossSections._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(AxisVMCrossSection)), 'Value' )),
    COMMETHOD([dispid(203)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'IndexOf',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205)], HRESULT, 'AddCustom',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], POINTER(AxisVMPolygon2dList), 'ShapePolygonList' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'ReplaceWithCustom',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], POINTER(AxisVMPolygon2dList), 'ShapePolygonList' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'AddRectangular',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'b' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208)], HRESULT, 'ReplaceWithRectangular',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'b' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209)], HRESULT, 'AddI',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'b' ),
              ( ['in'], c_double, 'tw' ),
              ( ['in'], c_double, 'tf' ),
              ( ['in'], c_double, 'R' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(210)], HRESULT, 'ReplaceWithI',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'b' ),
              ( ['in'], c_double, 'tw' ),
              ( ['in'], c_double, 'tf' ),
              ( ['in'], c_double, 'R' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(211)], HRESULT, 'AddDoubleI',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'b' ),
              ( ['in'], c_double, 'tw' ),
              ( ['in'], c_double, 'tf' ),
              ( ['in'], c_double, 'R' ),
              ( ['in'], c_double, 'a' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(212)], HRESULT, 'ReplaceWithDoubleI',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'b' ),
              ( ['in'], c_double, 'tw' ),
              ( ['in'], c_double, 'tf' ),
              ( ['in'], c_double, 'R' ),
              ( ['in'], c_double, 'a' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(213)], HRESULT, 'AddWedgedI',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'h1' ),
              ( ['in'], c_double, 'b1' ),
              ( ['in'], c_double, 'tw1' ),
              ( ['in'], c_double, 'tf1' ),
              ( ['in'], c_double, 'h2' ),
              ( ['in'], c_double, 'b2' ),
              ( ['in'], c_double, 'tw2' ),
              ( ['in'], c_double, 'tf2' ),
              ( ['in'], c_double, 'R' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(214)], HRESULT, 'ReplaceWithWedgedI',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'h1' ),
              ( ['in'], c_double, 'b1' ),
              ( ['in'], c_double, 'tw1' ),
              ( ['in'], c_double, 'tf1' ),
              ( ['in'], c_double, 'h2' ),
              ( ['in'], c_double, 'b2' ),
              ( ['in'], c_double, 'tw2' ),
              ( ['in'], c_double, 'tf2' ),
              ( ['in'], c_double, 'R' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(215)], HRESULT, 'AddAsymmetricI',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'b1' ),
              ( ['in'], c_double, 'tw' ),
              ( ['in'], c_double, 'tf1' ),
              ( ['in'], c_double, 'b2' ),
              ( ['in'], c_double, 'tf2' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(216)], HRESULT, 'ReplaceWithAsymmetricI',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'b1' ),
              ( ['in'], c_double, 'tw' ),
              ( ['in'], c_double, 'tf1' ),
              ( ['in'], c_double, 'b2' ),
              ( ['in'], c_double, 'tf2' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(217)], HRESULT, 'AddPipe',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'd' ),
              ( ['in'], c_double, 't' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(218)], HRESULT, 'ReplaceWithPipe',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'd' ),
              ( ['in'], c_double, 't' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(219)], HRESULT, 'AddRegularPolygon',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'N' ),
              ( ['in'], c_double, 'Rshape' ),
              ( ['in'], c_double, 't' ),
              ( ['in'], c_double, 'R' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(220)], HRESULT, 'ReplaceWithRegularPolygon',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'N' ),
              ( ['in'], c_double, 'Rshape' ),
              ( ['in'], c_double, 't' ),
              ( ['in'], c_double, 'R' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(221)], HRESULT, 'AddBox',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'b' ),
              ( ['in'], c_double, 'tw' ),
              ( ['in'], c_double, 'tf' ),
              ( ['in'], c_double, 'R' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(222)], HRESULT, 'ReplaceWithBox',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'b' ),
              ( ['in'], c_double, 'tw' ),
              ( ['in'], c_double, 'tf' ),
              ( ['in'], c_double, 'R' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(223)], HRESULT, 'AddDoubleIBox',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'b' ),
              ( ['in'], c_double, 'b1' ),
              ( ['in'], c_double, 'tw' ),
              ( ['in'], c_double, 'tf' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(224)], HRESULT, 'ReplaceWithDoubleIBox',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'b' ),
              ( ['in'], c_double, 'b1' ),
              ( ['in'], c_double, 'tw' ),
              ( ['in'], c_double, 'tf' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(225)], HRESULT, 'AddU',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'b' ),
              ( ['in'], c_double, 'tw' ),
              ( ['in'], c_double, 'tf' ),
              ( ['in'], c_double, 'R' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(226)], HRESULT, 'ReplaceWithU',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'b' ),
              ( ['in'], c_double, 'tw' ),
              ( ['in'], c_double, 'tf' ),
              ( ['in'], c_double, 'R' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(227)], HRESULT, 'AddDoubleU',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'b' ),
              ( ['in'], c_double, 'tw' ),
              ( ['in'], c_double, 'tf' ),
              ( ['in'], c_double, 'R' ),
              ( ['in'], c_double, 'a' ),
              ( ['in'], ECrossSectionDoubleUType, 'OpenedClosed' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(228)], HRESULT, 'ReplaceWithDoubleU',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'b' ),
              ( ['in'], c_double, 'tw' ),
              ( ['in'], c_double, 'tf' ),
              ( ['in'], c_double, 'R' ),
              ( ['in'], c_double, 'a' ),
              ( ['in'], ECrossSectionDoubleUType, 'OpenedClosed' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(229)], HRESULT, 'AddL',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'b' ),
              ( ['in'], c_double, 'tw' ),
              ( ['in'], c_double, 'tf' ),
              ( ['in'], c_double, 'r1' ),
              ( ['in'], c_double, 'r2' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(230)], HRESULT, 'ReplaceWithL',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'b' ),
              ( ['in'], c_double, 'tw' ),
              ( ['in'], c_double, 'tf' ),
              ( ['in'], c_double, 'r1' ),
              ( ['in'], c_double, 'r2' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(231)], HRESULT, 'AddDoubleL',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'b' ),
              ( ['in'], c_double, 'tw' ),
              ( ['in'], c_double, 'tf' ),
              ( ['in'], c_double, 'r1' ),
              ( ['in'], c_double, 'r2' ),
              ( ['in'], c_double, 'a' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(232)], HRESULT, 'ReplaceWithDoubleL',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'b' ),
              ( ['in'], c_double, 'tw' ),
              ( ['in'], c_double, 'tf' ),
              ( ['in'], c_double, 'r1' ),
              ( ['in'], c_double, 'r2' ),
              ( ['in'], c_double, 'a' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(233)], HRESULT, 'AddDoubleLFlange',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'b' ),
              ( ['in'], c_double, 'tw' ),
              ( ['in'], c_double, 'tf' ),
              ( ['in'], c_double, 'r1' ),
              ( ['in'], c_double, 'r2' ),
              ( ['in'], c_double, 'a' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(234)], HRESULT, 'ReplaceWithDoubleLFlange',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'b' ),
              ( ['in'], c_double, 'tw' ),
              ( ['in'], c_double, 'tf' ),
              ( ['in'], c_double, 'r1' ),
              ( ['in'], c_double, 'r2' ),
              ( ['in'], c_double, 'a' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(235)], HRESULT, 'AddT',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'b' ),
              ( ['in'], c_double, 'tw' ),
              ( ['in'], c_double, 'tf' ),
              ( ['in'], c_double, 'R' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(236)], HRESULT, 'ReplaceWithT',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'b' ),
              ( ['in'], c_double, 'tw' ),
              ( ['in'], c_double, 'tf' ),
              ( ['in'], c_double, 'R' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(237)], HRESULT, 'AddReverseT',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'b' ),
              ( ['in'], c_double, 'tw' ),
              ( ['in'], c_double, 'tf' ),
              ( ['in'], c_double, 'R' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(238)], HRESULT, 'ReplaceWithReverseT',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'b' ),
              ( ['in'], c_double, 'tw' ),
              ( ['in'], c_double, 'tf' ),
              ( ['in'], c_double, 'R' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(239)], HRESULT, 'AddZ',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'b' ),
              ( ['in'], c_double, 'tw' ),
              ( ['in'], c_double, 'tf' ),
              ( ['in'], c_double, 'R' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(240)], HRESULT, 'ReplaceWithZ',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'b' ),
              ( ['in'], c_double, 'tw' ),
              ( ['in'], c_double, 'tf' ),
              ( ['in'], c_double, 'R' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(241)], HRESULT, 'AddC',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'b' ),
              ( ['in'], c_double, 'E' ),
              ( ['in'], c_double, 'tw' ),
              ( ['in'], c_double, 'R' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(242)], HRESULT, 'ReplaceWithC',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'b' ),
              ( ['in'], c_double, 'E' ),
              ( ['in'], c_double, 'tw' ),
              ( ['in'], c_double, 'R' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(243)], HRESULT, 'AddCircle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'd' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(244)], HRESULT, 'ReplaceWithCircle',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'd' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(245)], HRESULT, 'Clear'),
    COMMETHOD([dispid(246)], HRESULT, 'Merge',
              ( ['in'], c_int, 'IntoItem' ),
              ( ['in'], c_int, 'FromItem' ),
              ( ['in'], c_double, 'OffsetY' ),
              ( ['in'], c_double, 'OffsetZ' ),
              ( ['in'], c_double, 'Rotation' ),
              ( ['in'], ELongBoolean, 'MergeIntoNew' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(247)], HRESULT, 'AddFromCatalog',
              ( ['in'], ECrossSectionShape, 'CrossSectionShape' ),
              ( ['in'], BSTR, 'CrossSectionName' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(248)], HRESULT, 'AddFromCatalogFile',
              ( ['in'], BSTR, 'CatalogFileName' ),
              ( ['in'], BSTR, 'CrossSectionName' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(249)], HRESULT, 'AddFromDialog',
              ( ['in'], c_int, 'CrossSectionBasicTypes' ),
              ( ['in'], c_int, 'CrossSectionShapes' ),
              ( ['in'], _midlSAFEARRAY(BSTR), 'CatalogFileNames' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(250)], HRESULT, 'AddFromEditor',
              ( ['in'], c_int, 'CrossSectionBasicTypes' ),
              ( ['in'], c_int, 'CrossSectionShapes' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(251)], HRESULT, 'Edit',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'CrossSectionBasicTypes' ),
              ( ['in'], c_int, 'CrossSectionShapes' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(252)], HRESULT, 'AddCustomWithUserParams',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], POINTER(AxisVMPolygon2dList), 'ShapePolygonList' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['in', 'out'], POINTER(RCrossSectionUserParams), 'CrossSectionUserParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(253)], HRESULT, 'ReplaceWithCustomAndUserParams',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], POINTER(AxisVMPolygon2dList), 'ShapePolygonList' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['in', 'out'], POINTER(RCrossSectionUserParams), 'CrossSectionUserParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(254)], HRESULT, 'AddCustomWithUserParamsAsArray',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], POINTER(AxisVMPolygon2dList), 'ShapePolygonList' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['in'], c_int, 'lParam' ),
              ( ['in'], _midlSAFEARRAY(c_double), 'CrossSectionUserParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(255)], HRESULT, 'ReplaceWithCustomAndUserParamsAsArray',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], POINTER(AxisVMPolygon2dList), 'ShapePolygonList' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['in'], c_int, 'lParam' ),
              ( ['in'], _midlSAFEARRAY(c_double), 'CrossSectionUserParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(256)], HRESULT, 'AddCustomWithUserParamsAsByteArray',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], POINTER(AxisVMPolygon2dList), 'ShapePolygonList' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['in'], _midlSAFEARRAY(c_ubyte), 'CrossSectionUserParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(257)], HRESULT, 'ReplaceWithCustomAndUserParamsAsByteArray',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], POINTER(AxisVMPolygon2dList), 'ShapePolygonList' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['in'], _midlSAFEARRAY(c_ubyte), 'CrossSectionUserParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(258)], HRESULT, 'ReplaceFromCatalog',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], ECrossSectionShape, 'CrossSectionShape' ),
              ( ['in'], BSTR, 'CrossSectionName' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(259)], HRESULT, 'ReplaceFromCatalogFile',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'CatalogFileName' ),
              ( ['in'], BSTR, 'CrossSectionName' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(260)], HRESULT, 'AddFromDialog_vb',
              ( ['in'], c_int, 'CrossSectionBasicTypes' ),
              ( ['in'], c_int, 'CrossSectionShapes' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CatalogFileNames' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(261)], HRESULT, 'AddCustomWithUserParamsAsArray_vb',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], POINTER(AxisVMPolygon2dList), 'ShapePolygonList' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['in'], c_int, 'lParam' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CrossSectionUserParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(262)], HRESULT, 'ReplaceWithCustomAndUserParamsAsArray_vb',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], POINTER(AxisVMPolygon2dList), 'ShapePolygonList' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['in'], c_int, 'lParam' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CrossSectionUserParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(263)], HRESULT, 'AddCustomWithUserParamsAsByteArray_vb',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], POINTER(AxisVMPolygon2dList), 'ShapePolygonList' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'CrossSectionUserParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(264)], HRESULT, 'ReplaceWithCustomAndUserParamsAsByteArray_vb',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], POINTER(AxisVMPolygon2dList), 'ShapePolygonList' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'CrossSectionUserParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(265), 'propget'], HRESULT, 'UID',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(266), 'propget'], HRESULT, 'IndexOfUID',
              ( ['in'], c_int, 'UID' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(267)], HRESULT, 'AddRectangularRounded',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'b' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'r1' ),
              ( ['in'], c_double, 'r2' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(268)], HRESULT, 'ReplaceWithRectangularRounded',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'b' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'r1' ),
              ( ['in'], c_double, 'r2' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(269)], HRESULT, 'AddRectangularHollow',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'b' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'tf' ),
              ( ['in'], c_double, 'tw' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(270)], HRESULT, 'ReplaceWithRectangularHollow',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'b' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'tf' ),
              ( ['in'], c_double, 'tw' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(271)], HRESULT, 'AddIHaunched',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'bt' ),
              ( ['in'], c_double, 'bw' ),
              ( ['in'], c_double, 'bb' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'ht' ),
              ( ['in'], c_double, 'hth' ),
              ( ['in'], c_double, 'hbh' ),
              ( ['in'], c_double, 'hb' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(272)], HRESULT, 'ReplaceWithIHaunched',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'bt' ),
              ( ['in'], c_double, 'bw' ),
              ( ['in'], c_double, 'bb' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'ht' ),
              ( ['in'], c_double, 'hth' ),
              ( ['in'], c_double, 'hbh' ),
              ( ['in'], c_double, 'hb' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(273)], HRESULT, 'AddTWallHaunched',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'bt' ),
              ( ['in'], c_double, 'bb' ),
              ( ['in'], c_double, 'bw' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'ht' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(274)], HRESULT, 'ReplaceWithTWallHaunched',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'bt' ),
              ( ['in'], c_double, 'bb' ),
              ( ['in'], c_double, 'bw' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'ht' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(275)], HRESULT, 'AddTTopHaunched',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'bt' ),
              ( ['in'], c_double, 'bw' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'ht' ),
              ( ['in'], c_double, 'hth' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(276)], HRESULT, 'ReplaceWithTTopHaunched',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'bt' ),
              ( ['in'], c_double, 'bw' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'ht' ),
              ( ['in'], c_double, 'hth' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(277)], HRESULT, 'AddCircleHollow',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'd' ),
              ( ['in'], c_double, 't' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(278)], HRESULT, 'ReplaceWithCircleHollow',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'd' ),
              ( ['in'], c_double, 't' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(279)], HRESULT, 'AddTrapezoid',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'bt' ),
              ( ['in'], c_double, 'bb' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(280)], HRESULT, 'ReplaceWithTrapezoid',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'bt' ),
              ( ['in'], c_double, 'bb' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(281)], HRESULT, 'GetDimensionsOfC',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(c_double), 'h' ),
              ( ['out'], POINTER(c_double), 'b' ),
              ( ['out'], POINTER(c_double), 'E' ),
              ( ['out'], POINTER(c_double), 'tw' ),
              ( ['out'], POINTER(c_double), 'R' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(282)], HRESULT, 'GetDimensionsOfIHaunched',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(c_double), 'bt' ),
              ( ['out'], POINTER(c_double), 'bw' ),
              ( ['out'], POINTER(c_double), 'bb' ),
              ( ['out'], POINTER(c_double), 'h' ),
              ( ['out'], POINTER(c_double), 'ht' ),
              ( ['out'], POINTER(c_double), 'hth' ),
              ( ['out'], POINTER(c_double), 'hbh' ),
              ( ['out'], POINTER(c_double), 'hb' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(283)], HRESULT, 'GetDimensionsOfTWallHaunched',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(c_double), 'bt' ),
              ( ['out'], POINTER(c_double), 'bb' ),
              ( ['out'], POINTER(c_double), 'bw' ),
              ( ['out'], POINTER(c_double), 'h' ),
              ( ['out'], POINTER(c_double), 'ht' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(284)], HRESULT, 'GetDimensionsOfTTopHaunched',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(c_double), 'bt' ),
              ( ['out'], POINTER(c_double), 'bw' ),
              ( ['out'], POINTER(c_double), 'h' ),
              ( ['out'], POINTER(c_double), 'ht' ),
              ( ['out'], POINTER(c_double), 'hth' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(285)], HRESULT, 'SaveToMetaFile',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'FileName' ),
              ( ['in'], BSTR, 'CreatedBy' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], c_int, 'Width' ),
              ( ['in'], c_int, 'Height' ),
              ( ['in'], c_int, 'Options' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(286)], HRESULT, 'SaveToBitmapFile',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'FileName' ),
              ( ['in'], c_int, 'Width' ),
              ( ['in'], c_int, 'Height' ),
              ( ['in'], c_int, 'Options' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(287)], HRESULT, 'AddCompositePipe',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'Diameter' ),
              ( ['in'], c_double, 't' ),
              ( ['in'], c_int, 'OutterMaterial_ID' ),
              ( ['in'], c_int, 'InnerMaterial_ID' ),
              ( ['in'], c_int, 'CS_MaterialID' ),
              ( ['in'], c_int, 'CS_ID' ),
              ( ['in'], ECompositeInnerCSalign, 'InnerCSalign' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(288)], HRESULT, 'AddCompositeBox',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'b' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 't_flange' ),
              ( ['in'], c_double, 't_web' ),
              ( ['in'], c_double, 'R' ),
              ( ['in'], c_int, 'OutterMaterial_ID' ),
              ( ['in'], c_int, 'InnerMaterial_ID' ),
              ( ['in'], c_int, 'CS_MaterialID' ),
              ( ['in'], c_int, 'CS_ID' ),
              ( ['in'], ECompositeInnerCSalign, 'InnerCSalign' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(289)], HRESULT, 'AddCompositeRound',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'd' ),
              ( ['in'], c_int, 'InnerMaterial_ID' ),
              ( ['in'], c_int, 'CS_MaterialID' ),
              ( ['in'], c_int, 'CS_ID' ),
              ( ['in'], ECompositeInnerCSalign, 'InnerCSalign' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(290)], HRESULT, 'AddCompositeRectangle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'b' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_int, 'InnerMaterial_ID' ),
              ( ['in'], c_int, 'CS_MaterialID' ),
              ( ['in'], c_int, 'CS_ID' ),
              ( ['in'], ECompositeInnerCSalign, 'InnerCSalign' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(291)], HRESULT, 'AddFromDialogEx',
              ( ['in'], c_int, 'CrossSectionBasicTypes' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'CrossSectionShapes' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CatalogFileNames' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(292)], HRESULT, 'EditEx',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'CrossSectionBasicTypes' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'CrossSectionShapes' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(293)], HRESULT, 'ReplaceFromCatalogEx',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], ECrossSectionShapeEx, 'CrossSectionShape' ),
              ( ['in'], BSTR, 'CrossSectionName' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(294)], HRESULT, 'AddDoubleWedgedI',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], RDoubleWedgedI, 'Params' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(295)], HRESULT, 'ReplaceWithDoubleWedgedI',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], RDoubleWedgedI, 'Params' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(296)], HRESULT, 'AddHSQ',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], RCrossSectionHSQ, 'Params' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(297)], HRESULT, 'ReplaceWithHSQ',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], RCrossSectionHSQ, 'Params' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(298)], HRESULT, 'AddHSQA',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], RCrossSectionHSQA, 'Params' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(299)], HRESULT, 'ReplaceWithHSQA',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], RCrossSectionHSQA, 'Params' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(300)], HRESULT, 'AddFromCatalog_V161',
              ( ['in'], ECrossSectionShapeEx, 'CrossSectionShape' ),
              ( ['in'], BSTR, 'CrossSectionName' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(301)], HRESULT, 'Add2IX',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], RCrossSection2IX, 'Params' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(302)], HRESULT, 'ReplaceWith2IX',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], RCrossSection2IX, 'Params' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(303)], HRESULT, 'AddComposite2IX',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], RCrossSectionComposite, 'Params' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(304)], HRESULT, 'ReplaceWithComposite2IX',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], RCrossSectionComposite, 'Params' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(305)], HRESULT, 'AddIFB',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], RCrossSectionIFB, 'Params' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(306)], HRESULT, 'ReplaceWithIFB',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], RCrossSectionIFB, 'Params' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(307)], HRESULT, 'AddSFB',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], RCrossSectionSFB, 'Params' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(308)], HRESULT, 'ReplaceWithSFB',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], RCrossSectionSFB, 'Params' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(309)], HRESULT, 'AddDoubleLClosed',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], RDoubleLClosed, 'Params' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(310)], HRESULT, 'ReplaceWithDoubleLClosed',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], RDoubleLClosed, 'Params' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(311)], HRESULT, 'AddFromCatalogTable',
              ( ['in'], c_int, 'TableID' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMCrossSections implementation
##class IAxisVMCrossSections_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Item(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def IndexOf(self, Name):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddCustom(self, Name, ShapePolygonList, Process):
##        '-no docstring-'
##        #return ResultValue
##
##    def ReplaceWithCustom(self, Index, Name, ShapePolygonList, Process):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddRectangular(self, Name, b, h, Process):
##        '-no docstring-'
##        #return ResultValue
##
##    def ReplaceWithRectangular(self, Index, Name, b, h, Process):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddI(self, Name, h, b, tw, tf, R, Process):
##        '-no docstring-'
##        #return ResultValue
##
##    def ReplaceWithI(self, Index, Name, h, b, tw, tf, R, Process):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddDoubleI(self, Name, h, b, tw, tf, R, a, Process):
##        '-no docstring-'
##        #return ResultValue
##
##    def ReplaceWithDoubleI(self, Index, Name, h, b, tw, tf, R, a, Process):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddWedgedI(self, Name, h1, b1, tw1, tf1, h2, b2, tw2, tf2, R, Process):
##        '-no docstring-'
##        #return ResultValue
##
##    def ReplaceWithWedgedI(self, Index, Name, h1, b1, tw1, tf1, h2, b2, tw2, tf2, R, Process):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddAsymmetricI(self, Name, h, b1, tw, tf1, b2, tf2):
##        '-no docstring-'
##        #return ResultValue
##
##    def ReplaceWithAsymmetricI(self, Index, Name, h, b1, tw, tf1, b2, tf2):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddPipe(self, Name, d, t, Process):
##        '-no docstring-'
##        #return ResultValue
##
##    def ReplaceWithPipe(self, Index, Name, d, t, Process):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddRegularPolygon(self, Name, N, Rshape, t, R, Process):
##        '-no docstring-'
##        #return ResultValue
##
##    def ReplaceWithRegularPolygon(self, Index, Name, N, Rshape, t, R, Process):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddBox(self, Name, h, b, tw, tf, R, Process):
##        '-no docstring-'
##        #return ResultValue
##
##    def ReplaceWithBox(self, Index, Name, h, b, tw, tf, R, Process):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddDoubleIBox(self, Name, h, b, b1, tw, tf):
##        '-no docstring-'
##        #return ResultValue
##
##    def ReplaceWithDoubleIBox(self, Index, Name, h, b, b1, tw, tf):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddU(self, Name, h, b, tw, tf, R, Process):
##        '-no docstring-'
##        #return ResultValue
##
##    def ReplaceWithU(self, Index, Name, h, b, tw, tf, R, Process):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddDoubleU(self, Name, h, b, tw, tf, R, a, OpenedClosed, Process):
##        '-no docstring-'
##        #return ResultValue
##
##    def ReplaceWithDoubleU(self, Index, Name, h, b, tw, tf, R, a, OpenedClosed, Process):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddL(self, Name, h, b, tw, tf, r1, r2, Process):
##        '-no docstring-'
##        #return ResultValue
##
##    def ReplaceWithL(self, Index, Name, h, b, tw, tf, r1, r2, Process):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddDoubleL(self, Name, h, b, tw, tf, r1, r2, a, Process):
##        '-no docstring-'
##        #return ResultValue
##
##    def ReplaceWithDoubleL(self, Index, Name, h, b, tw, tf, r1, r2, a, Process):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddDoubleLFlange(self, Name, h, b, tw, tf, r1, r2, a, Process):
##        '-no docstring-'
##        #return ResultValue
##
##    def ReplaceWithDoubleLFlange(self, Index, Name, h, b, tw, tf, r1, r2, a, Process):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddT(self, Name, h, b, tw, tf, R, Process):
##        '-no docstring-'
##        #return ResultValue
##
##    def ReplaceWithT(self, Index, Name, h, b, tw, tf, R, Process):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddReverseT(self, Name, h, b, tw, tf, R, Process):
##        '-no docstring-'
##        #return ResultValue
##
##    def ReplaceWithReverseT(self, Index, Name, h, b, tw, tf, R, Process):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddZ(self, Name, h, b, tw, tf, R, Process):
##        '-no docstring-'
##        #return ResultValue
##
##    def ReplaceWithZ(self, Index, Name, h, b, tw, tf, R, Process):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddC(self, Name, h, b, E, tw, R, Process):
##        '-no docstring-'
##        #return ResultValue
##
##    def ReplaceWithC(self, Index, Name, h, b, E, tw, R, Process):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddCircle(self, Name, d):
##        '-no docstring-'
##        #return ResultValue
##
##    def ReplaceWithCircle(self, Index, Name, d):
##        '-no docstring-'
##        #return ResultValue
##
##    def Clear(self):
##        '-no docstring-'
##        #return 
##
##    def Merge(self, IntoItem, FromItem, OffsetY, OffsetZ, Rotation, MergeIntoNew):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddFromCatalog(self, CrossSectionShape, CrossSectionName):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddFromCatalogFile(self, CatalogFileName, CrossSectionName):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddFromDialog(self, CrossSectionBasicTypes, CrossSectionShapes, CatalogFileNames):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddFromEditor(self, CrossSectionBasicTypes, CrossSectionShapes):
##        '-no docstring-'
##        #return ResultValue
##
##    def Edit(self, Index, CrossSectionBasicTypes, CrossSectionShapes):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddCustomWithUserParams(self, Name, ShapePolygonList, Process):
##        '-no docstring-'
##        #return CrossSectionUserParams, ResultValue
##
##    def ReplaceWithCustomAndUserParams(self, Index, Name, ShapePolygonList, Process):
##        '-no docstring-'
##        #return CrossSectionUserParams, ResultValue
##
##    def AddCustomWithUserParamsAsArray(self, Name, ShapePolygonList, Process, lParam, CrossSectionUserParams):
##        '-no docstring-'
##        #return ResultValue
##
##    def ReplaceWithCustomAndUserParamsAsArray(self, Index, Name, ShapePolygonList, Process, lParam, CrossSectionUserParams):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddCustomWithUserParamsAsByteArray(self, Name, ShapePolygonList, Process, CrossSectionUserParams):
##        '-no docstring-'
##        #return ResultValue
##
##    def ReplaceWithCustomAndUserParamsAsByteArray(self, Index, Name, ShapePolygonList, Process, CrossSectionUserParams):
##        '-no docstring-'
##        #return ResultValue
##
##    def ReplaceFromCatalog(self, Index, CrossSectionShape, CrossSectionName):
##        '-no docstring-'
##        #return ResultValue
##
##    def ReplaceFromCatalogFile(self, Index, CatalogFileName, CrossSectionName):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddFromDialog_vb(self, CrossSectionBasicTypes, CrossSectionShapes):
##        '-no docstring-'
##        #return CatalogFileNames, ResultValue
##
##    def AddCustomWithUserParamsAsArray_vb(self, Name, ShapePolygonList, Process, lParam):
##        '-no docstring-'
##        #return CrossSectionUserParams, ResultValue
##
##    def ReplaceWithCustomAndUserParamsAsArray_vb(self, Index, Name, ShapePolygonList, Process, lParam):
##        '-no docstring-'
##        #return CrossSectionUserParams, ResultValue
##
##    def AddCustomWithUserParamsAsByteArray_vb(self, Name, ShapePolygonList, Process):
##        '-no docstring-'
##        #return CrossSectionUserParams, ResultValue
##
##    def ReplaceWithCustomAndUserParamsAsByteArray_vb(self, Index, Name, ShapePolygonList, Process):
##        '-no docstring-'
##        #return CrossSectionUserParams, ResultValue
##
##    @property
##    def UID(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def IndexOfUID(self, UID):
##        '-no docstring-'
##        #return Value
##
##    def AddRectangularRounded(self, Name, b, h, r1, r2):
##        '-no docstring-'
##        #return ResultValue
##
##    def ReplaceWithRectangularRounded(self, Index, Name, b, h, r1, r2):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddRectangularHollow(self, Name, b, h, tf, tw):
##        '-no docstring-'
##        #return ResultValue
##
##    def ReplaceWithRectangularHollow(self, Index, Name, b, h, tf, tw):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddIHaunched(self, Name, bt, bw, bb, h, ht, hth, hbh, hb):
##        '-no docstring-'
##        #return ResultValue
##
##    def ReplaceWithIHaunched(self, Index, Name, bt, bw, bb, h, ht, hth, hbh, hb):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddTWallHaunched(self, Name, bt, bb, bw, h, ht):
##        '-no docstring-'
##        #return ResultValue
##
##    def ReplaceWithTWallHaunched(self, Index, Name, bt, bb, bw, h, ht):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddTTopHaunched(self, Name, bt, bw, h, ht, hth):
##        '-no docstring-'
##        #return ResultValue
##
##    def ReplaceWithTTopHaunched(self, Index, Name, bt, bw, h, ht, hth):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddCircleHollow(self, Name, d, t):
##        '-no docstring-'
##        #return ResultValue
##
##    def ReplaceWithCircleHollow(self, Index, Name, d, t):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddTrapezoid(self, Name, h, bt, bb):
##        '-no docstring-'
##        #return ResultValue
##
##    def ReplaceWithTrapezoid(self, Index, Name, h, bt, bb):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetDimensionsOfC(self, Index):
##        '-no docstring-'
##        #return h, b, E, tw, R, ResultValue
##
##    def GetDimensionsOfIHaunched(self, Index):
##        '-no docstring-'
##        #return bt, bw, bb, h, ht, hth, hbh, hb, ResultValue
##
##    def GetDimensionsOfTWallHaunched(self, Index):
##        '-no docstring-'
##        #return bt, bb, bw, h, ht, ResultValue
##
##    def GetDimensionsOfTTopHaunched(self, Index):
##        '-no docstring-'
##        #return bt, bw, h, ht, hth, ResultValue
##
##    def SaveToMetaFile(self, Index, FileName, CreatedBy, Description, Width, Height, Options):
##        '-no docstring-'
##        #return ResultValue
##
##    def SaveToBitmapFile(self, Index, FileName, Width, Height, Options):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddCompositePipe(self, Name, Diameter, t, OutterMaterial_ID, InnerMaterial_ID, CS_MaterialID, CS_ID, InnerCSalign):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddCompositeBox(self, Name, b, h, t_flange, t_web, R, OutterMaterial_ID, InnerMaterial_ID, CS_MaterialID, CS_ID, InnerCSalign):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddCompositeRound(self, Name, d, InnerMaterial_ID, CS_MaterialID, CS_ID, InnerCSalign):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddCompositeRectangle(self, Name, b, h, InnerMaterial_ID, CS_MaterialID, CS_ID, InnerCSalign):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddFromDialogEx(self, CrossSectionBasicTypes):
##        '-no docstring-'
##        #return CrossSectionShapes, CatalogFileNames, ResultValue
##
##    def EditEx(self, Index, CrossSectionBasicTypes):
##        '-no docstring-'
##        #return CrossSectionShapes, ResultValue
##
##    def ReplaceFromCatalogEx(self, Index, CrossSectionShape, CrossSectionName):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddDoubleWedgedI(self, Name, Params):
##        '-no docstring-'
##        #return ResultValue
##
##    def ReplaceWithDoubleWedgedI(self, Index, Name, Params):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddHSQ(self, Name, Params):
##        '-no docstring-'
##        #return ResultValue
##
##    def ReplaceWithHSQ(self, Index, Name, Params):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddHSQA(self, Name, Params):
##        '-no docstring-'
##        #return ResultValue
##
##    def ReplaceWithHSQA(self, Index, Name, Params):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddFromCatalog_V161(self, CrossSectionShape, CrossSectionName):
##        '-no docstring-'
##        #return ResultValue
##
##    def Add2IX(self, Name, Params):
##        '-no docstring-'
##        #return ResultValue
##
##    def ReplaceWith2IX(self, Index, Name, Params):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddComposite2IX(self, Name, Params):
##        '-no docstring-'
##        #return ResultValue
##
##    def ReplaceWithComposite2IX(self, Index, Name, Params):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddIFB(self, Name, Params):
##        '-no docstring-'
##        #return ResultValue
##
##    def ReplaceWithIFB(self, Index, Name, Params):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddSFB(self, Name, Params):
##        '-no docstring-'
##        #return ResultValue
##
##    def ReplaceWithSFB(self, Index, Name, Params):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddDoubleLClosed(self, Name, Params):
##        '-no docstring-'
##        #return ResultValue
##
##    def ReplaceWithDoubleLClosed(self, Index, Name, Params):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddFromCatalogTable(self, TableID, Name):
##        '-no docstring-'
##        #return ResultValue
##

class RLoadSurfaceDistributed(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{50138D80-A2CF-4A84-A9B0-AAF73590CE63}')
RLoadSurfaceDistributed._fields_ = [
    ('LoadCaseId', c_int),
    ('SurfaceId', c_int),
    ('SystemGLR', ESystem),
    ('DistributionType', ESurfaceDomainDistributionType),
    ('qx', c_double),
    ('qy', c_double),
    ('qz', c_double),
]
assert sizeof(RLoadSurfaceDistributed) == 40, sizeof(RLoadSurfaceDistributed)
assert alignment(RLoadSurfaceDistributed) == 8, alignment(RLoadSurfaceDistributed)
IAxisVMSupports._methods_ = [
]
################################################################
## code template for IAxisVMSupports implementation
##class IAxisVMSupports_Impl(object):

class RRebarSteelGrade_NEN(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{51907A04-52E7-4EFD-9B26-1FE2410F4596}')
RRebarSteelGrade_NEN._fields_ = [
    ('fsrep', c_double),
    ('fs', c_double),
    ('esu', c_double),
]
assert sizeof(RRebarSteelGrade_NEN) == 24, sizeof(RRebarSteelGrade_NEN)
assert alignment(RRebarSteelGrade_NEN) == 8, alignment(RRebarSteelGrade_NEN)
class RRCBeamDesignBendingResult(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{F545C040-60CF-4FB6-906E-B17A7E4B4465}')
RRCBeamDesignBendingResult._fields_ = [
    ('M', c_double),
    ('Ast', c_double),
    ('Astmin', c_double),
    ('Asc', c_double),
    ('Ascmin', c_double),
    ('xc', c_double),
    ('MErrorMessage', c_int),
]
assert sizeof(RRCBeamDesignBendingResult) == 56, sizeof(RRCBeamDesignBendingResult)
assert alignment(RRCBeamDesignBendingResult) == 8, alignment(RRCBeamDesignBendingResult)
IAxisVMLinkElementsEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Cleared'),
    DISPMETHOD([dispid(202)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]
IAxisVMSteelDesignResults._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202)], HRESULT, 'GetSteelDesignResultsByLoadCaseId',
              ( ['in'], c_int, 'SteelDesignMemberId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(c_int), 'ResultsPerSection' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSteelDesignResult)), 'SteelDesignResults' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(203)], HRESULT, 'GetSteelDesignResultsByLoadCombinationId',
              ( ['in'], c_int, 'SteelDesignMemberId' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(c_int), 'ResultsPerSection' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSteelDesignResult)), 'SteelDesignResults' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'GetEnvelopeSteelDesignResults',
              ( ['in'], c_int, 'SteelDesignMemberId' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(c_int), 'ResultsPerSection' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSteelDesignResult)), 'SteelDesignResults' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205)], HRESULT, 'GetCriticalSteelDesignResults',
              ( ['in'], c_int, 'SteelDesignMemberId' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(c_int), 'ResultsPerSection' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSteelDesignResult)), 'SteelDesignResults' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'GetAllSteelDesignResultsByLoadCaseId',
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(c_int), 'ResultsPerSection' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSteelDesignResult)), 'SteelDesignResults' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'GetAllSteelDesignResultsByLoadCombinationId',
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(c_int), 'ResultsPerSection' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSteelDesignResult)), 'SteelDesignResults' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208)], HRESULT, 'GetAllEnvelopeSteelDesignResults',
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(c_int), 'ResultsPerSection' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSteelDesignResult)), 'SteelDesignResults' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209)], HRESULT, 'GetAllCriticalSteelDesignResults',
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(c_int), 'ResultsPerSection' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSteelDesignResult)), 'SteelDesignResults' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(210), 'propget'], HRESULT, 'AnalysisType',
              ( ['out', 'retval'], POINTER(EAnalysisType), 'Value' )),
    COMMETHOD([dispid(210), 'propput'], HRESULT, 'AnalysisType',
              ( ['in'], EAnalysisType, 'Value' )),
    COMMETHOD([dispid(211), 'propget'], HRESULT, 'LoadCaseId',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(211), 'propput'], HRESULT, 'LoadCaseId',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(212), 'propget'], HRESULT, 'LoadCombinationId',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(212), 'propput'], HRESULT, 'LoadCombinationId',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(214), 'propget'], HRESULT, 'CombinationType',
              ( ['out', 'retval'], POINTER(ECombinationType), 'Value' )),
    COMMETHOD([dispid(214), 'propput'], HRESULT, 'CombinationType',
              ( ['in'], ECombinationType, 'Value' )),
    COMMETHOD([dispid(215), 'propget'], HRESULT, 'LoadLevel',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(215), 'propput'], HRESULT, 'LoadLevel',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(216)], HRESULT, 'SteelDesignResultsByLoadCaseId',
              ( ['in'], c_int, 'SteelDesignMemberId' ),
              ( ['out'], POINTER(c_int), 'ResultsPerSection' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSteelDesignResult)), 'SteelDesignResults' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(217)], HRESULT, 'SteelDesignResultsByLoadCombinationId',
              ( ['in'], c_int, 'SteelDesignMemberId' ),
              ( ['out'], POINTER(c_int), 'ResultsPerSection' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSteelDesignResult)), 'SteelDesignResults' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(218)], HRESULT, 'EnvelopeSteelDesignResults',
              ( ['in'], c_int, 'SteelDesignMemberId' ),
              ( ['out'], POINTER(c_int), 'ResultsPerSection' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSteelDesignResult)), 'SteelDesignResults' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(219)], HRESULT, 'CriticalSteelDesignResults',
              ( ['in'], c_int, 'SteelDesignMemberId' ),
              ( ['out'], POINTER(c_int), 'ResultsPerSection' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSteelDesignResult)), 'SteelDesignResults' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(220)], HRESULT, 'AllSteelDesignResultsByLoadCaseId',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(c_int), 'ResultsPerSection' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSteelDesignResult)), 'SteelDesignResults' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(221)], HRESULT, 'AllSteelDesignResultsByLoadCombinationId',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(c_int), 'ResultsPerSection' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSteelDesignResult)), 'SteelDesignResults' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(222)], HRESULT, 'AllEnvelopeSteelDesignResults',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(c_int), 'ResultsPerSection' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSteelDesignResult)), 'SteelDesignResults' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(223)], HRESULT, 'AllCriticalSteelDesignResults',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(c_int), 'ResultsPerSection' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSteelDesignResult)), 'SteelDesignResults' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(224)], HRESULT, 'GetEfficiencyAndCombination',
              ( ['in'], c_int, 'SteelDesignMemberId' ),
              ( ['in'], EResultType, 'ResultType' ),
              ( ['out'], POINTER(c_double), 'Efficiency' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(225), 'propget'], HRESULT, 'EnvelopeUID',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(225), 'propput'], HRESULT, 'EnvelopeUID',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(226)], HRESULT, 'GetEfficiencyAndCombinationByLoadCaseId',
              ( ['in'], c_int, 'SteelDesignMemberId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(c_double), 'Efficiency' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(227)], HRESULT, 'GetEfficiencyAndCombinationByLoadCombinationId',
              ( ['in'], c_int, 'SteelDesignMemberId' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(c_double), 'Efficiency' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(228)], HRESULT, 'GetEnvelopeEfficiencyAndCombination',
              ( ['in'], c_int, 'SteelDesignMemberId' ),
              ( ['in'], c_int, 'EnvelopeUID' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(c_double), 'Efficiency' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(229)], HRESULT, 'GetCriticalEfficiencyAndCombination',
              ( ['in'], c_int, 'SteelDesignMemberId' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(c_double), 'Efficiency' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(230)], HRESULT, 'GetEnvelopeSteelDesignResults2',
              ( ['in'], c_int, 'SteelDesignMemberId' ),
              ( ['in'], c_int, 'EnvelopeUID' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(c_int), 'ResultsPerSection' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSteelDesignResult)), 'SteelDesignResults' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(231)], HRESULT, 'GetSteelDesignResultsByLoadCaseId_Abs',
              ( ['in'], c_int, 'SteelDesignMemberId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(c_int), 'ResultsPerSection' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSteelDesignResult)), 'SteelDesignResults' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(232)], HRESULT, 'GetSteelDesignResultsByLoadCombinationId_Abs',
              ( ['in'], c_int, 'SteelDesignMemberId' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(c_int), 'ResultsPerSection' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSteelDesignResult)), 'SteelDesignResults' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(233)], HRESULT, 'GetEnvelopeSteelDesignResults_Abs',
              ( ['in'], c_int, 'SteelDesignMemberId' ),
              ( ['in'], c_int, 'EnvelopeUID' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(c_int), 'ResultsPerSection' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSteelDesignResult)), 'SteelDesignResults' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(234)], HRESULT, 'GetCriticalSteelDesignResults_Abs',
              ( ['in'], c_int, 'SteelDesignMemberId' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(c_int), 'ResultsPerSection' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSteelDesignResult)), 'SteelDesignResults' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMSteelDesignResults implementation
##class IAxisVMSteelDesignResults_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def GetSteelDesignResultsByLoadCaseId(self, SteelDesignMemberId, LoadCaseId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return ResultsPerSection, SteelDesignResults, Combination, ResultValue
##
##    def GetSteelDesignResultsByLoadCombinationId(self, SteelDesignMemberId, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return ResultsPerSection, SteelDesignResults, Combination, ResultValue
##
##    def GetEnvelopeSteelDesignResults(self, SteelDesignMemberId, AnalysisType):
##        '-no docstring-'
##        #return ResultsPerSection, SteelDesignResults, Combination, ResultValue
##
##    def GetCriticalSteelDesignResults(self, SteelDesignMemberId, CombinationType, AnalysisType):
##        '-no docstring-'
##        #return ResultsPerSection, SteelDesignResults, Combination, ResultValue
##
##    def GetAllSteelDesignResultsByLoadCaseId(self, LoadCaseId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return SectionCounts, ResultsPerSection, SteelDesignResults, Combinations, ResultValue
##
##    def GetAllSteelDesignResultsByLoadCombinationId(self, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return SectionCounts, ResultsPerSection, SteelDesignResults, Combinations, ResultValue
##
##    def GetAllEnvelopeSteelDesignResults(self, AnalysisType):
##        '-no docstring-'
##        #return SectionCounts, ResultsPerSection, SteelDesignResults, Combinations, ResultValue
##
##    def GetAllCriticalSteelDesignResults(self, CombinationType, AnalysisType):
##        '-no docstring-'
##        #return SectionCounts, ResultsPerSection, SteelDesignResults, Combinations, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    AnalysisType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LoadCaseId = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LoadCombinationId = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    CombinationType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LoadLevel = property(_get, _set, doc = _set.__doc__)
##
##    def SteelDesignResultsByLoadCaseId(self, SteelDesignMemberId):
##        '-no docstring-'
##        #return ResultsPerSection, SteelDesignResults, Combination, ResultValue
##
##    def SteelDesignResultsByLoadCombinationId(self, SteelDesignMemberId):
##        '-no docstring-'
##        #return ResultsPerSection, SteelDesignResults, Combination, ResultValue
##
##    def EnvelopeSteelDesignResults(self, SteelDesignMemberId):
##        '-no docstring-'
##        #return ResultsPerSection, SteelDesignResults, Combination, ResultValue
##
##    def CriticalSteelDesignResults(self, SteelDesignMemberId):
##        '-no docstring-'
##        #return ResultsPerSection, SteelDesignResults, Combination, ResultValue
##
##    def AllSteelDesignResultsByLoadCaseId(self):
##        '-no docstring-'
##        #return SectionCounts, ResultsPerSection, SteelDesignResults, Combinations, ResultValue
##
##    def AllSteelDesignResultsByLoadCombinationId(self):
##        '-no docstring-'
##        #return SectionCounts, ResultsPerSection, SteelDesignResults, Combinations, ResultValue
##
##    def AllEnvelopeSteelDesignResults(self):
##        '-no docstring-'
##        #return SectionCounts, ResultsPerSection, SteelDesignResults, Combinations, ResultValue
##
##    def AllCriticalSteelDesignResults(self):
##        '-no docstring-'
##        #return SectionCounts, ResultsPerSection, SteelDesignResults, Combinations, ResultValue
##
##    def GetEfficiencyAndCombination(self, SteelDesignMemberId, ResultType):
##        '-no docstring-'
##        #return Efficiency, Combination, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    EnvelopeUID = property(_get, _set, doc = _set.__doc__)
##
##    def GetEfficiencyAndCombinationByLoadCaseId(self, SteelDesignMemberId, LoadCaseId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Efficiency, Combination, ResultValue
##
##    def GetEfficiencyAndCombinationByLoadCombinationId(self, SteelDesignMemberId, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Efficiency, Combination, ResultValue
##
##    def GetEnvelopeEfficiencyAndCombination(self, SteelDesignMemberId, EnvelopeUID, AnalysisType):
##        '-no docstring-'
##        #return Efficiency, Combination, ResultValue
##
##    def GetCriticalEfficiencyAndCombination(self, SteelDesignMemberId, CombinationType, AnalysisType):
##        '-no docstring-'
##        #return Efficiency, Combination, ResultValue
##
##    def GetEnvelopeSteelDesignResults2(self, SteelDesignMemberId, EnvelopeUID, AnalysisType):
##        '-no docstring-'
##        #return ResultsPerSection, SteelDesignResults, Combination, ResultValue
##
##    def GetSteelDesignResultsByLoadCaseId_Abs(self, SteelDesignMemberId, LoadCaseId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return ResultsPerSection, SteelDesignResults, Combination, ResultValue
##
##    def GetSteelDesignResultsByLoadCombinationId_Abs(self, SteelDesignMemberId, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return ResultsPerSection, SteelDesignResults, Combination, ResultValue
##
##    def GetEnvelopeSteelDesignResults_Abs(self, SteelDesignMemberId, EnvelopeUID, AnalysisType):
##        '-no docstring-'
##        #return ResultsPerSection, SteelDesignResults, Combination, ResultValue
##
##    def GetCriticalSteelDesignResults_Abs(self, SteelDesignMemberId, CombinationType, AnalysisType):
##        '-no docstring-'
##        #return ResultsPerSection, SteelDesignResults, Combination, ResultValue
##

class RLoadTrussStress(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{EB7F1DE9-761E-486B-9938-9BFF687CA15B}')
RLoadTrussStress._fields_ = [
    ('LoadCaseId', c_int),
    ('LineId', c_int),
    ('P', c_double),
]
assert sizeof(RLoadTrussStress) == 16, sizeof(RLoadTrussStress)
assert alignment(RLoadTrussStress) == 8, alignment(RLoadTrussStress)

# values for enumeration 'EActualReinforcementType'
artDomain = 0
artPolygon = 1
EActualReinforcementType = c_int # enum

# values for enumeration 'ESurfaceVertexIndex'
sviCenterPoint = 0
sviContourPoint1 = 1
sviContourPoint2 = 2
sviContourPoint3 = 3
sviContourPoint4 = 4
sviContourLineMidPoint1 = 5
sviContourLineMidPoint2 = 6
sviContourLineMidPoint3 = 7
sviContourLineMidPoint4 = 8
ESurfaceVertexIndex = c_int # enum
IAxisVMActualReinforcement._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'Selected',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(202), 'propput'], HRESULT, 'Selected',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], ELongBoolean, 'Value' )),
    COMMETHOD([dispid(203), 'propget'], HRESULT, 'SelCount',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(204)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205)], HRESULT, 'DeleteSelected',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'SelectAll',
              ( ['in'], ELongBoolean, 'Select' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'GetSelectedItemIds',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'ItemIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208)], HRESULT, 'Clear',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209)], HRESULT, 'AddDomainReinforcement',
              ( ['in'], c_int, 'DomainId' ),
              ( ['in'], _midlSAFEARRAY(RActualReinforcement), 'X_Bottom' ),
              ( ['in'], _midlSAFEARRAY(RActualReinforcement), 'X_Top' ),
              ( ['in'], _midlSAFEARRAY(RActualReinforcement), 'Y_Bottom' ),
              ( ['in'], _midlSAFEARRAY(RActualReinforcement), 'Y_Top' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(210)], HRESULT, 'AddPolygonReinforcement',
              ( ['in'], POINTER(AxisVMLines3d), 'Polygon' ),
              ( ['in'], _midlSAFEARRAY(RActualReinforcement), 'X_Bottom' ),
              ( ['in'], _midlSAFEARRAY(RActualReinforcement), 'X_Top' ),
              ( ['in'], _midlSAFEARRAY(RActualReinforcement), 'Y_Bottom' ),
              ( ['in'], _midlSAFEARRAY(RActualReinforcement), 'Y_Top' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(211), 'propget'], HRESULT, 'ActualReinforcementType',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(EActualReinforcementType), 'Value' )),
    COMMETHOD([dispid(212)], HRESULT, 'IndexOfDomainReinforcement',
              ( ['in'], c_int, 'DomainId' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(213)], HRESULT, 'GetReinforcement',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(EActualReinforcementType), 'ActualReinforcementType' ),
              ( ['out'], POINTER(c_int), 'DomainId' ),
              ( ['out'], POINTER(POINTER(AxisVMLines3d)), 'Polygon' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RActualReinforcement)), 'X_Bottom' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RActualReinforcement)), 'X_Top' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RActualReinforcement)), 'Y_Bottom' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RActualReinforcement)), 'Y_Top' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(214)], HRESULT, 'GetSurfaceReinforcement',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ESurfaceVertexIndex, 'SurfaceVertexIndex' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RActualReinforcement)), 'X_Bottom' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RActualReinforcement)), 'X_Top' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RActualReinforcement)), 'Y_Bottom' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RActualReinforcement)), 'Y_Top' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(215), helpstring('VARIANTs are VarArrays/SafeArrays/ so be aware of destoying them by calling VariantClear! So the out paramters are SAFEARRAY(SAFEARRAY(RActualReinforcement))')], HRESULT, 'GetSurfaceReinforcements',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(VARIANT)), 'X_Bottom' ),
              ( ['out'], POINTER(_midlSAFEARRAY(VARIANT)), 'X_Top' ),
              ( ['out'], POINTER(_midlSAFEARRAY(VARIANT)), 'Y_Bottom' ),
              ( ['out'], POINTER(_midlSAFEARRAY(VARIANT)), 'Y_Top' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(216)], HRESULT, 'AddDomainReinforcement_vb',
              ( ['in'], c_int, 'DomainId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RActualReinforcement)), 'X_Bottom' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RActualReinforcement)), 'X_Top' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RActualReinforcement)), 'Y_Bottom' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RActualReinforcement)), 'Y_Top' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(217)], HRESULT, 'AddPolygonReinforcement_vb',
              ( ['in'], POINTER(AxisVMLines3d), 'Polygon' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RActualReinforcement)), 'X_Bottom' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RActualReinforcement)), 'X_Top' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RActualReinforcement)), 'Y_Bottom' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RActualReinforcement)), 'Y_Top' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMActualReinforcement implementation
##class IAxisVMActualReinforcement_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    Selected = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SelCount(self):
##        '-no docstring-'
##        #return Value
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def DeleteSelected(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def SelectAll(self, Select):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetSelectedItemIds(self):
##        '-no docstring-'
##        #return ItemIds, ResultValue
##
##    def Clear(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddDomainReinforcement(self, DomainId, X_Bottom, X_Top, Y_Bottom, Y_Top):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddPolygonReinforcement(self, Polygon, X_Bottom, X_Top, Y_Bottom, Y_Top):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def ActualReinforcementType(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def IndexOfDomainReinforcement(self, DomainId):
##        '-no docstring-'
##        #return Value
##
##    def GetReinforcement(self, Index):
##        '-no docstring-'
##        #return ActualReinforcementType, DomainId, Polygon, X_Bottom, X_Top, Y_Bottom, Y_Top, Value
##
##    def GetSurfaceReinforcement(self, SurfaceId, SurfaceVertexIndex):
##        '-no docstring-'
##        #return X_Bottom, X_Top, Y_Bottom, Y_Top, Value
##
##    def GetSurfaceReinforcements(self, SurfaceId):
##        'VARIANTs are VarArrays/SafeArrays/ so be aware of destoying them by calling VariantClear! So the out paramters are SAFEARRAY(SAFEARRAY(RActualReinforcement))'
##        #return X_Bottom, X_Top, Y_Bottom, Y_Top, Value
##
##    def AddDomainReinforcement_vb(self, DomainId):
##        '-no docstring-'
##        #return X_Bottom, X_Top, Y_Bottom, Y_Top, ResultValue
##
##    def AddPolygonReinforcement_vb(self, Polygon):
##        '-no docstring-'
##        #return X_Bottom, X_Top, Y_Bottom, Y_Top, ResultValue
##

class RSection(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{17AE3FE2-140B-48E9-8C1F-61B5FFC80814}')
RSection._fields_ = [
    ('SectionType', ESectionType),
    ('Name', BSTR),
    ('Visible', ELongBoolean),
    ('P', RPoint3d),
    ('N', RPoint3d),
    ('SegmentEndP', RPoint3d),
    ('InAllResultBlocks', ELongBoolean),
    ('ResultBlock', RResultBlock),
    ('ForAllResultComponents', ELongBoolean),
    ('ResultComponent', EResultComponent),
    ('DisplayMode', ESectionDisplayMode),
    ('L', c_double),
    ('R', c_double),
    ('DiagOnBothSide', ELongBoolean),
    ('DiagInPlane', ELongBoolean),
]
assert sizeof(RSection) == 168, sizeof(RSection)
assert alignment(RSection) == 8, alignment(RSection)
class AxisVMDisplacements(CoClass):
    'AxisVMDisplacements Object'
    _reg_clsid_ = GUID('{A036DC0C-3495-474D-A7E2-206ABC8849C3}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMDisplacements(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMDisplacements Object'
    _iid_ = GUID('{6631EAC5-284F-4A62-B13B-370B58825E10}')
    _idlflags_ = ['dual', 'oleautomation']
AxisVMDisplacements._com_interfaces_ = [IAxisVMDisplacements]
AxisVMDisplacements._outgoing_interfaces_ = [IAxisVMDisplacementsEvents]

class IAxisVMReinforcementCheckEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMReinforcementCheck Object'
    _iid_ = GUID('{32F5DA2E-7786-4CB2-826B-EBF914FA10A5}')
    _idlflags_ = []
    _methods_ = []
IAxisVMReinforcementCheckEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrCode' )),
]
RRebarSteelGrade._fields_ = [
    ('NationalDesignCode', ENationalDesignCode),
    ('E', c_double),
    ('RebarSteelGrade_EC_ITA', RRebarSteelGrade_EC_ITA),
    ('RebarSteelGrade_MSZ', RRebarSteelGrade_MSZ),
    ('RebarSteelGrade_STAS', RRebarSteelGrade_STAS),
    ('RebarSteelGrade_DIN', RRebarSteelGrade_DIN),
    ('RebarSteelGrade_SIA', RRebarSteelGrade_SIA),
    ('RebarSteelGrade_NEN', RRebarSteelGrade_NEN),
]
assert sizeof(RRebarSteelGrade) == 184, sizeof(RRebarSteelGrade)
assert alignment(RRebarSteelGrade) == 8, alignment(RRebarSteelGrade)
IAxisVMStoreysEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Cleared'),
    DISPMETHOD([dispid(202)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]
IAxisVMSurfaceSupportsEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Cleared'),
    DISPMETHOD([dispid(202)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]

# values for enumeration 'EDomainsError'
deEmptyContour = -100001
deMoreThanOneCountourFound = -100002
deEmptyHole = -100003
deMoreThanOneHoleFound = -100004
doeCOMError = -100005
deConcreteIdIndexOutOfBounds = -100006
deRebarSteelGradeIdIndexOutOfBounds = -100007
deThicknessMustBePositive = -100008
deRebarPosMustBePositive = -100009
dePhiMustBePositiveOrZero = -100010
deNuMustBePositiveOrZero = -100011
deTauaMustBePositiveOrZero = -100012
deAggregateSizeMustBePositive = -100013
deStoreyIdOutOfBounds = -100014
deReinforcementParametersNotExists = -100015
deHoleNotInDomainPlane = -100016
dePropertyNotValidForThisDomainSurfaceType = -100017
defseMustBePositive = -100018
deParametersRecordNotValidForUsedDesignCode = -100019
deConcreteCoverMustBePositive = -100020
deRebarDiameterMustBePositive = -100021
deInvalidGroupID = -100022
deXLMmoduleNotAvailable = -100023
deEnvironmentClassNotValidForUsedDesignCode = -100024
deDomainIsNotMeshed = -100025
deAlphaVRdmaxIsInvalid = -100026
deThetaVRdmaxIsInvalid = -100027
deShrinkageEpsMustBePositive = -100028
deRCNonlinearSurfTypeIsInvalid = -100029
deAlphaAngleIsInvalid = -100030
deBetaAngleIsInvalid = -100031
de_k_torsionIsInvalid = -100032
de_k_shearIsInvalid = -100033
de_k_bendingIsInvalid = -100034
deCustomStiffnessMatrixUndefined = -100035
deCustomStiffnessMatrixNonSymetric = -100036
deCustomStiffnessMatrixNonPositiveDefine = -100037
deLimitingCrackWidthIsInvalid = -100038
dePolyLineIsNotContinuous = -100039
deLineDoesNotReachDomainEdge = -100040
deNoSelectedLine = -100041
deNoSelectedLineAndDomain = -100042
deMaterialIndex = -100043
deReferenceIndexOutOfBounds = -100044
deDomainInvalidType = -100045
deElasticFoundationNegative = -100046
deInvalidCharacteristics = -100047
deInvalidStiffnessReduction = -100048
deStiffnessReductionNotAllowed = -100049
deInvalidStiffnessReductionMat = -100050
deInvalidReinfParamForTrapezoidal = -100051
deInvalidHollowCoreDirection = -100052
deInvalidHollowCoreHoletype = -100053
deHollowCoreDMustBePositive = -100054
deHollowCoreFiMustBePositive = -100055
deHollowCoreBMustBePositive = -100056
deHollowCoreHMustBePositive = -100057
deTrapezoidalInvalidDirection = -100058
deTrapezoidalInvalidMaterial = -100059
deTrapezoidal_h_MustBePositive = -100060
deTrapezoidal_t_MustBePositive = -100061
deTrapezoidal_v_MustBePositive = -100062
deTrapezoidal_d_MustBePositive = -100063
deTrapezoidal_b_MustBePositive = -100064
deTrapezoidal_w_MustBePositive = -100065
deTrapezoidal_p_MustNotBeNegative = -100066
deTrapezoidal_eta_OutOfRange = -100067
deTrapezoidal_ht_Mismatch = -100068
deTrapezoidal_dbw_Mismatch = -100069
deCompositeRibInvalidMaterial = -100070
deCompositeRibInvalidCrossSection = -100071
deCompositeRibInvalidDirection = -100072
deCompositeRib_d_TooSmall = -100073
deCompositeRibInvalidEccType = -100074
deNotARibbedDomain = -100075
EDomainsError = c_int # enum
class RXLAMParams(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{4FE8E50B-29D3-45B5-B40F-4EF16EDFC382}')

# values for enumeration 'EXLAMTopLayerDirection'
xtldLocalX = 0
xtldLocalY = 1
EXLAMTopLayerDirection = c_int # enum

# values for enumeration 'EXLAMServiceClass'
xlscClass1 = 1
xlscClass2 = 2
EXLAMServiceClass = c_int # enum
RXLAMParams._fields_ = [
    ('XLAMindex', c_int),
    ('TopLayerDirection', EXLAMTopLayerDirection),
    ('ServiceClass', EXLAMServiceClass),
    ('k_def', c_double),
    ('k_sys', ELongBoolean),
    ('k_fin', ELongBoolean),
]
assert sizeof(RXLAMParams) == 32, sizeof(RXLAMParams)
assert alignment(RXLAMParams) == 8, alignment(RXLAMParams)
class RDistributedMovingLoadOnBeam(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{11CBAB03-9E6C-4006-9810-B78D5278990A}')
RDistributedMovingLoadOnBeam._fields_ = [
    ('SystemGL', ESystem),
    ('DistributionType', EBeamRibDistributionType),
    ('Position1', c_double),
    ('Fx1', c_double),
    ('Fy1', c_double),
    ('Fz1', c_double),
    ('Position2', c_double),
    ('Fx2', c_double),
    ('Fy2', c_double),
    ('Fz2', c_double),
]
assert sizeof(RDistributedMovingLoadOnBeam) == 72, sizeof(RDistributedMovingLoadOnBeam)
assert alignment(RDistributedMovingLoadOnBeam) == 8, alignment(RDistributedMovingLoadOnBeam)
IAxisVMCrackWidth._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202)], HRESULT, 'GetCrackWidthsByLoadCaseId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RCrackWidths), 'CrackWidths' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(203)], HRESULT, 'GetCrackWidthsByLoadCombinationId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RCrackWidths), 'CrackWidths' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204), helpstring('Combination is a multiline string (separated with CR+LF) where the lines belong to: ContourPoint1_Bottom, ContourPoint1_Top, ContourLineMidPoint1_Bottom, ContourLineMidPoint1_Top, ContourPoint2_Bottom, ContourPoint2_Top, ContourLineMidPoint2_Bottom, ContourLin')], HRESULT, 'GetEnvelopeCrackWidths',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ECrackWidth, 'Component' ),
              ( ['in', 'out'], POINTER(RCrackWidths), 'CrackWidths' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205), helpstring('Combination is a multiline string (separated with CR+LF) where the lines belong to: ContourPoint1_Bottom, ContourPoint1_Top, ContourLineMidPoint1_Bottom, ContourLineMidPoint1_Top, ContourPoint2_Bottom, ContourPoint2_Top, ContourLineMidPoint2_Bottom, ContourLin')], HRESULT, 'GetCriticalCrackWidths',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ECrackWidth, 'Component' ),
              ( ['in', 'out'], POINTER(RCrackWidths), 'CrackWidths' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'GetAllCrackWidthsByLoadCaseId',
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RCrackWidths)), 'CrackWidths' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'GetAllCrackWidthsByLoadCombinationId',
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RCrackWidths)), 'CrackWidths' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208), helpstring('Combinations contain multiline strings (separated with CR+LF) where the lines belong to: ContourPoint1_Bottom, ContourPoint1_Top, ContourLineMidPoint1_Bottom, ContourLineMidPoint1_Top, ContourPoint2_Bottom, ContourPoint2_Top, ContourLineMidPoint2_Bottom, Conto')], HRESULT, 'GetAllEnvelopeCrackWidths',
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ECrackWidth, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RCrackWidths)), 'CrackWidths' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209), helpstring('Combinations contain multiline strings (separated with CR+LF) where the lines belong to: ContourPoint1_Bottom, ContourPoint1_Top, ContourLineMidPoint1_Bottom, ContourLineMidPoint1_Top, ContourPoint2_Bottom, ContourPoint2_Top, ContourLineMidPoint2_Bottom, Conto')], HRESULT, 'GetAllCriticalCrackWidths',
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ECrackWidth, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RCrackWidths)), 'CrackWidths' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(210), 'propget'], HRESULT, 'AnalysisType',
              ( ['out', 'retval'], POINTER(EAnalysisType), 'Value' )),
    COMMETHOD([dispid(210), 'propput'], HRESULT, 'AnalysisType',
              ( ['in'], EAnalysisType, 'Value' )),
    COMMETHOD([dispid(211), 'propget'], HRESULT, 'LoadCaseId',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(211), 'propput'], HRESULT, 'LoadCaseId',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(212), 'propget'], HRESULT, 'LoadCombinationId',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(212), 'propput'], HRESULT, 'LoadCombinationId',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(214), 'propget'], HRESULT, 'CombinationType',
              ( ['out', 'retval'], POINTER(ECombinationType), 'Value' )),
    COMMETHOD([dispid(214), 'propput'], HRESULT, 'CombinationType',
              ( ['in'], ECombinationType, 'Value' )),
    COMMETHOD([dispid(215), 'propget'], HRESULT, 'LoadLevel',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(215), 'propput'], HRESULT, 'LoadLevel',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(216), 'propget'], HRESULT, 'Component',
              ( ['out', 'retval'], POINTER(ECrackWidth), 'Value' )),
    COMMETHOD([dispid(216), 'propput'], HRESULT, 'Component',
              ( ['in'], ECrackWidth, 'Value' )),
    COMMETHOD([dispid(217)], HRESULT, 'CrackWidthsByLoadCaseId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in', 'out'], POINTER(RCrackWidths), 'CrackWidths' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(218)], HRESULT, 'CrackWidthsByLoadCombinationId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in', 'out'], POINTER(RCrackWidths), 'CrackWidths' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(219), helpstring('Combination is a multiline string (separated with CR+LF) where the lines belong to: ContourPoint1_Bottom, ContourPoint1_Top, ContourLineMidPoint1_Bottom, ContourLineMidPoint1_Top, ContourPoint2_Bottom, ContourPoint2_Top, ContourLineMidPoint2_Bottom, ContourLin')], HRESULT, 'EnvelopeCrackWidths',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in', 'out'], POINTER(RCrackWidths), 'CrackWidths' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(220), helpstring('Combination is a multiline string (separated with CR+LF) where the lines belong to: ContourPoint1_Bottom, ContourPoint1_Top, ContourLineMidPoint1_Bottom, ContourLineMidPoint1_Top, ContourPoint2_Bottom, ContourPoint2_Top, ContourLineMidPoint2_Bottom, ContourLin')], HRESULT, 'CriticalCrackWidths',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in', 'out'], POINTER(RCrackWidths), 'CrackWidths' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(221)], HRESULT, 'AllCrackWidthsByLoadCaseId',
              ( ['out'], POINTER(_midlSAFEARRAY(RCrackWidths)), 'CrackWidths' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(222)], HRESULT, 'AllCrackWidthsByLoadCombinationId',
              ( ['out'], POINTER(_midlSAFEARRAY(RCrackWidths)), 'CrackWidths' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(223), helpstring('Combinations contain multiline strings (separated with CR+LF) where the lines belong to: ContourPoint1_Bottom, ContourPoint1_Top, ContourLineMidPoint1_Bottom, ContourLineMidPoint1_Top, ContourPoint2_Bottom, ContourPoint2_Top, ContourLineMidPoint2_Bottom, Conto')], HRESULT, 'AllEnvelopeCrackWidths',
              ( ['out'], POINTER(_midlSAFEARRAY(RCrackWidths)), 'CrackWidths' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(224), helpstring('Combinations contain multiline strings (separated with CR+LF) where the lines belong to: ContourPoint1_Bottom, ContourPoint1_Top, ContourLineMidPoint1_Bottom, ContourLineMidPoint1_Top, ContourPoint2_Bottom, ContourPoint2_Top, ContourLineMidPoint2_Bottom, Conto')], HRESULT, 'AllCriticalCrackWidths',
              ( ['out'], POINTER(_midlSAFEARRAY(RCrackWidths)), 'CrackWidths' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(225), 'propget'], HRESULT, 'EnvelopeUID',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(225), 'propput'], HRESULT, 'EnvelopeUID',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(228), helpstring('LoadCaseOrCombinationId is an index of load case if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count')], HRESULT, 'GetEnvelopeCrackWidths2',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ECrackWidth, 'Component' ),
              ( ['in', 'out'], POINTER(RCrackWidths), 'CrackWidths' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'LoadLevel' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(229)], HRESULT, 'GetCriticalCrackWidths2',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ECrackWidth, 'Component' ),
              ( ['in', 'out'], POINTER(RCrackWidths), 'CrackWidths' ),
              ( ['out'], POINTER(ECombinationType), 'CriticalCombinationType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Factors' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(232), helpstring('LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count')], HRESULT, 'EnvelopeCrackWidths2',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in', 'out'], POINTER(RCrackWidths), 'CrackWidths' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'LoadLevel' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(233)], HRESULT, 'CriticalCrackWidths2',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in', 'out'], POINTER(RCrackWidths), 'CrackWidths' ),
              ( ['out'], POINTER(ECombinationType), 'CriticalCombinationType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Factors' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(234)], HRESULT, 'SetUserCreep',
              ( ['in'], ELongBoolean, 'Creep' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(235), 'propget'], HRESULT, 'UserCreep',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
]
################################################################
## code template for IAxisVMCrackWidth implementation
##class IAxisVMCrackWidth_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def GetCrackWidthsByLoadCaseId(self, SurfaceId, LoadCaseId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return CrackWidths, Combination, ResultValue
##
##    def GetCrackWidthsByLoadCombinationId(self, SurfaceId, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return CrackWidths, Combination, ResultValue
##
##    def GetEnvelopeCrackWidths(self, SurfaceId, AnalysisType, Component):
##        'Combination is a multiline string (separated with CR+LF) where the lines belong to: ContourPoint1_Bottom, ContourPoint1_Top, ContourLineMidPoint1_Bottom, ContourLineMidPoint1_Top, ContourPoint2_Bottom, ContourPoint2_Top, ContourLineMidPoint2_Bottom, ContourLin'
##        #return CrackWidths, Combination, ResultValue
##
##    def GetCriticalCrackWidths(self, SurfaceId, CombinationType, AnalysisType, Component):
##        'Combination is a multiline string (separated with CR+LF) where the lines belong to: ContourPoint1_Bottom, ContourPoint1_Top, ContourLineMidPoint1_Bottom, ContourLineMidPoint1_Top, ContourPoint2_Bottom, ContourPoint2_Top, ContourLineMidPoint2_Bottom, ContourLin'
##        #return CrackWidths, Combination, ResultValue
##
##    def GetAllCrackWidthsByLoadCaseId(self, LoadCaseId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return CrackWidths, Combinations, ResultValue
##
##    def GetAllCrackWidthsByLoadCombinationId(self, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return CrackWidths, Combinations, ResultValue
##
##    def GetAllEnvelopeCrackWidths(self, AnalysisType, Component):
##        'Combinations contain multiline strings (separated with CR+LF) where the lines belong to: ContourPoint1_Bottom, ContourPoint1_Top, ContourLineMidPoint1_Bottom, ContourLineMidPoint1_Top, ContourPoint2_Bottom, ContourPoint2_Top, ContourLineMidPoint2_Bottom, Conto'
##        #return CrackWidths, Combinations, ResultValue
##
##    def GetAllCriticalCrackWidths(self, CombinationType, AnalysisType, Component):
##        'Combinations contain multiline strings (separated with CR+LF) where the lines belong to: ContourPoint1_Bottom, ContourPoint1_Top, ContourLineMidPoint1_Bottom, ContourLineMidPoint1_Top, ContourPoint2_Bottom, ContourPoint2_Top, ContourLineMidPoint2_Bottom, Conto'
##        #return CrackWidths, Combinations, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    AnalysisType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LoadCaseId = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LoadCombinationId = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    CombinationType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LoadLevel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Component = property(_get, _set, doc = _set.__doc__)
##
##    def CrackWidthsByLoadCaseId(self, SurfaceId):
##        '-no docstring-'
##        #return CrackWidths, Combination, ResultValue
##
##    def CrackWidthsByLoadCombinationId(self, SurfaceId):
##        '-no docstring-'
##        #return CrackWidths, Combination, ResultValue
##
##    def EnvelopeCrackWidths(self, SurfaceId):
##        'Combination is a multiline string (separated with CR+LF) where the lines belong to: ContourPoint1_Bottom, ContourPoint1_Top, ContourLineMidPoint1_Bottom, ContourLineMidPoint1_Top, ContourPoint2_Bottom, ContourPoint2_Top, ContourLineMidPoint2_Bottom, ContourLin'
##        #return CrackWidths, Combination, ResultValue
##
##    def CriticalCrackWidths(self, SurfaceId):
##        'Combination is a multiline string (separated with CR+LF) where the lines belong to: ContourPoint1_Bottom, ContourPoint1_Top, ContourLineMidPoint1_Bottom, ContourLineMidPoint1_Top, ContourPoint2_Bottom, ContourPoint2_Top, ContourLineMidPoint2_Bottom, ContourLin'
##        #return CrackWidths, Combination, ResultValue
##
##    def AllCrackWidthsByLoadCaseId(self):
##        '-no docstring-'
##        #return CrackWidths, Combinations, ResultValue
##
##    def AllCrackWidthsByLoadCombinationId(self):
##        '-no docstring-'
##        #return CrackWidths, Combinations, ResultValue
##
##    def AllEnvelopeCrackWidths(self):
##        'Combinations contain multiline strings (separated with CR+LF) where the lines belong to: ContourPoint1_Bottom, ContourPoint1_Top, ContourLineMidPoint1_Bottom, ContourLineMidPoint1_Top, ContourPoint2_Bottom, ContourPoint2_Top, ContourLineMidPoint2_Bottom, Conto'
##        #return CrackWidths, Combinations, ResultValue
##
##    def AllCriticalCrackWidths(self):
##        'Combinations contain multiline strings (separated with CR+LF) where the lines belong to: ContourPoint1_Bottom, ContourPoint1_Top, ContourLineMidPoint1_Bottom, ContourLineMidPoint1_Top, ContourPoint2_Bottom, ContourPoint2_Top, ContourLineMidPoint2_Bottom, Conto'
##        #return CrackWidths, Combinations, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    EnvelopeUID = property(_get, _set, doc = _set.__doc__)
##
##    def GetEnvelopeCrackWidths2(self, SurfaceId, AnalysisType, Component):
##        'LoadCaseOrCombinationId is an index of load case if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count'
##        #return CrackWidths, LoadCaseOrCombinationId, LoadLevel, ResultValue
##
##    def GetCriticalCrackWidths2(self, SurfaceId, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return CrackWidths, CriticalCombinationType, Factors, LoadCaseIds, ResultValue
##
##    def EnvelopeCrackWidths2(self, SurfaceId):
##        'LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count'
##        #return CrackWidths, LoadCaseOrCombinationId, LoadLevel, ResultValue
##
##    def CriticalCrackWidths2(self, SurfaceId):
##        '-no docstring-'
##        #return CrackWidths, CriticalCombinationType, Factors, LoadCaseIds, ResultValue
##
##    def SetUserCreep(self, Creep):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def UserCreep(self):
##        '-no docstring-'
##        #return Value
##

IAxisVMLogicalPartsEvents._disp_methods_ = [
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]
class RLoadBeamFault(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{C39FC440-562B-45DB-99BC-871DC9C8153C}')
RLoadBeamFault._fields_ = [
    ('LoadCaseId', c_int),
    ('LineId', c_int),
    ('DL', c_double),
]
assert sizeof(RLoadBeamFault) == 16, sizeof(RLoadBeamFault)
assert alignment(RLoadBeamFault) == 8, alignment(RLoadBeamFault)
class RLoadDomainConstant(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{1479AFDE-51E7-4110-8974-1FDB8DFA3BAA}')
RLoadDomainConstant._fields_ = [
    ('LoadCaseId', c_int),
    ('DomainId', c_int),
    ('SystemGLR', ESystem),
    ('DistributionType', ESurfaceDomainDistributionType),
    ('qx', c_double),
    ('qy', c_double),
    ('qz', c_double),
]
assert sizeof(RLoadDomainConstant) == 40, sizeof(RLoadDomainConstant)
assert alignment(RLoadDomainConstant) == 8, alignment(RLoadDomainConstant)
class AxisVMDomain(CoClass):
    'AxisVMDomain Object'
    _reg_clsid_ = GUID('{3AF535E2-0A8A-482B-B745-E0BAF03A289F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
AxisVMDomain._com_interfaces_ = [IAxisVMDomain]

IAxisVMSteelDesignMembers._methods_ = [
    COMMETHOD([dispid(201), helpstring('The DesignParameters must be type casted into the appropriate DesignParameters record type!')], HRESULT, 'Add',
              ( ['in'], _midlSAFEARRAY(c_ubyte), 'DesignParameters' ),
              ( ['in'], _midlSAFEARRAY(c_int), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(203), helpstring('The DesignParameters must be type casted into the appropriate DesignParameters record type!')], HRESULT, 'GetDesignParameters',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'DesignParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204), helpstring('The DesignParameters must be type casted into the appropriate DesignParameters record type!')], HRESULT, 'SetDesignParameters',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], _midlSAFEARRAY(c_ubyte), 'DesignParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'Clear',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207), 'propget'], HRESULT, 'Selected',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(207), 'propput'], HRESULT, 'Selected',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], ELongBoolean, 'Value' )),
    COMMETHOD([dispid(208), 'propget'], HRESULT, 'SelCount',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(209)], HRESULT, 'DeleteSelected',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(210)], HRESULT, 'SelectAll',
              ( ['in'], ELongBoolean, 'Select' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(211)], HRESULT, 'GetLineIds',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(212), 'propget'], HRESULT, 'Length',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(213)], HRESULT, 'GetSelectedItemIds',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'ItemIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(214)], HRESULT, 'Add2',
              ( ['in', 'out'], POINTER(RSteelDesignParameters), 'SteelDesignParameters' ),
              ( ['in'], _midlSAFEARRAY(c_int), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(215)], HRESULT, 'GetDesignParameters2',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RSteelDesignParameters), 'SteelDesignParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(216)], HRESULT, 'SetDesignParameters2',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RSteelDesignParameters), 'SteelDesignParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(217), helpstring('The DesignParameters must be type casted into the appropriate DesignParameters record type!')], HRESULT, 'Add_vb',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'DesignParameters' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(218)], HRESULT, 'Add2_vb',
              ( ['in', 'out'], POINTER(RSteelDesignParameters), 'SteelDesignParameters' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(219), helpstring('The SteelDesignParameters must be type casted into the appropriate load record type depending on the national design code!')], HRESULT, 'Add3',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'SteelDesignParameters' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(220), helpstring('The SteelDesignParameters must be type casted into the appropriate load record type depending on the national design code!')], HRESULT, 'GetDesignParameters3',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'SteelDesignParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(221), helpstring('The SteelDesignParameters must be type casted into the appropriate load record type depending on the national design code!')], HRESULT, 'SetDesignParameters3',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'SteelDesignParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(222)], HRESULT, 'GetLateralSupports',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSteelLTBSupport)), 'LateralSupports' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(223)], HRESULT, 'SetLateralSupports',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RSteelLTBSupport)), 'LateralSupports' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(224), 'propget'], HRESULT, 'CrossSetionID',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(224), 'propput'], HRESULT, 'CrossSetionID',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(225)], HRESULT, 'Add_V153',
              ( ['in', 'out'], POINTER(RSteelDesignParameters_V153), 'SteelDesignParameters' ),
              ( ['in'], _midlSAFEARRAY(c_int), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(226)], HRESULT, 'GetDesignParameters_V153',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RSteelDesignParameters_V153), 'SteelDesignParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(227)], HRESULT, 'SetDesignParameters_V153',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RSteelDesignParameters_V153), 'SteelDesignParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMSteelDesignMembers implementation
##class IAxisVMSteelDesignMembers_Impl(object):
##    def Add(self, DesignParameters, LineIds):
##        'The DesignParameters must be type casted into the appropriate DesignParameters record type!'
##        #return ResultValue
##
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def GetDesignParameters(self, Index):
##        'The DesignParameters must be type casted into the appropriate DesignParameters record type!'
##        #return DesignParameters, ResultValue
##
##    def SetDesignParameters(self, Index, DesignParameters):
##        'The DesignParameters must be type casted into the appropriate DesignParameters record type!'
##        #return ResultValue
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def Clear(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    Selected = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SelCount(self):
##        '-no docstring-'
##        #return Value
##
##    def DeleteSelected(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def SelectAll(self, Select):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetLineIds(self, Index):
##        '-no docstring-'
##        #return LineIds, ResultValue
##
##    @property
##    def Length(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def GetSelectedItemIds(self):
##        '-no docstring-'
##        #return ItemIds, ResultValue
##
##    def Add2(self, LineIds):
##        '-no docstring-'
##        #return SteelDesignParameters, ResultValue
##
##    def GetDesignParameters2(self, Index):
##        '-no docstring-'
##        #return SteelDesignParameters, ResultValue
##
##    def SetDesignParameters2(self, Index):
##        '-no docstring-'
##        #return SteelDesignParameters, ResultValue
##
##    def Add_vb(self):
##        'The DesignParameters must be type casted into the appropriate DesignParameters record type!'
##        #return DesignParameters, LineIds, ResultValue
##
##    def Add2_vb(self):
##        '-no docstring-'
##        #return SteelDesignParameters, LineIds, ResultValue
##
##    def Add3(self):
##        'The SteelDesignParameters must be type casted into the appropriate load record type depending on the national design code!'
##        #return SteelDesignParameters, LineIds, ResultValue
##
##    def GetDesignParameters3(self, Index):
##        'The SteelDesignParameters must be type casted into the appropriate load record type depending on the national design code!'
##        #return SteelDesignParameters, ResultValue
##
##    def SetDesignParameters3(self, Index):
##        'The SteelDesignParameters must be type casted into the appropriate load record type depending on the national design code!'
##        #return SteelDesignParameters, ResultValue
##
##    def GetLateralSupports(self, Index):
##        '-no docstring-'
##        #return LateralSupports, ResultValue
##
##    def SetLateralSupports(self, Index):
##        '-no docstring-'
##        #return LateralSupports, ResultValue
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    CrossSetionID = property(_get, _set, doc = _set.__doc__)
##
##    def Add_V153(self, LineIds):
##        '-no docstring-'
##        #return SteelDesignParameters, ResultValue
##
##    def GetDesignParameters_V153(self, Index):
##        '-no docstring-'
##        #return SteelDesignParameters, ResultValue
##
##    def SetDesignParameters_V153(self, Index):
##        '-no docstring-'
##        #return SteelDesignParameters, ResultValue
##

class IAxisVMStressesEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMStresses Object'
    _iid_ = GUID('{F815230B-5A08-4CAC-B7E5-0BDDA0C13EFB}')
    _idlflags_ = []
    _methods_ = []
IAxisVMStressesEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrCode' )),
]
class AxisVMReinforcementCheck(CoClass):
    'AxisVMReinforcementCheck Object'
    _reg_clsid_ = GUID('{BE23B0FD-B72D-40FA-A7B1-77E0CE9FE7CB}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMReinforcementCheck(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMReinforcementCheck Object'
    _iid_ = GUID('{6B737628-0E17-4088-A9C7-30DDC362F852}')
    _idlflags_ = ['dual', 'oleautomation']
AxisVMReinforcementCheck._com_interfaces_ = [IAxisVMReinforcementCheck]
AxisVMReinforcementCheck._outgoing_interfaces_ = [IAxisVMReinforcementCheckEvents]

class RRCBeamDesignResult(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{168F063E-F91F-4272-BB5F-D068CB443289}')
RRCBeamDesignResult._fields_ = [
    ('Top', RRCBeamDesignBendingResult),
    ('Bottom', RRCBeamDesignBendingResult),
    ('Vsdred_Min', c_double),
    ('Vsdred_Max', c_double),
    ('Ved_Vrd', c_double),
    ('S', c_double),
    ('sv', c_double),
    ('smax', c_double),
    ('VErrorMessage', c_int),
    ('Tsd', c_double),
    ('Ted_Trd', c_double),
    ('st', c_double),
    ('Astor', c_double),
    ('x', c_double),
    ('VRdc', c_double),
    ('VRds', c_double),
]
assert sizeof(RRCBeamDesignResult) == 224, sizeof(RRCBeamDesignResult)
assert alignment(RRCBeamDesignResult) == 8, alignment(RRCBeamDesignResult)
class RColumnCheckingParameters(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{A4DA5A95-D84C-4000-9922-60E35A866A30}')
RColumnCheckingParameters._fields_ = [
    ('CalcEccIncy', ELongBoolean),
    ('CalcEccIncz', ELongBoolean),
    ('CalcEcc2Y', ELongBoolean),
    ('CalcEcc2Z', ELongBoolean),
    ('Ky', c_double),
    ('Kz', c_double),
    ('IsCustomLength', ELongBoolean),
    ('ColumnLength', c_double),
    ('fieff_EC_ITA', c_double),
    ('SwayImp', ELongBoolean),
    ('BucklingModeY', c_int),
    ('BucklingModeZ', c_int),
    ('ShrinkCreepEpsSIA', c_double),
    ('ApproximateCurvatureSIA', ELongBoolean),
    ('Sum2ndEccentricites', ELongBoolean),
]
assert sizeof(RColumnCheckingParameters) == 88, sizeof(RColumnCheckingParameters)
assert alignment(RColumnCheckingParameters) == 8, alignment(RColumnCheckingParameters)

# values for enumeration 'ELine2dType'
ltStraightLine = 0
ltCircleArc = 1
ELine2dType = c_int # enum
IAxisVMLine2d._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'LineType',
              ( ['out', 'retval'], POINTER(ELine2dType), 'Value' )),
    COMMETHOD([dispid(201), 'propput'], HRESULT, 'LineType',
              ( ['in'], ELine2dType, 'Value' )),
    COMMETHOD([dispid(204), 'propget'], HRESULT, 'CircleArcOrientation',
              ( ['out', 'retval'], POINTER(EArcAngleOrientation), 'Value' )),
    COMMETHOD([dispid(204), 'propput'], HRESULT, 'CircleArcOrientation',
              ( ['in'], EArcAngleOrientation, 'Value' )),
    COMMETHOD([dispid(205)], HRESULT, 'SetLinePoints',
              ( ['in', 'out'], POINTER(RPoint2d), 'StartPoint' ),
              ( ['in', 'out'], POINTER(RPoint2d), 'EndPoint' )),
    COMMETHOD([dispid(206)], HRESULT, 'GetLinePoints',
              ( ['in', 'out'], POINTER(RPoint2d), 'StartPoint' ),
              ( ['in', 'out'], POINTER(RPoint2d), 'EndPoint' )),
    COMMETHOD([dispid(207)], HRESULT, 'SetPoint',
              ( ['in'], ELine2dPointIndex, 'Index' ),
              ( ['in', 'out'], POINTER(RPoint2d), 'Value' )),
    COMMETHOD([dispid(208)], HRESULT, 'GetPoint',
              ( ['in'], ELine2dPointIndex, 'Index' ),
              ( ['in', 'out'], POINTER(RPoint2d), 'Value' )),
    COMMETHOD([dispid(209)], HRESULT, 'SetCircleArcCenter',
              ( ['in', 'out'], POINTER(RPoint2d), 'Value' )),
    COMMETHOD([dispid(210)], HRESULT, 'GetCircleArcCenter',
              ( ['in', 'out'], POINTER(RPoint2d), 'Value' )),
]
################################################################
## code template for IAxisVMLine2d implementation
##class IAxisVMLine2d_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LineType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    CircleArcOrientation = property(_get, _set, doc = _set.__doc__)
##
##    def SetLinePoints(self):
##        '-no docstring-'
##        #return StartPoint, EndPoint
##
##    def GetLinePoints(self):
##        '-no docstring-'
##        #return StartPoint, EndPoint
##
##    def SetPoint(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def GetPoint(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def SetCircleArcCenter(self):
##        '-no docstring-'
##        #return Value
##
##    def GetCircleArcCenter(self):
##        '-no docstring-'
##        #return Value
##

class RLoadLineDistributed(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{FCB3AD2E-63F9-4769-BF00-EA09D39C0A3B}')
RLoadLineDistributed._fields_ = [
    ('LoadCaseId', c_int),
    ('LineId', c_int),
    ('qx1', c_double),
    ('qy1', c_double),
    ('qz1', c_double),
    ('mx1', c_double),
    ('my1', c_double),
    ('mz1', c_double),
    ('qx2', c_double),
    ('qy2', c_double),
    ('qz2', c_double),
    ('mx2', c_double),
    ('my2', c_double),
    ('mz2', c_double),
    ('SystemGLR', ESystem),
    ('Position1', c_double),
    ('Position2', c_double),
    ('DistributionType', EBeamRibDistributionType),
    ('Trapezoid', ELongBoolean),
]
assert sizeof(RLoadLineDistributed) == 136, sizeof(RLoadLineDistributed)
assert alignment(RLoadLineDistributed) == 8, alignment(RLoadLineDistributed)
class RLoadRibConcentrated(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{D79D0108-48E3-4CBA-90E5-1971F24E5B93}')
class RLoadRibThermal(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{0A469ACF-37E5-4BB1-9AA1-45EE140E84CC}')
class RLoadTrussFault(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{4C98CDDA-35F7-4F96-B98D-D1CAE8586F3D}')
class RLoadTrussThermal(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{393C0EAF-71C5-48BE-A7E5-4BF0089A4AFA}')
class RLoadSurfaceEdge(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{81B54518-23F7-45D3-A6C7-3098C8496B78}')
class RLoadDomainConcentrated(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{38787B90-7C1B-4C7C-BC07-722EA183CC8A}')
class RLoadSurfaceConcentrated(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{2CB68D5F-891E-40EB-B1FA-8E023BB6CDA7}')
class RLoadDomainPolyLine(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{067BE27F-98E0-4BFB-8DFF-5EE5D59A343A}')
class RLoadDomainPolyAssoc(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{A9F8C935-A72D-4CFC-985F-FCEA2E2C492B}')
class RLoadSurfaceToBeam(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{35B39638-BC5E-4433-81E2-CA657A3C2D3C}')
class RLoadDomainFluid(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{E9C6658C-3AD4-4608-8C0D-2DAB3C854106}')
class RLoadSurfaceFluid(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{3A930142-3C61-4D4A-8A5F-59F0AA664AE9}')
class RLoadDomainLinear(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{ACA7543B-2D1A-4BA0-9FA0-4C46DF47002A}')
class RLoadDynamic(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{8B76F645-8FDF-4CC2-9D14-A3D281CD1915}')
class RLoadBeamMemberConcentrated(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{1EACF663-2F13-4615-AD42-5994D8238F34}')
class RLoadRibMemberDistributed(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{ACF3356D-94BD-4191-9369-B7584D5AE409}')
class RLoadDomainPolyLineItem(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{B7645623-D484-4CB5-BA99-063DA191E8BD}')

# values for enumeration 'ELoadDomainPolyLineItemType'
ldplitDomain = 0
ldplitSurface = 1
ldplitBlankLine = 2
ldplitLoadPanel = 3
ELoadDomainPolyLineItemType = c_int # enum
RLoadDomainPolyLineItem._fields_ = [
    ('StartPoint', RPoint3d),
    ('EndPoint', RPoint3d),
    ('LineGeomType', ELineGeomType),
    ('CircleArcGeomData', RCircleArcGeomData),
    ('px1', c_double),
    ('px2', c_double),
    ('py1', c_double),
    ('py2', c_double),
    ('pz1', c_double),
    ('pz2', c_double),
    ('pm1', c_double),
    ('pm2', c_double),
    ('ItemType', ELoadDomainPolyLineItemType),
    ('ElementId', c_int),
]
assert sizeof(RLoadDomainPolyLineItem) == 184, sizeof(RLoadDomainPolyLineItem)
assert alignment(RLoadDomainPolyLineItem) == 8, alignment(RLoadDomainPolyLineItem)
class RLoadPanelLinear(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{8ADD6423-AAA9-4B3E-BBE9-666BD50E33EE}')
class RLoadPanelPolyArea(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{2EA7168F-60A4-4B9F-8125-0C56F44EC777}')
class RLoadPanelPolyLine(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{CBBF28FA-AC8B-493F-B152-5F4AB4437F74}')
class RLoadLineSelfWeigth(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{9BC2081B-3172-4367-9355-8F83EB390946}')
RLoadLineSelfWeigth._fields_ = [
    ('LoadCaseId', c_int),
    ('LineId', c_int),
]
assert sizeof(RLoadLineSelfWeigth) == 8, sizeof(RLoadLineSelfWeigth)
assert alignment(RLoadLineSelfWeigth) == 4, alignment(RLoadLineSelfWeigth)
class RLoadDomainConstant_V154(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{75A81C04-1219-46E8-BAF6-64E29101625D}')
RLoadDomainConstant_V154._fields_ = [
    ('LoadCaseId', c_int),
    ('DomainId', c_int),
    ('SystemGLR', ESystem),
    ('DistributionType', ESurfaceDomainDistributionType),
    ('qx', c_double),
    ('qy', c_double),
    ('qz', c_double),
    ('WindowLoad', ELongBoolean),
]
assert sizeof(RLoadDomainConstant_V154) == 48, sizeof(RLoadDomainConstant_V154)
assert alignment(RLoadDomainConstant_V154) == 8, alignment(RLoadDomainConstant_V154)
RLoadDomainLinear._fields_ = [
    ('LoadCaseId', c_int),
    ('DomainId', c_int),
    ('DistributionType', EDistributionType),
    ('LoadDistributionType', ELoadDistributionType),
    ('Component', EAxis),
    ('P1', c_double),
    ('P2', c_double),
    ('P3', c_double),
    ('x1', c_double),
    ('x2', c_double),
    ('x3', c_double),
    ('y1', c_double),
    ('y2', c_double),
    ('y3', c_double),
    ('z1', c_double),
    ('z2', c_double),
    ('z3', c_double),
    ('WindowLoad', ELongBoolean),
]
assert sizeof(RLoadDomainLinear) == 128, sizeof(RLoadDomainLinear)
assert alignment(RLoadDomainLinear) == 8, alignment(RLoadDomainLinear)
class RLoadSurfaceSelfWeigth(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{A1A95D50-5B23-4983-B005-30A0ECCF0C79}')
RLoadSurfaceSelfWeigth._fields_ = [
    ('LoadCaseId', c_int),
    ('SurfaceId', c_int),
]
assert sizeof(RLoadSurfaceSelfWeigth) == 8, sizeof(RLoadSurfaceSelfWeigth)
assert alignment(RLoadSurfaceSelfWeigth) == 4, alignment(RLoadSurfaceSelfWeigth)
class RLoadDomainSelfWeigth(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{D388E769-4C96-4195-81E7-D7CF5BC631C5}')
RLoadDomainSelfWeigth._fields_ = [
    ('LoadCaseId', c_int),
    ('DomainId', c_int),
]
assert sizeof(RLoadDomainSelfWeigth) == 8, sizeof(RLoadDomainSelfWeigth)
assert alignment(RLoadDomainSelfWeigth) == 4, alignment(RLoadDomainSelfWeigth)
class RLoadDomainPolyAssoc_V161(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{E60F6861-258F-4657-ABB0-17C453FDF596}')
IAxisVMLoads._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'LoadType',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELoadType), 'Value' )),
    COMMETHOD([dispid(203), 'propget'], HRESULT, 'ElementId',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(204), 'propget'], HRESULT, 'LoadCaseId',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(204), 'propput'], HRESULT, 'LoadCaseId',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(205), helpstring('The LoadData must be type casted into the appropriate load record type!')], HRESULT, 'GetLoad',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'LoadData' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206), helpstring('The LoadData must be type casted into the appropriate load record type!')], HRESULT, 'SetLoad',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], _midlSAFEARRAY(c_ubyte), 'LoadData' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208)], HRESULT, 'AddNodalForce',
              ( ['in', 'out'], POINTER(RLoadNodalForce), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209)], HRESULT, 'AddSupportDisplacement',
              ( ['in', 'out'], POINTER(RLoadSupportDisplacement), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(210)], HRESULT, 'AddRibConcentrated',
              ( ['in', 'out'], POINTER(RLoadRibConcentrated), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(211)], HRESULT, 'AddBeamConcentrated',
              ( ['in', 'out'], POINTER(RLoadBeamConcentrated), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(212)], HRESULT, 'AddBeamInfluence',
              ( ['in', 'out'], POINTER(RLoadBeamInfluence), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(213)], HRESULT, 'AddRibDistributed',
              ( ['in', 'out'], POINTER(RLoadRibDistributed), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(214)], HRESULT, 'AddBeamDistributed',
              ( ['in', 'out'], POINTER(RLoadBeamDistributed), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(215)], HRESULT, 'AddRibThermal',
              ( ['in', 'out'], POINTER(RLoadRibThermal), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(216)], HRESULT, 'AddSurfaceThermal',
              ( ['in', 'out'], POINTER(RLoadSurfaceThermal), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(217)], HRESULT, 'AddDomainThermal',
              ( ['in', 'out'], POINTER(RLoadDomainThermal), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(218)], HRESULT, 'AddBeamThermal',
              ( ['in', 'out'], POINTER(RLoadBeamThermal), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(219)], HRESULT, 'AddBeamStress',
              ( ['in', 'out'], POINTER(RLoadBeamStress), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(220)], HRESULT, 'AddTrussStress',
              ( ['in', 'out'], POINTER(RLoadTrussStress), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(221)], HRESULT, 'AddBeamFault',
              ( ['in', 'out'], POINTER(RLoadBeamFault), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(222)], HRESULT, 'AddTrussFault',
              ( ['in', 'out'], POINTER(RLoadTrussFault), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(223)], HRESULT, 'AddTrussThermal',
              ( ['in', 'out'], POINTER(RLoadTrussThermal), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(225)], HRESULT, 'AddRibSelfWeight',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(226)], HRESULT, 'AddBeamSelfWeight',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(227)], HRESULT, 'AddTrussSelfWeight',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(228)], HRESULT, 'AddDomainSelfWeight',
              ( ['in'], c_int, 'DomainId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(229)], HRESULT, 'AddSurfaceSelfWeight',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(230)], HRESULT, 'AddSurfaceDistributed',
              ( ['in', 'out'], POINTER(RLoadSurfaceDistributed), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(231)], HRESULT, 'AddDomainConstant',
              ( ['in', 'out'], POINTER(RLoadDomainConstant), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(232)], HRESULT, 'AddSurfaceEdge',
              ( ['in', 'out'], POINTER(RLoadSurfaceEdge), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(234)], HRESULT, 'AddDomainConcentrated',
              ( ['in', 'out'], POINTER(RLoadDomainConcentrated), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(235)], HRESULT, 'AddSurfaceConcentrated',
              ( ['in', 'out'], POINTER(RLoadSurfaceConcentrated), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(236)], HRESULT, 'AddDomainPolyArea',
              ( ['in'], POINTER(AxisVMLines3d), 'ContourPoly' ),
              ( ['in', 'out'], POINTER(RLoadDomainPolyArea), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(237)], HRESULT, 'GetPoly',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(POINTER(AxisVMLines3d)), 'Poly' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(238)], HRESULT, 'AddDomainPolyLine',
              ( ['in'], POINTER(AxisVMLines3d), 'LoadPoly' ),
              ( ['in', 'out'], POINTER(RLoadDomainPolyLine), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(239)], HRESULT, 'AddDomainPolyAssoc',
              ( ['in', 'out'], POINTER(RLoadDomainPolyAssoc), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(240)], HRESULT, 'AddSurfaceToBeam',
              ( ['in'], POINTER(AxisVMLines3d), 'ContourPoly' ),
              ( ['in'], ELongBoolean, 'AutoFindLines' ),
              ( ['in'], _midlSAFEARRAY(c_int), 'LineIds' ),
              ( ['in', 'out'], POINTER(RLoadSurfaceToBeam), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(241), helpstring('ContourLineIds must contain a closed poligon')], HRESULT, 'AddSurfaceToBeamAssoc',
              ( ['in'], _midlSAFEARRAY(c_int), 'ContourLineIds' ),
              ( ['in'], ELongBoolean, 'AutoFindLines' ),
              ( ['in'], _midlSAFEARRAY(c_int), 'LineIds' ),
              ( ['in', 'out'], POINTER(RLoadSurfaceToBeamAssoc), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(242)], HRESULT, 'AddDomainFluid',
              ( ['in', 'out'], POINTER(RLoadDomainFluid), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(243)], HRESULT, 'AddSurfaceFluid',
              ( ['in', 'out'], POINTER(RLoadSurfaceFluid), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(244)], HRESULT, 'GetLines',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(245)], HRESULT, 'SetLines',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], _midlSAFEARRAY(c_int), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(246)], HRESULT, 'SetPoly',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(AxisVMLines3d), 'Poly' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(247)], HRESULT, 'AddDomainLinear',
              ( ['in', 'out'], POINTER(RLoadDomainLinear), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(248)], HRESULT, 'CreateStandardSeismicLoads',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(249)], HRESULT, 'AddDynamic',
              ( ['in', 'out'], POINTER(RLoadDynamic), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(250)], HRESULT, 'CreateStandardPushOverLoads',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(251)], HRESULT, 'AddRibMemberConcentrated',
              ( ['in', 'out'], POINTER(RLoadRibMemberConcentrated), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(252)], HRESULT, 'AddBeamMemberConcentrated',
              ( ['in', 'out'], POINTER(RLoadBeamMemberConcentrated), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(253)], HRESULT, 'AddRibMemberDistributed',
              ( ['in', 'out'], POINTER(RLoadRibMemberDistributed), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(254)], HRESULT, 'AddBeamMemberDistributed',
              ( ['in', 'out'], POINTER(RLoadBeamMemberDistributed), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(255), helpstring('The LoadData must be type casted into the appropriate load record type!')], HRESULT, 'SetLoad_vb',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'LoadData' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(256)], HRESULT, 'AddSurfaceToBeam_vb',
              ( ['in'], POINTER(AxisVMLines3d), 'ContourPoly' ),
              ( ['in'], ELongBoolean, 'AutoFindLines' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['in', 'out'], POINTER(RLoadSurfaceToBeam), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(257), helpstring('ContourLineIds must contain a closed poligon')], HRESULT, 'AddSurfaceToBeamAssoc_vb',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ContourLineIds' ),
              ( ['in'], ELongBoolean, 'AutoFindLines' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['in', 'out'], POINTER(RLoadSurfaceToBeamAssoc), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(258)], HRESULT, 'SetLines_vb',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(259)], HRESULT, 'GetDomainPolyLineItems',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLoadDomainPolyLineItem)), 'Items' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(260)], HRESULT, 'CreateSnowLoadOnLoadPanels',
              ( ['in'], ERoofType, 'RoofType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadPanelIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(261)], HRESULT, 'DeleteSnowLoadFromAllLoadPanels',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(262)], HRESULT, 'DeleteSnowLoadFromLoadPanels',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadPanelIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(263)], HRESULT, 'GetLoadPanelsOfSnowLoad',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'PitchedRoofLoadPanelIDs' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'BarrelRoofLoadPanelIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(264)], HRESULT, 'CreateWindLoadOnLoadPanels',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadPanelIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(265)], HRESULT, 'DeleteWindLoadFromAllLoadPanels',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(272)], HRESULT, 'DeleteWindLoadFromLoadPanels',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadPanelIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(273)], HRESULT, 'GetLoadPanelsOfWindLoad',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadPanelIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(274)], HRESULT, 'GetDomains_Surfaces_LoadPanels',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'DomainIds' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SurfaceIDs' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadPanelIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(275)], HRESULT, 'AddLoadPanelConcentrated',
              ( ['in', 'out'], POINTER(RLoadPanelConcentrated), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(276)], HRESULT, 'AddLoadPanelLinear',
              ( ['in', 'out'], POINTER(RLoadPanelLinear), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(277)], HRESULT, 'AddLoadPanelPolyArea',
              ( ['in'], POINTER(AxisVMLines3d), 'ContourPoly' ),
              ( ['in', 'out'], POINTER(RLoadPanelPolyArea), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(278)], HRESULT, 'AddLoadPanelPolyLine',
              ( ['in'], POINTER(AxisVMLines3d), 'LoadPoly' ),
              ( ['in', 'out'], POINTER(RLoadPanelPolyLine), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(279)], HRESULT, 'ConvertDerivedSurfaceLoad',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(280)], HRESULT, 'ConvertSelectedDerivedSurfaceLoad',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(281)], HRESULT, 'CreateStandardSeismicLoads_V153',
              ( ['in'], c_int, 'GroupID' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(282)], HRESULT, 'AddNodalForces',
              ( ['in'], _midlSAFEARRAY(RLoadNodalForce), 'NodalForces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'Indexes' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(283)], HRESULT, 'AddLineSelfWeights',
              ( ['in'], _midlSAFEARRAY(RLoadLineSelfWeigth), 'LineSelfWeigths' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'Indexes' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(284)], HRESULT, 'AddLineDistributeds',
              ( ['in'], _midlSAFEARRAY(RLoadLineDistributed), 'LineDistributeds' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'Indexes' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(285)], HRESULT, 'AddSurfaceDistributeds',
              ( ['in'], _midlSAFEARRAY(RLoadSurfaceDistributed), 'SurfaceDistributeds' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'Indexes' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(286)], HRESULT, 'AddDomainConstants',
              ( ['in'], _midlSAFEARRAY(RLoadDomainConstant_V154), 'DomainConstants' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'Indexes' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(287)], HRESULT, 'AddDomainLinears',
              ( ['in'], _midlSAFEARRAY(RLoadDomainLinear), 'DomainLinears' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'Indexes' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(288)], HRESULT, 'AddDomainConstant_V154',
              ( ['in', 'out'], POINTER(RLoadDomainConstant_V154), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(289)], HRESULT, 'AddSurfaceSelfWeights',
              ( ['in'], _midlSAFEARRAY(RLoadSurfaceSelfWeigth), 'SurfaceSelfWeigths' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'Indexes' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(290)], HRESULT, 'AddDomainSelfWeights',
              ( ['in'], _midlSAFEARRAY(RLoadDomainSelfWeigth), 'DomainSelfWeigths' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'Indexes' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(291)], HRESULT, 'AddNodalMass',
              ( ['in'], RNodalMass, 'NodalMass' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(292)], HRESULT, 'ModifyNodalMass',
              ( ['in'], RNodalMass, 'NodalMass' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(293)], HRESULT, 'DeleteNodalMass',
              ( ['in'], c_int, 'Node' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(294)], HRESULT, 'GetSelectedItemIds',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'ItemIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(295)], HRESULT, 'AddDomainPolyAssoc_V161',
              ( ['in', 'out'], POINTER(RLoadDomainPolyAssoc_V161), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMLoads implementation
##class IAxisVMLoads_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def LoadType(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def ElementId(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    LoadCaseId = property(_get, _set, doc = _set.__doc__)
##
##    def GetLoad(self, Index):
##        'The LoadData must be type casted into the appropriate load record type!'
##        #return LoadData, ResultValue
##
##    def SetLoad(self, Index, LoadData):
##        'The LoadData must be type casted into the appropriate load record type!'
##        #return ResultValue
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddNodalForce(self):
##        '-no docstring-'
##        #return Data, ResultValue
##
##    def AddSupportDisplacement(self):
##        '-no docstring-'
##        #return Data, ResultValue
##
##    def AddRibConcentrated(self):
##        '-no docstring-'
##        #return Data, ResultValue
##
##    def AddBeamConcentrated(self):
##        '-no docstring-'
##        #return Data, ResultValue
##
##    def AddBeamInfluence(self):
##        '-no docstring-'
##        #return Data, ResultValue
##
##    def AddRibDistributed(self):
##        '-no docstring-'
##        #return Data, ResultValue
##
##    def AddBeamDistributed(self):
##        '-no docstring-'
##        #return Data, ResultValue
##
##    def AddRibThermal(self):
##        '-no docstring-'
##        #return Data, ResultValue
##
##    def AddSurfaceThermal(self):
##        '-no docstring-'
##        #return Data, ResultValue
##
##    def AddDomainThermal(self):
##        '-no docstring-'
##        #return Data, ResultValue
##
##    def AddBeamThermal(self):
##        '-no docstring-'
##        #return Data, ResultValue
##
##    def AddBeamStress(self):
##        '-no docstring-'
##        #return Data, ResultValue
##
##    def AddTrussStress(self):
##        '-no docstring-'
##        #return Data, ResultValue
##
##    def AddBeamFault(self):
##        '-no docstring-'
##        #return Data, ResultValue
##
##    def AddTrussFault(self):
##        '-no docstring-'
##        #return Data, ResultValue
##
##    def AddTrussThermal(self):
##        '-no docstring-'
##        #return Data, ResultValue
##
##    def AddRibSelfWeight(self, LineId, LoadCaseId):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddBeamSelfWeight(self, LineId, LoadCaseId):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddTrussSelfWeight(self, LineId, LoadCaseId):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddDomainSelfWeight(self, DomainId, LoadCaseId):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddSurfaceSelfWeight(self, SurfaceId, LoadCaseId):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddSurfaceDistributed(self):
##        '-no docstring-'
##        #return Data, ResultValue
##
##    def AddDomainConstant(self):
##        '-no docstring-'
##        #return Data, ResultValue
##
##    def AddSurfaceEdge(self):
##        '-no docstring-'
##        #return Data, ResultValue
##
##    def AddDomainConcentrated(self):
##        '-no docstring-'
##        #return Data, ResultValue
##
##    def AddSurfaceConcentrated(self):
##        '-no docstring-'
##        #return Data, ResultValue
##
##    def AddDomainPolyArea(self, ContourPoly):
##        '-no docstring-'
##        #return Data, ResultValue
##
##    def GetPoly(self, Index):
##        '-no docstring-'
##        #return Poly, ResultValue
##
##    def AddDomainPolyLine(self, LoadPoly):
##        '-no docstring-'
##        #return Data, ResultValue
##
##    def AddDomainPolyAssoc(self):
##        '-no docstring-'
##        #return Data, ResultValue
##
##    def AddSurfaceToBeam(self, ContourPoly, AutoFindLines, LineIds):
##        '-no docstring-'
##        #return Data, ResultValue
##
##    def AddSurfaceToBeamAssoc(self, ContourLineIds, AutoFindLines, LineIds):
##        'ContourLineIds must contain a closed poligon'
##        #return Data, ResultValue
##
##    def AddDomainFluid(self):
##        '-no docstring-'
##        #return Data, ResultValue
##
##    def AddSurfaceFluid(self):
##        '-no docstring-'
##        #return Data, ResultValue
##
##    def GetLines(self, Index):
##        '-no docstring-'
##        #return LineIds, ResultValue
##
##    def SetLines(self, Index, LineIds):
##        '-no docstring-'
##        #return ResultValue
##
##    def SetPoly(self, Index, Poly):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddDomainLinear(self):
##        '-no docstring-'
##        #return Data, ResultValue
##
##    def CreateStandardSeismicLoads(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddDynamic(self):
##        '-no docstring-'
##        #return Data, ResultValue
##
##    def CreateStandardPushOverLoads(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddRibMemberConcentrated(self):
##        '-no docstring-'
##        #return Data, ResultValue
##
##    def AddBeamMemberConcentrated(self):
##        '-no docstring-'
##        #return Data, ResultValue
##
##    def AddRibMemberDistributed(self):
##        '-no docstring-'
##        #return Data, ResultValue
##
##    def AddBeamMemberDistributed(self):
##        '-no docstring-'
##        #return Data, ResultValue
##
##    def SetLoad_vb(self, Index):
##        'The LoadData must be type casted into the appropriate load record type!'
##        #return LoadData, ResultValue
##
##    def AddSurfaceToBeam_vb(self, ContourPoly, AutoFindLines):
##        '-no docstring-'
##        #return LineIds, Data, ResultValue
##
##    def AddSurfaceToBeamAssoc_vb(self, AutoFindLines):
##        'ContourLineIds must contain a closed poligon'
##        #return ContourLineIds, LineIds, Data, ResultValue
##
##    def SetLines_vb(self, Index):
##        '-no docstring-'
##        #return LineIds, ResultValue
##
##    def GetDomainPolyLineItems(self, Index):
##        '-no docstring-'
##        #return Items, ResultValue
##
##    def CreateSnowLoadOnLoadPanels(self, RoofType):
##        '-no docstring-'
##        #return LoadPanelIDs, ResultValue
##
##    def DeleteSnowLoadFromAllLoadPanels(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def DeleteSnowLoadFromLoadPanels(self):
##        '-no docstring-'
##        #return LoadPanelIDs, ResultValue
##
##    def GetLoadPanelsOfSnowLoad(self):
##        '-no docstring-'
##        #return PitchedRoofLoadPanelIDs, BarrelRoofLoadPanelIDs, ResultValue
##
##    def CreateWindLoadOnLoadPanels(self):
##        '-no docstring-'
##        #return LoadPanelIDs, ResultValue
##
##    def DeleteWindLoadFromAllLoadPanels(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def DeleteWindLoadFromLoadPanels(self):
##        '-no docstring-'
##        #return LoadPanelIDs, ResultValue
##
##    def GetLoadPanelsOfWindLoad(self):
##        '-no docstring-'
##        #return LoadPanelIDs, ResultValue
##
##    def GetDomains_Surfaces_LoadPanels(self, Index):
##        '-no docstring-'
##        #return DomainIds, SurfaceIDs, LoadPanelIDs, ResultValue
##
##    def AddLoadPanelConcentrated(self):
##        '-no docstring-'
##        #return Data, ResultValue
##
##    def AddLoadPanelLinear(self):
##        '-no docstring-'
##        #return Data, ResultValue
##
##    def AddLoadPanelPolyArea(self, ContourPoly):
##        '-no docstring-'
##        #return Data, ResultValue
##
##    def AddLoadPanelPolyLine(self, LoadPoly):
##        '-no docstring-'
##        #return Data, ResultValue
##
##    def ConvertDerivedSurfaceLoad(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def ConvertSelectedDerivedSurfaceLoad(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def CreateStandardSeismicLoads_V153(self, GroupID):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddNodalForces(self, NodalForces):
##        '-no docstring-'
##        #return Indexes, ResultValue
##
##    def AddLineSelfWeights(self, LineSelfWeigths):
##        '-no docstring-'
##        #return Indexes, ResultValue
##
##    def AddLineDistributeds(self, LineDistributeds):
##        '-no docstring-'
##        #return Indexes, ResultValue
##
##    def AddSurfaceDistributeds(self, SurfaceDistributeds):
##        '-no docstring-'
##        #return Indexes, ResultValue
##
##    def AddDomainConstants(self, DomainConstants):
##        '-no docstring-'
##        #return Indexes, ResultValue
##
##    def AddDomainLinears(self, DomainLinears):
##        '-no docstring-'
##        #return Indexes, ResultValue
##
##    def AddDomainConstant_V154(self):
##        '-no docstring-'
##        #return Data, ResultValue
##
##    def AddSurfaceSelfWeights(self, SurfaceSelfWeigths):
##        '-no docstring-'
##        #return Indexes, ResultValue
##
##    def AddDomainSelfWeights(self, DomainSelfWeigths):
##        '-no docstring-'
##        #return Indexes, ResultValue
##
##    def AddNodalMass(self, NodalMass):
##        '-no docstring-'
##        #return ResultValue
##
##    def ModifyNodalMass(self, NodalMass):
##        '-no docstring-'
##        #return ResultValue
##
##    def DeleteNodalMass(self, Node):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetSelectedItemIds(self):
##        '-no docstring-'
##        #return ItemIds, ResultValue
##
##    def AddDomainPolyAssoc_V161(self):
##        '-no docstring-'
##        #return Data, ResultValue
##

IAxisVMDomainsSupportsEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Cleared'),
    DISPMETHOD([dispid(202)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]
class RShowNumbering(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{835777D1-D83F-448F-8963-5F9B64B4BD6D}')
RShowNumbering._fields_ = [
    ('Node', ELongBoolean),
    ('Truss', ELongBoolean),
    ('Beam', ELongBoolean),
    ('Rib', ELongBoolean),
    ('Surface', ELongBoolean),
    ('Domain', ELongBoolean),
    ('Support', ELongBoolean),
    ('Links', ELongBoolean),
    ('Rigid', ELongBoolean),
    ('Diaphragm', ELongBoolean),
    ('Spring', ELongBoolean),
    ('Gap', ELongBoolean),
    ('Material', ELongBoolean),
    ('CrossSection', ELongBoolean),
    ('Reference', ELongBoolean),
    ('ARBO_CRETelems', ELongBoolean),
    ('DesignGroup', ELongBoolean),
    ('OptimisationGroup', ELongBoolean),
]
assert sizeof(RShowNumbering) == 72, sizeof(RShowNumbering)
assert alignment(RShowNumbering) == 4, alignment(RShowNumbering)
RSurfaceStiffnessFactors._fields_ = [
    ('k_torsion', c_double),
    ('k_shear', c_double),
    ('k_bending', c_double),
]
assert sizeof(RSurfaceStiffnessFactors) == 24, sizeof(RSurfaceStiffnessFactors)
assert alignment(RSurfaceStiffnessFactors) == 8, alignment(RSurfaceStiffnessFactors)
class AxisVMLoadPanel(CoClass):
    'AxisVMLoadPanel Object'
    _reg_clsid_ = GUID('{45B49986-1274-4A82-9F13-BF35689D4EF5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
AxisVMLoadPanel._com_interfaces_ = [IAxisVMLoadPanel]

IAxisVMLoadPanels._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(AxisVMLoadPanel)), 'Value' )),
    COMMETHOD([dispid(203)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'Clear',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205), 'propget'], HRESULT, 'Selected',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(205), 'propput'], HRESULT, 'Selected',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], ELongBoolean, 'Value' )),
    COMMETHOD([dispid(206), 'propget'], HRESULT, 'SelCount',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(207)], HRESULT, 'DeleteSelected',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208)], HRESULT, 'SelectAll',
              ( ['in'], ELongBoolean, 'Select' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209)], HRESULT, 'AddFromDomain',
              ( ['in'], c_int, 'DomainId' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(210)], HRESULT, 'AddFromMemberIDs',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MemberIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(211)], HRESULT, 'AddFromPolygon',
              ( ['in'], POINTER(AxisVMLines3d), 'ContourPolygon' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(212)], HRESULT, 'AddFromLineIDs',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(213), 'propget'], HRESULT, 'UID',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(214), 'propget'], HRESULT, 'IndexOfUID',
              ( ['in'], c_int, 'UID' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
]
################################################################
## code template for IAxisVMLoadPanels implementation
##class IAxisVMLoadPanels_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Item(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def Clear(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    Selected = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SelCount(self):
##        '-no docstring-'
##        #return Value
##
##    def DeleteSelected(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def SelectAll(self, Select):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddFromDomain(self, DomainId):
##        '-no docstring-'
##        #return Value
##
##    def AddFromMemberIDs(self):
##        '-no docstring-'
##        #return MemberIds, Value
##
##    def AddFromPolygon(self, ContourPolygon):
##        '-no docstring-'
##        #return Value
##
##    def AddFromLineIDs(self):
##        '-no docstring-'
##        #return LineIds, Value
##
##    @property
##    def UID(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def IndexOfUID(self, UID):
##        '-no docstring-'
##        #return Value
##


# values for enumeration 'ECombinationTypeBits'
ctb_Other = 0
ctb_SLS1 = 1
ctb_SLSChar = 1
ctb_SLS2 = 2
ctb_SLSFreq = 2
ctb_SLS3 = 4
ctb_SLSQuasi = 4
ctb_ULS1 = 8
ctb_ULS = 8
ctb_ULS2 = 16
ctb_ULSSeismic = 16
ctb_ULS3 = 32
ctb_ULSExceptional = 32
ctb_ULSALL = 64
ctb_ULSab = 128
ctb_ULSa = 256
ctb_ULSb = 512
ctb_ULSALLab = 1024
ctb_ULSA1 = 2048
ctb_ULSA2 = 4096
ctb_ULSA3 = 8192
ctb_ULSA4 = 16384
ctb_ULSA5 = 32768
ctb_ULSA6 = 65536
ctb_ULSA7 = 131072
ctb_ULSA8 = 262144
ctb_ULSAllSE1 = 524288
ctb_ULSAllSE2 = 1048576
ctb_ULSAllSE3 = 2097152
ctb_ULSAllSE4 = 4194304
ctb_ULSAllSE5 = 8388608
ctb_ULSAllSE6 = 16777216
ctb_ULSAllSE7 = 33554432
ctb_ULSAllSE8 = 67108864
ECombinationTypeBits = c_int # enum
class RDisplacementValues(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{9EE63123-1D59-41B5-8F04-D97E31188BF2}')
RDisplacementValues._fields_ = [
    ('ex', c_double),
    ('ey', c_double),
    ('ez', c_double),
    ('Fx', c_double),
    ('Fy', c_double),
    ('Fz', c_double),
    ('eR', c_double),
    ('fR', c_double),
]
assert sizeof(RDisplacementValues) == 64, sizeof(RDisplacementValues)
assert alignment(RDisplacementValues) == 8, alignment(RDisplacementValues)
IAxisVMDisplacements._methods_ = [
    COMMETHOD([dispid(201)], HRESULT, 'GetNodalDisplacementByLoadCaseId',
              ( ['in'], c_int, 'NodeId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrModeShapeOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELongBoolean, 'WithReinforcement' ),
              ( ['in', 'out'], POINTER(RDisplacementValues), 'Displacement' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(202)], HRESULT, 'GetNodalDisplacementByLoadCombinationId',
              ( ['in'], c_int, 'NodeId' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevelOrModeShape' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELongBoolean, 'WithReinforcement' ),
              ( ['in', 'out'], POINTER(RDisplacementValues), 'Displacement' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(203)], HRESULT, 'GetEnvelopeNodalDisplacement',
              ( ['in'], c_int, 'NodeId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELongBoolean, 'WithReinforcement' ),
              ( ['in'], EDisplacement, 'Component' ),
              ( ['in', 'out'], POINTER(RDisplacementValues), 'Displacement' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'GetCriticalNodalDisplacement',
              ( ['in'], c_int, 'NodeId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELongBoolean, 'WithReinforcement' ),
              ( ['in'], EDisplacement, 'Component' ),
              ( ['in', 'out'], POINTER(RDisplacementValues), 'Displacement' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205)], HRESULT, 'GetAllNodalDisplacementsByLoadCaseId',
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrModeShapeOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELongBoolean, 'WithReinforcement' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'Displacements' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'GetAllNodalDisplacementsByLoadCombinationId',
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevelOrModeShape' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELongBoolean, 'WithReinforcement' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'Displacements' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'GetAllEnvelopeNodalDisplacements',
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELongBoolean, 'WithReinforcement' ),
              ( ['in'], EDisplacement, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'Displacements' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208)], HRESULT, 'GetAllCriticalNodalDisplacements',
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELongBoolean, 'WithReinforcement' ),
              ( ['in'], EDisplacement, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'Displacements' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209)], HRESULT, 'GetNodalDisplacementsForResultBlocks',
              ( ['in'], c_int, 'NodeId' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELongBoolean, 'WithReinforcement' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RResultBlockInfo)), 'ResultBlockInfo' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'Displacements' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(211)], HRESULT, 'GetLineDisplacementByLoadCaseId',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELongBoolean, 'WithReinforcement' ),
              ( ['in', 'out'], POINTER(RDisplacementValues), 'Displacement' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(212)], HRESULT, 'GetLineDisplacementByLoadCombinationId',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELongBoolean, 'WithReinforcement' ),
              ( ['in', 'out'], POINTER(RDisplacementValues), 'Displacement' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(213)], HRESULT, 'GetEnvelopeLineDisplacement',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELongBoolean, 'WithReinforcement' ),
              ( ['in'], EDisplacement, 'Component' ),
              ( ['in', 'out'], POINTER(RDisplacementValues), 'Displacement' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(214)], HRESULT, 'GetCriticalLineDisplacement',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELongBoolean, 'WithReinforcement' ),
              ( ['in'], EDisplacement, 'Component' ),
              ( ['in', 'out'], POINTER(RDisplacementValues), 'Displacement' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(215)], HRESULT, 'GetLineDisplacementsByLoadCaseId',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELongBoolean, 'WithReinforcement' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'Displacements' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(216)], HRESULT, 'GetLineDisplacementsByLoadCombinationId',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELongBoolean, 'WithReinforcement' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'Displacements' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(217)], HRESULT, 'GetEnvelopeLineDisplacements',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELongBoolean, 'WithReinforcement' ),
              ( ['in'], EDisplacement, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'Displacements' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(218)], HRESULT, 'GetCriticalLineDisplacements',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELongBoolean, 'WithReinforcement' ),
              ( ['in'], EDisplacement, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'Displacements' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(219)], HRESULT, 'GetAllLineDisplacementsByLoadCaseId',
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELongBoolean, 'WithReinforcement' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'Displacements' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(220)], HRESULT, 'GetAllLineDisplacementsByLoadCombinationId',
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELongBoolean, 'WithReinforcement' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'Displacements' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(221)], HRESULT, 'GetAllEnvelopeLineDisplacements',
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELongBoolean, 'WithReinforcement' ),
              ( ['in'], EDisplacement, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'Displacements' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(222)], HRESULT, 'GetAllCriticalLineDisplacements',
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELongBoolean, 'WithReinforcement' ),
              ( ['in'], EDisplacement, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'Displacements' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(223)], HRESULT, 'GetLineDisplacementsForResultBlocks',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELongBoolean, 'WithReinforcement' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RResultBlockInfo)), 'ResultBlockInfo' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'Displacements' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(224), 'propget'], HRESULT, 'AnalysisType',
              ( ['out', 'retval'], POINTER(EAnalysisType), 'Value' )),
    COMMETHOD([dispid(224), 'propput'], HRESULT, 'AnalysisType',
              ( ['in'], EAnalysisType, 'Value' )),
    COMMETHOD([dispid(225), 'propget'], HRESULT, 'LoadCaseId',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(225), 'propput'], HRESULT, 'LoadCaseId',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(226), 'propget'], HRESULT, 'LoadCombinationId',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(226), 'propput'], HRESULT, 'LoadCombinationId',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(227), 'propget'], HRESULT, 'MinMaxType',
              ( ['out', 'retval'], POINTER(EMinMaxType), 'Value' )),
    COMMETHOD([dispid(227), 'propput'], HRESULT, 'MinMaxType',
              ( ['in'], EMinMaxType, 'Value' )),
    COMMETHOD([dispid(228), 'propget'], HRESULT, 'CombinationType',
              ( ['out', 'retval'], POINTER(ECombinationType), 'Value' )),
    COMMETHOD([dispid(228), 'propput'], HRESULT, 'CombinationType',
              ( ['in'], ECombinationType, 'Value' )),
    COMMETHOD([dispid(229), 'propget'], HRESULT, 'LoadLevelOrModeShapeOrTimeStep',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(229), 'propput'], HRESULT, 'LoadLevelOrModeShapeOrTimeStep',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(230), 'propget'], HRESULT, 'WithReinforcement',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(230), 'propput'], HRESULT, 'WithReinforcement',
              ( ['in'], ELongBoolean, 'Value' )),
    COMMETHOD([dispid(231), 'propget'], HRESULT, 'Component',
              ( ['out', 'retval'], POINTER(EDisplacement), 'Value' )),
    COMMETHOD([dispid(231), 'propput'], HRESULT, 'Component',
              ( ['in'], EDisplacement, 'Value' )),
    COMMETHOD([dispid(232)], HRESULT, 'NodalDisplacementByLoadCaseId',
              ( ['in'], c_int, 'NodeId' ),
              ( ['in', 'out'], POINTER(RDisplacementValues), 'Displacement' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(233)], HRESULT, 'NodalDisplacementByLoadCombinationId',
              ( ['in'], c_int, 'NodeId' ),
              ( ['in', 'out'], POINTER(RDisplacementValues), 'Displacement' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(234)], HRESULT, 'EnvelopeNodalDisplacement',
              ( ['in'], c_int, 'NodeId' ),
              ( ['in', 'out'], POINTER(RDisplacementValues), 'Displacement' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(235)], HRESULT, 'CriticalNodalDisplacement',
              ( ['in'], c_int, 'NodeId' ),
              ( ['in', 'out'], POINTER(RDisplacementValues), 'Displacement' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(236)], HRESULT, 'AllNodalDisplacementsByLoadCaseId',
              ( ['out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'Displacements' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(237)], HRESULT, 'AllNodalDisplacementsByLoadCombinationId',
              ( ['out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'Displacements' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(238)], HRESULT, 'AllEnvelopeNodalDisplacements',
              ( ['out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'Displacements' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(239)], HRESULT, 'AllCriticalNodalDisplacements',
              ( ['out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'Displacements' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(240)], HRESULT, 'NodalDisplacementsForResultBlocks',
              ( ['in'], c_int, 'NodeId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RResultBlockInfo)), 'ResultBlockInfo' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'Displacements' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(241)], HRESULT, 'LineDisplacementByLoadCaseId',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in', 'out'], POINTER(RDisplacementValues), 'Displacement' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(242)], HRESULT, 'LineDisplacementByLoadCombinationId',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in', 'out'], POINTER(RDisplacementValues), 'Displacement' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(243)], HRESULT, 'EnvelopeLineDisplacement',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in', 'out'], POINTER(RDisplacementValues), 'Displacement' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(244)], HRESULT, 'CriticalLineDisplacement',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in', 'out'], POINTER(RDisplacementValues), 'Displacement' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(245)], HRESULT, 'LineDisplacementsByLoadCaseId',
              ( ['in'], c_int, 'LineId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'Displacements' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(246)], HRESULT, 'LineDisplacementsByLoadCombinationId',
              ( ['in'], c_int, 'LineId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'Displacements' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(247)], HRESULT, 'EnvelopeLineDisplacements',
              ( ['in'], c_int, 'LineId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'Displacements' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(248)], HRESULT, 'CriticalLineDisplacements',
              ( ['in'], c_int, 'LineId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'Displacements' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(249)], HRESULT, 'AllLineDisplacementsByLoadCaseId',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'Displacements' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(250)], HRESULT, 'AllLineDisplacementsByLoadCombinationId',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'Displacements' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(251)], HRESULT, 'AllEnvelopeLineDisplacements',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'Displacements' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(252)], HRESULT, 'AllCriticalLineDisplacements',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'Displacements' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(253)], HRESULT, 'LineDisplacementsForResultBlocks',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RResultBlockInfo)), 'ResultBlockInfo' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'Displacements' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(254)], HRESULT, 'GetEndReleasesDeformationsByLoadCaseId',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RDisplacementValues), 'StartDisplacement' ),
              ( ['in', 'out'], POINTER(RDisplacementValues), 'EndDisplacement' ),
              ( ['out'], POINTER(BSTR), 'StartCombination' ),
              ( ['out'], POINTER(BSTR), 'EndCombination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(255)], HRESULT, 'GetEndReleasesDeformationsByLoadCombinationId',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RDisplacementValues), 'StartDisplacement' ),
              ( ['in', 'out'], POINTER(RDisplacementValues), 'EndDisplacement' ),
              ( ['out'], POINTER(BSTR), 'StartCombination' ),
              ( ['out'], POINTER(BSTR), 'EndCombination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(256)], HRESULT, 'GetEnvelopeEndReleasesDeformations',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EDisplacement, 'Component' ),
              ( ['in', 'out'], POINTER(RDisplacementValues), 'StartDisplacement' ),
              ( ['in', 'out'], POINTER(RDisplacementValues), 'EndDisplacement' ),
              ( ['out'], POINTER(BSTR), 'StartCombination' ),
              ( ['out'], POINTER(BSTR), 'EndCombination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(257)], HRESULT, 'GetCriticalEndReleasesDeformations',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EDisplacement, 'Component' ),
              ( ['in', 'out'], POINTER(RDisplacementValues), 'StartDisplacement' ),
              ( ['in', 'out'], POINTER(RDisplacementValues), 'EndDisplacement' ),
              ( ['out'], POINTER(BSTR), 'StartCombination' ),
              ( ['out'], POINTER(BSTR), 'EndCombination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(258)], HRESULT, 'GetAllEndReleasesDeformationsByLoadCaseId',
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'StartDisplacements' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'EndDisplacements' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(259)], HRESULT, 'GetAllEndReleasesDeformationsByLoadCombinationId',
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'StartDisplacements' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'EndDisplacements' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(260)], HRESULT, 'GetAllEnvelopeEndReleasesDeformations',
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EDisplacement, 'Component' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'StartDisplacements' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'EndDisplacements' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(261)], HRESULT, 'GetAllCriticalEndReleasesDeformations',
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EDisplacement, 'Component' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'StartDisplacements' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'EndDisplacements' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(262)], HRESULT, 'EndReleasesDeformationsByLoadCaseId',
              ( ['in'], c_int, 'LineId' ),
              ( ['in', 'out'], POINTER(RDisplacementValues), 'StartDisplacement' ),
              ( ['in', 'out'], POINTER(RDisplacementValues), 'EndDisplacement' ),
              ( ['out'], POINTER(BSTR), 'StartCombination' ),
              ( ['out'], POINTER(BSTR), 'EndCombination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(263)], HRESULT, 'EndReleasesDeformationsByLoadCombinationId',
              ( ['in'], c_int, 'LineId' ),
              ( ['in', 'out'], POINTER(RDisplacementValues), 'StartDisplacement' ),
              ( ['in', 'out'], POINTER(RDisplacementValues), 'EndDisplacement' ),
              ( ['out'], POINTER(BSTR), 'StartCombination' ),
              ( ['out'], POINTER(BSTR), 'EndCombination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(264)], HRESULT, 'EnvelopeEndReleasesDeformations',
              ( ['in'], c_int, 'LineId' ),
              ( ['in', 'out'], POINTER(RDisplacementValues), 'StartDisplacement' ),
              ( ['in', 'out'], POINTER(RDisplacementValues), 'EndDisplacement' ),
              ( ['out'], POINTER(BSTR), 'StartCombination' ),
              ( ['out'], POINTER(BSTR), 'EndCombination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(265)], HRESULT, 'CriticalEndReleasesDeformations',
              ( ['in'], c_int, 'LineId' ),
              ( ['in', 'out'], POINTER(RDisplacementValues), 'StartDisplacement' ),
              ( ['in', 'out'], POINTER(RDisplacementValues), 'EndDisplacement' ),
              ( ['out'], POINTER(BSTR), 'StartCombination' ),
              ( ['out'], POINTER(BSTR), 'EndCombination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(266)], HRESULT, 'AllEndReleasesDeformationsByLoadCaseId',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'StartDisplacements' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'EndDisplacements' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(267)], HRESULT, 'AllEndReleasesDeformationsByLoadCombinationId',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'StartDisplacements' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'EndDisplacements' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(268)], HRESULT, 'AllEnvelopeEndReleasesDeformations',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'StartDisplacements' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'EndDisplacements' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(269)], HRESULT, 'AllCriticalEndReleasesDeformations',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'StartDisplacements' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'EndDisplacements' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(270), 'propget'], HRESULT, 'EnvelopeUID',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(270), 'propput'], HRESULT, 'EnvelopeUID',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(273), helpstring('LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count')], HRESULT, 'GetEnvelopeNodalDisplacement2',
              ( ['in'], c_int, 'NodeId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELongBoolean, 'WithReinforcement' ),
              ( ['in'], EDisplacement, 'Component' ),
              ( ['in', 'out'], POINTER(RDisplacementValues), 'Displacement' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'LoadLevel' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(274)], HRESULT, 'GetCriticalNodalDisplacement2',
              ( ['in'], c_int, 'NodeId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELongBoolean, 'WithReinforcement' ),
              ( ['in'], EDisplacement, 'Component' ),
              ( ['in', 'out'], POINTER(RDisplacementValues), 'Displacement' ),
              ( ['out'], POINTER(ECombinationType), 'CriticalCombinationType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Factors' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(277), helpstring('LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count')], HRESULT, 'GetEnvelopeLineDisplacement2',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELongBoolean, 'WithReinforcement' ),
              ( ['in'], EDisplacement, 'Component' ),
              ( ['in', 'out'], POINTER(RDisplacementValues), 'Displacement' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'LoadLevel' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(278)], HRESULT, 'GetCriticalLineDisplacement2',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELongBoolean, 'WithReinforcement' ),
              ( ['in'], EDisplacement, 'Component' ),
              ( ['in', 'out'], POINTER(RDisplacementValues), 'Displacement' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(ECombinationType), 'CriticalCombinationType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Factors' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(281), helpstring('LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count')], HRESULT, 'EnvelopeNodalDisplacement2',
              ( ['in'], c_int, 'NodeId' ),
              ( ['in', 'out'], POINTER(RDisplacementValues), 'Displacement' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'LoadLevel' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(282)], HRESULT, 'CriticalNodalDisplacement2',
              ( ['in'], c_int, 'NodeId' ),
              ( ['in', 'out'], POINTER(RDisplacementValues), 'Displacement' ),
              ( ['out'], POINTER(ECombinationType), 'CriticalCombinationType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Factors' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(285), helpstring('LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count')], HRESULT, 'EnvelopeLineDisplacement2',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in', 'out'], POINTER(RDisplacementValues), 'Displacement' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'LoadLevel' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(286)], HRESULT, 'CriticalLineDisplacement2',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in', 'out'], POINTER(RDisplacementValues), 'Displacement' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(ECombinationType), 'CriticalCombinationType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Factors' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(287)], HRESULT, 'GetMemberDisplacementsByLoadCaseId',
              ( ['in'], c_int, 'MemberID' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrModeShapeOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELongBoolean, 'WithReinforcement' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'Displacements' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(288)], HRESULT, 'GetMemberDisplacementsByLoadCombinationId',
              ( ['in'], c_int, 'MemberID' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevelOrModeShapeOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELongBoolean, 'WithReinforcement' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'Displacements' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(289)], HRESULT, 'GetEnvelopeMemberDisplacements',
              ( ['in'], c_int, 'MemberID' ),
              ( ['in'], c_int, 'EnvelopeUID' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EDisplacement, 'Component' ),
              ( ['in'], ELongBoolean, 'WithReinforcement' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'Displacements' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseOrCombinationIds' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadLevels' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(290)], HRESULT, 'GetCriticalMemberDisplacements',
              ( ['in'], c_int, 'MemberID' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EDisplacement, 'Component' ),
              ( ['in'], ELongBoolean, 'WithReinforcement' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'Displacements' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(291), 'propget'], HRESULT, 'DisplacementSystem',
              ( ['out', 'retval'], POINTER(EDisplacementSystem), 'Value' )),
    COMMETHOD([dispid(291), 'propput'], HRESULT, 'DisplacementSystem',
              ( ['in'], EDisplacementSystem, 'Value' )),
    COMMETHOD([dispid(292), helpstring('minHeight = 580, minWidth = 640 ')], HRESULT, 'SaveMemberDisplacementsToMetaFileByLoadCaseID',
              ( ['in'], BSTR, 'FileName' ),
              ( ['in'], c_int, 'MemberID' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], c_int, 'Width' ),
              ( ['in'], c_int, 'Height' ),
              ( ['in'], ELongBoolean, 'RelativeToLeft' ),
              ( ['in'], ELongBoolean, 'RelativeToRight' ),
              ( ['in'], c_double, 'Position' ),
              ( ['in'], EWindowColourMode, 'ColourMode' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(293), helpstring('minHeight = 580, minWidth = 640 ')], HRESULT, 'SaveMemberDisplacementsToMetaFileByLoadCombinationID',
              ( ['in'], BSTR, 'FileName' ),
              ( ['in'], c_int, 'MemberID' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], c_int, 'Width' ),
              ( ['in'], c_int, 'Height' ),
              ( ['in'], ELongBoolean, 'RelativeToLeft' ),
              ( ['in'], ELongBoolean, 'RelativeToRight' ),
              ( ['in'], c_double, 'Position' ),
              ( ['in'], EWindowColourMode, 'ColourMode' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(294), helpstring('minHeight = 580, minWidth = 640 ')], HRESULT, 'SaveEnvelopeMemberDisplacementsToMetaFile',
              ( ['in'], BSTR, 'FileName' ),
              ( ['in'], c_int, 'MemberID' ),
              ( ['in'], c_int, 'EnvelopeUID' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], c_int, 'Width' ),
              ( ['in'], c_int, 'Height' ),
              ( ['in'], ELongBoolean, 'EnvelopeOnly' ),
              ( ['in'], ELongBoolean, 'RelativeToLeft' ),
              ( ['in'], ELongBoolean, 'RelativeToRight' ),
              ( ['in'], c_double, 'Position' ),
              ( ['in'], EWindowColourMode, 'ColourMode' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(295), helpstring('minHeight = 580, minWidth = 640 ')], HRESULT, 'SaveCriticalMemberDisplacementsToMetaFile',
              ( ['in'], BSTR, 'FileName' ),
              ( ['in'], c_int, 'MemberID' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], c_int, 'Width' ),
              ( ['in'], c_int, 'Height' ),
              ( ['in'], ELongBoolean, 'EnvelopeOnly' ),
              ( ['in'], ELongBoolean, 'RelativeToLeft' ),
              ( ['in'], ELongBoolean, 'RelativeToRight' ),
              ( ['in'], c_double, 'Position' ),
              ( ['in'], EWindowColourMode, 'ColourMode' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(296)], HRESULT, 'VirtualBeamOrStripDisplacementsByLoadCaseId',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'Displacements' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Pos' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(297)], HRESULT, 'VirtualBeamOrStripDisplacementsByLoadCombinationId',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'Displacements' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Pos' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(298)], HRESULT, 'EnvelopeVirtualBeamOrStripDisplacements',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'Displacements' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Pos' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(299)], HRESULT, 'CriticalVirtualBeamOrStripDisplacements',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'Displacements' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Pos' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(300)], HRESULT, 'EnvelopeVirtualBeamOrStripDisplacements2',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'Displacements' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Pos' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseOrCombinationIds' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadLevels' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(301)], HRESULT, 'CriticalVirtualBeamOrStripDisplacement',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in', 'out'], POINTER(RDisplacementValues), 'Displacement' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'Pos' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(302)], HRESULT, 'CriticalVirtualBeamOrStripDisplacement2',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in', 'out'], POINTER(RDisplacementValues), 'Displacement' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'Pos' ),
              ( ['out'], POINTER(ECombinationType), 'CriticalCombinationType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Factors' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(303), helpstring('minHeight = 580, minWidth = 640 ')], HRESULT, 'SaveVirtualBeamOrStripDisplacementsToMetaFileByLoadCaseID',
              ( ['in'], BSTR, 'FileName' ),
              ( ['in'], c_int, 'Id' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], c_int, 'Width' ),
              ( ['in'], c_int, 'Height' ),
              ( ['in'], ELongBoolean, 'RelativeToLeft' ),
              ( ['in'], ELongBoolean, 'RelativeToRight' ),
              ( ['in'], c_double, 'Position' ),
              ( ['in'], EWindowColourMode, 'ColourMode' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(304), helpstring('minHeight = 580, minWidth = 640 ')], HRESULT, 'SaveVirtualBeamOrStripDisplacementsToMetaFileByLoadCombinationID',
              ( ['in'], BSTR, 'FileName' ),
              ( ['in'], c_int, 'Id' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], c_int, 'Width' ),
              ( ['in'], c_int, 'Height' ),
              ( ['in'], ELongBoolean, 'RelativeToLeft' ),
              ( ['in'], ELongBoolean, 'RelativeToRight' ),
              ( ['in'], c_double, 'Position' ),
              ( ['in'], EWindowColourMode, 'ColourMode' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(305), helpstring('minHeight = 580, minWidth = 640 ')], HRESULT, 'SaveEnvelopeVirtualBeamOrStripDisplacementsToMetaFile',
              ( ['in'], BSTR, 'FileName' ),
              ( ['in'], c_int, 'Id' ),
              ( ['in'], c_int, 'EnvelopeUID' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], c_int, 'Width' ),
              ( ['in'], c_int, 'Height' ),
              ( ['in'], ELongBoolean, 'EnvelopeOnly' ),
              ( ['in'], ELongBoolean, 'RelativeToLeft' ),
              ( ['in'], ELongBoolean, 'RelativeToRight' ),
              ( ['in'], c_double, 'Position' ),
              ( ['in'], EWindowColourMode, 'ColourMode' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(306), helpstring('minHeight = 580, minWidth = 640 ')], HRESULT, 'SaveCriticalVirtualBeamOrStripDisplacementsToMetaFile',
              ( ['in'], BSTR, 'FileName' ),
              ( ['in'], c_int, 'Id' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], c_int, 'Width' ),
              ( ['in'], c_int, 'Height' ),
              ( ['in'], ELongBoolean, 'EnvelopeOnly' ),
              ( ['in'], ELongBoolean, 'RelativeToLeft' ),
              ( ['in'], ELongBoolean, 'RelativeToRight' ),
              ( ['in'], c_double, 'Position' ),
              ( ['in'], EWindowColourMode, 'ColourMode' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(307)], HRESULT, 'SetUserCreep',
              ( ['in'], ELongBoolean, 'Creep' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(308), 'propget'], HRESULT, 'UserCreep',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
]
################################################################
## code template for IAxisVMDisplacements implementation
##class IAxisVMDisplacements_Impl(object):
##    def GetNodalDisplacementByLoadCaseId(self, NodeId, LoadCaseId, LoadLevelOrModeShapeOrTimeStep, AnalysisType, WithReinforcement):
##        '-no docstring-'
##        #return Displacement, Combination, ResultValue
##
##    def GetNodalDisplacementByLoadCombinationId(self, NodeId, LoadCombinationId, LoadLevelOrModeShape, AnalysisType, WithReinforcement):
##        '-no docstring-'
##        #return Displacement, Combination, ResultValue
##
##    def GetEnvelopeNodalDisplacement(self, NodeId, MinMaxType, AnalysisType, WithReinforcement, Component):
##        '-no docstring-'
##        #return Displacement, Combination, ResultValue
##
##    def GetCriticalNodalDisplacement(self, NodeId, MinMaxType, CombinationType, AnalysisType, WithReinforcement, Component):
##        '-no docstring-'
##        #return Displacement, Combination, ResultValue
##
##    def GetAllNodalDisplacementsByLoadCaseId(self, LoadCaseId, LoadLevelOrModeShapeOrTimeStep, AnalysisType, WithReinforcement):
##        '-no docstring-'
##        #return Displacements, ResultValue
##
##    def GetAllNodalDisplacementsByLoadCombinationId(self, LoadCombinationId, LoadLevelOrModeShape, AnalysisType, WithReinforcement):
##        '-no docstring-'
##        #return Displacements, ResultValue
##
##    def GetAllEnvelopeNodalDisplacements(self, MinMaxType, AnalysisType, WithReinforcement, Component):
##        '-no docstring-'
##        #return Displacements, ResultValue
##
##    def GetAllCriticalNodalDisplacements(self, MinMaxType, CombinationType, AnalysisType, WithReinforcement, Component):
##        '-no docstring-'
##        #return Displacements, ResultValue
##
##    def GetNodalDisplacementsForResultBlocks(self, NodeId, AnalysisType, WithReinforcement):
##        '-no docstring-'
##        #return ResultBlockInfo, Displacements, ResultValue
##
##    def GetLineDisplacementByLoadCaseId(self, LineId, SectionId, LoadCaseId, LoadLevelOrTimeStep, AnalysisType, WithReinforcement):
##        '-no docstring-'
##        #return Displacement, PosX, Combination, ResultValue
##
##    def GetLineDisplacementByLoadCombinationId(self, LineId, SectionId, LoadCombinationId, LoadLevel, AnalysisType, WithReinforcement):
##        '-no docstring-'
##        #return Displacement, PosX, Combination, ResultValue
##
##    def GetEnvelopeLineDisplacement(self, LineId, SectionId, MinMaxType, AnalysisType, WithReinforcement, Component):
##        '-no docstring-'
##        #return Displacement, PosX, Combination, ResultValue
##
##    def GetCriticalLineDisplacement(self, LineId, SectionId, MinMaxType, CombinationType, AnalysisType, WithReinforcement, Component):
##        '-no docstring-'
##        #return Displacement, PosX, Combination, ResultValue
##
##    def GetLineDisplacementsByLoadCaseId(self, LineId, LoadCaseId, LoadLevelOrTimeStep, AnalysisType, WithReinforcement):
##        '-no docstring-'
##        #return Displacements, PosX, ResultValue
##
##    def GetLineDisplacementsByLoadCombinationId(self, LineId, LoadCombinationId, LoadLevel, AnalysisType, WithReinforcement):
##        '-no docstring-'
##        #return Displacements, PosX, ResultValue
##
##    def GetEnvelopeLineDisplacements(self, LineId, MinMaxType, AnalysisType, WithReinforcement, Component):
##        '-no docstring-'
##        #return Displacements, PosX, ResultValue
##
##    def GetCriticalLineDisplacements(self, LineId, MinMaxType, CombinationType, AnalysisType, WithReinforcement, Component):
##        '-no docstring-'
##        #return Displacements, PosX, ResultValue
##
##    def GetAllLineDisplacementsByLoadCaseId(self, LoadCaseId, LoadLevelOrTimeStep, AnalysisType, WithReinforcement):
##        '-no docstring-'
##        #return SectionCounts, Displacements, PosX, ResultValue
##
##    def GetAllLineDisplacementsByLoadCombinationId(self, LoadCombinationId, LoadLevel, AnalysisType, WithReinforcement):
##        '-no docstring-'
##        #return SectionCounts, Displacements, PosX, ResultValue
##
##    def GetAllEnvelopeLineDisplacements(self, MinMaxType, AnalysisType, WithReinforcement, Component):
##        '-no docstring-'
##        #return SectionCounts, Displacements, PosX, ResultValue
##
##    def GetAllCriticalLineDisplacements(self, MinMaxType, CombinationType, AnalysisType, WithReinforcement, Component):
##        '-no docstring-'
##        #return SectionCounts, Displacements, PosX, ResultValue
##
##    def GetLineDisplacementsForResultBlocks(self, LineId, SectionId, AnalysisType, WithReinforcement):
##        '-no docstring-'
##        #return ResultBlockInfo, Displacements, PosX, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    AnalysisType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LoadCaseId = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LoadCombinationId = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    MinMaxType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    CombinationType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LoadLevelOrModeShapeOrTimeStep = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    WithReinforcement = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Component = property(_get, _set, doc = _set.__doc__)
##
##    def NodalDisplacementByLoadCaseId(self, NodeId):
##        '-no docstring-'
##        #return Displacement, Combination, ResultValue
##
##    def NodalDisplacementByLoadCombinationId(self, NodeId):
##        '-no docstring-'
##        #return Displacement, Combination, ResultValue
##
##    def EnvelopeNodalDisplacement(self, NodeId):
##        '-no docstring-'
##        #return Displacement, Combination, ResultValue
##
##    def CriticalNodalDisplacement(self, NodeId):
##        '-no docstring-'
##        #return Displacement, Combination, ResultValue
##
##    def AllNodalDisplacementsByLoadCaseId(self):
##        '-no docstring-'
##        #return Displacements, ResultValue
##
##    def AllNodalDisplacementsByLoadCombinationId(self):
##        '-no docstring-'
##        #return Displacements, ResultValue
##
##    def AllEnvelopeNodalDisplacements(self):
##        '-no docstring-'
##        #return Displacements, ResultValue
##
##    def AllCriticalNodalDisplacements(self):
##        '-no docstring-'
##        #return Displacements, ResultValue
##
##    def NodalDisplacementsForResultBlocks(self, NodeId):
##        '-no docstring-'
##        #return ResultBlockInfo, Displacements, ResultValue
##
##    def LineDisplacementByLoadCaseId(self, LineId, SectionId):
##        '-no docstring-'
##        #return Displacement, PosX, Combination, ResultValue
##
##    def LineDisplacementByLoadCombinationId(self, LineId, SectionId):
##        '-no docstring-'
##        #return Displacement, PosX, Combination, ResultValue
##
##    def EnvelopeLineDisplacement(self, LineId, SectionId):
##        '-no docstring-'
##        #return Displacement, PosX, Combination, ResultValue
##
##    def CriticalLineDisplacement(self, LineId, SectionId):
##        '-no docstring-'
##        #return Displacement, PosX, Combination, ResultValue
##
##    def LineDisplacementsByLoadCaseId(self, LineId):
##        '-no docstring-'
##        #return Displacements, PosX, ResultValue
##
##    def LineDisplacementsByLoadCombinationId(self, LineId):
##        '-no docstring-'
##        #return Displacements, PosX, ResultValue
##
##    def EnvelopeLineDisplacements(self, LineId):
##        '-no docstring-'
##        #return Displacements, PosX, ResultValue
##
##    def CriticalLineDisplacements(self, LineId):
##        '-no docstring-'
##        #return Displacements, PosX, ResultValue
##
##    def AllLineDisplacementsByLoadCaseId(self):
##        '-no docstring-'
##        #return SectionCounts, Displacements, PosX, ResultValue
##
##    def AllLineDisplacementsByLoadCombinationId(self):
##        '-no docstring-'
##        #return SectionCounts, Displacements, PosX, ResultValue
##
##    def AllEnvelopeLineDisplacements(self):
##        '-no docstring-'
##        #return SectionCounts, Displacements, PosX, ResultValue
##
##    def AllCriticalLineDisplacements(self):
##        '-no docstring-'
##        #return SectionCounts, Displacements, PosX, ResultValue
##
##    def LineDisplacementsForResultBlocks(self, LineId, SectionId):
##        '-no docstring-'
##        #return ResultBlockInfo, Displacements, PosX, ResultValue
##
##    def GetEndReleasesDeformationsByLoadCaseId(self, LineId, LoadCaseId, LoadLevelOrTimeStep, AnalysisType):
##        '-no docstring-'
##        #return StartDisplacement, EndDisplacement, StartCombination, EndCombination, ResultValue
##
##    def GetEndReleasesDeformationsByLoadCombinationId(self, LineId, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return StartDisplacement, EndDisplacement, StartCombination, EndCombination, ResultValue
##
##    def GetEnvelopeEndReleasesDeformations(self, LineId, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return StartDisplacement, EndDisplacement, StartCombination, EndCombination, ResultValue
##
##    def GetCriticalEndReleasesDeformations(self, LineId, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return StartDisplacement, EndDisplacement, StartCombination, EndCombination, ResultValue
##
##    def GetAllEndReleasesDeformationsByLoadCaseId(self, LoadCaseId, LoadLevelOrTimeStep, AnalysisType):
##        '-no docstring-'
##        #return StartDisplacements, EndDisplacements, ResultValue
##
##    def GetAllEndReleasesDeformationsByLoadCombinationId(self, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return StartDisplacements, EndDisplacements, ResultValue
##
##    def GetAllEnvelopeEndReleasesDeformations(self, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return StartDisplacements, EndDisplacements, ResultValue
##
##    def GetAllCriticalEndReleasesDeformations(self, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return StartDisplacements, EndDisplacements, ResultValue
##
##    def EndReleasesDeformationsByLoadCaseId(self, LineId):
##        '-no docstring-'
##        #return StartDisplacement, EndDisplacement, StartCombination, EndCombination, ResultValue
##
##    def EndReleasesDeformationsByLoadCombinationId(self, LineId):
##        '-no docstring-'
##        #return StartDisplacement, EndDisplacement, StartCombination, EndCombination, ResultValue
##
##    def EnvelopeEndReleasesDeformations(self, LineId):
##        '-no docstring-'
##        #return StartDisplacement, EndDisplacement, StartCombination, EndCombination, ResultValue
##
##    def CriticalEndReleasesDeformations(self, LineId):
##        '-no docstring-'
##        #return StartDisplacement, EndDisplacement, StartCombination, EndCombination, ResultValue
##
##    def AllEndReleasesDeformationsByLoadCaseId(self):
##        '-no docstring-'
##        #return StartDisplacements, EndDisplacements, ResultValue
##
##    def AllEndReleasesDeformationsByLoadCombinationId(self):
##        '-no docstring-'
##        #return StartDisplacements, EndDisplacements, ResultValue
##
##    def AllEnvelopeEndReleasesDeformations(self):
##        '-no docstring-'
##        #return StartDisplacements, EndDisplacements, ResultValue
##
##    def AllCriticalEndReleasesDeformations(self):
##        '-no docstring-'
##        #return StartDisplacements, EndDisplacements, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    EnvelopeUID = property(_get, _set, doc = _set.__doc__)
##
##    def GetEnvelopeNodalDisplacement2(self, NodeId, MinMaxType, AnalysisType, WithReinforcement, Component):
##        'LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count'
##        #return Displacement, LoadCaseOrCombinationId, LoadLevel, ResultValue
##
##    def GetCriticalNodalDisplacement2(self, NodeId, MinMaxType, CombinationType, AnalysisType, WithReinforcement, Component):
##        '-no docstring-'
##        #return Displacement, CriticalCombinationType, Factors, LoadCaseIds, ResultValue
##
##    def GetEnvelopeLineDisplacement2(self, LineId, SectionId, MinMaxType, AnalysisType, WithReinforcement, Component):
##        'LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count'
##        #return Displacement, PosX, LoadCaseOrCombinationId, LoadLevel, ResultValue
##
##    def GetCriticalLineDisplacement2(self, LineId, SectionId, MinMaxType, CombinationType, AnalysisType, WithReinforcement, Component):
##        '-no docstring-'
##        #return Displacement, PosX, CriticalCombinationType, Factors, LoadCaseIds, ResultValue
##
##    def EnvelopeNodalDisplacement2(self, NodeId):
##        'LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count'
##        #return Displacement, LoadCaseOrCombinationId, LoadLevel, ResultValue
##
##    def CriticalNodalDisplacement2(self, NodeId):
##        '-no docstring-'
##        #return Displacement, CriticalCombinationType, Factors, LoadCaseIds, ResultValue
##
##    def EnvelopeLineDisplacement2(self, LineId, SectionId):
##        'LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count'
##        #return Displacement, PosX, LoadCaseOrCombinationId, LoadLevel, ResultValue
##
##    def CriticalLineDisplacement2(self, LineId, SectionId):
##        '-no docstring-'
##        #return Displacement, PosX, CriticalCombinationType, Factors, LoadCaseIds, ResultValue
##
##    def GetMemberDisplacementsByLoadCaseId(self, MemberID, LoadCaseId, LoadLevelOrModeShapeOrTimeStep, AnalysisType, WithReinforcement):
##        '-no docstring-'
##        #return Displacements, PosX, ResultValue
##
##    def GetMemberDisplacementsByLoadCombinationId(self, MemberID, LoadCombinationId, LoadLevelOrModeShapeOrTimeStep, AnalysisType, WithReinforcement):
##        '-no docstring-'
##        #return Displacements, PosX, ResultValue
##
##    def GetEnvelopeMemberDisplacements(self, MemberID, EnvelopeUID, MinMaxType, AnalysisType, Component, WithReinforcement):
##        '-no docstring-'
##        #return Displacements, LoadCaseOrCombinationIds, LoadLevels, PosX, ResultValue
##
##    def GetCriticalMemberDisplacements(self, MemberID, MinMaxType, CombinationType, AnalysisType, Component, WithReinforcement):
##        '-no docstring-'
##        #return Displacements, PosX, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    DisplacementSystem = property(_get, _set, doc = _set.__doc__)
##
##    def SaveMemberDisplacementsToMetaFileByLoadCaseID(self, FileName, MemberID, LoadCaseId, LoadLevel, AnalysisType, Width, Height, RelativeToLeft, RelativeToRight, Position, ColourMode):
##        'minHeight = 580, minWidth = 640 '
##        #return ResultValue
##
##    def SaveMemberDisplacementsToMetaFileByLoadCombinationID(self, FileName, MemberID, LoadCombinationId, LoadLevel, AnalysisType, Width, Height, RelativeToLeft, RelativeToRight, Position, ColourMode):
##        'minHeight = 580, minWidth = 640 '
##        #return ResultValue
##
##    def SaveEnvelopeMemberDisplacementsToMetaFile(self, FileName, MemberID, EnvelopeUID, AnalysisType, Width, Height, EnvelopeOnly, RelativeToLeft, RelativeToRight, Position, ColourMode):
##        'minHeight = 580, minWidth = 640 '
##        #return ResultValue
##
##    def SaveCriticalMemberDisplacementsToMetaFile(self, FileName, MemberID, CombinationType, AnalysisType, Width, Height, EnvelopeOnly, RelativeToLeft, RelativeToRight, Position, ColourMode):
##        'minHeight = 580, minWidth = 640 '
##        #return ResultValue
##
##    def VirtualBeamOrStripDisplacementsByLoadCaseId(self, Index, ChainId):
##        '-no docstring-'
##        #return Displacements, Pos, ResultValue
##
##    def VirtualBeamOrStripDisplacementsByLoadCombinationId(self, Index, ChainId):
##        '-no docstring-'
##        #return Displacements, Pos, ResultValue
##
##    def EnvelopeVirtualBeamOrStripDisplacements(self, Index, ChainId):
##        '-no docstring-'
##        #return Displacements, Pos, Combination, ResultValue
##
##    def CriticalVirtualBeamOrStripDisplacements(self, Index, ChainId):
##        '-no docstring-'
##        #return Displacements, Pos, Combination, ResultValue
##
##    def EnvelopeVirtualBeamOrStripDisplacements2(self, Index, ChainId):
##        '-no docstring-'
##        #return Displacements, Pos, LoadCaseOrCombinationIds, LoadLevels, ResultValue
##
##    def CriticalVirtualBeamOrStripDisplacement(self, Index, ChainId, SectionId):
##        '-no docstring-'
##        #return Displacement, Pos, Combination, ResultValue
##
##    def CriticalVirtualBeamOrStripDisplacement2(self, Index, ChainId, SectionId):
##        '-no docstring-'
##        #return Displacement, Pos, CriticalCombinationType, Factors, LoadCaseIds, ResultValue
##
##    def SaveVirtualBeamOrStripDisplacementsToMetaFileByLoadCaseID(self, FileName, Id, LoadCaseId, LoadLevel, AnalysisType, Width, Height, RelativeToLeft, RelativeToRight, Position, ColourMode):
##        'minHeight = 580, minWidth = 640 '
##        #return ResultValue
##
##    def SaveVirtualBeamOrStripDisplacementsToMetaFileByLoadCombinationID(self, FileName, Id, LoadCombinationId, LoadLevel, AnalysisType, Width, Height, RelativeToLeft, RelativeToRight, Position, ColourMode):
##        'minHeight = 580, minWidth = 640 '
##        #return ResultValue
##
##    def SaveEnvelopeVirtualBeamOrStripDisplacementsToMetaFile(self, FileName, Id, EnvelopeUID, AnalysisType, Width, Height, EnvelopeOnly, RelativeToLeft, RelativeToRight, Position, ColourMode):
##        'minHeight = 580, minWidth = 640 '
##        #return ResultValue
##
##    def SaveCriticalVirtualBeamOrStripDisplacementsToMetaFile(self, FileName, Id, CombinationType, AnalysisType, Width, Height, EnvelopeOnly, RelativeToLeft, RelativeToRight, Position, ColourMode):
##        'minHeight = 580, minWidth = 640 '
##        #return ResultValue
##
##    def SetUserCreep(self, Creep):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def UserCreep(self):
##        '-no docstring-'
##        #return Value
##

class RCSOptimizationResultsPredefinedShapes(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{E264C2CD-CFF1-48D9-8A61-75405E60C2A1}')
RCSOptimizationResultsPredefinedShapes._fields_ = [
    ('OptimizationEfficiency', c_double),
    ('Efficiency', c_double),
    ('M', c_double),
    ('DeltaM', c_double),
    ('GroupCrossSection', c_int),
]
assert sizeof(RCSOptimizationResultsPredefinedShapes) == 40, sizeof(RCSOptimizationResultsPredefinedShapes)
assert alignment(RCSOptimizationResultsPredefinedShapes) == 8, alignment(RCSOptimizationResultsPredefinedShapes)
IAxisVMCrossSectionOptimization._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'GroupCount',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'GroupCrossSectionCount',
              ( ['in'], c_int, 'GroupIndex' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(203), 'propget'], HRESULT, 'OptimizationType',
              ( ['in'], c_int, 'GroupIndex' ),
              ( ['out', 'retval'], POINTER(ECrossSectionOptimizationType), 'Value' )),
    COMMETHOD([dispid(204)], HRESULT, 'AddGroup',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], ECrossSectionOptimizationType, 'OptimizationType' ),
              ( ['in'], _midlSAFEARRAY(c_int), 'MemberDesignIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205)], HRESULT, 'AddGroup_vb',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], ECrossSectionOptimizationType, 'OptimizationType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MemberDesignIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'AddCrossSectionFromModel',
              ( ['in'], c_int, 'GroupIndex' ),
              ( ['in'], c_int, 'CrossSectionIndex' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'AddCrossSectionFromCatalog',
              ( ['in'], c_int, 'GroupIndex' ),
              ( ['in'], BSTR, 'CrossSectionName' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208)], HRESULT, 'AddCrossSectionFromDialog',
              ( ['in'], c_int, 'GroupIndex' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209)], HRESULT, 'DeleteGroupCrossSection',
              ( ['in'], c_int, 'GroupIndex' ),
              ( ['in'], c_int, 'GroupCrossSectionIndex' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(210)], HRESULT, 'GetOptimizationChecks',
              ( ['in'], c_int, 'GroupIndex' ),
              ( ['out'], POINTER(ELongBoolean), 'Strength' ),
              ( ['out'], POINTER(ELongBoolean), 'FlexuralBuckling' ),
              ( ['out'], POINTER(ELongBoolean), 'LateralTorsionalBuckling' ),
              ( ['out'], POINTER(ELongBoolean), 'WebBuckling' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(211)], HRESULT, 'GetParametersForPredefinedShapes',
              ( ['in'], c_int, 'GroupIndex' ),
              ( ['in', 'out'], POINTER(RCSOptimizationParamsGeneral), 'GeneralParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(212)], HRESULT, 'GetParametersForParametricOptimization',
              ( ['in'], c_int, 'GroupIndex' ),
              ( ['in', 'out'], POINTER(RCSParametricOptimizationParams), 'ParametricParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(213)], HRESULT, 'SetOptimizationChecks',
              ( ['in'], c_int, 'GroupIndex' ),
              ( ['in'], ELongBoolean, 'Strength' ),
              ( ['in'], ELongBoolean, 'FlexuralBuckling' ),
              ( ['in'], ELongBoolean, 'LateralTorsionalBuckling' ),
              ( ['in'], ELongBoolean, 'WebBuckling' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(214)], HRESULT, 'SetParametersForPredefinedShapes',
              ( ['in'], c_int, 'GroupIndex' ),
              ( ['in', 'out'], POINTER(RCSOptimizationParamsGeneral), 'GeneralParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(215)], HRESULT, 'SetParametersForParametricOptimization',
              ( ['in'], c_int, 'GroupIndex' ),
              ( ['in', 'out'], POINTER(RCSParametricOptimizationParams), 'ParametricParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(216)], HRESULT, 'GetGroupCrossSections',
              ( ['in'], c_int, 'GroupIndex' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'ModelCrossSectionIDs' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'TableNames' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'CrossSectionNames' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(217)], HRESULT, 'GetMemberDesignIDs',
              ( ['in'], c_int, 'GroupIndex' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'MemberDesignIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(218)], HRESULT, 'SetMemberDesignIDs',
              ( ['in'], c_int, 'GroupIndex' ),
              ( ['in'], _midlSAFEARRAY(c_int), 'MemberDesignIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(219)], HRESULT, 'SetMemberDesignIDs_vb',
              ( ['in'], c_int, 'GroupIndex' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MemberDesignIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(220), 'propget'], HRESULT, 'AnalysisType',
              ( ['out', 'retval'], POINTER(EAnalysisType), 'Value' )),
    COMMETHOD([dispid(220), 'propput'], HRESULT, 'AnalysisType',
              ( ['in'], EAnalysisType, 'Value' )),
    COMMETHOD([dispid(221), 'propget'], HRESULT, 'CallMainProgress',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(221), 'propput'], HRESULT, 'CallMainProgress',
              ( ['in'], ELongBoolean, 'Value' )),
    COMMETHOD([dispid(222), 'propget'], HRESULT, 'CombinationType',
              ( ['out', 'retval'], POINTER(ECombinationType), 'Value' )),
    COMMETHOD([dispid(222), 'propput'], HRESULT, 'CombinationType',
              ( ['in'], ECombinationType, 'Value' )),
    COMMETHOD([dispid(223), 'propget'], HRESULT, 'EnvelopeUID',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(223), 'propput'], HRESULT, 'EnvelopeUID',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(224), 'propget'], HRESULT, 'LoadCaseId',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(224), 'propput'], HRESULT, 'LoadCaseId',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(225), 'propget'], HRESULT, 'LoadCombinationId',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(225), 'propput'], HRESULT, 'LoadCombinationId',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(226), 'propget'], HRESULT, 'LoadLevel',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(226), 'propput'], HRESULT, 'LoadLevel',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(227)], HRESULT, 'GetParametricShapeOptimizationResultsByLoadCaseId',
              ( ['in'], c_int, 'GroupIndex' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RCSOptimizationResultsParametric), 'ParametricResults' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(228)], HRESULT, 'GetParametricShapeOptimizationResultsByLoadCombinationId',
              ( ['in'], c_int, 'GroupIndex' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RCSOptimizationResultsParametric), 'ParametricResults' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(229)], HRESULT, 'GetEnvelopeParametricShapeOptimizationResults',
              ( ['in'], c_int, 'GroupIndex' ),
              ( ['in'], c_int, 'EnvelopeUID' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RCSOptimizationResultsParametric), 'ParametricResults' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(230)], HRESULT, 'GetCriticalParametricShapeOptimizationResults',
              ( ['in'], c_int, 'GroupIndex' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RCSOptimizationResultsParametric), 'ParametricResults' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(231)], HRESULT, 'ParametricShapeOptimizationResultsByLoadCaseId',
              ( ['in'], c_int, 'GroupIndex' ),
              ( ['in', 'out'], POINTER(RCSOptimizationResultsParametric), 'ParametricResults' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(232)], HRESULT, 'ParametricShapeOptimizationResultsByLoadCombinationId',
              ( ['in'], c_int, 'GroupIndex' ),
              ( ['in', 'out'], POINTER(RCSOptimizationResultsParametric), 'ParametricResults' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(233)], HRESULT, 'EnvelopeParametricShapeOptimizationResults',
              ( ['in'], c_int, 'GroupIndex' ),
              ( ['in', 'out'], POINTER(RCSOptimizationResultsParametric), 'ParametricResults' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(234)], HRESULT, 'CriticalParametricShapeOptimizationResults',
              ( ['in'], c_int, 'GroupIndex' ),
              ( ['in', 'out'], POINTER(RCSOptimizationResultsParametric), 'ParametricResults' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(235)], HRESULT, 'GetPredefinedShapesOptimizationResultsByLoadCaseId',
              ( ['in'], c_int, 'GroupIndex' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RCSOptimizationResultsPredefinedShapes)), 'PredefinedShapesResults' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(236)], HRESULT, 'GetPredefinedShapesOptimizationResultsByLoadCombinationId',
              ( ['in'], c_int, 'GroupIndex' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RCSOptimizationResultsPredefinedShapes)), 'PredefinedShapesResults' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(237)], HRESULT, 'GetEnvelopePredefinedShapesOptimizationResults',
              ( ['in'], c_int, 'GroupIndex' ),
              ( ['in'], c_int, 'EnvelopeUID' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RCSOptimizationResultsPredefinedShapes)), 'PredefinedShapesResults' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(238)], HRESULT, 'GetCriticalPredefinedShapesOptimizationResults',
              ( ['in'], c_int, 'GroupIndex' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RCSOptimizationResultsPredefinedShapes)), 'PredefinedShapesResults' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(239)], HRESULT, 'PredefinedShapesOptimizationResultsByLoadCaseId',
              ( ['in'], c_int, 'GroupIndex' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RCSOptimizationResultsPredefinedShapes)), 'PredefinedShapesResults' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(240)], HRESULT, 'PredefinedShapesOptimizationResultsByLoadCombinationId',
              ( ['in'], c_int, 'GroupIndex' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RCSOptimizationResultsPredefinedShapes)), 'PredefinedShapesResults' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(241)], HRESULT, 'EnvelopePredefinedShapesOptimizationResults',
              ( ['in'], c_int, 'GroupIndex' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RCSOptimizationResultsPredefinedShapes)), 'PredefinedShapesResults' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(242)], HRESULT, 'CriticalPredefinedShapesOptimizationResults',
              ( ['in'], c_int, 'GroupIndex' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RCSOptimizationResultsPredefinedShapes)), 'PredefinedShapesResults' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(243)], HRESULT, 'ReplaceCrossSectionToGroupCrossSection',
              ( ['in'], c_int, 'GroupIndex' ),
              ( ['in'], c_int, 'GroupCrossSectionIndex' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(244)], HRESULT, 'ReplaceCrossSectionToModelCrossSection',
              ( ['in'], c_int, 'GroupIndex' ),
              ( ['in'], c_int, 'ModelCrossSectionIndex' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(245), 'propget'], HRESULT, 'GroupName',
              ( ['in'], c_int, 'GroupIndex' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(246), 'propget'], HRESULT, 'GroupCrossSectionShape',
              ( ['in'], c_int, 'GroupIndex' ),
              ( ['out', 'retval'], POINTER(ECrossSectionShape), 'Value' )),
    COMMETHOD([dispid(247)], HRESULT, 'DeleteGroup',
              ( ['in'], c_int, 'GroupIndex' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(248), 'propget'], HRESULT, 'GroupCrossSectionShapeEx',
              ( ['in'], c_int, 'GroupIndex' ),
              ( ['out', 'retval'], POINTER(ECrossSectionShapeEx), 'Value' )),
]
################################################################
## code template for IAxisVMCrossSectionOptimization implementation
##class IAxisVMCrossSectionOptimization_Impl(object):
##    @property
##    def GroupCount(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def GroupCrossSectionCount(self, GroupIndex):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def OptimizationType(self, GroupIndex):
##        '-no docstring-'
##        #return Value
##
##    def AddGroup(self, Name, OptimizationType, MemberDesignIDs):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddGroup_vb(self, Name, OptimizationType):
##        '-no docstring-'
##        #return MemberDesignIDs, ResultValue
##
##    def AddCrossSectionFromModel(self, GroupIndex, CrossSectionIndex):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddCrossSectionFromCatalog(self, GroupIndex, CrossSectionName):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddCrossSectionFromDialog(self, GroupIndex):
##        '-no docstring-'
##        #return ResultValue
##
##    def DeleteGroupCrossSection(self, GroupIndex, GroupCrossSectionIndex):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetOptimizationChecks(self, GroupIndex):
##        '-no docstring-'
##        #return Strength, FlexuralBuckling, LateralTorsionalBuckling, WebBuckling, ResultValue
##
##    def GetParametersForPredefinedShapes(self, GroupIndex):
##        '-no docstring-'
##        #return GeneralParams, ResultValue
##
##    def GetParametersForParametricOptimization(self, GroupIndex):
##        '-no docstring-'
##        #return ParametricParams, ResultValue
##
##    def SetOptimizationChecks(self, GroupIndex, Strength, FlexuralBuckling, LateralTorsionalBuckling, WebBuckling):
##        '-no docstring-'
##        #return ResultValue
##
##    def SetParametersForPredefinedShapes(self, GroupIndex):
##        '-no docstring-'
##        #return GeneralParams, ResultValue
##
##    def SetParametersForParametricOptimization(self, GroupIndex):
##        '-no docstring-'
##        #return ParametricParams, ResultValue
##
##    def GetGroupCrossSections(self, GroupIndex):
##        '-no docstring-'
##        #return ModelCrossSectionIDs, TableNames, CrossSectionNames, ResultValue
##
##    def GetMemberDesignIDs(self, GroupIndex):
##        '-no docstring-'
##        #return MemberDesignIDs, ResultValue
##
##    def SetMemberDesignIDs(self, GroupIndex, MemberDesignIDs):
##        '-no docstring-'
##        #return ResultValue
##
##    def SetMemberDesignIDs_vb(self, GroupIndex):
##        '-no docstring-'
##        #return MemberDesignIDs, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    AnalysisType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    CallMainProgress = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    CombinationType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    EnvelopeUID = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LoadCaseId = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LoadCombinationId = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LoadLevel = property(_get, _set, doc = _set.__doc__)
##
##    def GetParametricShapeOptimizationResultsByLoadCaseId(self, GroupIndex, LoadCaseId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return ParametricResults, ResultValue
##
##    def GetParametricShapeOptimizationResultsByLoadCombinationId(self, GroupIndex, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return ParametricResults, ResultValue
##
##    def GetEnvelopeParametricShapeOptimizationResults(self, GroupIndex, EnvelopeUID, AnalysisType):
##        '-no docstring-'
##        #return ParametricResults, ResultValue
##
##    def GetCriticalParametricShapeOptimizationResults(self, GroupIndex, CombinationType, AnalysisType):
##        '-no docstring-'
##        #return ParametricResults, ResultValue
##
##    def ParametricShapeOptimizationResultsByLoadCaseId(self, GroupIndex):
##        '-no docstring-'
##        #return ParametricResults, ResultValue
##
##    def ParametricShapeOptimizationResultsByLoadCombinationId(self, GroupIndex):
##        '-no docstring-'
##        #return ParametricResults, ResultValue
##
##    def EnvelopeParametricShapeOptimizationResults(self, GroupIndex):
##        '-no docstring-'
##        #return ParametricResults, ResultValue
##
##    def CriticalParametricShapeOptimizationResults(self, GroupIndex):
##        '-no docstring-'
##        #return ParametricResults, ResultValue
##
##    def GetPredefinedShapesOptimizationResultsByLoadCaseId(self, GroupIndex, LoadCaseId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return PredefinedShapesResults, ResultValue
##
##    def GetPredefinedShapesOptimizationResultsByLoadCombinationId(self, GroupIndex, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return PredefinedShapesResults, ResultValue
##
##    def GetEnvelopePredefinedShapesOptimizationResults(self, GroupIndex, EnvelopeUID, AnalysisType):
##        '-no docstring-'
##        #return PredefinedShapesResults, ResultValue
##
##    def GetCriticalPredefinedShapesOptimizationResults(self, GroupIndex, CombinationType, AnalysisType):
##        '-no docstring-'
##        #return PredefinedShapesResults, ResultValue
##
##    def PredefinedShapesOptimizationResultsByLoadCaseId(self, GroupIndex):
##        '-no docstring-'
##        #return PredefinedShapesResults, ResultValue
##
##    def PredefinedShapesOptimizationResultsByLoadCombinationId(self, GroupIndex):
##        '-no docstring-'
##        #return PredefinedShapesResults, ResultValue
##
##    def EnvelopePredefinedShapesOptimizationResults(self, GroupIndex):
##        '-no docstring-'
##        #return PredefinedShapesResults, ResultValue
##
##    def CriticalPredefinedShapesOptimizationResults(self, GroupIndex):
##        '-no docstring-'
##        #return PredefinedShapesResults, ResultValue
##
##    def ReplaceCrossSectionToGroupCrossSection(self, GroupIndex, GroupCrossSectionIndex):
##        '-no docstring-'
##        #return ResultValue
##
##    def ReplaceCrossSectionToModelCrossSection(self, GroupIndex, ModelCrossSectionIndex):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def GroupName(self, GroupIndex):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def GroupCrossSectionShape(self, GroupIndex):
##        '-no docstring-'
##        #return Value
##
##    def DeleteGroup(self, GroupIndex):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def GroupCrossSectionShapeEx(self, GroupIndex):
##        '-no docstring-'
##        #return Value
##

RLoadTrussFault._fields_ = [
    ('LoadCaseId', c_int),
    ('LineId', c_int),
    ('DL', c_double),
]
assert sizeof(RLoadTrussFault) == 16, sizeof(RLoadTrussFault)
assert alignment(RLoadTrussFault) == 8, alignment(RLoadTrussFault)
IAxisVMDomainSupports._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAxisVMDomainSupport)), 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(203), 'propget'], HRESULT, 'Selected',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(203), 'propput'], HRESULT, 'Selected',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], ELongBoolean, 'Value' )),
    COMMETHOD([dispid(204), 'propget'], HRESULT, 'SelCount',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(205)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'DeleteSelected',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'AddDomainElasticFoundation',
              ( ['in'], c_int, 'DomainId' ),
              ( ['in', 'out'], POINTER(RStiffnessesXYZ), 'StiffnessesXYZ' ),
              ( ['in', 'out'], POINTER(RNonLinearityXYZ), 'NonLinearityXYZ' ),
              ( ['in', 'out'], POINTER(RResistancesXYZ), 'ResistancesXYZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208)], HRESULT, 'SelectAll',
              ( ['in'], ELongBoolean, 'Select' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209), 'propget'], HRESULT, 'DomainId',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(210)], HRESULT, 'GetSelectedItemIds',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'ItemIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(213)], HRESULT, 'AddDomainPasternakSupport',
              ( ['in'], c_int, 'DomainId' ),
              ( ['in', 'out'], POINTER(RStiffnessesXYZ), 'StiffnessesXYZ' ),
              ( ['in'], c_double, 'ShearStiffness' ),
              ( ['in', 'out'], POINTER(RNonLinearityXYZ), 'NonLinearityXYZ' ),
              ( ['in', 'out'], POINTER(RResistancesXYZ), 'ResistancesXYZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
]
################################################################
## code template for IAxisVMDomainSupports implementation
##class IAxisVMDomainSupports_Impl(object):
##    @property
##    def Item(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    Selected = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SelCount(self):
##        '-no docstring-'
##        #return Value
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def DeleteSelected(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddDomainElasticFoundation(self, DomainId):
##        '-no docstring-'
##        #return StiffnessesXYZ, NonLinearityXYZ, ResistancesXYZ, ResultValue
##
##    def SelectAll(self, Select):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def DomainId(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def GetSelectedItemIds(self):
##        '-no docstring-'
##        #return ItemIds, ResultValue
##
##    def AddDomainPasternakSupport(self, DomainId, ShearStiffness):
##        '-no docstring-'
##        #return StiffnessesXYZ, NonLinearityXYZ, ResistancesXYZ, Value
##

class RRibbedDomainParameters(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{0AE7BA5D-8664-4AB1-931A-C1BAC66C4D0E}')
RRibbedDomainParameters._fields_ = [
    ('AutoExcentricityType', EAutoExcentricityType),
    ('h', c_double),
    ('w', c_double),
    ('d', c_double),
    ('exc', c_double),
]
assert sizeof(RRibbedDomainParameters) == 40, sizeof(RRibbedDomainParameters)
assert alignment(RRibbedDomainParameters) == 8, alignment(RRibbedDomainParameters)
IAxisVMLoadPanelsEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Cleared'),
    DISPMETHOD([dispid(202)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]
IAxisVMPolygon2d._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Hole',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(201), 'propput'], HRESULT, 'Hole',
              ( ['in'], ELongBoolean, 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'LineCount',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(203), 'propget'], HRESULT, 'Line',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(AxisVMLine2d)), 'Value' )),
    COMMETHOD([dispid(203), 'propput'], HRESULT, 'Line',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(AxisVMLine2d), 'Value' )),
    COMMETHOD([dispid(204)], HRESULT, 'AddLine',
              ( ['in'], POINTER(AxisVMLine2d), 'Line' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205)], HRESULT, 'DeleteLine',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'Clear'),
]
################################################################
## code template for IAxisVMPolygon2d implementation
##class IAxisVMPolygon2d_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Hole = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def LineCount(self):
##        '-no docstring-'
##        #return Value
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    Line = property(_get, _set, doc = _set.__doc__)
##
##    def AddLine(self, Line):
##        '-no docstring-'
##        #return ResultValue
##
##    def DeleteLine(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def Clear(self):
##        '-no docstring-'
##        #return 
##

class AxisVMStresses(CoClass):
    'AxisVMStresses Object'
    _reg_clsid_ = GUID('{C16E9975-CFC1-41F4-9825-AC4F0027EE15}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMStresses(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMStresses Object'
    _iid_ = GUID('{C826CF3B-E315-467D-865A-15953603A9E9}')
    _idlflags_ = ['dual', 'oleautomation']
AxisVMStresses._com_interfaces_ = [IAxisVMStresses]
AxisVMStresses._outgoing_interfaces_ = [IAxisVMStressesEvents]

RLoadRibThermal._fields_ = [
    ('LoadCaseId', c_int),
    ('LineId', c_int),
    ('Tref', c_double),
    ('Ttop', c_double),
    ('Tbot', c_double),
    ('Axis', EAxis),
]
assert sizeof(RLoadRibThermal) == 40, sizeof(RLoadRibThermal)
assert alignment(RLoadRibThermal) == 8, alignment(RLoadRibThermal)
class RConcentratedMovingLoadOnBeam(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{9FF478C3-794B-41E3-ACD5-89DA635A65DB}')
RConcentratedMovingLoadOnBeam._fields_ = [
    ('SystemGL', ESystem),
    ('Position', c_double),
    ('Fx', c_double),
    ('Fy', c_double),
    ('Fz', c_double),
    ('Mx', c_double),
    ('My', c_double),
    ('Mz', c_double),
]
assert sizeof(RConcentratedMovingLoadOnBeam) == 64, sizeof(RConcentratedMovingLoadOnBeam)
assert alignment(RConcentratedMovingLoadOnBeam) == 8, alignment(RConcentratedMovingLoadOnBeam)
RLoadSurfaceEdge._fields_ = [
    ('LoadCaseId', c_int),
    ('SurfaceId', c_int),
    ('qx1', c_double),
    ('qx2', c_double),
    ('qx3', c_double),
    ('qx4', c_double),
    ('qy1', c_double),
    ('qy2', c_double),
    ('qy3', c_double),
    ('qy4', c_double),
    ('qz1', c_double),
    ('qz2', c_double),
    ('qz3', c_double),
    ('qz4', c_double),
    ('System1', ESystem),
    ('System2', ESystem),
    ('System3', ESystem),
    ('System4', ESystem),
    ('EdgeLoaded1', ELongBoolean),
    ('EdgeLoaded2', ELongBoolean),
    ('EdgeLoaded3', ELongBoolean),
    ('EdgeLoaded4', ELongBoolean),
    ('DistributionType1', ESurfaceDomainDistributionType),
    ('DistributionType2', ESurfaceDomainDistributionType),
    ('DistributionType3', ESurfaceDomainDistributionType),
    ('DistributionType4', ESurfaceDomainDistributionType),
]
assert sizeof(RLoadSurfaceEdge) == 152, sizeof(RLoadSurfaceEdge)
assert alignment(RLoadSurfaceEdge) == 8, alignment(RLoadSurfaceEdge)
RMovingLoadOnBeamItem._fields_ = [
    ('ItemType', ELoadType),
    ('Concentrated', RConcentratedMovingLoadOnBeam),
    ('Distributed', RDistributedMovingLoadOnBeam),
]
assert sizeof(RMovingLoadOnBeamItem) == 144, sizeof(RMovingLoadOnBeamItem)
assert alignment(RMovingLoadOnBeamItem) == 8, alignment(RMovingLoadOnBeamItem)
class RLinearFootingCalced(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{7A78D9C0-C177-4480-A811-50D33D8AA97B}')
RLinearFootingCalced._fields_ = [
    ('Calculated', ELongBoolean),
    ('x1', c_double),
    ('x2', c_double),
    ('StepMeasureSource', EPadFootingStepMeasureSource),
    ('dx1', c_double),
    ('dx2', c_double),
]
assert sizeof(RLinearFootingCalced) == 48, sizeof(RLinearFootingCalced)
assert alignment(RLinearFootingCalced) == 8, alignment(RLinearFootingCalced)

# values for enumeration 'ESurfaceStress'
ssSxx = 0
ssSyy = 1
ssSxy = 2
ssSxz = 3
ssSyz = 4
ssSVM = 5
ssS1 = 6
ssS2 = 7
ssAs = 8
ESurfaceStress = c_int # enum
class RSectionElementData(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{5EE6EAEF-C0E5-43C8-860A-835220871DB8}')
RSectionElementData._fields_ = [
    ('SurfaceIndex', c_int),
    ('ContourLineId1', c_int),
    ('ContourLineRatio1', c_double),
    ('ContourLineId2', c_int),
    ('ContourLineRatio2', c_double),
]
assert sizeof(RSectionElementData) == 32, sizeof(RSectionElementData)
assert alignment(RSectionElementData) == 8, alignment(RSectionElementData)
RLoadDomainFluid._fields_ = [
    ('LoadCaseId', c_int),
    ('Direction', EAxis),
    ('Coord1', c_double),
    ('Coord2', c_double),
    ('P1', c_double),
    ('P2', c_double),
    ('DomainId', c_int),
]
assert sizeof(RLoadDomainFluid) == 48, sizeof(RLoadDomainFluid)
assert alignment(RLoadDomainFluid) == 8, alignment(RLoadDomainFluid)
RLoadDomainConcentrated._fields_ = [
    ('LoadCaseId', c_int),
    ('DomainId', c_int),
    ('Fx', c_double),
    ('Fy', c_double),
    ('Fz', c_double),
    ('Mx', c_double),
    ('My', c_double),
    ('Mz', c_double),
    ('x', c_double),
    ('y', c_double),
    ('z', c_double),
    ('SystemGLR', ESystem),
    ('ReferenceId', c_int),
]
assert sizeof(RLoadDomainConcentrated) == 88, sizeof(RLoadDomainConcentrated)
assert alignment(RLoadDomainConcentrated) == 8, alignment(RLoadDomainConcentrated)
class RSurfacePointIndexes(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{E8CAB8CA-6A27-4E6D-B2B4-AE138A49D97F}')
RSurfacePointIndexes._fields_ = [
    ('ContourPointCount', c_int),
    ('ContourPoint1Index', c_int),
    ('ContourPoint2Index', c_int),
    ('ContourPoint3Index', c_int),
    ('ContourPoint4Index', c_int),
]
assert sizeof(RSurfacePointIndexes) == 20, sizeof(RSurfacePointIndexes)
assert alignment(RSurfacePointIndexes) == 4, alignment(RSurfacePointIndexes)
class RLinearFootingSpec(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{CB094B83-C340-4FF1-99F8-8E7C8F681522}')
RLinearFootingSpec._fields_ = [
    ('FixedX1', ELongBoolean),
    ('FixedX2', ELongBoolean),
    ('x1', c_double),
    ('x2', c_double),
    ('StepMeasureSource', EPadFootingStepMeasureSource),
    ('dx1', c_double),
    ('dx2', c_double),
]
assert sizeof(RLinearFootingSpec) == 48, sizeof(RLinearFootingSpec)
assert alignment(RLinearFootingSpec) == 8, alignment(RLinearFootingSpec)
class RImperfectionParams_V153(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{20101424-E161-4929-AAC2-53EF07AA808D}')
RImperfectionParams_V153._fields_ = [
    ('SwayDirection', ESwayDirection),
    ('SwayAngle', c_double),
    ('BaseHeightType', EBaseHeightType),
    ('BaseHeight', c_double),
    ('StructureAutoHeight', ELongBoolean),
    ('StructureHeight', c_double),
    ('Def', ELongBoolean),
    ('MaterialType', EImperfectionParMatType),
    ('ColumnsInvolved', c_int),
    ('Alpha_h', c_double),
    ('Alpha_m', c_double),
    ('Phi0', c_double),
    ('phi', c_double),
]
assert sizeof(RImperfectionParams_V153) == 96, sizeof(RImperfectionParams_V153)
assert alignment(RImperfectionParams_V153) == 8, alignment(RImperfectionParams_V153)
RLinearFootingParams._fields_ = [
    ('VerticalType', EPadFootingType),
    ('MaterialId', c_int),
    ('GroundToBottom', c_double),
    ('HeightMain', c_double),
    ('HeightStep', c_double),
    ('BlindThickness', c_double),
    ('FootingSpec', RLinearFootingSpec),
    ('FootingCalced', RLinearFootingCalced),
]
assert sizeof(RLinearFootingParams) == 136, sizeof(RLinearFootingParams)
assert alignment(RLinearFootingParams) == 8, alignment(RLinearFootingParams)
RLoadTrussThermal._fields_ = [
    ('LoadCaseId', c_int),
    ('LineId', c_int),
    ('Tref', c_double),
    ('T0', c_double),
]
assert sizeof(RLoadTrussThermal) == 24, sizeof(RLoadTrussThermal)
assert alignment(RLoadTrussThermal) == 8, alignment(RLoadTrussThermal)
class RNodeReinforcementValues(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{28560E98-5DEA-4609-A266-847B2026246E}')
RNodeReinforcementValues._fields_ = [
    ('Asbx', c_double),
    ('Asby', c_double),
    ('Astx', c_double),
    ('Asty', c_double),
]
assert sizeof(RNodeReinforcementValues) == 32, sizeof(RNodeReinforcementValues)
assert alignment(RNodeReinforcementValues) == 8, alignment(RNodeReinforcementValues)

# values for enumeration 'ELayerPenStyle'
lpsSolid = 0
lpsDash = 1
lpsDot = 2
lpsDashDot = 3
lpsDashDotDot = 4
ELayerPenStyle = c_int # enum

# values for enumeration 'ELayerShapeType'
lst3DLine = 0
lst3DPolygon = 1
lst3DPolygonFilled = 2
ELayerShapeType = c_int # enum

# values for enumeration 'ELayerType'
ltAxisVM = 0
ltDXF = 1
ltPDF = 2
ELayerType = c_int # enum
class RLayerShapeAttributes(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{7DEAFF74-36E3-4C64-ACE4-2E47ABA15395}')
class RLayerTextParams(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{21B9D33F-A700-48D6-89F1-9D0091D7030B}')
IAxisVMLayers._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'Colour',
              ( ['in'], c_int, 'LayerIndex' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202), 'propput'], HRESULT, 'Colour',
              ( ['in'], c_int, 'LayerIndex' ),
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(203), 'propget'], HRESULT, 'PenStyle',
              ( ['in'], c_int, 'LayerIndex' ),
              ( ['out', 'retval'], POINTER(ELayerPenStyle), 'Value' )),
    COMMETHOD([dispid(203), 'propput'], HRESULT, 'PenStyle',
              ( ['in'], c_int, 'LayerIndex' ),
              ( ['in'], ELayerPenStyle, 'Value' )),
    COMMETHOD([dispid(204), 'propget'], HRESULT, 'PenWidth',
              ( ['in'], c_int, 'LayerIndex' ),
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(204), 'propput'], HRESULT, 'PenWidth',
              ( ['in'], c_int, 'LayerIndex' ),
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(205), 'propget'], HRESULT, 'IsEmpty',
              ( ['in'], c_int, 'LayerIndex' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'ResultValue' )),
    COMMETHOD([dispid(206), 'propget'], HRESULT, 'TextsCount',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(207), 'propget'], HRESULT, 'ShapesCount',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(208), 'propget'], HRESULT, 'ShapeType',
              ( ['in'], c_int, 'ShapeIndex' ),
              ( ['out', 'retval'], POINTER(ELayerShapeType), 'Value' )),
    COMMETHOD([dispid(209), 'propget'], HRESULT, 'FontName',
              ( ['in'], c_int, 'TextIndex' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(209), 'propput'], HRESULT, 'FontName',
              ( ['in'], c_int, 'TextIndex' ),
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(210), 'propget'], HRESULT, 'Name',
              ( ['in'], c_int, 'LayerIndex' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(210), 'propput'], HRESULT, 'Name',
              ( ['in'], c_int, 'LayerIndex' ),
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(211), 'propget'], HRESULT, 'LayerType',
              ( ['in'], c_int, 'LayerIndex' ),
              ( ['out', 'retval'], POINTER(ELayerType), 'Value' )),
    COMMETHOD([dispid(212), 'propget'], HRESULT, 'Text',
              ( ['in'], c_int, 'TextIndex' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(212), 'propput'], HRESULT, 'Text',
              ( ['in'], c_int, 'TextIndex' ),
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(213)], HRESULT, 'AddLayer',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Colour' ),
              ( ['in'], ELayerPenStyle, 'PenStyle' ),
              ( ['in'], c_double, 'PenWidth' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(214)], HRESULT, 'AddShape',
              ( ['in'], ELayerShapeType, 'ShapeType' ),
              ( ['in'], POINTER(AxisVMLines3d), 'Polygon' ),
              ( ['in', 'out'], POINTER(RLayerShapeAttributes), 'LayerShapeAttributes' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(215)], HRESULT, 'AddText',
              ( ['in'], BSTR, 'Text' ),
              ( ['in'], BSTR, 'FontName' ),
              ( ['in', 'out'], POINTER(RLayerTextParams), 'TextParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(216)], HRESULT, 'DeleteLayer',
              ( ['in'], c_int, 'LayerIndex' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(217)], HRESULT, 'DeleteShape',
              ( ['in'], c_int, 'ShapeIndex' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(218)], HRESULT, 'DeleteText',
              ( ['in'], c_int, 'TextIndex' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(219)], HRESULT, 'GetShapeAttributes',
              ( ['in'], c_int, 'ShapeIndex' ),
              ( ['in', 'out'], POINTER(RLayerShapeAttributes), 'LayerShapeAttributes' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(220)], HRESULT, 'GetShapeIDs',
              ( ['in'], c_int, 'LayerIndex' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'ShapeIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(221)], HRESULT, 'GetShapePolygon',
              ( ['in'], c_int, 'ShapeIndex' ),
              ( ['out'], POINTER(POINTER(AxisVMLines3d)), 'Polygon' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(222)], HRESULT, 'GetTextParams',
              ( ['in'], c_int, 'TextIndex' ),
              ( ['in', 'out'], POINTER(RLayerTextParams), 'TextParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(223)], HRESULT, 'GetTextIDs',
              ( ['in'], c_int, 'LayerIndex' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'TextIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(224)], HRESULT, 'SetShapeAttributes',
              ( ['in'], c_int, 'ShapeIndex' ),
              ( ['in', 'out'], POINTER(RLayerShapeAttributes), 'LayerShapeAttributes' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(225)], HRESULT, 'SetTextParams',
              ( ['in'], c_int, 'TextIndex' ),
              ( ['in', 'out'], POINTER(RLayerTextParams), 'TextParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMLayers implementation
##class IAxisVMLayers_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def _get(self, LayerIndex):
##        '-no docstring-'
##        #return Value
##    def _set(self, LayerIndex, Value):
##        '-no docstring-'
##    Colour = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, LayerIndex):
##        '-no docstring-'
##        #return Value
##    def _set(self, LayerIndex, Value):
##        '-no docstring-'
##    PenStyle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, LayerIndex):
##        '-no docstring-'
##        #return Value
##    def _set(self, LayerIndex, Value):
##        '-no docstring-'
##    PenWidth = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def IsEmpty(self, LayerIndex):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def TextsCount(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def ShapesCount(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def ShapeType(self, ShapeIndex):
##        '-no docstring-'
##        #return Value
##
##    def _get(self, TextIndex):
##        '-no docstring-'
##        #return Value
##    def _set(self, TextIndex, Value):
##        '-no docstring-'
##    FontName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, LayerIndex):
##        '-no docstring-'
##        #return Value
##    def _set(self, LayerIndex, Value):
##        '-no docstring-'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def LayerType(self, LayerIndex):
##        '-no docstring-'
##        #return Value
##
##    def _get(self, TextIndex):
##        '-no docstring-'
##        #return Value
##    def _set(self, TextIndex, Value):
##        '-no docstring-'
##    Text = property(_get, _set, doc = _set.__doc__)
##
##    def AddLayer(self, Name, Colour, PenStyle, PenWidth):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddShape(self, ShapeType, Polygon):
##        '-no docstring-'
##        #return LayerShapeAttributes, ResultValue
##
##    def AddText(self, Text, FontName):
##        '-no docstring-'
##        #return TextParams, ResultValue
##
##    def DeleteLayer(self, LayerIndex):
##        '-no docstring-'
##        #return ResultValue
##
##    def DeleteShape(self, ShapeIndex):
##        '-no docstring-'
##        #return ResultValue
##
##    def DeleteText(self, TextIndex):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetShapeAttributes(self, ShapeIndex):
##        '-no docstring-'
##        #return LayerShapeAttributes, ResultValue
##
##    def GetShapeIDs(self, LayerIndex):
##        '-no docstring-'
##        #return ShapeIDs, ResultValue
##
##    def GetShapePolygon(self, ShapeIndex):
##        '-no docstring-'
##        #return Polygon, ResultValue
##
##    def GetTextParams(self, TextIndex):
##        '-no docstring-'
##        #return TextParams, ResultValue
##
##    def GetTextIDs(self, LayerIndex):
##        '-no docstring-'
##        #return TextIDs, ResultValue
##
##    def SetShapeAttributes(self, ShapeIndex):
##        '-no docstring-'
##        #return LayerShapeAttributes, ResultValue
##
##    def SetTextParams(self, TextIndex):
##        '-no docstring-'
##        #return TextParams, ResultValue
##

IAxisVMVirtualBeamsEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Cleared'),
    DISPMETHOD([dispid(202)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]

# values for enumeration 'ETextHorizontalAlignment'
thaLeft = 0
thaCenter = 1
thaRight = 2
thaAligned = 3
thaMiddle = 4
thaFit = 5
ETextHorizontalAlignment = c_int # enum

# values for enumeration 'ETextVerticalAlignment'
tvaBaseline = 0
tvaBottom = 1
tvaCenter = 2
tvaTop = 3
ETextVerticalAlignment = c_int # enum
RLayerTextParams._fields_ = [
    ('LayerIndex', c_int),
    ('Colour', c_int),
    ('PenStyle', ELayerPenStyle),
    ('PenWidth', c_double),
    ('FontSize', c_double),
    ('Angle', c_double),
    ('AlignmentPoint1', RPoint3d),
    ('AlignmentPoint2', RPoint3d),
    ('NormalVector', RPoint3d),
    ('HorizontalAlignment', ETextHorizontalAlignment),
    ('VerticalAlignment', ETextVerticalAlignment),
]
assert sizeof(RLayerTextParams) == 120, sizeof(RLayerTextParams)
assert alignment(RLayerTextParams) == 8, alignment(RLayerTextParams)
IAxisVMNodalSupportsEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Cleared'),
    DISPMETHOD([dispid(202)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]
RMemberMeshParameters._fields_ = [
    ('MeshType', EMemberMeshType),
    ('MeshParam', c_double),
]
assert sizeof(RMemberMeshParameters) == 16, sizeof(RMemberMeshParameters)
assert alignment(RMemberMeshParameters) == 8, alignment(RMemberMeshParameters)
class RShowSymbols(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{CAD48971-5CCD-4F01-A0C6-A9FB247A1AC5}')
RShowSymbols._fields_ = [
    ('ShowGraphicSymbols', RShowGraphicSymbols),
    ('ShowLocalSystems', RShowLocalSystems),
    ('ShowLoads', RShowLoads),
    ('ObjectContours3D', ELongBoolean),
]
assert sizeof(RShowSymbols) == 204, sizeof(RShowSymbols)
assert alignment(RShowSymbols) == 4, alignment(RShowSymbols)
class RRebarPos(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{1A3FA447-05DB-43E6-B8B3-FEB0D8DBA9C7}')
RRebarPos._fields_ = [
    ('TopX', c_double),
    ('BottomX', c_double),
    ('TopY', c_double),
    ('BottomY', c_double),
]
assert sizeof(RRebarPos) == 32, sizeof(RRebarPos)
assert alignment(RRebarPos) == 8, alignment(RRebarPos)
class RShowProperties(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{CC6CBEDA-DEF3-4FA1-9C3F-A51A4F8BF26D}')
RShowProperties._fields_ = [
    ('MaterialName', ELongBoolean),
    ('CrossSectName', ELongBoolean),
    ('BoltedJoint', ELongBoolean),
    ('ColumnReinf', ELongBoolean),
    ('BeamLength', ELongBoolean),
    ('Thickness', ELongBoolean),
    ('DomainArea', ELongBoolean),
    ('COBIAXlabels', ELongBoolean),
    ('LoadValue', ELongBoolean),
    ('MassValue', ELongBoolean),
    ('Units', ELongBoolean),
    ('ConcentratedLoadValue', ELongBoolean),
    ('LineLoadValue', ELongBoolean),
    ('SurfaceLoadValue', ELongBoolean),
    ('TemperatureLoadValue', ELongBoolean),
    ('SelfWeightValue', ELongBoolean),
    ('OtherLoadValue', ELongBoolean),
]
assert sizeof(RShowProperties) == 68, sizeof(RShowProperties)
assert alignment(RShowProperties) == 4, alignment(RShowProperties)
RLayerShapeAttributes._fields_ = [
    ('LayerIndex', c_int),
    ('Colour', c_int),
    ('PenStyle', ELayerPenStyle),
    ('PenWidth', c_double),
]
assert sizeof(RLayerShapeAttributes) == 24, sizeof(RLayerShapeAttributes)
assert alignment(RLayerShapeAttributes) == 8, alignment(RLayerShapeAttributes)
class RXLAMSurfaceStressValues(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{A50E1943-B74F-4188-A66A-63AC47756384}')
RXLAMSurfaceStressValues._fields_ = [
    ('xssvSxx_m_T', c_double),
    ('xssvSyy_m_T', c_double),
    ('xssvSxy_m_T', c_double),
    ('xssvSxx_m_B', c_double),
    ('xssvSyy_m_B', c_double),
    ('xssvSxy_m_B', c_double),
    ('xssvSxx_n', c_double),
    ('xssvSyy_n', c_double),
    ('xssvSxy_n', c_double),
    ('xssvSxz_max', c_double),
    ('xssvSyz_max', c_double),
    ('xssvSrx_max', c_double),
    ('xssvSry_max', c_double),
]
assert sizeof(RXLAMSurfaceStressValues) == 104, sizeof(RXLAMSurfaceStressValues)
assert alignment(RXLAMSurfaceStressValues) == 8, alignment(RXLAMSurfaceStressValues)
IAxisVMVerticalDisplacementsEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrCode' )),
]
IAxisVMDynamicLoadFunctions._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202)], HRESULT, 'Clear',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(203)], HRESULT, 'Add',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], _midlSAFEARRAY(RPoint2d), 'FunctionPoints' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205), 'propget'], HRESULT, 'Name',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(205), 'propput'], HRESULT, 'Name',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(206), 'propget'], HRESULT, 'PointCount',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(207)], HRESULT, 'DeletePoint',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'PointIndex' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208)], HRESULT, 'DeletePoints',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'StartPointIndex' ),
              ( ['in'], c_int, 'EndPointIndex' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209)], HRESULT, 'AddPoint',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RPoint2d), 'FunctionPoint' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(210)], HRESULT, 'GetPoints',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint2d)), 'FunctionPoints' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(211)], HRESULT, 'Modify',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], _midlSAFEARRAY(RPoint2d), 'FunctionPoints' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(212)], HRESULT, 'IndexOf',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(213)], HRESULT, 'AddFromFile',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'FileName' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(214)], HRESULT, 'SaveToFile',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'FileName' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(215)], HRESULT, 'Add_vb',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPoint2d)), 'FunctionPoints' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(216)], HRESULT, 'Modify_vb',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPoint2d)), 'FunctionPoints' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMDynamicLoadFunctions implementation
##class IAxisVMDynamicLoadFunctions_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def Clear(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def Add(self, Name, FunctionPoints):
##        '-no docstring-'
##        #return ResultValue
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def PointCount(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def DeletePoint(self, Index, PointIndex):
##        '-no docstring-'
##        #return ResultValue
##
##    def DeletePoints(self, Index, StartPointIndex, EndPointIndex):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddPoint(self, Index):
##        '-no docstring-'
##        #return FunctionPoint, ResultValue
##
##    def GetPoints(self, Index):
##        '-no docstring-'
##        #return FunctionPoints, ResultValue
##
##    def Modify(self, Index, FunctionPoints):
##        '-no docstring-'
##        #return ResultValue
##
##    def IndexOf(self, Name):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddFromFile(self, Name, FileName):
##        '-no docstring-'
##        #return ResultValue
##
##    def SaveToFile(self, Index, FileName):
##        '-no docstring-'
##        #return ResultValue
##
##    def Add_vb(self, Name):
##        '-no docstring-'
##        #return FunctionPoints, ResultValue
##
##    def Modify_vb(self, Index):
##        '-no docstring-'
##        #return FunctionPoints, ResultValue
##


# values for enumeration 'EMomentDiagramType'
mdtOnTensionSide = 0
mdtOnCompressionSide = 1
EMomentDiagramType = c_int # enum
IAxisVMSurface._methods_ = [
    COMMETHOD([dispid(203), 'propget'], HRESULT, 'ContourLines',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(c_int)), 'Value' )),
    COMMETHOD([dispid(204), 'propget'], HRESULT, 'Weight',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(205), 'propget'], HRESULT, 'Volume',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(206), 'propget'], HRESULT, 'Area',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(208)], HRESULT, 'Modify',
              ( ['in'], _midlSAFEARRAY(c_int), 'LineIds' ),
              ( ['in'], c_int, 'DomainId' ),
              ( ['in', 'out'], POINTER(RSurfaceAttr), 'SurfaceAttr' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209), 'propget'], HRESULT, 'DomainId',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(209), 'propput'], HRESULT, 'DomainId',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(210), 'propget'], HRESULT, 'PointCount',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(211)], HRESULT, 'GetContourPoints',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'ContourPoints' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(212)], HRESULT, 'GetMidPoints',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'MidPoints' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(213)], HRESULT, 'GetSurfaceAttr',
              ( ['in', 'out'], POINTER(RSurfaceAttr), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(214)], HRESULT, 'SetSurfaceAttr',
              ( ['in', 'out'], POINTER(RSurfaceAttr), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(215)], HRESULT, 'GetNormalVector',
              ( ['in', 'out'], POINTER(RPoint3d), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(216)], HRESULT, 'GetTrMatrix',
              ( ['in', 'out'], POINTER(RMatrix3x3), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(217)], HRESULT, 'SetContourLines',
              ( ['in'], _midlSAFEARRAY(c_int), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(218), 'propget'], HRESULT, 'ReinforcementParametersExists',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(219)], HRESULT, 'DeleteReinforcementParameters',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(220)], HRESULT, 'GetReinforcementParameters',
              ( ['in', 'out'], POINTER(RReinforcementParameters), 'ReinforcementParameters' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'DesignCodeParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(221)], HRESULT, 'SetReinforcementParameters',
              ( ['in', 'out'], POINTER(RReinforcementParameters), 'ReinforcementParameters' ),
              ( ['in'], _midlSAFEARRAY(c_ubyte), 'DesignCodeParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(222), 'propget'], HRESULT, 'MaterialColour',
              ( ['out', 'retval'], POINTER(c_ulong), 'Value' )),
    COMMETHOD([dispid(222), 'propput'], HRESULT, 'MaterialColour',
              ( ['in'], c_ulong, 'Value' )),
    COMMETHOD([dispid(223), 'propget'], HRESULT, 'ContourColour',
              ( ['out', 'retval'], POINTER(c_ulong), 'Value' )),
    COMMETHOD([dispid(223), 'propput'], HRESULT, 'ContourColour',
              ( ['in'], c_ulong, 'Value' )),
    COMMETHOD([dispid(224), 'propget'], HRESULT, 'ArchitectElemType',
              ( ['out', 'retval'], POINTER(EArchitectElemType), 'Value' )),
    COMMETHOD([dispid(224), 'propput'], HRESULT, 'ArchitectElemType',
              ( ['in'], EArchitectElemType, 'Value' )),
    COMMETHOD([dispid(225), 'propget'], HRESULT, 'UID',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(226)], HRESULT, 'Modify_vb',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['in'], c_int, 'DomainId' ),
              ( ['in', 'out'], POINTER(RSurfaceAttr), 'SurfaceAttr' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(227)], HRESULT, 'SetContourLines_vb',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(228), 'propget'], HRESULT, 'MaterialColour_vb',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(228), 'propput'], HRESULT, 'MaterialColour_vb',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(229), 'propget'], HRESULT, 'ContourColour_vb',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(229), 'propput'], HRESULT, 'ContourColour_vb',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(230), 'propget'], HRESULT, 'StiffnessReduction',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(230), 'propput'], HRESULT, 'StiffnessReduction',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(231)], HRESULT, 'SetReinforcementParameters_vb',
              ( ['in', 'out'], POINTER(RReinforcementParameters), 'ReinforcementParameters' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'DesignCodeParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(232)], HRESULT, 'GetVariableThickness',
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Thicknesses' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(233)], HRESULT, 'GetSurfaceStiffnessFactors',
              ( ['in', 'out'], POINTER(RSurfaceStiffnessFactors), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(234)], HRESULT, 'SetSurfaceStiffnessFactors',
              ( ['in', 'out'], POINTER(RSurfaceStiffnessFactors), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(235), 'propget'], HRESULT, 'StiffnessReduction_V153',
              ( ['in'], ESurfaceStiffnessReduction, 'Component' ),
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(235), 'propput'], HRESULT, 'StiffnessReduction_V153',
              ( ['in'], ESurfaceStiffnessReduction, 'Component' ),
              ( ['in'], c_double, 'Value' )),
]
################################################################
## code template for IAxisVMSurface implementation
##class IAxisVMSurface_Impl(object):
##    @property
##    def ContourLines(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Weight(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Volume(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Area(self):
##        '-no docstring-'
##        #return Value
##
##    def Modify(self, LineIds, DomainId):
##        '-no docstring-'
##        #return SurfaceAttr, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    DomainId = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def PointCount(self):
##        '-no docstring-'
##        #return Value
##
##    def GetContourPoints(self):
##        '-no docstring-'
##        #return ContourPoints, ResultValue
##
##    def GetMidPoints(self):
##        '-no docstring-'
##        #return MidPoints, ResultValue
##
##    def GetSurfaceAttr(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetSurfaceAttr(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def GetNormalVector(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def GetTrMatrix(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetContourLines(self, LineIds):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def ReinforcementParametersExists(self):
##        '-no docstring-'
##        #return Value
##
##    def DeleteReinforcementParameters(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetReinforcementParameters(self):
##        '-no docstring-'
##        #return ReinforcementParameters, DesignCodeParameters, ResultValue
##
##    def SetReinforcementParameters(self, DesignCodeParameters):
##        '-no docstring-'
##        #return ReinforcementParameters, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    MaterialColour = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    ContourColour = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    ArchitectElemType = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def UID(self):
##        '-no docstring-'
##        #return Value
##
##    def Modify_vb(self, DomainId):
##        '-no docstring-'
##        #return LineIds, SurfaceAttr, ResultValue
##
##    def SetContourLines_vb(self):
##        '-no docstring-'
##        #return LineIds, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    MaterialColour_vb = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    ContourColour_vb = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    StiffnessReduction = property(_get, _set, doc = _set.__doc__)
##
##    def SetReinforcementParameters_vb(self):
##        '-no docstring-'
##        #return ReinforcementParameters, DesignCodeParameters, ResultValue
##
##    def GetVariableThickness(self):
##        '-no docstring-'
##        #return Thicknesses, ResultValue
##
##    def GetSurfaceStiffnessFactors(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetSurfaceStiffnessFactors(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def _get(self, Component):
##        '-no docstring-'
##        #return Value
##    def _set(self, Component, Value):
##        '-no docstring-'
##    StiffnessReduction_V153 = property(_get, _set, doc = _set.__doc__)
##

IAxisVMLoadGroupsEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Cleared'),
    DISPMETHOD([dispid(202)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]

# values for enumeration 'EEnvelopeGroup'
egDefault = 0
egLoadCases = 1
egLoadCombinations = 2
egULS_ALL = 3
egULS = 4
egULSSeismic = 5
egULSExceptional = 6
egULSab = 7
egSLS_ALL = 8
egSLSCharacteristic = 9
egSLSFrequent = 10
egSLSQuasipermanent = 11
egCustomCombinations = 12
egGeo = 13
egGeoULS_A1 = 14
egGeoULS_A2 = 15
egGeoULSab_A1 = 16
egGeoULSab_A2 = 17
EEnvelopeGroup = c_int # enum
IAxisVMEnvelopes._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202)], HRESULT, 'ClearUserEnvelopes',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(203)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204), 'propget'], HRESULT, 'EnvelopeUID',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(205), 'propget'], HRESULT, 'UserEnevelopeCount',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(206)], HRESULT, 'Add',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCombinationIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'IndexOf',
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(ELongBoolean)), 'Envelope' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208)], HRESULT, 'IndexOfName',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209)], HRESULT, 'IndexOfStandard',
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EEnvelopeGroup, 'EnvelopeGroup' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(210)], HRESULT, 'IndexOfUID',
              ( ['in'], c_int, 'EnvelopeUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(211)], HRESULT, 'IndexOfDefault',
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(212), 'propget'], HRESULT, 'Name',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(212), 'propput'], HRESULT, 'Name',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(213)], HRESULT, 'GetEnvelope',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCombinationIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(214)], HRESULT, 'SetEnvelope',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCombinationIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(215), 'propget'], HRESULT, 'AnalysisType',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(EAnalysisType), 'Value' )),
    COMMETHOD([dispid(216), 'propget'], HRESULT, 'Group',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(EEnvelopeGroup), 'Value' )),
    COMMETHOD([dispid(217)], HRESULT, 'Update',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
]
################################################################
## code template for IAxisVMEnvelopes implementation
##class IAxisVMEnvelopes_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def ClearUserEnvelopes(self):
##        '-no docstring-'
##        #return Value
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def EnvelopeUID(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def UserEnevelopeCount(self):
##        '-no docstring-'
##        #return Value
##
##    def Add(self, Name, AnalysisType):
##        '-no docstring-'
##        #return LoadCaseIds, LoadCombinationIds, ResultValue
##
##    def IndexOf(self, AnalysisType):
##        '-no docstring-'
##        #return Envelope, ResultValue
##
##    def IndexOfName(self, Name):
##        '-no docstring-'
##        #return ResultValue
##
##    def IndexOfStandard(self, AnalysisType, EnvelopeGroup):
##        '-no docstring-'
##        #return ResultValue
##
##    def IndexOfUID(self, EnvelopeUID):
##        '-no docstring-'
##        #return ResultValue
##
##    def IndexOfDefault(self, AnalysisType):
##        '-no docstring-'
##        #return ResultValue
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def GetEnvelope(self, Index):
##        '-no docstring-'
##        #return LoadCaseIds, LoadCombinationIds, ResultValue
##
##    def SetEnvelope(self, Index):
##        '-no docstring-'
##        #return LoadCaseIds, LoadCombinationIds, ResultValue
##
##    @property
##    def AnalysisType(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Group(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def Update(self):
##        '-no docstring-'
##        #return Value
##


# values for enumeration 'ETempFolderType'
tftModel = 0
tftSystem = 1
tftCustom = 2
ETempFolderType = c_int # enum
class AxisVMWindow(CoClass):
    'AxisVMWindow Object'
    _reg_clsid_ = GUID('{510868F8-CC93-46D9-9CAA-1B72E353F78C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMWindow(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMWindow Object'
    _iid_ = GUID('{1A8A7F03-4AD3-4BDA-8090-7B732B140415}')
    _idlflags_ = ['dual', 'oleautomation']
AxisVMWindow._com_interfaces_ = [IAxisVMWindow]

class RExtendedDisplayParameters(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{1D11D877-E3F1-40D0-930D-52A5B82BFC91}')
class RShowLabels(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{DAF2C389-64CD-4C07-B79E-96F41EE3A56F}')
class RWorldRectangle(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{624FFAEC-3139-4B8F-B935-BEE85E03EDFF}')
class RExtendedDisplayParameters_V153(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{83D8A9F3-D54C-43A7-B447-51BE0D4575C6}')
class RCommonDisplayParameters_V161(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{57E4561F-3532-44AD-9716-27E327822C3A}')
IAxisVMWindows._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'ActiveWindowIndex',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202), 'propput'], HRESULT, 'ActiveWindowIndex',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(203), 'propget'], HRESULT, 'ActiveWindow',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMWindow)), 'Value' )),
    COMMETHOD([dispid(204), 'propget'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(AxisVMWindow)), 'Value' )),
    COMMETHOD([dispid(205)], HRESULT, 'Duplicate',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], EWindowSplit, 'WindowSplit' ),
              ( ['in'], c_double, 'SplitPos' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(206)], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(207)], HRESULT, 'GetCommonDisplayParameters',
              ( ['in', 'out'], POINTER(RCommonDisplayParameters), 'CommonDisplayParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(208)], HRESULT, 'SetCommonDisplayParameters',
              ( ['in', 'out'], POINTER(RCommonDisplayParameters), 'CommonDisplayParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(209)], HRESULT, 'GetStaticDisplayParameters',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters), 'ExtendedDisplayParameters' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationOrEnvelopeUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(210)], HRESULT, 'GetBucklingDisplayParameters',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters), 'ExtendedDisplayParameters' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'ModeShapeId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(211)], HRESULT, 'GetVibrationDisplayParameters',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters), 'ExtendedDisplayParameters' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'ModeShapeId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(212)], HRESULT, 'GetDynamicDisplayParameters',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters), 'ExtendedDisplayParameters' ),
              ( ['out'], POINTER(c_int), 'DynamicLoadCaseOrEnvelopeUID' ),
              ( ['out'], POINTER(c_int), 'TimeStepId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(213)], HRESULT, 'GetRCDesignDisplayParameters',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters), 'ExtendedDisplayParameters' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationOrEnvelopeUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(214)], HRESULT, 'GetSteelDesignDisplayParameters',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters), 'ExtendedDisplayParameters' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationOrEnvelopeUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(215)], HRESULT, 'GetTimberDesignDisplayParameters',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters), 'ExtendedDisplayParameters' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationOrEnvelopeUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(216)], HRESULT, 'GetDisplayOptions',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RShowSymbols), 'ShowSymbols' ),
              ( ['in', 'out'], POINTER(RShowLabels), 'ShowLabels' ),
              ( ['in', 'out'], POINTER(RShowSwitches), 'ShowSwitches' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(217)], HRESULT, 'SetStaticDisplayParameters',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters), 'ExtendedDisplayParameters' ),
              ( ['in'], c_int, 'LoadCaseOrCombinationOrEnvelopeUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(218)], HRESULT, 'SetBucklingDisplayParameters',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters), 'ExtendedDisplayParameters' ),
              ( ['in'], c_int, 'LoadCaseOrCombinationId' ),
              ( ['in'], c_int, 'ModeShapeId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(219)], HRESULT, 'SetVibrationDisplayParameters',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters), 'ExtendedDisplayParameters' ),
              ( ['in'], c_int, 'LoadCaseOrCombinationId' ),
              ( ['in'], c_int, 'ModeShapeId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(220)], HRESULT, 'SetDynamicDisplayParameters',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters), 'ExtendedDisplayParameters' ),
              ( ['in'], c_int, 'DynamicLoadCaseOrEnvelopeUID' ),
              ( ['in'], c_int, 'TimeStepId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(221)], HRESULT, 'SetRCDesignDisplayParameters',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters), 'ExtendedDisplayParameters' ),
              ( ['in'], c_int, 'LoadCaseOrCombinationOrEnvelopeUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(222)], HRESULT, 'SetSteelDesignDisplayParameters',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters), 'ExtendedDisplayParameters' ),
              ( ['in'], c_int, 'LoadCaseOrCombinationOrEnvelopeUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(223)], HRESULT, 'SetTimberDesignDisplayParameters',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters), 'ExtendedDisplayParameters' ),
              ( ['in'], c_int, 'LoadCaseOrCombinationOrEnvelopeUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(224)], HRESULT, 'SetDisplayOptions',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RShowSymbols), 'ShowSymbols' ),
              ( ['in', 'out'], POINTER(RShowLabels), 'ShowLabels' ),
              ( ['in', 'out'], POINTER(RShowSwitches), 'ShowSwitches' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(225)], HRESULT, 'GetDefaultDisplayOptions',
              ( ['in', 'out'], POINTER(RShowSymbols), 'ShowSymbols' ),
              ( ['in', 'out'], POINTER(RShowLabels), 'ShowLabels' ),
              ( ['in', 'out'], POINTER(RShowSwitches), 'ShowSwitches' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(226)], HRESULT, 'SetDefaultDisplayOptions',
              ( ['in', 'out'], POINTER(RShowSymbols), 'ShowSymbols' ),
              ( ['in', 'out'], POINTER(RShowLabels), 'ShowLabels' ),
              ( ['in', 'out'], POINTER(RShowSwitches), 'ShowSwitches' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(227), 'propget'], HRESULT, 'Display',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(EDisplay), 'Value' )),
    COMMETHOD([dispid(227), 'propput'], HRESULT, 'Display',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], EDisplay, 'Value' )),
    COMMETHOD([dispid(228)], HRESULT, 'GetWindowDisplayPartUIDs',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PartUIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(229)], HRESULT, 'SetWindowDisplayPartUIDs',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PartUIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(230)], HRESULT, 'SaveWindowToBitmap',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], EWindowColourMode, 'WindowColourMode' ),
              ( ['in'], BSTR, 'FileName' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(231)], HRESULT, 'SaveWindowsToBitmap',
              ( ['in'], EWindowColourMode, 'WindowColourMode' ),
              ( ['in'], BSTR, 'FileName' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(232)], HRESULT, 'SaveWindowToClipboard',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], EWindowColourMode, 'WindowColourMode' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(233)], HRESULT, 'SaveWindowsToClipboard',
              ( ['in'], EWindowColourMode, 'WindowColourMode' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(234)], HRESULT, 'SaveWindowToMetafile',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'FileName' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(235)], HRESULT, 'SaveWindowsToMetafile',
              ( ['in'], BSTR, 'FileName' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(236), 'propget'], HRESULT, 'LoadCaseIndex',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(236), 'propput'], HRESULT, 'LoadCaseIndex',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(237), 'propget'], HRESULT, 'View',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(EView), 'Value' )),
    COMMETHOD([dispid(237), 'propput'], HRESULT, 'View',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], EView, 'Value' )),
    COMMETHOD([dispid(238), 'propget'], HRESULT, 'WorkPlaneIndex',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(238), 'propput'], HRESULT, 'WorkPlaneIndex',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(239), 'propget'], HRESULT, 'StoryIndex',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(239), 'propput'], HRESULT, 'StoryIndex',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(240), 'propget'], HRESULT, 'ActiveStoryIndex',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(240), 'propput'], HRESULT, 'ActiveStoryIndex',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(241)], HRESULT, 'GetVisibleLayerIDs',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'VisibleLayerIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(242)], HRESULT, 'SetVisibleLayerIDs',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'VisibleLayerIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(243)], HRESULT, 'GetDetectedLayerIDs',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'DetectedLayerIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(244)], HRESULT, 'SetDetectedLayerIDs',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'DetectedLayerIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(245)], HRESULT, 'GetLockedLayerIDs',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LockedLayerIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(246)], HRESULT, 'SetLockedLayerIDs',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LockedLayerIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(247)], HRESULT, 'GetVisibleStructuralGridIDs',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'StructuralGridIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(248)], HRESULT, 'SetVisibleStructuralGridIDs',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'StructuralGridIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(249)], HRESULT, 'GetWorldRectangle',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RWorldRectangle), 'WorldRectangle' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(250)], HRESULT, 'SetWorldRectangle',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RWorldRectangle), 'WorldRectangle' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(251)], HRESULT, 'ReDraw',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(252)], HRESULT, 'GetVisibleSectionIDs',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(253)], HRESULT, 'SetVisibleSectionIDs',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(254)], HRESULT, 'GetStaticDisplayParameters_V153',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters_V153), 'ExtendedDisplayParameters' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationOrEnvelopeUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(255)], HRESULT, 'GetBucklingDisplayParameters_V153',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters_V153), 'ExtendedDisplayParameters' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'ModeShapeId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(256)], HRESULT, 'GetVibrationDisplayParameters_V153',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters_V153), 'ExtendedDisplayParameters' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'ModeShapeId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(257)], HRESULT, 'GetDynamicDisplayParameters_V153',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters_V153), 'ExtendedDisplayParameters' ),
              ( ['out'], POINTER(c_int), 'DynamicLoadCaseOrEnvelopeUID' ),
              ( ['out'], POINTER(c_int), 'TimeStepId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(258)], HRESULT, 'GetRCDesignDisplayParameters_V153',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters_V153), 'ExtendedDisplayParameters' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationOrEnvelopeUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(259)], HRESULT, 'GetSteelDesignDisplayParameters_V153',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters_V153), 'ExtendedDisplayParameters' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationOrEnvelopeUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(260)], HRESULT, 'GetTimberDesignDisplayParameters_V153',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters_V153), 'ExtendedDisplayParameters' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationOrEnvelopeUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(261)], HRESULT, 'SetStaticDisplayParameters_V153',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters_V153), 'ExtendedDisplayParameters' ),
              ( ['in'], c_int, 'LoadCaseOrCombinationOrEnvelopeUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(262)], HRESULT, 'SetBucklingDisplayParameters_V153',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters_V153), 'ExtendedDisplayParameters' ),
              ( ['in'], c_int, 'LoadCaseOrCombinationId' ),
              ( ['in'], c_int, 'ModeShapeId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(263)], HRESULT, 'SetVibrationDisplayParameters_V153',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters_V153), 'ExtendedDisplayParameters' ),
              ( ['in'], c_int, 'LoadCaseOrCombinationId' ),
              ( ['in'], c_int, 'ModeShapeId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(264)], HRESULT, 'SetDynamicDisplayParameters_V153',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters_V153), 'ExtendedDisplayParameters' ),
              ( ['in'], c_int, 'DynamicLoadCaseOrEnvelopeUID' ),
              ( ['in'], c_int, 'TimeStepId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(265)], HRESULT, 'SetRCDesignDisplayParameters_V153',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters_V153), 'ExtendedDisplayParameters' ),
              ( ['in'], c_int, 'LoadCaseOrCombinationOrEnvelopeUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(266)], HRESULT, 'SetSteelDesignDisplayParameters_V153',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters_V153), 'ExtendedDisplayParameters' ),
              ( ['in'], c_int, 'LoadCaseOrCombinationOrEnvelopeUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(267)], HRESULT, 'SetTimberDesignDisplayParameters_V153',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters_V153), 'ExtendedDisplayParameters' ),
              ( ['in'], c_int, 'LoadCaseOrCombinationOrEnvelopeUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(268), 'propget'], HRESULT, 'Switch',
              ( ['in'], c_int, 'WindowIndex' ),
              ( ['in'], c_int, 'SwitchIndex' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(268), 'propput'], HRESULT, 'Switch',
              ( ['in'], c_int, 'WindowIndex' ),
              ( ['in'], c_int, 'SwitchIndex' ),
              ( ['in'], ELongBoolean, 'Value' )),
    COMMETHOD([dispid(269)], HRESULT, 'GetCommonDisplayParameters_V161',
              ( ['in', 'out'], POINTER(RCommonDisplayParameters_V161), 'CommonDisplayParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(270)], HRESULT, 'SetCommonDisplayParameters_V161',
              ( ['in', 'out'], POINTER(RCommonDisplayParameters_V161), 'CommonDisplayParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
]
################################################################
## code template for IAxisVMWindows implementation
##class IAxisVMWindows_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    ActiveWindowIndex = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ActiveWindow(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Item(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def Duplicate(self, Index, WindowSplit, SplitPos):
##        '-no docstring-'
##        #return Value
##
##    def Remove(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def GetCommonDisplayParameters(self):
##        '-no docstring-'
##        #return CommonDisplayParameters, Value
##
##    def SetCommonDisplayParameters(self):
##        '-no docstring-'
##        #return CommonDisplayParameters, Value
##
##    def GetStaticDisplayParameters(self, Index):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, LoadCaseOrCombinationOrEnvelopeUID, SectionIds, Value
##
##    def GetBucklingDisplayParameters(self, Index):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, LoadCaseOrCombinationId, ModeShapeId, SectionIds, Value
##
##    def GetVibrationDisplayParameters(self, Index):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, LoadCaseOrCombinationId, ModeShapeId, SectionIds, Value
##
##    def GetDynamicDisplayParameters(self, Index):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, DynamicLoadCaseOrEnvelopeUID, TimeStepId, SectionIds, Value
##
##    def GetRCDesignDisplayParameters(self, Index):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, LoadCaseOrCombinationOrEnvelopeUID, SectionIds, Value
##
##    def GetSteelDesignDisplayParameters(self, Index):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, LoadCaseOrCombinationOrEnvelopeUID, SectionIds, Value
##
##    def GetTimberDesignDisplayParameters(self, Index):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, LoadCaseOrCombinationOrEnvelopeUID, SectionIds, Value
##
##    def GetDisplayOptions(self, Index):
##        '-no docstring-'
##        #return ShowSymbols, ShowLabels, ShowSwitches, Value
##
##    def SetStaticDisplayParameters(self, Index, LoadCaseOrCombinationOrEnvelopeUID):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, SectionIds, Value
##
##    def SetBucklingDisplayParameters(self, Index, LoadCaseOrCombinationId, ModeShapeId):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, SectionIds, Value
##
##    def SetVibrationDisplayParameters(self, Index, LoadCaseOrCombinationId, ModeShapeId):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, SectionIds, Value
##
##    def SetDynamicDisplayParameters(self, Index, DynamicLoadCaseOrEnvelopeUID, TimeStepId):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, SectionIds, Value
##
##    def SetRCDesignDisplayParameters(self, Index, LoadCaseOrCombinationOrEnvelopeUID):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, SectionIds, Value
##
##    def SetSteelDesignDisplayParameters(self, Index, LoadCaseOrCombinationOrEnvelopeUID):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, SectionIds, Value
##
##    def SetTimberDesignDisplayParameters(self, Index, LoadCaseOrCombinationOrEnvelopeUID):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, SectionIds, Value
##
##    def SetDisplayOptions(self, Index):
##        '-no docstring-'
##        #return ShowSymbols, ShowLabels, ShowSwitches, Value
##
##    def GetDefaultDisplayOptions(self):
##        '-no docstring-'
##        #return ShowSymbols, ShowLabels, ShowSwitches, Value
##
##    def SetDefaultDisplayOptions(self):
##        '-no docstring-'
##        #return ShowSymbols, ShowLabels, ShowSwitches, Value
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    Display = property(_get, _set, doc = _set.__doc__)
##
##    def GetWindowDisplayPartUIDs(self, Index):
##        '-no docstring-'
##        #return PartUIDs, Value
##
##    def SetWindowDisplayPartUIDs(self, Index):
##        '-no docstring-'
##        #return PartUIDs, Value
##
##    def SaveWindowToBitmap(self, Index, WindowColourMode, FileName):
##        '-no docstring-'
##        #return Value
##
##    def SaveWindowsToBitmap(self, WindowColourMode, FileName):
##        '-no docstring-'
##        #return Value
##
##    def SaveWindowToClipboard(self, Index, WindowColourMode):
##        '-no docstring-'
##        #return Value
##
##    def SaveWindowsToClipboard(self, WindowColourMode):
##        '-no docstring-'
##        #return Value
##
##    def SaveWindowToMetafile(self, Index, FileName):
##        '-no docstring-'
##        #return Value
##
##    def SaveWindowsToMetafile(self, FileName):
##        '-no docstring-'
##        #return Value
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LoadCaseIndex = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    View = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    WorkPlaneIndex = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    StoryIndex = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    ActiveStoryIndex = property(_get, _set, doc = _set.__doc__)
##
##    def GetVisibleLayerIDs(self, Index):
##        '-no docstring-'
##        #return VisibleLayerIDs, Value
##
##    def SetVisibleLayerIDs(self, Index):
##        '-no docstring-'
##        #return VisibleLayerIDs, Value
##
##    def GetDetectedLayerIDs(self, Index):
##        '-no docstring-'
##        #return DetectedLayerIDs, Value
##
##    def SetDetectedLayerIDs(self, Index):
##        '-no docstring-'
##        #return DetectedLayerIDs, Value
##
##    def GetLockedLayerIDs(self, Index):
##        '-no docstring-'
##        #return LockedLayerIDs, Value
##
##    def SetLockedLayerIDs(self, Index):
##        '-no docstring-'
##        #return LockedLayerIDs, Value
##
##    def GetVisibleStructuralGridIDs(self, Index):
##        '-no docstring-'
##        #return StructuralGridIDs, Value
##
##    def SetVisibleStructuralGridIDs(self, Index):
##        '-no docstring-'
##        #return StructuralGridIDs, Value
##
##    def GetWorldRectangle(self, Index):
##        '-no docstring-'
##        #return WorldRectangle, Value
##
##    def SetWorldRectangle(self, Index):
##        '-no docstring-'
##        #return WorldRectangle, Value
##
##    def ReDraw(self):
##        '-no docstring-'
##        #return Value
##
##    def GetVisibleSectionIDs(self, Index):
##        '-no docstring-'
##        #return SectionIds, Value
##
##    def SetVisibleSectionIDs(self, Index):
##        '-no docstring-'
##        #return SectionIds, Value
##
##    def GetStaticDisplayParameters_V153(self, Index):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, LoadCaseOrCombinationOrEnvelopeUID, SectionIds, Value
##
##    def GetBucklingDisplayParameters_V153(self, Index):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, LoadCaseOrCombinationId, ModeShapeId, SectionIds, Value
##
##    def GetVibrationDisplayParameters_V153(self, Index):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, LoadCaseOrCombinationId, ModeShapeId, SectionIds, Value
##
##    def GetDynamicDisplayParameters_V153(self, Index):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, DynamicLoadCaseOrEnvelopeUID, TimeStepId, SectionIds, Value
##
##    def GetRCDesignDisplayParameters_V153(self, Index):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, LoadCaseOrCombinationOrEnvelopeUID, SectionIds, Value
##
##    def GetSteelDesignDisplayParameters_V153(self, Index):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, LoadCaseOrCombinationOrEnvelopeUID, SectionIds, Value
##
##    def GetTimberDesignDisplayParameters_V153(self, Index):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, LoadCaseOrCombinationOrEnvelopeUID, SectionIds, Value
##
##    def SetStaticDisplayParameters_V153(self, Index, LoadCaseOrCombinationOrEnvelopeUID):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, SectionIds, Value
##
##    def SetBucklingDisplayParameters_V153(self, Index, LoadCaseOrCombinationId, ModeShapeId):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, SectionIds, Value
##
##    def SetVibrationDisplayParameters_V153(self, Index, LoadCaseOrCombinationId, ModeShapeId):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, SectionIds, Value
##
##    def SetDynamicDisplayParameters_V153(self, Index, DynamicLoadCaseOrEnvelopeUID, TimeStepId):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, SectionIds, Value
##
##    def SetRCDesignDisplayParameters_V153(self, Index, LoadCaseOrCombinationOrEnvelopeUID):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, SectionIds, Value
##
##    def SetSteelDesignDisplayParameters_V153(self, Index, LoadCaseOrCombinationOrEnvelopeUID):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, SectionIds, Value
##
##    def SetTimberDesignDisplayParameters_V153(self, Index, LoadCaseOrCombinationOrEnvelopeUID):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, SectionIds, Value
##
##    def _get(self, WindowIndex, SwitchIndex):
##        '-no docstring-'
##        #return Value
##    def _set(self, WindowIndex, SwitchIndex, Value):
##        '-no docstring-'
##    Switch = property(_get, _set, doc = _set.__doc__)
##
##    def GetCommonDisplayParameters_V161(self):
##        '-no docstring-'
##        #return CommonDisplayParameters, Value
##
##    def SetCommonDisplayParameters_V161(self):
##        '-no docstring-'
##        #return CommonDisplayParameters, Value
##

class IAxisVMAccelerationEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMAcceleration Object'
    _iid_ = GUID('{DF22B26B-D088-4EFE-9B46-0830A94B22C3}')
    _idlflags_ = []
    _methods_ = []
IAxisVMAccelerationEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrCode' )),
]
class IAxisVMStrainsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMStrains Object'
    _iid_ = GUID('{92224A42-518C-495E-BA4B-042D5EEE2DF1}')
    _idlflags_ = []
    _methods_ = []
IAxisVMStrainsEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrCode' )),
]

# values for enumeration 'ELoadCaseType'
lctStandard = 0
lctInfluenceLine = 1
lctSeismic = 2
lctVibration = 3
lctPreStress = 4
lctMoving = 5
lctDynamic = 6
lctPushOver = 7
lctImperfection = 8
lctSnow = 9
lctSnowExcept = 10
lctWind = 11
lctManualSeismic = 12
lctManualPreStress = 13
lctFire = 14
lctLocalImperfection = 15
ELoadCaseType = c_int # enum
class RPushOverParams(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{B9D4C34F-2340-4614-B64D-148C500796E7}')

# values for enumeration 'ELoadDurationClass'
ldcOther = 0
ldcPermanent = 1
ldcLong = 2
ldcMedium = 3
ldcShort = 4
ldcInstant = 5
ELoadDurationClass = c_int # enum
class RWindLoadParams(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{980F0AC9-43D6-4B14-952E-D766CB544493}')
class RSeismicParams_V153(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{BE6CD0E0-6295-49A2-ACC3-69E2DB0C7EED}')
IAxisVMLoadCases._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'Name',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(202), 'propput'], HRESULT, 'Name',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(203), 'propget'], HRESULT, 'LoadCaseType',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELoadCaseType), 'Value' )),
    COMMETHOD([dispid(204), 'propget'], HRESULT, 'GroupID',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(204), 'propput'], HRESULT, 'GroupID',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(205), 'propget'], HRESULT, 'LoadCount',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(207)], HRESULT, 'Add',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], ELoadCaseType, 'LoadCaseType' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209)], HRESULT, 'CreateStandardSeismicCases',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(210)], HRESULT, 'AddWithGroup',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], ELoadCaseType, 'LoadCaseType' ),
              ( ['in'], c_int, 'GroupID' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(211)], HRESULT, 'CreatePushOverCases',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(RPushOverParams), 'PushOverParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(212), 'propget'], HRESULT, 'LoadDurationClass',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELoadDurationClass), 'Value' )),
    COMMETHOD([dispid(212), 'propput'], HRESULT, 'LoadDurationClass',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], ELoadDurationClass, 'Value' )),
    COMMETHOD([dispid(213)], HRESULT, 'CreatePreStressCases',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'LoadGroup' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(214)], HRESULT, 'CreateImperfectionCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(RImperfectionParams), 'ImperfectionParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(215)], HRESULT, 'GetPushOverParams',
              ( ['in', 'out'], POINTER(RPushOverParams), 'PushOverParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(216)], HRESULT, 'SetPushOverParams',
              ( ['in', 'out'], POINTER(RPushOverParams), 'PushOverParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(217)], HRESULT, 'GetImperfectionParams',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RImperfectionParams), 'ImperfectionParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(218)], HRESULT, 'SetImperfectionParams',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RImperfectionParams), 'ImperfectionParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(219), 'propget'], HRESULT, 'UID',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(220), 'propget'], HRESULT, 'IndexOfUID',
              ( ['in'], c_int, 'UID' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(221)], HRESULT, 'DeleteAllLoadsFromLoadCase',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(222)], HRESULT, 'CreateSnowCases',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(RSnowLoadParams), 'SnowLoadParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(223)], HRESULT, 'GetSnowLoadParams',
              ( ['in', 'out'], POINTER(RSnowLoadParams), 'SnowLoadParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(224)], HRESULT, 'SetSnowLoadParams',
              ( ['in', 'out'], POINTER(RSnowLoadParams), 'SnowLoadParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(225)], HRESULT, 'CreateWindCases',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(RWindLoadParams), 'WindLoadParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(226)], HRESULT, 'GetWindLoadParams',
              ( ['in', 'out'], POINTER(RWindLoadParams), 'WindLoadParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(227)], HRESULT, 'SetWindLoadParams',
              ( ['in', 'out'], POINTER(RWindLoadParams), 'WindLoadParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(228)], HRESULT, 'GetSeismicParams',
              ( ['in', 'out'], POINTER(RSeismicParams), 'SeismicParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(229)], HRESULT, 'SetSeismicParams',
              ( ['in', 'out'], POINTER(RSeismicParams), 'SeismicParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(230)], HRESULT, 'GetSeismicParams_V153',
              ( ['in'], c_int, 'GroupID' ),
              ( ['in', 'out'], POINTER(RSeismicParams_V153), 'SeismicParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(231)], HRESULT, 'SetSeismicParams_V153',
              ( ['in', 'out'], POINTER(RSeismicParams_V153), 'SeismicParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(232)], HRESULT, 'SeismicGroupIds',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'GroupIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(233)], HRESULT, 'SeismicSpectrumH',
              ( ['in'], c_int, 'GroupID' ),
              ( ['out'], POINTER(POINTER(IAxisVMSpectrum)), 'Spectrum' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(234)], HRESULT, 'SeismicSpectrumV',
              ( ['in'], c_int, 'GroupID' ),
              ( ['out'], POINTER(POINTER(IAxisVMSpectrum)), 'Spectrum' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(235), 'propget'], HRESULT, 'SeismicGroupID',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(236)], HRESULT, 'Delete_V153',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], ELongBoolean, 'GroupedDelete' ),
              ( ['in'], ELongBoolean, 'DeleteEmptiedGroup' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(237)], HRESULT, 'CreateImperfectionCase_V153',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(RImperfectionParams_V153), 'ImperfectionParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMLoadCases implementation
##class IAxisVMLoadCases_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def LoadCaseType(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    GroupID = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def LoadCount(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def Add(self, Name, LoadCaseType):
##        '-no docstring-'
##        #return ResultValue
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def CreateStandardSeismicCases(self, Name):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddWithGroup(self, Name, LoadCaseType, GroupID):
##        '-no docstring-'
##        #return ResultValue
##
##    def CreatePushOverCases(self, Name):
##        '-no docstring-'
##        #return PushOverParams, ResultValue
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    LoadDurationClass = property(_get, _set, doc = _set.__doc__)
##
##    def CreatePreStressCases(self, Name, LoadGroup):
##        '-no docstring-'
##        #return ResultValue
##
##    def CreateImperfectionCase(self, Name):
##        '-no docstring-'
##        #return ImperfectionParams, ResultValue
##
##    def GetPushOverParams(self):
##        '-no docstring-'
##        #return PushOverParams, ResultValue
##
##    def SetPushOverParams(self):
##        '-no docstring-'
##        #return PushOverParams, ResultValue
##
##    def GetImperfectionParams(self, Index):
##        '-no docstring-'
##        #return ImperfectionParams, ResultValue
##
##    def SetImperfectionParams(self, Index):
##        '-no docstring-'
##        #return ImperfectionParams, ResultValue
##
##    @property
##    def UID(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def IndexOfUID(self, UID):
##        '-no docstring-'
##        #return Value
##
##    def DeleteAllLoadsFromLoadCase(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def CreateSnowCases(self, Name):
##        '-no docstring-'
##        #return SnowLoadParams, ResultValue
##
##    def GetSnowLoadParams(self):
##        '-no docstring-'
##        #return SnowLoadParams, ResultValue
##
##    def SetSnowLoadParams(self):
##        '-no docstring-'
##        #return SnowLoadParams, ResultValue
##
##    def CreateWindCases(self, Name):
##        '-no docstring-'
##        #return WindLoadParams, ResultValue
##
##    def GetWindLoadParams(self):
##        '-no docstring-'
##        #return WindLoadParams, ResultValue
##
##    def SetWindLoadParams(self):
##        '-no docstring-'
##        #return WindLoadParams, ResultValue
##
##    def GetSeismicParams(self):
##        '-no docstring-'
##        #return SeismicParams, ResultValue
##
##    def SetSeismicParams(self):
##        '-no docstring-'
##        #return SeismicParams, ResultValue
##
##    def GetSeismicParams_V153(self, GroupID):
##        '-no docstring-'
##        #return SeismicParams, ResultValue
##
##    def SetSeismicParams_V153(self):
##        '-no docstring-'
##        #return SeismicParams, ResultValue
##
##    def SeismicGroupIds(self):
##        '-no docstring-'
##        #return GroupIds, ResultValue
##
##    def SeismicSpectrumH(self, GroupID):
##        '-no docstring-'
##        #return Spectrum, ResultValue
##
##    def SeismicSpectrumV(self, GroupID):
##        '-no docstring-'
##        #return Spectrum, ResultValue
##
##    @property
##    def SeismicGroupID(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def Delete_V153(self, Index, GroupedDelete, DeleteEmptiedGroup):
##        '-no docstring-'
##        #return ResultValue
##
##    def CreateImperfectionCase_V153(self, Name):
##        '-no docstring-'
##        #return ImperfectionParams, ResultValue
##


# values for enumeration 'EStressesError'
steLineIndexOutOfBounds = -100001
steLoadCaseIndexOutofBounds = -100002
steLoadCombinationIndexOutofBounds = -100003
steNotValidLineType = -100004
steSectionIndexOutOfBounds = -100005
steCombinationTypeNotValidForCurrentNationalDesignCode = -100006
steCOMError = -100007
steLineHasNoSections = -100008
steNoValidLinesInTheModel = -100009
steLineStressComponentNotValidForThisLineType = -100010
steInvalidAnalysisType = -100011
steInvalidCombinationOfLoadCaseAndLoadLevel = -100012
steInvalidCombinationOfLoadCombinationAndLoadLevel = -100013
steNoResultBlocksInTheModel = -100014
steNodeIndexOutOfBounds = -100015
steSurfaceIndexOutOfBounds = -100016
steNoSurfacesInTheModel = -100017
steMemberIndexOutOfBounds = -100018
steReadXLAMSurfaceStresses = -100019
steInvalidSurfaceVertexType = -100020
steReadSurfaceStresses = -100021
steNotXLAMpanel = -100022
steXLAMmoduleNotAvailable = -100023
steStressPointIDOutOfBounds = -100024
EStressesError = c_int # enum

# values for enumeration 'EDimensionsError'
deInvalidText = -100001
deInvalidType = -100002
deInvalidMarkType = -100003
deInvalidLayerID = -100004
deInvalidNodeID = -100005
EDimensionsError = c_int # enum
class AxisVMAcceleration(CoClass):
    'AxisVMAcceleration Object'
    _reg_clsid_ = GUID('{BE7174E1-08DD-42A2-8046-7967CD2E0FFC}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
AxisVMAcceleration._com_interfaces_ = [IAxisVMAcceleration]
AxisVMAcceleration._outgoing_interfaces_ = [IAxisVMAccelerationEvents]


# values for enumeration 'EBackgroundColour'
bcWhite = 0
bcBlack = 1
bcLightGrey = 2
bcDarkGrey = 3
EBackgroundColour = c_int # enum
RCommonDisplayParameters_V161._fields_ = [
    ('CriticalResSettings', RCommonCriticalResultsSettings_V161),
    ('CutMomentPeaks', ELongBoolean),
    ('DrawInPlane', ELongBoolean),
    ('MiscelSettings', RMiscellaneousSettings),
]
assert sizeof(RCommonDisplayParameters_V161) == 72, sizeof(RCommonDisplayParameters_V161)
assert alignment(RCommonDisplayParameters_V161) == 8, alignment(RCommonDisplayParameters_V161)
IAxisVMMathTexts._methods_ = [
    COMMETHOD([dispid(201)], HRESULT, 'New',
              ( ['in'], BSTR, 'API_Name' ),
              ( ['in'], BSTR, 'MathTextTitle' ),
              ( ['in'], BSTR, 'MathText' ),
              ( ['in'], ELongBoolean, 'EnableIfNotPresent' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(202)], HRESULT, 'AddToReport',
              ( ['in'], c_int, 'MathTextUID' ),
              ( ['in'], BSTR, 'API_Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(203)], HRESULT, 'Delete',
              ( ['in'], c_int, 'MathTextUID' ),
              ( ['in'], BSTR, 'API_Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'GetUIDs',
              ( ['in'], BSTR, 'API_Name' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'UIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205)], HRESULT, 'GetMathText',
              ( ['in'], c_int, 'MathTextUID' ),
              ( ['in'], BSTR, 'API_Name' ),
              ( ['out'], POINTER(BSTR), 'MathTextTitle' ),
              ( ['out'], POINTER(BSTR), 'MathText' ),
              ( ['out'], POINTER(ELongBoolean), 'EnableIfNotPresent' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'SetMathText',
              ( ['in'], c_int, 'MathTextUID' ),
              ( ['in'], BSTR, 'API_Name' ),
              ( ['in'], BSTR, 'MathTextTitle' ),
              ( ['in'], BSTR, 'MathText' ),
              ( ['in'], ELongBoolean, 'EnableIfNotPresent' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'ShowInWindow',
              ( ['in'], c_int, 'MathTextUID' ),
              ( ['in'], BSTR, 'API_Name' ),
              ( ['in'], BSTR, 'Caption' ),
              ( ['in'], RWindowPosition, 'Position' ),
              ( ['in'], ELongBoolean, 'Substitution' ),
              ( ['in'], c_int, 'Zoom' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMMathTexts implementation
##class IAxisVMMathTexts_Impl(object):
##    def New(self, API_Name, MathTextTitle, MathText, EnableIfNotPresent):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddToReport(self, MathTextUID, API_Name):
##        '-no docstring-'
##        #return ResultValue
##
##    def Delete(self, MathTextUID, API_Name):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetUIDs(self, API_Name):
##        '-no docstring-'
##        #return UIDs, ResultValue
##
##    def GetMathText(self, MathTextUID, API_Name):
##        '-no docstring-'
##        #return MathTextTitle, MathText, EnableIfNotPresent, ResultValue
##
##    def SetMathText(self, MathTextUID, API_Name, MathTextTitle, MathText, EnableIfNotPresent):
##        '-no docstring-'
##        #return ResultValue
##
##    def ShowInWindow(self, MathTextUID, API_Name, Caption, Position, Substitution, Zoom):
##        '-no docstring-'
##        #return ResultValue
##


# values for enumeration 'EDimensionType'
dtOrtho = 0
dtAligned = 1
dtAngle = 2
dtArcLength = 3
dtCoordinate = 4
dtLevel = 5
dtElevation = 6
dtTextBox = 7
dtNodeAssoc = 8
dtLineAssoc = 9
dtDomainAssoc = 10
dtLineIntegrated = 11
dtLowLevel = 12
dtIsoLabel = 13
dtNone = 14
dtInfoHint = 15
dtRadius = 16
EDimensionType = c_int # enum
class AxisVMDomainSupport(CoClass):
    'AxisVMDomainSupport Object'
    _reg_clsid_ = GUID('{AEDBFF94-2970-44B0-B178-E3682478127D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
AxisVMDomainSupport._com_interfaces_ = [IAxisVMDomainSupport]

IAxisVMLineSupport._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'SupportType',
              ( ['out', 'retval'], POINTER(ELineSupportType), 'Value' )),
    COMMETHOD([dispid(206), 'propget'], HRESULT, 'EdgeId',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(207), 'propget'], HRESULT, 'SurfaceId1',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(208), 'propget'], HRESULT, 'SurfaceId2',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(209), 'propget'], HRESULT, 'DomainId1',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(210), 'propget'], HRESULT, 'DomainId2',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(214), 'propget'], HRESULT, 'LineId',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(215)], HRESULT, 'GetStiffnesses',
              ( ['in', 'out'], POINTER(RStiffnesses), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(216)], HRESULT, 'SetStiffnesses',
              ( ['in', 'out'], POINTER(RStiffnesses), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(217)], HRESULT, 'GetNonLinearity',
              ( ['in', 'out'], POINTER(RNonLinearity), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(218)], HRESULT, 'SetNonLinearity',
              ( ['in', 'out'], POINTER(RNonLinearity), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(219)], HRESULT, 'GetResistances',
              ( ['in', 'out'], POINTER(RResistances), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(220)], HRESULT, 'SetResistances',
              ( ['in', 'out'], POINTER(RResistances), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(221)], HRESULT, 'GetStiffnessesXYZ',
              ( ['in', 'out'], POINTER(RStiffnessesXYZ), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(222)], HRESULT, 'SetStiffnessesXYZ',
              ( ['in', 'out'], POINTER(RStiffnessesXYZ), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(223)], HRESULT, 'GetNonLinearityXYZ',
              ( ['in', 'out'], POINTER(RNonLinearityXYZ), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(224)], HRESULT, 'SetNonLinearityXYZ',
              ( ['in', 'out'], POINTER(RNonLinearityXYZ), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(225)], HRESULT, 'GetResistancesXYZ',
              ( ['in', 'out'], POINTER(RResistancesXYZ), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(226)], HRESULT, 'SetResistancesXYZ',
              ( ['in', 'out'], POINTER(RResistancesXYZ), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(227), 'propget'], HRESULT, 'SectionCount',
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(228), 'propget'], HRESULT, 'SectionPos',
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(229)], HRESULT, 'GetStiffnessCalcParams',
              ( ['in', 'out'], POINTER(RLineSupportStiffParams), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(230)], HRESULT, 'SetStiffnessCalcParams',
              ( ['in', 'out'], POINTER(RLineSupportStiffParams), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(231), 'propget'], HRESULT, 'HasFooting',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(232), 'propget'], HRESULT, 'FootingType',
              ( ['out', 'retval'], POINTER(EPadFootingType), 'Value' )),
    COMMETHOD([dispid(233)], HRESULT, 'GetFootingDimensions',
              ( ['in', 'out'], POINTER(RPadFootingDimensions), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(234)], HRESULT, 'GetFootingParams',
              ( ['in', 'out'], POINTER(RPadFootingParams), 'Params' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(235)], HRESULT, 'GetFootingParams_V153',
              ( ['in', 'out'], POINTER(RLinearFootingParams), 'Params' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(236)], HRESULT, 'GetPasternakStiffness',
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(237)], HRESULT, 'SetPasternakStiffness',
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMLineSupport implementation
##class IAxisVMLineSupport_Impl(object):
##    @property
##    def SupportType(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def EdgeId(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def SurfaceId1(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def SurfaceId2(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def DomainId1(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def DomainId2(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def LineId(self):
##        '-no docstring-'
##        #return Value
##
##    def GetStiffnesses(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetStiffnesses(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def GetNonLinearity(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetNonLinearity(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def GetResistances(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetResistances(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def GetStiffnessesXYZ(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetStiffnessesXYZ(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def GetNonLinearityXYZ(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetNonLinearityXYZ(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def GetResistancesXYZ(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetResistancesXYZ(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    @property
##    def SectionCount(self, AnalysisType):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def SectionPos(self, AnalysisType, SectionId):
##        '-no docstring-'
##        #return Value
##
##    def GetStiffnessCalcParams(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetStiffnessCalcParams(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    @property
##    def HasFooting(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def FootingType(self):
##        '-no docstring-'
##        #return Value
##
##    def GetFootingDimensions(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def GetFootingParams(self):
##        '-no docstring-'
##        #return Params, ResultValue
##
##    def GetFootingParams_V153(self):
##        '-no docstring-'
##        #return Params, ResultValue
##
##    def GetPasternakStiffness(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetPasternakStiffness(self, Value):
##        '-no docstring-'
##        #return ResultValue
##

IAxisVMMovingLoadsEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]
class RNonLinearAnalysis(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{8F4E56E7-480C-48CA-88A3-0AE2E5B27118}')
class RVibration(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{7962F978-CC49-4E93-8A50-138B996A524D}')
class RBuckling(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{3D60F9B1-9CDA-4CCF-8EC5-619ABDD379FF}')
class RDynamicAnalysis(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{6C710871-E3AB-4575-AD44-D1A11BDED19D}')
class RPushOverAnalysis(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{546B7690-43CD-46CD-B8E2-DCD29EDFC6EF}')
IAxisVMCalculation._methods_ = [
    COMMETHOD([dispid(201)], HRESULT, 'LinearAnalysis',
              ( ['in'], ECalculationUserInteraction, 'UserInteraction' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'ResultValue' )),
    COMMETHOD([dispid(202)], HRESULT, 'NonLinearAnalysis',
              ( ['in', 'out'], POINTER(RNonLinearAnalysis), 'AnalysisParameters' ),
              ( ['in'], ECalculationUserInteraction, 'UserInteraction' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'ResultValue' )),
    COMMETHOD([dispid(203)], HRESULT, 'Vibration',
              ( ['in', 'out'], POINTER(RVibration), 'AnalysisParameters' ),
              ( ['in'], ECalculationUserInteraction, 'UserInteraction' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'Buckling',
              ( ['in', 'out'], POINTER(RBuckling), 'AnalysisParameters' ),
              ( ['in'], ECalculationUserInteraction, 'UserInteraction' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'ResultValue' )),
    COMMETHOD([dispid(205)], HRESULT, 'NonLinearVibration',
              ( ['in', 'out'], POINTER(RVibration), 'AnalysisParameters' ),
              ( ['in'], ECalculationUserInteraction, 'UserInteraction' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'ResultValue' )),
    COMMETHOD([dispid(206), 'propget'], HRESULT, 'CallMainProgress',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(206), 'propput'], HRESULT, 'CallMainProgress',
              ( ['in'], ELongBoolean, 'Value' )),
    COMMETHOD([dispid(207)], HRESULT, 'LinearAnalysis2',
              ( ['in'], ECalculationUserInteraction, 'UserInteraction' ),
              ( ['in'], ELongBoolean, 'ShowError' ),
              ( ['out'], POINTER(BSTR), 'ErrorList' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'ResultValue' )),
    COMMETHOD([dispid(208)], HRESULT, 'NonLinearAnalysis2',
              ( ['in', 'out'], POINTER(RNonLinearAnalysis), 'AnalysisParameters' ),
              ( ['in'], ECalculationUserInteraction, 'UserInteraction' ),
              ( ['in'], ELongBoolean, 'ShowError' ),
              ( ['out'], POINTER(BSTR), 'ErrorList' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'ResultValue' )),
    COMMETHOD([dispid(209)], HRESULT, 'Vibration2',
              ( ['in', 'out'], POINTER(RVibration), 'AnalysisParameters' ),
              ( ['in'], ECalculationUserInteraction, 'UserInteraction' ),
              ( ['in'], ELongBoolean, 'ShowError' ),
              ( ['out'], POINTER(BSTR), 'ErrorList' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'ResultValue' )),
    COMMETHOD([dispid(210)], HRESULT, 'Buckling2',
              ( ['in', 'out'], POINTER(RBuckling), 'AnalysisParameters' ),
              ( ['in'], ECalculationUserInteraction, 'UserInteraction' ),
              ( ['in'], ELongBoolean, 'ShowError' ),
              ( ['out'], POINTER(BSTR), 'ErrorList' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'ResultValue' )),
    COMMETHOD([dispid(211)], HRESULT, 'NonLinearVibration2',
              ( ['in', 'out'], POINTER(RVibration), 'AnalysisParameters' ),
              ( ['in'], ECalculationUserInteraction, 'UserInteraction' ),
              ( ['in'], ELongBoolean, 'ShowError' ),
              ( ['out'], POINTER(BSTR), 'ErrorList' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'ResultValue' )),
    COMMETHOD([dispid(212)], HRESULT, 'DynamicAnalysis',
              ( ['in', 'out'], POINTER(RDynamicAnalysis), 'AnalysisParameters' ),
              ( ['in'], ECalculationUserInteraction, 'UserInteraction' ),
              ( ['in'], ELongBoolean, 'ShowError' ),
              ( ['out'], POINTER(BSTR), 'ErrorList' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'ResultValue' )),
    COMMETHOD([dispid(213)], HRESULT, 'PushOverAnalysis',
              ( ['in', 'out'], POINTER(RPushOverAnalysis), 'AnalysisParameters' ),
              ( ['in'], ECalculationUserInteraction, 'UserInteraction' ),
              ( ['in'], ELongBoolean, 'ShowError' ),
              ( ['out'], POINTER(BSTR), 'ErrorList' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'ResultValue' )),
]
################################################################
## code template for IAxisVMCalculation implementation
##class IAxisVMCalculation_Impl(object):
##    def LinearAnalysis(self, UserInteraction):
##        '-no docstring-'
##        #return ResultValue
##
##    def NonLinearAnalysis(self, UserInteraction):
##        '-no docstring-'
##        #return AnalysisParameters, ResultValue
##
##    def Vibration(self, UserInteraction):
##        '-no docstring-'
##        #return AnalysisParameters, ResultValue
##
##    def Buckling(self, UserInteraction):
##        '-no docstring-'
##        #return AnalysisParameters, ResultValue
##
##    def NonLinearVibration(self, UserInteraction):
##        '-no docstring-'
##        #return AnalysisParameters, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    CallMainProgress = property(_get, _set, doc = _set.__doc__)
##
##    def LinearAnalysis2(self, UserInteraction, ShowError):
##        '-no docstring-'
##        #return ErrorList, ResultValue
##
##    def NonLinearAnalysis2(self, UserInteraction, ShowError):
##        '-no docstring-'
##        #return AnalysisParameters, ErrorList, ResultValue
##
##    def Vibration2(self, UserInteraction, ShowError):
##        '-no docstring-'
##        #return AnalysisParameters, ErrorList, ResultValue
##
##    def Buckling2(self, UserInteraction, ShowError):
##        '-no docstring-'
##        #return AnalysisParameters, ErrorList, ResultValue
##
##    def NonLinearVibration2(self, UserInteraction, ShowError):
##        '-no docstring-'
##        #return AnalysisParameters, ErrorList, ResultValue
##
##    def DynamicAnalysis(self, UserInteraction, ShowError):
##        '-no docstring-'
##        #return AnalysisParameters, ErrorList, ResultValue
##
##    def PushOverAnalysis(self, UserInteraction, ShowError):
##        '-no docstring-'
##        #return AnalysisParameters, ErrorList, ResultValue
##

class RNonLinearAnalysisResultInfo(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{6DF26B13-D279-4332-9060-037A0D0E4E9E}')
class AxisVMShearCapacity(CoClass):
    'AxisVMShearCapacity Object'
    _reg_clsid_ = GUID('{F5F5AD3E-4AA7-43C8-AD9A-CAE2503ABFCD}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMShearCapacityEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMShearCapacity Object'
    _iid_ = GUID('{567012AC-6F46-4549-85AF-75B1DA759450}')
    _idlflags_ = []
    _methods_ = []
AxisVMShearCapacity._com_interfaces_ = [IAxisVMShearCapacity]
AxisVMShearCapacity._outgoing_interfaces_ = [IAxisVMShearCapacityEvents]

class RSeismicEq(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{392BC0F0-EE9A-41DD-BFE8-D874ECD7F0A2}')

# values for enumeration 'ECapacityCurveType'
cctImportantCharacteristics = 0
cctMDOF = 1
cctSDOF = 2
cctEquivalentBilinear = 3
cctElasticADRS = 4
cctInelasticADRS = 5
cctBilinearAD = 6
cctSDOFinADSpace = 7
cctInitialPeriod = 8
ECapacityCurveType = c_int # enum
class RSpectrumData(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{0CDD3035-5617-4D79-977D-B55A0FFA0D98}')
class AxisVMTimberDesignResults(CoClass):
    'AxisVMTimberDesignResults Object'
    _reg_clsid_ = GUID('{FD6A9F9B-6BD7-4FBE-8A5A-588D3D0B4D4C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMTimberDesignResultsEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMTimberDesignResults Object'
    _iid_ = GUID('{306E37D7-D80E-4FC7-A90C-1003F6D83E5F}')
    _idlflags_ = []
    _methods_ = []
AxisVMTimberDesignResults._com_interfaces_ = [IAxisVMTimberDesignResults]
AxisVMTimberDesignResults._outgoing_interfaces_ = [IAxisVMTimberDesignResultsEvents]

class AxisVMStrains(CoClass):
    'AxisVMStrains Object'
    _reg_clsid_ = GUID('{B06081CE-D4D0-4B30-BDC5-7DFE22FFC2BF}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
AxisVMStrains._com_interfaces_ = [IAxisVMStrains]
AxisVMStrains._outgoing_interfaces_ = [IAxisVMStrainsEvents]

IAxisVMResults._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Displacements',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMDisplacements)), 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'Forces',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMForces)), 'Value' )),
    COMMETHOD([dispid(203), 'propget'], HRESULT, 'Stresses',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMStresses)), 'Value' )),
    COMMETHOD([dispid(204), 'propget'], HRESULT, 'ResultCaseCount',
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(205), 'propget'], HRESULT, 'LoadCaseId',
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], c_int, 'ResultCase' ),
              ( ['out'], POINTER(c_int), 'ErrorCode' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(206), 'propget'], HRESULT, 'LoadCombinationId',
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], c_int, 'ResultCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(207), 'propget'], HRESULT, 'LoadLevelCount',
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], c_int, 'ResultCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(208), 'propget'], HRESULT, 'ModeShapeCount',
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], c_int, 'ResultCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(209), 'propget'], HRESULT, 'ResultCaseOfLoadCase',
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(210), 'propget'], HRESULT, 'ResultCaseOfLoadCombination',
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], c_int, 'LoadCombination' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(211), 'propget'], HRESULT, 'Frequency',
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], c_int, 'ResultCase' ),
              ( ['in'], c_int, 'FrequencyId' ),
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(212)], HRESULT, 'GetAllFrequencies',
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], c_int, 'ResultCase' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Frequencies' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(213)], HRESULT, 'GetFrequencyParameters',
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], c_int, 'ResultCase' ),
              ( ['in'], c_int, 'FrequencyId' ),
              ( ['in', 'out'], POINTER(RFrequencyParameters), 'FrequencyParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(214), 'propget'], HRESULT, 'Ncr',
              ( ['in'], c_int, 'ResultCase' ),
              ( ['in'], c_int, 'ModeShapeId' ),
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(215)], HRESULT, 'GetAllNcr',
              ( ['in'], c_int, 'ResultCase' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Ncr' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(216)], HRESULT, 'GetNcrParameters',
              ( ['in'], c_int, 'ResultCase' ),
              ( ['in'], c_int, 'ModeShapeId' ),
              ( ['in', 'out'], POINTER(RNcrParameters), 'NcrParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(217)], HRESULT, 'GetNonLinearAnalysisResultInfo',
              ( ['in'], c_int, 'ResultCase' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in', 'out'], POINTER(RNonLinearAnalysisResultInfo), 'NonLinearAnalysisResultInfo' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(218)], HRESULT, 'GetNonLinearAnalysisParameters',
              ( ['in'], c_int, 'ResultCase' ),
              ( ['in', 'out'], POINTER(RNonLinearAnalysis), 'NonLinearAnalysisParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(219)], HRESULT, 'GetVibrationParameters',
              ( ['in'], c_int, 'ResultCase' ),
              ( ['in', 'out'], POINTER(RVibration), 'VibrationParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(220)], HRESULT, 'GetNonLinearVibrationParameters',
              ( ['in'], c_int, 'ResultCase' ),
              ( ['in', 'out'], POINTER(RVibration), 'NonLinearVibrationParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(221)], HRESULT, 'GetBucklingParameters',
              ( ['in'], c_int, 'ResultCase' ),
              ( ['in', 'out'], POINTER(RBuckling), 'BucklingParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(225), 'propget'], HRESULT, 'SteelDesignResults',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMSteelDesignResults)), 'Value' )),
    COMMETHOD([dispid(226), 'propget'], HRESULT, 'CalculatedReinforcement',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMCalculatedReinforcement)), 'Value' )),
    COMMETHOD([dispid(227), 'propget'], HRESULT, 'ReinforcementCheck',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMReinforcementCheck)), 'Value' )),
    COMMETHOD([dispid(228), 'propget'], HRESULT, 'ShearCapacity',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMShearCapacity)), 'Value' )),
    COMMETHOD([dispid(229), 'propget'], HRESULT, 'CrackWidth',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMCrackWidth)), 'Value' )),
    COMMETHOD([dispid(230), 'propget'], HRESULT, 'Velocity',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMVelocity)), 'Value' )),
    COMMETHOD([dispid(231), 'propget'], HRESULT, 'Acceleration',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMAcceleration)), 'Value' )),
    COMMETHOD([dispid(232)], HRESULT, 'GetModeActive',
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], c_int, 'ResultCase' ),
              ( ['in'], c_int, 'FrequencyId' ),
              ( ['out'], POINTER(ELongBoolean), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(233)], HRESULT, 'SetModeActive',
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], c_int, 'ResultCase' ),
              ( ['in'], c_int, 'FrequencyId' ),
              ( ['in'], ELongBoolean, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(234)], HRESULT, 'GetSeismicEqCoeff',
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], c_int, 'ResultCase' ),
              ( ['in'], c_int, 'FrequencyId' ),
              ( ['in', 'out'], POINTER(RSeismicEq), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(235)], HRESULT, 'GetCapacityCurve',
              ( ['in'], ECapacityCurveType, 'CapacityCurveType' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in', 'out'], POINTER(RSpectrumData), 'SpectrumData' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'x' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'y' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(236), 'propget'], HRESULT, 'TimeStepCount',
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], c_int, 'ResultCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(237), 'propget'], HRESULT, 'TimberDesignResults',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMTimberDesignResults)), 'Value' )),
    COMMETHOD([dispid(238)], HRESULT, 'GetCapacityCurvePushOver',
              ( ['in'], ECapacityCurveType, 'CapacityCurveType' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'x' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'y' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(239)], HRESULT, 'GetAllModalMassfactors',
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], c_int, 'ResultCase' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'ModalMassfactors' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(240)], HRESULT, 'GetAllActivatedMasses',
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], c_int, 'ResultCase' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'ActivatedMasses' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(241)], HRESULT, 'GetUsedMassOfNodes',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NodeIDs' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], c_int, 'ResultCase' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'UsedMass' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(242)], HRESULT, 'GetResultsValid',
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], c_int, 'LoadCaseOrCombinationIds' ),
              ( ['out'], POINTER(ELongBoolean), 'ResultsValid' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(243)], HRESULT, 'GetSectionCoordinates',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ContinousMemberIds' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELongBoolean, 'AbsX' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'SectionCoordinates' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(244)], HRESULT, 'SaveXYchartToMetaFile',
              ( ['in'], BSTR, 'FileName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PointsCount' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'x' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'y' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Ylabels' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Xmarkers' ),
              ( ['in'], BSTR, 'OptionsJSON' ),
              ( ['out'], POINTER(BSTR), 'PropertiesJSON' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(245)], HRESULT, 'GetXYchartOptionsJSON',
              ( ['in'], ELongBoolean, 'Indent' ),
              ( ['in'], ELongBoolean, 'Escape' ),
              ( ['out'], POINTER(BSTR), 'OptionsJSON' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(246)], HRESULT, 'SetUserCreep',
              ( ['in'], ELongBoolean, 'Creep' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(247), 'propget'], HRESULT, 'UserCreep',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(248)], HRESULT, 'UpdateResults',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(249)], HRESULT, 'GetTotalLoadsByLoadCaseID',
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['out'], POINTER(ELongBoolean), 'UnbalancedLoadsExist' ),
              ( ['in', 'out'], POINTER(RTotalLoads), 'TotalLoads' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(250), 'propget'], HRESULT, 'Strains',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMStrains)), 'Value' )),
    COMMETHOD([dispid(251), 'propget'], HRESULT, 'VerticalDisplacements',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMVerticalDisplacements)), 'Value' )),
    COMMETHOD([dispid(252), 'propget'], HRESULT, 'CalcCrackWidth',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMCalcCrackWidth)), 'Value' )),
]
################################################################
## code template for IAxisVMResults implementation
##class IAxisVMResults_Impl(object):
##    @property
##    def Displacements(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Forces(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Stresses(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def ResultCaseCount(self, AnalysisType):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def LoadCaseId(self, AnalysisType, ResultCase):
##        '-no docstring-'
##        #return ErrorCode, Value
##
##    @property
##    def LoadCombinationId(self, AnalysisType, ResultCase):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def LoadLevelCount(self, AnalysisType, ResultCase):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def ModeShapeCount(self, AnalysisType, ResultCase):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def ResultCaseOfLoadCase(self, AnalysisType, LoadCaseId):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def ResultCaseOfLoadCombination(self, AnalysisType, LoadCombination):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Frequency(self, AnalysisType, ResultCase, FrequencyId):
##        '-no docstring-'
##        #return Value
##
##    def GetAllFrequencies(self, AnalysisType, ResultCase):
##        '-no docstring-'
##        #return Frequencies, ResultValue
##
##    def GetFrequencyParameters(self, AnalysisType, ResultCase, FrequencyId):
##        '-no docstring-'
##        #return FrequencyParameters, ResultValue
##
##    @property
##    def Ncr(self, ResultCase, ModeShapeId):
##        '-no docstring-'
##        #return Value
##
##    def GetAllNcr(self, ResultCase):
##        '-no docstring-'
##        #return Ncr, ResultValue
##
##    def GetNcrParameters(self, ResultCase, ModeShapeId):
##        '-no docstring-'
##        #return NcrParameters, ResultValue
##
##    def GetNonLinearAnalysisResultInfo(self, ResultCase, LoadLevel):
##        '-no docstring-'
##        #return NonLinearAnalysisResultInfo, ResultValue
##
##    def GetNonLinearAnalysisParameters(self, ResultCase):
##        '-no docstring-'
##        #return NonLinearAnalysisParameters, ResultValue
##
##    def GetVibrationParameters(self, ResultCase):
##        '-no docstring-'
##        #return VibrationParameters, ResultValue
##
##    def GetNonLinearVibrationParameters(self, ResultCase):
##        '-no docstring-'
##        #return NonLinearVibrationParameters, ResultValue
##
##    def GetBucklingParameters(self, ResultCase):
##        '-no docstring-'
##        #return BucklingParameters, ResultValue
##
##    @property
##    def SteelDesignResults(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def CalculatedReinforcement(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def ReinforcementCheck(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def ShearCapacity(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def CrackWidth(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Velocity(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Acceleration(self):
##        '-no docstring-'
##        #return Value
##
##    def GetModeActive(self, AnalysisType, ResultCase, FrequencyId):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetModeActive(self, AnalysisType, ResultCase, FrequencyId, Value):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetSeismicEqCoeff(self, AnalysisType, ResultCase, FrequencyId):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def GetCapacityCurve(self, CapacityCurveType, LoadCaseId):
##        '-no docstring-'
##        #return SpectrumData, x, y, ResultValue
##
##    @property
##    def TimeStepCount(self, AnalysisType, ResultCase):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def TimberDesignResults(self):
##        '-no docstring-'
##        #return Value
##
##    def GetCapacityCurvePushOver(self, CapacityCurveType, LoadCaseId):
##        '-no docstring-'
##        #return x, y, ResultValue
##
##    def GetAllModalMassfactors(self, AnalysisType, ResultCase):
##        '-no docstring-'
##        #return ModalMassfactors, ResultValue
##
##    def GetAllActivatedMasses(self, AnalysisType, ResultCase):
##        '-no docstring-'
##        #return ActivatedMasses, ResultValue
##
##    def GetUsedMassOfNodes(self, AnalysisType, ResultCase):
##        '-no docstring-'
##        #return NodeIDs, UsedMass, ResultValue
##
##    def GetResultsValid(self, AnalysisType, LoadCaseOrCombinationIds):
##        '-no docstring-'
##        #return ResultsValid, ResultValue
##
##    def GetSectionCoordinates(self, AnalysisType, AbsX):
##        '-no docstring-'
##        #return ContinousMemberIds, LineIds, SectionCounts, SectionCoordinates, ResultValue
##
##    def SaveXYchartToMetaFile(self, FileName, OptionsJSON):
##        '-no docstring-'
##        #return PointsCount, x, y, Ylabels, Xmarkers, PropertiesJSON, ResultValue
##
##    def GetXYchartOptionsJSON(self, Indent, Escape):
##        '-no docstring-'
##        #return OptionsJSON, ResultValue
##
##    def SetUserCreep(self, Creep):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def UserCreep(self):
##        '-no docstring-'
##        #return Value
##
##    def UpdateResults(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetTotalLoadsByLoadCaseID(self, AnalysisType, LoadCaseId):
##        '-no docstring-'
##        #return UnbalancedLoadsExist, TotalLoads, ResultValue
##
##    @property
##    def Strains(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def VerticalDisplacements(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def CalcCrackWidth(self):
##        '-no docstring-'
##        #return Value
##


# values for enumeration 'ESupportError'
seNodeIndexOutOfBounds = -100001
seLineIndexOutOfBounds = -100002
seReferenceIndexOutOfBounds = -100003
seIncompatibleReferences = -100004
ESupportError = c_int # enum
REnabledLogicalParts._fields_ = [
    ('By_Material', ELongBoolean),
    ('By_CrossSection', ELongBoolean),
    ('By_CrossSection_LineType', ELongBoolean),
    ('By_CrossSection_ArchitecturalLineElementType', ELongBoolean),
    ('By_DomainType_Thickness', ELongBoolean),
    ('By_ArchitecturalDomainElementType_Thickness', ELongBoolean),
    ('By_Stories', ELongBoolean),
    ('By_StructuralGridLines', ELongBoolean),
]
assert sizeof(REnabledLogicalParts) == 32, sizeof(REnabledLogicalParts)
assert alignment(REnabledLogicalParts) == 4, alignment(REnabledLogicalParts)
class IAxisVMCustomPartFolder(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMCustomPartFolder Object'
    _iid_ = GUID('{8619D233-C629-4B38-B887-83869BA84345}')
    _idlflags_ = ['dual', 'oleautomation']
class AxisVMCustomPartFolder(CoClass):
    'AxisVMCustomPartFolder Object'
    _reg_clsid_ = GUID('{521B3B48-83B3-480D-A903-6448FA927A59}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMCustomPartFolderEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMCustomPartFolder Object'
    _iid_ = GUID('{E16AB503-AC5B-4D44-88E8-5D8866CF1A87}')
    _idlflags_ = []
    _methods_ = []
AxisVMCustomPartFolder._com_interfaces_ = [IAxisVMCustomPartFolder]
AxisVMCustomPartFolder._outgoing_interfaces_ = [IAxisVMCustomPartFolderEvents]


# values for enumeration 'EPartControl'
pcDeleteParts = 0
pcMoveToUpperFolder = 1
pcMoveToRootFolder = 2
EPartControl = c_int # enum
IAxisVMCustomPartFolder._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'PartCount',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(203), 'propget'], HRESULT, 'PartId',
              ( ['in'], c_int, 'PartIndex' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(204), 'propget'], HRESULT, 'PartUID',
              ( ['in'], c_int, 'PartIndex' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(205), 'propget'], HRESULT, 'SubFolderCount',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(206), 'propget'], HRESULT, 'SubFolder',
              ( ['in'], c_int, 'SubFolderIndex' ),
              ( ['out', 'retval'], POINTER(POINTER(AxisVMCustomPartFolder)), 'Value' )),
    COMMETHOD([dispid(207), 'propget'], HRESULT, 'ParentFolder',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMCustomPartFolder)), 'Value' )),
    COMMETHOD([dispid(208), 'propget'], HRESULT, 'IsRootFolder',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(209)], HRESULT, 'AddPartFromSelectedItems',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(210)], HRESULT, 'AddPart',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPartItem)), 'PartItems' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(211)], HRESULT, 'DeletePart',
              ( ['in'], c_int, 'PartIndex' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(212)], HRESULT, 'AddSubFolder',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(213)], HRESULT, 'DeleteSubFolder',
              ( ['in'], c_int, 'SubFolderIndex' ),
              ( ['in'], EPartControl, 'PartControl' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(214)], HRESULT, 'RenamePart',
              ( ['in'], c_int, 'PartIndex' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(215)], HRESULT, 'RenameSubFolder',
              ( ['in'], c_int, 'SubFolderIndex' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(216)], HRESULT, 'GetPart',
              ( ['in'], c_int, 'PartIndex' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPartItem)), 'PartItems' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(217)], HRESULT, 'ModifyPartFromSelectedItems',
              ( ['in'], c_int, 'PartIndex' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(218)], HRESULT, 'ModifyPart',
              ( ['in'], c_int, 'PartIndex' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPartItem)), 'PartItems' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(219)], HRESULT, 'SelectPartItems',
              ( ['in'], c_int, 'PartIndex' ),
              ( ['in'], ESelectMode, 'SelectMode' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(220)], HRESULT, 'AddPartItemsFromSelectedItemsToPart',
              ( ['in'], c_int, 'PartIndex' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(221)], HRESULT, 'AddPartItemsToPart',
              ( ['in'], c_int, 'PartIndex' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPartItem)), 'PartItems' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(222), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(222), 'propput'], HRESULT, 'Name',
              ( ['in'], BSTR, 'Value' )),
]
################################################################
## code template for IAxisVMCustomPartFolder implementation
##class IAxisVMCustomPartFolder_Impl(object):
##    @property
##    def Path(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def PartCount(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def PartId(self, PartIndex):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def PartUID(self, PartIndex):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def SubFolderCount(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def SubFolder(self, SubFolderIndex):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def ParentFolder(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def IsRootFolder(self):
##        '-no docstring-'
##        #return Value
##
##    def AddPartFromSelectedItems(self, Name):
##        '-no docstring-'
##        #return Value
##
##    def AddPart(self, Name):
##        '-no docstring-'
##        #return PartItems, Value
##
##    def DeletePart(self, PartIndex):
##        '-no docstring-'
##        #return Value
##
##    def AddSubFolder(self, Name):
##        '-no docstring-'
##        #return Value
##
##    def DeleteSubFolder(self, SubFolderIndex, PartControl):
##        '-no docstring-'
##        #return Value
##
##    def RenamePart(self, PartIndex, Name):
##        '-no docstring-'
##        #return Value
##
##    def RenameSubFolder(self, SubFolderIndex, Name):
##        '-no docstring-'
##        #return Value
##
##    def GetPart(self, PartIndex):
##        '-no docstring-'
##        #return PartItems, Value
##
##    def ModifyPartFromSelectedItems(self, PartIndex):
##        '-no docstring-'
##        #return Value
##
##    def ModifyPart(self, PartIndex):
##        '-no docstring-'
##        #return PartItems, Value
##
##    def SelectPartItems(self, PartIndex, SelectMode):
##        '-no docstring-'
##        #return Value
##
##    def AddPartItemsFromSelectedItemsToPart(self, PartIndex):
##        '-no docstring-'
##        #return Value
##
##    def AddPartItemsToPart(self, PartIndex):
##        '-no docstring-'
##        #return PartItems, Value
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Name = property(_get, _set, doc = _set.__doc__)
##

RWindLoadParams._fields_ = [
    ('a', c_double),
    ('v_b0', c_double),
    ('c_season', c_double),
    ('c_o', c_double),
    ('TerrainCategoryDifferent', ELongBoolean),
    ('TerrainCat_Xp', ETerrainCategory),
    ('TerrainCat_Xm', ETerrainCategory),
    ('TerrainCat_Yp', ETerrainCategory),
    ('TerrainCat_Ym', ETerrainCategory),
    ('CustomDirectionalFactors', ELongBoolean),
    ('c_dir_xp', c_double),
    ('c_dir_xm', c_double),
    ('c_dir_yp', c_double),
    ('c_dir_ym', c_double),
    ('RoofType', ERoofType),
    ('FlatRoofEdgeType', EFlatRoofEdgeType),
    ('FlatRoofEdgeParam', c_double),
    ('TorsionalEffect', ELongBoolean),
    ('u_xp', c_double),
    ('u_xm', c_double),
    ('u_yp', c_double),
    ('u_ym', c_double),
    ('Iw', c_double),
    ('Zone', c_int),
]
assert sizeof(RWindLoadParams) == 160, sizeof(RWindLoadParams)
assert alignment(RWindLoadParams) == 8, alignment(RWindLoadParams)
class RRCBeamDesignCrackResults(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{31AAF0A6-FC66-4023-94F0-D846B1041D45}')
class RRCBeamDesignCrackResult(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{72922B75-0845-4A2D-B771-DED56BE304CB}')
RRCBeamDesignCrackResult._fields_ = [
    ('Wk', c_double),
    ('I1', c_double),
    ('x1', c_double),
    ('I2', c_double),
    ('x2', c_double),
    ('Mcr', c_double),
    ('Sr_max', c_double),
]
assert sizeof(RRCBeamDesignCrackResult) == 56, sizeof(RRCBeamDesignCrackResult)
assert alignment(RRCBeamDesignCrackResult) == 8, alignment(RRCBeamDesignCrackResult)
RRCBeamDesignCrackResults._fields_ = [
    ('Top', RRCBeamDesignCrackResult),
    ('Bottom', RRCBeamDesignCrackResult),
]
assert sizeof(RRCBeamDesignCrackResults) == 112, sizeof(RRCBeamDesignCrackResults)
assert alignment(RRCBeamDesignCrackResults) == 8, alignment(RRCBeamDesignCrackResults)
class RRCBeamDesignReqReinfs(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{C0688271-5DC9-4FCD-ACBF-3F44A478F27C}')
class RRCBeamDesignReqReinf(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{4DAE6F9D-6B64-46AE-AE73-E0E2B3DC2133}')
RRCBeamDesignReqReinf._fields_ = [
    ('N', c_int),
    ('Nf', c_int),
    ('NRow', c_int),
    ('u', c_double),
]
assert sizeof(RRCBeamDesignReqReinf) == 24, sizeof(RRCBeamDesignReqReinf)
assert alignment(RRCBeamDesignReqReinf) == 8, alignment(RRCBeamDesignReqReinf)
RRCBeamDesignReqReinfs._fields_ = [
    ('Top', RRCBeamDesignReqReinf),
    ('Bottom', RRCBeamDesignReqReinf),
    ('Top_CC', RRCBeamDesignReqReinf),
    ('Bottom_CC', RRCBeamDesignReqReinf),
]
assert sizeof(RRCBeamDesignReqReinfs) == 96, sizeof(RRCBeamDesignReqReinfs)
assert alignment(RRCBeamDesignReqReinfs) == 8, alignment(RRCBeamDesignReqReinfs)
IAxisVMRCBeamDesign._methods_ = [
    COMMETHOD([dispid(202)], HRESULT, 'GetLines',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(203)], HRESULT, 'Calculate',
              ( ['in'], EResultType, 'ResultType' ),
              ( ['in'], c_int, 'LoadCaseOrCombinationOrEnvelopeUID' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELongBoolean, 'Creep' ),
              ( ['out'], POINTER(c_int), 'SectionCount' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RRCBeamDesignResult)), 'Results' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RRCBeamDesignCrackResults)), 'CrackResults' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RRCBeamDesignReqReinfs)), 'RequiredReinforcements' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberOfRebars_Top' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberOfRebars_Bottom' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberOfRebars_Top_CC' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberOfRebars_Bottom_CC' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'URow_Top' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'URow_Bottom' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'URow_Top_CC' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'URow_Bottom_CC' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RRCBeamDesignDeflectionResults)), 'DeflectionsRel' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RRCBeamDesignDeflectionResults)), 'DeflectionsAbs' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204), 'propget'], HRESULT, 'BeamDesignPlane',
              ( ['out', 'retval'], POINTER(ERCBeamDesignPlane), 'Value' )),
    COMMETHOD([dispid(204), 'propput'], HRESULT, 'BeamDesignPlane',
              ( ['in'], ERCBeamDesignPlane, 'Value' )),
    COMMETHOD([dispid(207)], HRESULT, 'GetDesignParameters',
              ( ['in', 'out'], POINTER(RRCBeamDesignParameters), 'RCBeamDesignParameters' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'DesignCodeParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208), helpstring('The DesignCodeParameters must be type casted into the appropriate DesignCodeParameters record type!')], HRESULT, 'SetDesignParameters',
              ( ['in', 'out'], POINTER(RRCBeamDesignParameters), 'RCBeamDesignParameters' ),
              ( ['in'], _midlSAFEARRAY(c_ubyte), 'DesignCodeParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209)], HRESULT, 'SetDesignParameters_vb',
              ( ['in', 'out'], POINTER(RRCBeamDesignParameters), 'RCBeamDesignParameters' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'DesignCodeParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(213)], HRESULT, 'Clear',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(224)], HRESULT, 'AddMembers',
              ( ['in'], _midlSAFEARRAY(c_int), 'MemberIds' ),
              ( ['in'], _midlSAFEARRAY(RPartialRCBeamDesignParameters), 'PartialRCBeamDesignParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(225)], HRESULT, 'AddMembers_vb',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MemberIds' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPartialRCBeamDesignParameters)), 'PartialRCBeamDesignParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(226)], HRESULT, 'AddLines',
              ( ['in'], _midlSAFEARRAY(c_int), 'LineIds' ),
              ( ['in'], _midlSAFEARRAY(RPartialRCBeamDesignParameters), 'PartialRCBeamDesignParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(227)], HRESULT, 'AddLines_vb',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPartialRCBeamDesignParameters)), 'PartialRCBeamDesignParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(228)], HRESULT, 'GetPartialRCBeamDesignParameters',
              ( ['out'], POINTER(_midlSAFEARRAY(RPartialRCBeamDesignParameters)), 'PartialRCBeamDesignParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMRCBeamDesign implementation
##class IAxisVMRCBeamDesign_Impl(object):
##    def GetLines(self):
##        '-no docstring-'
##        #return LineIds, ResultValue
##
##    def Calculate(self, ResultType, LoadCaseOrCombinationOrEnvelopeUID, LoadLevel, AnalysisType, Creep):
##        '-no docstring-'
##        #return SectionCount, Results, CrackResults, RequiredReinforcements, NumberOfRebars_Top, NumberOfRebars_Bottom, NumberOfRebars_Top_CC, NumberOfRebars_Bottom_CC, URow_Top, URow_Bottom, URow_Top_CC, URow_Bottom_CC, DeflectionsRel, DeflectionsAbs, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    BeamDesignPlane = property(_get, _set, doc = _set.__doc__)
##
##    def GetDesignParameters(self):
##        '-no docstring-'
##        #return RCBeamDesignParameters, DesignCodeParameters, ResultValue
##
##    def SetDesignParameters(self, DesignCodeParameters):
##        'The DesignCodeParameters must be type casted into the appropriate DesignCodeParameters record type!'
##        #return RCBeamDesignParameters, ResultValue
##
##    def SetDesignParameters_vb(self):
##        '-no docstring-'
##        #return RCBeamDesignParameters, DesignCodeParameters, ResultValue
##
##    def Clear(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddMembers(self, MemberIds, PartialRCBeamDesignParameters):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddMembers_vb(self):
##        '-no docstring-'
##        #return MemberIds, PartialRCBeamDesignParameters, ResultValue
##
##    def AddLines(self, LineIds, PartialRCBeamDesignParameters):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddLines_vb(self):
##        '-no docstring-'
##        #return LineIds, PartialRCBeamDesignParameters, ResultValue
##
##    def GetPartialRCBeamDesignParameters(self):
##        '-no docstring-'
##        #return PartialRCBeamDesignParameters, ResultValue
##

class RWriteValuesTo(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{68471330-CA4E-4EC7-B594-31BB820F1317}')
RWriteValuesTo._fields_ = [
    ('Nodes', ELongBoolean),
    ('Lines', ELongBoolean),
    ('Surfaces', ELongBoolean),
    ('MinMaxOnly', ELongBoolean),
]
assert sizeof(RWriteValuesTo) == 16, sizeof(RWriteValuesTo)
assert alignment(RWriteValuesTo) == 4, alignment(RWriteValuesTo)
RLoadDomainPolyLine._fields_ = [
    ('LoadCaseId', c_int),
    ('px1', c_double),
    ('px2', c_double),
    ('py1', c_double),
    ('py2', c_double),
    ('pz1', c_double),
    ('pz2', c_double),
    ('pm1', c_double),
    ('pm2', c_double),
    ('DistributionType', EDistributionType),
    ('Nx', c_double),
    ('Ny', c_double),
    ('Nz', c_double),
]
assert sizeof(RLoadDomainPolyLine) == 104, sizeof(RLoadDomainPolyLine)
assert alignment(RLoadDomainPolyLine) == 8, alignment(RLoadDomainPolyLine)
IAxisVMCriticalGroupCombinationsEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
    DISPMETHOD([dispid(202)], HRESULT, 'Changed'),
    DISPMETHOD([dispid(203)], HRESULT, 'Cleared'),
]
IAxisVMWorkplanesEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Cleared'),
    DISPMETHOD([dispid(202)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]
class RBulkNodalSupportSpringParams(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{513D8D97-B552-4323-B612-C33186044CA7}')
RBulkNodalSupportSpringParams._fields_ = [
    ('SupportType', ENodalSupportType),
    ('SpringParamIndexes', RSpringParamIndexes),
    ('IsolatorParamIndex', c_int),
    ('IsolatorD2', c_double),
    ('NodeId', c_int),
    ('MemberID', c_int),
    ('SurfaceId1', c_int),
    ('SurfaceId2', c_int),
    ('DomainId1', c_int),
    ('DomainId2', c_int),
    ('ReferenceId', c_int),
    ('ReferenceIdx', c_int),
    ('ReferenceIdz', c_int),
]
assert sizeof(RBulkNodalSupportSpringParams) == 80, sizeof(RBulkNodalSupportSpringParams)
assert alignment(RBulkNodalSupportSpringParams) == 8, alignment(RBulkNodalSupportSpringParams)
RWorldRectangle._fields_ = [
    ('Left', c_double),
    ('Right', c_double),
    ('Top', c_double),
    ('Bottom', c_double),
]
assert sizeof(RWorldRectangle) == 32, sizeof(RWorldRectangle)
assert alignment(RWorldRectangle) == 8, alignment(RWorldRectangle)
IAxisVMSeismicStoreysEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Cleared'),
    DISPMETHOD([dispid(202)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]

# values for enumeration 'EXLAMSurfaceStress'
xssSxx_m_T = 0
xssSyy_m_T = 1
xssSxx_m_B = 2
xssSyy_m_B = 3
xssSxx_n = 4
xssSyy_n = 5
xssSxy_max = 6
xssSxz_max = 7
xssSrx_max = 8
xssSry_max = 9
EXLAMSurfaceStress = c_int # enum

# values for enumeration 'ESeismicCombType'
sctQuadratic = 0
sctMax = 1
sctAuto = 2
ESeismicCombType = c_int # enum
class RBasicDisplayParameters(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{28B230ED-5561-4B0A-AE3A-0C056AA41BB5}')
RBasicDisplayParameters._fields_ = [
    ('ResultComponent', EResultComponent),
    ('Scale', c_double),
    ('DisplayMode', EDisplayMode),
    ('DisplayShape', EDisplayShape),
    ('WriteValuesTo', RWriteValuesTo),
]
assert sizeof(RBasicDisplayParameters) == 40, sizeof(RBasicDisplayParameters)
assert alignment(RBasicDisplayParameters) == 8, alignment(RBasicDisplayParameters)
IAxisVMWindow._methods_ = [
    COMMETHOD([dispid(201)], HRESULT, 'Duplicate',
              ( ['in'], EWindowSplit, 'WindowSplit' ),
              ( ['in'], c_double, 'SplitPos' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202)], HRESULT, 'Remove',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(203)], HRESULT, 'GetStaticDisplayParameters',
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters), 'ExtendedDisplayParameters' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationOrEnvelopeUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(204)], HRESULT, 'GetBucklingDisplayParameters',
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters), 'ExtendedDisplayParameters' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'ModeShapeId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(205)], HRESULT, 'GetVibrationDisplayParameters',
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters), 'ExtendedDisplayParameters' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'ModeShapeId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(206)], HRESULT, 'GetDynamicDisplayParameters',
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters), 'ExtendedDisplayParameters' ),
              ( ['out'], POINTER(c_int), 'DynamicLoadCaseOrEnvelopeUID' ),
              ( ['out'], POINTER(c_int), 'TimeStepId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(207)], HRESULT, 'GetRCDesignDisplayParameters',
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters), 'ExtendedDisplayParameters' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationOrEnvelopeUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(208)], HRESULT, 'GetSteelDesignDisplayParameters',
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters), 'ExtendedDisplayParameters' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationOrEnvelopeUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(209)], HRESULT, 'GetTimberDesignDisplayParameters',
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters), 'ExtendedDisplayParameters' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationOrEnvelopeUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(210)], HRESULT, 'GetDisplayOptions',
              ( ['in', 'out'], POINTER(RShowSymbols), 'ShowSymbols' ),
              ( ['in', 'out'], POINTER(RShowLabels), 'ShowLabels' ),
              ( ['in', 'out'], POINTER(RShowSwitches), 'ShowSwitches' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(211)], HRESULT, 'SetStaticDisplayParameters',
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters), 'ExtendedDisplayParameters' ),
              ( ['in'], c_int, 'LoadCaseOrCombinationOrEnvelopeUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(212)], HRESULT, 'SetBucklingDisplayParameters',
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters), 'ExtendedDisplayParameters' ),
              ( ['in'], c_int, 'LoadCaseOrCombinationId' ),
              ( ['in'], c_int, 'ModeShapeId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(213)], HRESULT, 'SetVibrationDisplayParameters',
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters), 'ExtendedDisplayParameters' ),
              ( ['in'], c_int, 'LoadCaseOrCombinationId' ),
              ( ['in'], c_int, 'ModeShapeId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(214)], HRESULT, 'SetDynamicDisplayParameters',
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters), 'ExtendedDisplayParameters' ),
              ( ['in'], c_int, 'DynamicLoadCaseOrEnvelopeUID' ),
              ( ['in'], c_int, 'TimeStepId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(215)], HRESULT, 'SetRCDesignDisplayParameters',
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters), 'ExtendedDisplayParameters' ),
              ( ['in'], c_int, 'LoadCaseOrCombinationOrEnvelopeUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(216)], HRESULT, 'SetSteelDesignDisplayParameters',
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters), 'ExtendedDisplayParameters' ),
              ( ['in'], c_int, 'LoadCaseOrCombinationOrEnvelopeUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(217)], HRESULT, 'SetTimberDesignDisplayParameters',
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters), 'ExtendedDisplayParameters' ),
              ( ['in'], c_int, 'LoadCaseOrCombinationOrEnvelopeUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(218)], HRESULT, 'SetDisplayOptions',
              ( ['in', 'out'], POINTER(RShowSymbols), 'ShowSymbols' ),
              ( ['in', 'out'], POINTER(RShowLabels), 'ShowLabels' ),
              ( ['in', 'out'], POINTER(RShowSwitches), 'ShowSwitches' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(219), 'propget'], HRESULT, 'Display',
              ( ['out', 'retval'], POINTER(EDisplay), 'Value' )),
    COMMETHOD([dispid(219), 'propput'], HRESULT, 'Display',
              ( ['in'], EDisplay, 'Value' )),
    COMMETHOD([dispid(220)], HRESULT, 'GetWindowDisplayPartUIDs',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PartUIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(221)], HRESULT, 'SetWindowDisplayPartUIDs',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PartUIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(222)], HRESULT, 'SaveWindowToBitmap',
              ( ['in'], EWindowColourMode, 'WindowColourMode' ),
              ( ['in'], BSTR, 'FileName' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(223), 'propget'], HRESULT, 'Width',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(224), 'propget'], HRESULT, 'Height',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(225)], HRESULT, 'GetPixelPosition',
              ( ['in', 'out'], POINTER(RPoint3d), 'P' ),
              ( ['out'], POINTER(c_int), 'Left' ),
              ( ['out'], POINTER(c_int), 'Top' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(226)], HRESULT, 'SaveWindowToClipboard',
              ( ['in'], EWindowColourMode, 'WindowColourMode' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(227)], HRESULT, 'SaveWindowToMetafile',
              ( ['in'], BSTR, 'FileName' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(228), 'propget'], HRESULT, 'View',
              ( ['out', 'retval'], POINTER(EView), 'Value' )),
    COMMETHOD([dispid(228), 'propput'], HRESULT, 'View',
              ( ['in'], EView, 'Value' )),
    COMMETHOD([dispid(229), 'propget'], HRESULT, 'WorkPlaneIndex',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(229), 'propput'], HRESULT, 'WorkPlaneIndex',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(230), 'propget'], HRESULT, 'StoryIndex',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(230), 'propput'], HRESULT, 'StoryIndex',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(231), 'propget'], HRESULT, 'ActiveStoryIndex',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(231), 'propput'], HRESULT, 'ActiveStoryIndex',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(232), 'propget'], HRESULT, 'ShowOnlySelected',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(232), 'propput'], HRESULT, 'ShowOnlySelected',
              ( ['in'], ELongBoolean, 'Value' )),
    COMMETHOD([dispid(233)], HRESULT, 'GetVisibleLayerIDs',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'VisibleLayerIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(234)], HRESULT, 'SetVisibleLayerIDs',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'VisibleLayerIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(235)], HRESULT, 'GetDetectedLayerIDs',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'DetectedLayerIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(236)], HRESULT, 'SetDetectedLayerIDs',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'DetectedLayerIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(237)], HRESULT, 'GetLockedLayerIDs',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LockedLayerIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(238)], HRESULT, 'SetLockedLayerIDs',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LockedLayerIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(239)], HRESULT, 'GetVisibleStructuralGridIDs',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'VisibleStructuralGridIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(240)], HRESULT, 'SetVisibleStructuralGridIDs',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'VisibleStructuralGridIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(241)], HRESULT, 'GetWorldRectangle',
              ( ['in', 'out'], POINTER(RWorldRectangle), 'WorldRectangle' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(242)], HRESULT, 'SetWorldRectangle',
              ( ['in', 'out'], POINTER(RWorldRectangle), 'WorldRectangle' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(243)], HRESULT, 'ReDraw',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(244)], HRESULT, 'PanToCoord',
              ( ['in', 'out'], POINTER(RPoint3d), 'Coord' ),
              ( ['in'], ELongBoolean, 'MoveCursor' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(245)], HRESULT, 'GetStaticDisplayParameters_V153',
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters_V153), 'ExtendedDisplayParameters' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationOrEnvelopeUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(246)], HRESULT, 'GetBucklingDisplayParameters_V153',
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters_V153), 'ExtendedDisplayParameters' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'ModeShapeId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(247)], HRESULT, 'GetVibrationDisplayParameters_V153',
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters_V153), 'ExtendedDisplayParameters' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'ModeShapeId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(248)], HRESULT, 'GetDynamicDisplayParameters_V153',
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters_V153), 'ExtendedDisplayParameters' ),
              ( ['out'], POINTER(c_int), 'DynamicLoadCaseOrEnvelopeUID' ),
              ( ['out'], POINTER(c_int), 'TimeStepId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(249)], HRESULT, 'GetRCDesignDisplayParameters_V153',
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters_V153), 'ExtendedDisplayParameters' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationOrEnvelopeUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(250)], HRESULT, 'GetSteelDesignDisplayParameters_V153',
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters_V153), 'ExtendedDisplayParameters' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationOrEnvelopeUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(251)], HRESULT, 'GetTimberDesignDisplayParameters_V153',
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters_V153), 'ExtendedDisplayParameters' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationOrEnvelopeUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(252)], HRESULT, 'SetStaticDisplayParameters_V153',
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters_V153), 'ExtendedDisplayParameters' ),
              ( ['in'], c_int, 'LoadCaseOrCombinationOrEnvelopeUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(253)], HRESULT, 'SetBucklingDisplayParameters_V153',
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters_V153), 'ExtendedDisplayParameters' ),
              ( ['in'], c_int, 'LoadCaseOrCombinationId' ),
              ( ['in'], c_int, 'ModeShapeId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(254)], HRESULT, 'SetVibrationDisplayParameters_V153',
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters_V153), 'ExtendedDisplayParameters' ),
              ( ['in'], c_int, 'LoadCaseOrCombinationId' ),
              ( ['in'], c_int, 'ModeShapeId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(255)], HRESULT, 'SetDynamicDisplayParameters_V153',
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters_V153), 'ExtendedDisplayParameters' ),
              ( ['in'], c_int, 'DynamicLoadCaseOrEnvelopeUID' ),
              ( ['in'], c_int, 'TimeStepId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(256)], HRESULT, 'SetRCDesignDisplayParameters_V153',
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters_V153), 'ExtendedDisplayParameters' ),
              ( ['in'], c_int, 'LoadCaseOrCombinationOrEnvelopeUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(257)], HRESULT, 'SetSteelDesignDisplayParameters_V153',
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters_V153), 'ExtendedDisplayParameters' ),
              ( ['in'], c_int, 'LoadCaseOrCombinationOrEnvelopeUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(258)], HRESULT, 'SetTimberDesignDisplayParameters_V153',
              ( ['in', 'out'], POINTER(RExtendedDisplayParameters_V153), 'ExtendedDisplayParameters' ),
              ( ['in'], c_int, 'LoadCaseOrCombinationOrEnvelopeUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(259), 'propget'], HRESULT, 'Switch',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(259), 'propput'], HRESULT, 'Switch',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], ELongBoolean, 'Value' )),
]
################################################################
## code template for IAxisVMWindow implementation
##class IAxisVMWindow_Impl(object):
##    def Duplicate(self, WindowSplit, SplitPos):
##        '-no docstring-'
##        #return Value
##
##    def Remove(self):
##        '-no docstring-'
##        #return Value
##
##    def GetStaticDisplayParameters(self):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, LoadCaseOrCombinationOrEnvelopeUID, SectionIds, Value
##
##    def GetBucklingDisplayParameters(self):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, LoadCaseOrCombinationId, ModeShapeId, SectionIds, Value
##
##    def GetVibrationDisplayParameters(self):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, LoadCaseOrCombinationId, ModeShapeId, SectionIds, Value
##
##    def GetDynamicDisplayParameters(self):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, DynamicLoadCaseOrEnvelopeUID, TimeStepId, SectionIds, Value
##
##    def GetRCDesignDisplayParameters(self):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, LoadCaseOrCombinationOrEnvelopeUID, SectionIds, Value
##
##    def GetSteelDesignDisplayParameters(self):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, LoadCaseOrCombinationOrEnvelopeUID, SectionIds, Value
##
##    def GetTimberDesignDisplayParameters(self):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, LoadCaseOrCombinationOrEnvelopeUID, SectionIds, Value
##
##    def GetDisplayOptions(self):
##        '-no docstring-'
##        #return ShowSymbols, ShowLabels, ShowSwitches, Value
##
##    def SetStaticDisplayParameters(self, LoadCaseOrCombinationOrEnvelopeUID):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, SectionIds, Value
##
##    def SetBucklingDisplayParameters(self, LoadCaseOrCombinationId, ModeShapeId):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, SectionIds, Value
##
##    def SetVibrationDisplayParameters(self, LoadCaseOrCombinationId, ModeShapeId):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, SectionIds, Value
##
##    def SetDynamicDisplayParameters(self, DynamicLoadCaseOrEnvelopeUID, TimeStepId):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, SectionIds, Value
##
##    def SetRCDesignDisplayParameters(self, LoadCaseOrCombinationOrEnvelopeUID):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, SectionIds, Value
##
##    def SetSteelDesignDisplayParameters(self, LoadCaseOrCombinationOrEnvelopeUID):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, SectionIds, Value
##
##    def SetTimberDesignDisplayParameters(self, LoadCaseOrCombinationOrEnvelopeUID):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, SectionIds, Value
##
##    def SetDisplayOptions(self):
##        '-no docstring-'
##        #return ShowSymbols, ShowLabels, ShowSwitches, Value
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Display = property(_get, _set, doc = _set.__doc__)
##
##    def GetWindowDisplayPartUIDs(self):
##        '-no docstring-'
##        #return PartUIDs, Value
##
##    def SetWindowDisplayPartUIDs(self):
##        '-no docstring-'
##        #return PartUIDs, Value
##
##    def SaveWindowToBitmap(self, WindowColourMode, FileName):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Width(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Height(self):
##        '-no docstring-'
##        #return Value
##
##    def GetPixelPosition(self):
##        '-no docstring-'
##        #return P, Left, Top, Value
##
##    def SaveWindowToClipboard(self, WindowColourMode):
##        '-no docstring-'
##        #return Value
##
##    def SaveWindowToMetafile(self, FileName):
##        '-no docstring-'
##        #return Value
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    View = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    WorkPlaneIndex = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    StoryIndex = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    ActiveStoryIndex = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    ShowOnlySelected = property(_get, _set, doc = _set.__doc__)
##
##    def GetVisibleLayerIDs(self):
##        '-no docstring-'
##        #return VisibleLayerIDs, Value
##
##    def SetVisibleLayerIDs(self):
##        '-no docstring-'
##        #return VisibleLayerIDs, Value
##
##    def GetDetectedLayerIDs(self):
##        '-no docstring-'
##        #return DetectedLayerIDs, Value
##
##    def SetDetectedLayerIDs(self):
##        '-no docstring-'
##        #return DetectedLayerIDs, Value
##
##    def GetLockedLayerIDs(self):
##        '-no docstring-'
##        #return LockedLayerIDs, Value
##
##    def SetLockedLayerIDs(self):
##        '-no docstring-'
##        #return LockedLayerIDs, Value
##
##    def GetVisibleStructuralGridIDs(self):
##        '-no docstring-'
##        #return VisibleStructuralGridIDs, Value
##
##    def SetVisibleStructuralGridIDs(self):
##        '-no docstring-'
##        #return VisibleStructuralGridIDs, Value
##
##    def GetWorldRectangle(self):
##        '-no docstring-'
##        #return WorldRectangle, Value
##
##    def SetWorldRectangle(self):
##        '-no docstring-'
##        #return WorldRectangle, Value
##
##    def ReDraw(self):
##        '-no docstring-'
##        #return Value
##
##    def PanToCoord(self, MoveCursor):
##        '-no docstring-'
##        #return Coord, Value
##
##    def GetStaticDisplayParameters_V153(self):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, LoadCaseOrCombinationOrEnvelopeUID, SectionIds, Value
##
##    def GetBucklingDisplayParameters_V153(self):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, LoadCaseOrCombinationId, ModeShapeId, SectionIds, Value
##
##    def GetVibrationDisplayParameters_V153(self):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, LoadCaseOrCombinationId, ModeShapeId, SectionIds, Value
##
##    def GetDynamicDisplayParameters_V153(self):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, DynamicLoadCaseOrEnvelopeUID, TimeStepId, SectionIds, Value
##
##    def GetRCDesignDisplayParameters_V153(self):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, LoadCaseOrCombinationOrEnvelopeUID, SectionIds, Value
##
##    def GetSteelDesignDisplayParameters_V153(self):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, LoadCaseOrCombinationOrEnvelopeUID, SectionIds, Value
##
##    def GetTimberDesignDisplayParameters_V153(self):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, LoadCaseOrCombinationOrEnvelopeUID, SectionIds, Value
##
##    def SetStaticDisplayParameters_V153(self, LoadCaseOrCombinationOrEnvelopeUID):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, SectionIds, Value
##
##    def SetBucklingDisplayParameters_V153(self, LoadCaseOrCombinationId, ModeShapeId):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, SectionIds, Value
##
##    def SetVibrationDisplayParameters_V153(self, LoadCaseOrCombinationId, ModeShapeId):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, SectionIds, Value
##
##    def SetDynamicDisplayParameters_V153(self, DynamicLoadCaseOrEnvelopeUID, TimeStepId):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, SectionIds, Value
##
##    def SetRCDesignDisplayParameters_V153(self, LoadCaseOrCombinationOrEnvelopeUID):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, SectionIds, Value
##
##    def SetSteelDesignDisplayParameters_V153(self, LoadCaseOrCombinationOrEnvelopeUID):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, SectionIds, Value
##
##    def SetTimberDesignDisplayParameters_V153(self, LoadCaseOrCombinationOrEnvelopeUID):
##        '-no docstring-'
##        #return ExtendedDisplayParameters, SectionIds, Value
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    Switch = property(_get, _set, doc = _set.__doc__)
##

RLoadPanelPolyLine._fields_ = [
    ('LoadCaseId', c_int),
    ('px1', c_double),
    ('px2', c_double),
    ('py1', c_double),
    ('py2', c_double),
    ('pz1', c_double),
    ('pz2', c_double),
    ('pm1', c_double),
    ('pm2', c_double),
    ('DistributionType', EDistributionType),
    ('Nx', c_double),
    ('Ny', c_double),
    ('Nz', c_double),
]
assert sizeof(RLoadPanelPolyLine) == 104, sizeof(RLoadPanelPolyLine)
assert alignment(RLoadPanelPolyLine) == 8, alignment(RLoadPanelPolyLine)
class RVirtualBeamParams(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{27F4D639-5179-480F-8273-341C06F85F0E}')
RVirtualBeamParams._fields_ = [
    ('Name', BSTR),
    ('LocXVid', c_int),
    ('LocZVid', c_int),
    ('LocXV', RPoint3d),
    ('LocZV', RPoint3d),
    ('SectionI', c_int),
    ('SectionJ', c_int),
    ('DefinitionType', EVBDefinitionType),
    ('P1', RPoint3d),
    ('P2', RPoint3d),
    ('InnerDomains', ELongBoolean),
]
assert sizeof(RVirtualBeamParams) == 136, sizeof(RVirtualBeamParams)
assert alignment(RVirtualBeamParams) == 8, alignment(RVirtualBeamParams)
RExtendedDisplayParameters._fields_ = [
    ('BasicDispParams', RBasicDisplayParameters),
    ('DisplayAnalysisType', EDisplayAnalysisType),
    ('ResultsType', EResultType),
    ('MinMaxType', EMinMaxType),
    ('CriticalResCombinationType', ECombinationType),
    ('SectPlaneContour', ELongBoolean),
    ('DisplayedEnvelopes', EDisplayedEnvelopes),
]
assert sizeof(RExtendedDisplayParameters) == 64, sizeof(RExtendedDisplayParameters)
assert alignment(RExtendedDisplayParameters) == 8, alignment(RExtendedDisplayParameters)

# values for enumeration 'EModalCombType'
mctAuto = 0
mctSRSS = 1
mctCQC = 2
EModalCombType = c_int # enum
RSeismicEq._fields_ = [
    ('seEpsX', c_double),
    ('seEpsY', c_double),
    ('seEpsZ', c_double),
]
assert sizeof(RSeismicEq) == 24, sizeof(RSeismicEq)
assert alignment(RSeismicEq) == 8, alignment(RSeismicEq)
IAxisVMWorkplanes._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202)], HRESULT, 'AddGlobal',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], EGlobalWorkplaneType, 'GlobalWorkplaneType' ),
              ( ['in'], c_double, 'PlaneOffset' ),
              ( ['in'], ELongBoolean, 'HideNotInPlane' ),
              ( ['in'], ELongBoolean, 'ShowGrayedNotInPlane' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(203)], HRESULT, 'AddGeneral',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'Origin' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'LocalX' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'LocalY' ),
              ( ['in'], ELongBoolean, 'HideNotInPlane' ),
              ( ['in'], ELongBoolean, 'ShowGrayedNotInPlane' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'AddSmart',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], ESmartWorkplaneElementType, 'SmartWorkplaneElementType' ),
              ( ['in'], c_int, 'ElementIndex' ),
              ( ['in'], ELongBoolean, 'HideNotInPlane' ),
              ( ['in'], ELongBoolean, 'ShowGrayedNotInPlane' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205)], HRESULT, 'GetGlobalParameters',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(EGlobalWorkplaneType), 'GlobalWorkplaneType' ),
              ( ['out'], POINTER(c_double), 'PlaneOffset' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'GetGeneralParameters',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'Origin' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'LocalX' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'LocalY' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'GetSmartParameters',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(ESmartWorkplaneElementType), 'SmartWorkplaneElementType' ),
              ( ['out'], POINTER(c_int), 'ElementIndex' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209), 'propget'], HRESULT, 'Name',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(210), 'propget'], HRESULT, 'WorkplaneType',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(EWorkplaneType), 'Value' )),
    COMMETHOD([dispid(211), 'propget'], HRESULT, 'HideNotInPlane',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(211), 'propput'], HRESULT, 'HideNotInPlane',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], ELongBoolean, 'Value' )),
    COMMETHOD([dispid(212), 'propget'], HRESULT, 'ShowGrayedNotInPlane',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(212), 'propput'], HRESULT, 'ShowGrayedNotInPlane',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], ELongBoolean, 'Value' )),
    COMMETHOD([dispid(213)], HRESULT, 'SetGlobalParameters',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], EGlobalWorkplaneType, 'GlobalWorkplaneType' ),
              ( ['in'], c_double, 'PlaneOffset' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(214)], HRESULT, 'SetGeneralParameters',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'Origin' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'LocalX' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'LocalY' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(215)], HRESULT, 'SetSmartParameters',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], ESmartWorkplaneElementType, 'SmartWorkplaneElementType' ),
              ( ['in'], c_int, 'ElementIndex' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMWorkplanes implementation
##class IAxisVMWorkplanes_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def AddGlobal(self, Name, GlobalWorkplaneType, PlaneOffset, HideNotInPlane, ShowGrayedNotInPlane):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddGeneral(self, Name, HideNotInPlane, ShowGrayedNotInPlane):
##        '-no docstring-'
##        #return Origin, LocalX, LocalY, ResultValue
##
##    def AddSmart(self, Name, SmartWorkplaneElementType, ElementIndex, HideNotInPlane, ShowGrayedNotInPlane):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetGlobalParameters(self, Index):
##        '-no docstring-'
##        #return GlobalWorkplaneType, PlaneOffset, ResultValue
##
##    def GetGeneralParameters(self, Index):
##        '-no docstring-'
##        #return Origin, LocalX, LocalY, ResultValue
##
##    def GetSmartParameters(self, Index):
##        '-no docstring-'
##        #return SmartWorkplaneElementType, ElementIndex, ResultValue
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def Name(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def WorkplaneType(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    HideNotInPlane = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    ShowGrayedNotInPlane = property(_get, _set, doc = _set.__doc__)
##
##    def SetGlobalParameters(self, Index, GlobalWorkplaneType, PlaneOffset):
##        '-no docstring-'
##        #return ResultValue
##
##    def SetGeneralParameters(self, Index):
##        '-no docstring-'
##        #return Origin, LocalX, LocalY, ResultValue
##
##    def SetSmartParameters(self, Index, SmartWorkplaneElementType, ElementIndex):
##        '-no docstring-'
##        #return ResultValue
##


# values for enumeration 'ELineStress'
lsSmin = 0
lsSmax = 1
lsVmin = 2
lsVmax = 3
lsSomin = 4
lsSomax = 5
lsVymean = 6
lsVzmean = 7
ELineStress = c_int # enum
class AxisVMLoadGroup(CoClass):
    'AxisVMLoadGroup Object'
    _reg_clsid_ = GUID('{D2C93789-057C-46B1-8E37-6A070506A098}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
class IAxisVMLoadGroup(stdole.IDispatch):
    _case_insensitive_ = True
    'Dispatch interface for AxisVMLoadGroup Object'
    _iid_ = GUID('{9FF4413C-8134-46AF-9F70-A41654D552B5}')
    _idlflags_ = ['dual', 'oleautomation']
AxisVMLoadGroup._com_interfaces_ = [IAxisVMLoadGroup]

IAxisVMSurfacesEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Cleared'),
    DISPMETHOD([dispid(202)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]
class RSpectrumData_V153(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{1ED5DF38-E6CF-46BE-AA14-8BF34E3B06A8}')
IAxisVMSpectrum._methods_ = [
    COMMETHOD([dispid(201)], HRESULT, 'LoadFromFile',
              ( ['in'], BSTR, 'FileName' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(202)], HRESULT, 'SaveToFile',
              ( ['in'], BSTR, 'FileName' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(203), 'propget'], HRESULT, 'Parametric',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'GetSpectrumData',
              ( ['in', 'out'], POINTER(RSpectrumData), 'SpectrumData' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205)], HRESULT, 'SetSpectrumData',
              ( ['in', 'out'], POINTER(RSpectrumData), 'SpectrumData' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'SetPoints',
              ( ['in'], _midlSAFEARRAY(RPoint2d), 'FunctionPoints' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'SetPoints_vb',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPoint2d)), 'FunctionPoints' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208)], HRESULT, 'GetPoints',
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint2d)), 'FunctionPoints' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209)], HRESULT, 'Disable',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(210)], HRESULT, 'GetSpectrumData_V153',
              ( ['in', 'out'], POINTER(RSpectrumData_V153), 'SpectrumData' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(211)], HRESULT, 'SetSpectrumData_V153',
              ( ['in', 'out'], POINTER(RSpectrumData_V153), 'SpectrumData' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(212), 'propget'], HRESULT, 'Disabled',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'ResultValue' )),
]
################################################################
## code template for IAxisVMSpectrum implementation
##class IAxisVMSpectrum_Impl(object):
##    def LoadFromFile(self, FileName):
##        '-no docstring-'
##        #return ResultValue
##
##    def SaveToFile(self, FileName):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def Parametric(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetSpectrumData(self):
##        '-no docstring-'
##        #return SpectrumData, ResultValue
##
##    def SetSpectrumData(self):
##        '-no docstring-'
##        #return SpectrumData, ResultValue
##
##    def SetPoints(self, FunctionPoints):
##        '-no docstring-'
##        #return ResultValue
##
##    def SetPoints_vb(self):
##        '-no docstring-'
##        #return FunctionPoints, ResultValue
##
##    def GetPoints(self):
##        '-no docstring-'
##        #return FunctionPoints, ResultValue
##
##    def Disable(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetSpectrumData_V153(self):
##        '-no docstring-'
##        #return SpectrumData, ResultValue
##
##    def SetSpectrumData_V153(self):
##        '-no docstring-'
##        #return SpectrumData, ResultValue
##
##    @property
##    def Disabled(self):
##        '-no docstring-'
##        #return ResultValue
##

class RNodeCrackWidthValues(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{A7CC2FE1-9E05-4E1F-879A-7CE04B4FD8EC}')
RNodeCrackWidthValues._fields_ = [
    ('covBottom', RCrackWidthValues),
    ('covTop', RCrackWidthValues),
]
assert sizeof(RNodeCrackWidthValues) == 352, sizeof(RNodeCrackWidthValues)
assert alignment(RNodeCrackWidthValues) == 8, alignment(RNodeCrackWidthValues)

# values for enumeration 'ESurfaceStressPosition'
sspTop = 0
sspMiddle = 1
sspBottom = 2
ESurfaceStressPosition = c_int # enum

# values for enumeration 'ESectionSegmentChainIntegratedResultant'
sscir_N = 0
sscir_Q = 1
sscir_M = 2
ESectionSegmentChainIntegratedResultant = c_int # enum
IAxisVMSections._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202)], HRESULT, 'Clear',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(203)], HRESULT, 'Add',
              ( ['in', 'out'], POINTER(RSection), 'Section' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204), helpstring('Special Index values: 0 = delete all ; -1 = delete all plane sections ; -2 delete all segment sections')], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205)], HRESULT, 'GetItem',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RSection), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'SetItem',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RSection), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'GetSegmentChainCount',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208)], HRESULT, 'GetSegmentChainCoords',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainIndex' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Coords' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209)], HRESULT, 'GetSegmentChainData',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainIndex' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSectionElementData)), 'ChainData' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(210)], HRESULT, 'GetSegmentChainDisplacementsByLoadCaseId',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainIndex' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrModeShapeOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELongBoolean, 'WithReinforcement' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Coords' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'Displacements' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(211)], HRESULT, 'GetSegmentChainDisplacementsByLoadCombinationId',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainIndex' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevelOrModeShapeOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELongBoolean, 'WithReinforcement' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Coords' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'Displacements' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(212)], HRESULT, 'GetEnvelopeSegmentChainDisplacements',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainIndex' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELongBoolean, 'WithReinforcement' ),
              ( ['in'], EDisplacement, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Coords' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'Displacements' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(213)], HRESULT, 'GetCriticalSegmentChainDisplacements',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainIndex' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELongBoolean, 'WithReinforcement' ),
              ( ['in'], EDisplacement, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Coords' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RDisplacementValues)), 'Displacements' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(214)], HRESULT, 'GetSegmentChainVelocitiesByLoadCaseId',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainIndex' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'TimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Coords' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RVelocityValues)), 'VelocityValues' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(215)], HRESULT, 'GetEnvelopeSegmentChainVelocities',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainIndex' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EVelocity, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Coords' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RVelocityValues)), 'VelocityValues' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(216)], HRESULT, 'GetSegmentChainAccelerationsByLoadCaseId',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainIndex' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'TimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Coords' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RAccelerationValues)), 'AccelerationValues' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(217)], HRESULT, 'GetEnvelopeSegmentChainAccelerations',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainIndex' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EAcceleration, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Coords' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RAccelerationValues)), 'AccelerationValues' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(218)], HRESULT, 'GetSegmentChainSurfaceForcesByLoadCaseId',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainIndex' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Coords' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(219)], HRESULT, 'GetSegmentChainSurfaceForcesByLoadCombinationId',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainIndex' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Coords' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(220)], HRESULT, 'GetEnvelopeSegmentChainSurfaceForces',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainIndex' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ESurfaceForce, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Coords' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(221)], HRESULT, 'GetCriticalSegmentChainSurfaceForces',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainIndex' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ESurfaceForce, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Coords' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceForceValues)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(222)], HRESULT, 'GetSegmentChainCalculatedReinforcementsByLoadCaseId',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainIndex' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Coords' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RNodeReinforcementValues)), 'Reinforcements' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(223)], HRESULT, 'GetSegmentChainCalculatedReinforcementsByLoadCombinationId',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainIndex' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Coords' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RNodeReinforcementValues)), 'Reinforcements' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(224)], HRESULT, 'GetEnvelopeSegmentChainCalculatedReinforcements',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainIndex' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EReinforcement, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Coords' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RNodeReinforcementValues)), 'Reinforcements' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(225)], HRESULT, 'GetCriticalSegmentChainCalculatedReinforcements',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainIndex' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EReinforcement, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Coords' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RNodeReinforcementValues)), 'Reinforcements' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(226)], HRESULT, 'GetSegmentChainSurfaceSupportForcesByLoadCaseId',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainIndex' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Coords' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceSupportForces)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(227)], HRESULT, 'GetSegmentChainSurfaceSupportForcesByLoadCombinationId',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainIndex' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Coords' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceSupportForces)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(228)], HRESULT, 'GetEnvelopeSegmentChainSurfaceSupportForces',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainIndex' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ESurfaceSupportForce, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Coords' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceSupportForces)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(229)], HRESULT, 'GetCriticalSegmentChainSurfaceSupportForces',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainIndex' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ESurfaceSupportForce, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Coords' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceSupportForces)), 'Forces' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(230)], HRESULT, 'GetSegmentChainCrackWidthsByLoadCaseId',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainIndex' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Coords' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RNodeCrackWidthValues)), 'CrackWidths' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(231)], HRESULT, 'GetSegmentChainCrackWidthsByLoadCombinationId',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainIndex' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Coords' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RNodeCrackWidthValues)), 'CrackWidths' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(232)], HRESULT, 'GetEnvelopeSegmentChainCrackWidths',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainIndex' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ECrackWidth, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Coords' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RNodeCrackWidthValues)), 'CrackWidths' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(233)], HRESULT, 'GetCriticalSegmentChainCrackWidths',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainIndex' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ECrackWidth, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Coords' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RNodeCrackWidthValues)), 'CrackWidths' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(234)], HRESULT, 'GetSegmentChainShearCapacitiesByLoadCaseId',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainIndex' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Coords' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RShearCapacities)), 'ShearCapacities' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(235)], HRESULT, 'GetSegmentChainShearCapacitiesByLoadCombinationId',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainIndex' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Coords' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RShearCapacities)), 'ShearCapacities' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(236)], HRESULT, 'GetEnvelopeSegmentChainShearCapacities',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainIndex' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EShearCapacity, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Coords' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RShearCapacities)), 'ShearCapacities' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(237)], HRESULT, 'GetCriticalSegmentChainShearCapacities',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainIndex' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EShearCapacity, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Coords' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RShearCapacities)), 'ShearCapacities' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(238)], HRESULT, 'GetSegmentChainSurfaceStressesByLoadCaseId',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainIndex' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Coords' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceStressValuesTMB)), 'Stresses' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(239)], HRESULT, 'GetSegmentChainSurfaceStressesByLoadCombinationId',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainIndex' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Coords' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceStressValuesTMB)), 'Stresses' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(240)], HRESULT, 'GetEnvelopeSegmentChainSurfaceStresses',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainIndex' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ESurfaceStressPosition, 'SurfaceStressPosition' ),
              ( ['in'], ESurfaceStress, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Coords' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceStressValuesTMB)), 'Stresses' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(241)], HRESULT, 'GetCriticalSegmentChainSurfaceStresses',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainIndex' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ESurfaceStressPosition, 'SurfaceStressPosition' ),
              ( ['in'], ESurfaceStress, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Coords' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceStressValuesTMB)), 'Stresses' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(242), 'propget'], HRESULT, 'EnvelopeUID',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(242), 'propput'], HRESULT, 'EnvelopeUID',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(243)], HRESULT, 'GetSegmentChainIntegratedResultantByLoadCaseId',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainIndex' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RSectionSegmentIntegratedResultant), 'IntegratedResultant' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(244)], HRESULT, 'GetSegmentChainIntegratedResultantByLoadCombinationId',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainIndex' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RSectionSegmentIntegratedResultant), 'IntegratedResultant' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(245), helpstring('LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count')], HRESULT, 'GetEnvelopeSegmentChainIntegratedResultant',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainIndex' ),
              ( ['in'], c_int, 'EnvelopeUID' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ESectionSegmentChainIntegratedResultant, 'Component' ),
              ( ['in', 'out'], POINTER(RSectionSegmentIntegratedResultant), 'IntegratedResultant' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'LoadLevel' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(246)], HRESULT, 'GetCriticalSegmentChainIntegratedResultant',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainIndex' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ESectionSegmentChainIntegratedResultant, 'Component' ),
              ( ['in', 'out'], POINTER(RSectionSegmentIntegratedResultant), 'IntegratedResultant' ),
              ( ['out'], POINTER(ECombinationType), 'CriticalCombinationType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Factors' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(247)], HRESULT, 'GetSegmentIntegratedResultantChainCount',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(248)], HRESULT, 'GetSegmentIntegratedResultantChainCoords',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'IntegratedResultantChainIndex' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Coords' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(249)], HRESULT, 'GetSegmentIntegratedResultantChainData',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'IntegratedResultantChainIndex' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSectionElementData)), 'ChainData' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(250)], HRESULT, 'GetSegmentIntegratedResultantParams',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'IntegratedResultantChainIndex' ),
              ( ['in', 'out'], POINTER(RSectionSegmentChainIntegratedParameters), 'IntegratedResultantChainParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(251)], HRESULT, 'SetUserCreep',
              ( ['in'], ELongBoolean, 'Creep' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(252), 'propget'], HRESULT, 'UserCreep',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
]
################################################################
## code template for IAxisVMSections implementation
##class IAxisVMSections_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def Clear(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def Add(self):
##        '-no docstring-'
##        #return Section, ResultValue
##
##    def Delete(self, Index):
##        'Special Index values: 0 = delete all ; -1 = delete all plane sections ; -2 delete all segment sections'
##        #return ResultValue
##
##    def GetItem(self, Index):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetItem(self, Index):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def GetSegmentChainCount(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetSegmentChainCoords(self, Index, ChainIndex):
##        '-no docstring-'
##        #return Coords, ResultValue
##
##    def GetSegmentChainData(self, Index, ChainIndex):
##        '-no docstring-'
##        #return ChainData, ResultValue
##
##    def GetSegmentChainDisplacementsByLoadCaseId(self, Index, ChainIndex, LoadCaseId, LoadLevelOrModeShapeOrTimeStep, AnalysisType, WithReinforcement):
##        '-no docstring-'
##        #return Coords, Displacements, Combinations, ResultValue
##
##    def GetSegmentChainDisplacementsByLoadCombinationId(self, Index, ChainIndex, LoadCombinationId, LoadLevelOrModeShapeOrTimeStep, AnalysisType, WithReinforcement):
##        '-no docstring-'
##        #return Coords, Displacements, Combinations, ResultValue
##
##    def GetEnvelopeSegmentChainDisplacements(self, Index, ChainIndex, MinMaxType, AnalysisType, WithReinforcement, Component):
##        '-no docstring-'
##        #return Coords, Displacements, Combinations, ResultValue
##
##    def GetCriticalSegmentChainDisplacements(self, Index, ChainIndex, MinMaxType, CombinationType, AnalysisType, WithReinforcement, Component):
##        '-no docstring-'
##        #return Coords, Displacements, Combinations, ResultValue
##
##    def GetSegmentChainVelocitiesByLoadCaseId(self, Index, ChainIndex, LoadCaseId, TimeStep, AnalysisType):
##        '-no docstring-'
##        #return Coords, VelocityValues, Combinations, ResultValue
##
##    def GetEnvelopeSegmentChainVelocities(self, Index, ChainIndex, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return Coords, VelocityValues, Combinations, ResultValue
##
##    def GetSegmentChainAccelerationsByLoadCaseId(self, Index, ChainIndex, LoadCaseId, TimeStep, AnalysisType):
##        '-no docstring-'
##        #return Coords, AccelerationValues, Combinations, ResultValue
##
##    def GetEnvelopeSegmentChainAccelerations(self, Index, ChainIndex, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return Coords, AccelerationValues, Combinations, ResultValue
##
##    def GetSegmentChainSurfaceForcesByLoadCaseId(self, Index, ChainIndex, LoadCaseId, LoadLevelOrTimeStep, AnalysisType):
##        '-no docstring-'
##        #return Coords, Forces, Combinations, ResultValue
##
##    def GetSegmentChainSurfaceForcesByLoadCombinationId(self, Index, ChainIndex, LoadCombinationId, LoadLevelOrTimeStep, AnalysisType):
##        '-no docstring-'
##        #return Coords, Forces, Combinations, ResultValue
##
##    def GetEnvelopeSegmentChainSurfaceForces(self, Index, ChainIndex, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return Coords, Forces, Combinations, ResultValue
##
##    def GetCriticalSegmentChainSurfaceForces(self, Index, ChainIndex, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Coords, Forces, Combinations, ResultValue
##
##    def GetSegmentChainCalculatedReinforcementsByLoadCaseId(self, Index, ChainIndex, LoadCaseId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Coords, Reinforcements, Combinations, ResultValue
##
##    def GetSegmentChainCalculatedReinforcementsByLoadCombinationId(self, Index, ChainIndex, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Coords, Reinforcements, Combinations, ResultValue
##
##    def GetEnvelopeSegmentChainCalculatedReinforcements(self, Index, ChainIndex, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return Coords, Reinforcements, Combinations, ResultValue
##
##    def GetCriticalSegmentChainCalculatedReinforcements(self, Index, ChainIndex, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Coords, Reinforcements, Combinations, ResultValue
##
##    def GetSegmentChainSurfaceSupportForcesByLoadCaseId(self, Index, ChainIndex, LoadCaseId, LoadLevelOrTimeStep, AnalysisType):
##        '-no docstring-'
##        #return Coords, Forces, Combinations, ResultValue
##
##    def GetSegmentChainSurfaceSupportForcesByLoadCombinationId(self, Index, ChainIndex, LoadCombinationId, LoadLevelOrTimeStep, AnalysisType):
##        '-no docstring-'
##        #return Coords, Forces, Combinations, ResultValue
##
##    def GetEnvelopeSegmentChainSurfaceSupportForces(self, Index, ChainIndex, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return Coords, Forces, Combinations, ResultValue
##
##    def GetCriticalSegmentChainSurfaceSupportForces(self, Index, ChainIndex, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Coords, Forces, Combinations, ResultValue
##
##    def GetSegmentChainCrackWidthsByLoadCaseId(self, Index, ChainIndex, LoadCaseId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Coords, CrackWidths, Combinations, ResultValue
##
##    def GetSegmentChainCrackWidthsByLoadCombinationId(self, Index, ChainIndex, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Coords, CrackWidths, Combinations, ResultValue
##
##    def GetEnvelopeSegmentChainCrackWidths(self, Index, ChainIndex, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return Coords, CrackWidths, Combinations, ResultValue
##
##    def GetCriticalSegmentChainCrackWidths(self, Index, ChainIndex, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Coords, CrackWidths, Combinations, ResultValue
##
##    def GetSegmentChainShearCapacitiesByLoadCaseId(self, Index, ChainIndex, LoadCaseId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Coords, ShearCapacities, Combinations, ResultValue
##
##    def GetSegmentChainShearCapacitiesByLoadCombinationId(self, Index, ChainIndex, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Coords, ShearCapacities, Combinations, ResultValue
##
##    def GetEnvelopeSegmentChainShearCapacities(self, Index, ChainIndex, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return Coords, ShearCapacities, Combinations, ResultValue
##
##    def GetCriticalSegmentChainShearCapacities(self, Index, ChainIndex, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Coords, ShearCapacities, Combinations, ResultValue
##
##    def GetSegmentChainSurfaceStressesByLoadCaseId(self, Index, ChainIndex, LoadCaseId, LoadLevelOrTimeStep, AnalysisType):
##        '-no docstring-'
##        #return Coords, Stresses, Combinations, ResultValue
##
##    def GetSegmentChainSurfaceStressesByLoadCombinationId(self, Index, ChainIndex, LoadCombinationId, LoadLevelOrTimeStep, AnalysisType):
##        '-no docstring-'
##        #return Coords, Stresses, Combinations, ResultValue
##
##    def GetEnvelopeSegmentChainSurfaceStresses(self, Index, ChainIndex, MinMaxType, AnalysisType, SurfaceStressPosition, Component):
##        '-no docstring-'
##        #return Coords, Stresses, Combinations, ResultValue
##
##    def GetCriticalSegmentChainSurfaceStresses(self, Index, ChainIndex, MinMaxType, CombinationType, AnalysisType, SurfaceStressPosition, Component):
##        '-no docstring-'
##        #return Coords, Stresses, Combinations, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    EnvelopeUID = property(_get, _set, doc = _set.__doc__)
##
##    def GetSegmentChainIntegratedResultantByLoadCaseId(self, Index, ChainIndex, LoadCaseId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return IntegratedResultant, ResultValue
##
##    def GetSegmentChainIntegratedResultantByLoadCombinationId(self, Index, ChainIndex, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return IntegratedResultant, ResultValue
##
##    def GetEnvelopeSegmentChainIntegratedResultant(self, Index, ChainIndex, EnvelopeUID, MinMaxType, AnalysisType, Component):
##        'LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count'
##        #return IntegratedResultant, LoadCaseOrCombinationId, LoadLevel, ResultValue
##
##    def GetCriticalSegmentChainIntegratedResultant(self, Index, ChainIndex, CombinationType, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return IntegratedResultant, CriticalCombinationType, Factors, LoadCaseIds, ResultValue
##
##    def GetSegmentIntegratedResultantChainCount(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetSegmentIntegratedResultantChainCoords(self, Index, IntegratedResultantChainIndex):
##        '-no docstring-'
##        #return Coords, ResultValue
##
##    def GetSegmentIntegratedResultantChainData(self, Index, IntegratedResultantChainIndex):
##        '-no docstring-'
##        #return ChainData, ResultValue
##
##    def GetSegmentIntegratedResultantParams(self, Index, IntegratedResultantChainIndex):
##        '-no docstring-'
##        #return IntegratedResultantChainParams, ResultValue
##
##    def SetUserCreep(self, Creep):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def UserCreep(self):
##        '-no docstring-'
##        #return Value
##


# values for enumeration 'EWindowsError'
weLoadCaseIdOutOfBounds = -100001
weLoadCombinationIdOutOfBounds = -100002
weEnvelopeIdOutOfBounds = -100003
EWindowsError = c_int # enum

# values for enumeration 'EVibrationType'
vtFirstOrder = 0
vtSecondOrder = 1
EVibrationType = c_int # enum
class RBasicDisplayParameters_V153(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{A71ED477-AB3D-44A6-9152-903B8BBB3CCC}')
RBasicDisplayParameters_V153._fields_ = [
    ('ResultComponent', EResultComponent),
    ('Scale', c_double),
    ('DisplayMode', EDisplayMode),
    ('DisplayShape', EDisplayShape),
    ('WriteValuesTo', RWriteValuesTo),
    ('AutoScale', ELongBoolean),
]
assert sizeof(RBasicDisplayParameters_V153) == 48, sizeof(RBasicDisplayParameters_V153)
assert alignment(RBasicDisplayParameters_V153) == 8, alignment(RBasicDisplayParameters_V153)
class RPushOverDirectionParams(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{D8A34383-9C29-41D8-86AB-1F402E53D1CD}')
RPushOverDirectionParams._fields_ = [
    ('Uniform', ELongBoolean),
    ('Modal', ELongBoolean),
    ('VibrationAnalysisType', EAnalysisType),
    ('VibrationLoadCase', c_int),
    ('VibrationMode', c_int),
    ('AutoDominantMode', ELongBoolean),
    ('AccidentalEcc', c_double),
]
assert sizeof(RPushOverDirectionParams) == 32, sizeof(RPushOverDirectionParams)
assert alignment(RPushOverDirectionParams) == 8, alignment(RPushOverDirectionParams)
RExtendedDisplayParameters_V153._fields_ = [
    ('BasicDispParams', RBasicDisplayParameters_V153),
    ('DisplayAnalysisType', EDisplayAnalysisType),
    ('ResultsType', EResultType),
    ('MinMaxType', EMinMaxType),
    ('CriticalResCombinationType', ECombinationType),
    ('SectPlaneContour', ELongBoolean),
    ('DisplayedEnvelopes', EDisplayedEnvelopes),
]
assert sizeof(RExtendedDisplayParameters_V153) == 72, sizeof(RExtendedDisplayParameters_V153)
assert alignment(RExtendedDisplayParameters_V153) == 8, alignment(RExtendedDisplayParameters_V153)
RLoadDomainPolyAssoc_V161._fields_ = [
    ('LoadCaseId', c_int),
    ('MemberID', c_int),
    ('px1', c_double),
    ('px2', c_double),
    ('py1', c_double),
    ('py2', c_double),
    ('pz1', c_double),
    ('pz2', c_double),
    ('pm1', c_double),
    ('pm2', c_double),
    ('DistributionType', EDistributionType),
    ('NormalVector', RPoint3d),
]
assert sizeof(RLoadDomainPolyAssoc_V161) == 104, sizeof(RLoadDomainPolyAssoc_V161)
assert alignment(RLoadDomainPolyAssoc_V161) == 8, alignment(RLoadDomainPolyAssoc_V161)
RStiffnessesXYZ._fields_ = [
    ('x', c_double),
    ('y', c_double),
    ('z', c_double),
]
assert sizeof(RStiffnessesXYZ) == 24, sizeof(RStiffnessesXYZ)
assert alignment(RStiffnessesXYZ) == 8, alignment(RStiffnessesXYZ)
RPushOverAnalysis._fields_ = [
    ('LoadCase', c_int),
    ('ConstantLoadCase', c_int),
    ('NodeId', c_int),
    ('Direction', EAxis),
    ('MaxDisplacement', c_double),
    ('Increments', c_int),
    ('Iterations', c_int),
    ('DisplacementConvergenceValue', c_double),
    ('ForceConvergenceValue', c_double),
    ('WorkConvergenceValue', c_double),
    ('EnableDisplacementConvergence', ELongBoolean),
    ('EnableForceConvergence', ELongBoolean),
    ('EnableWorkConvergence', ELongBoolean),
    ('GeometricNonLinearity', ELongBoolean),
    ('ContinueWithoutConvergence', ELongBoolean),
    ('MaterialNonLinearity', ELongBoolean),
]
assert sizeof(RPushOverAnalysis) == 80, sizeof(RPushOverAnalysis)
assert alignment(RPushOverAnalysis) == 8, alignment(RPushOverAnalysis)
RLoadDomainPolyAssoc._fields_ = [
    ('LoadCaseId', c_int),
    ('px1', c_double),
    ('px2', c_double),
    ('py1', c_double),
    ('py2', c_double),
    ('pz1', c_double),
    ('pz2', c_double),
    ('pm1', c_double),
    ('pm2', c_double),
    ('DistributionType', EDistributionType),
    ('Nx', c_double),
    ('Ny', c_double),
    ('Nz', c_double),
]
assert sizeof(RLoadDomainPolyAssoc) == 104, sizeof(RLoadDomainPolyAssoc)
assert alignment(RLoadDomainPolyAssoc) == 8, alignment(RLoadDomainPolyAssoc)
RPushOverParams._fields_ = [
    ('x', RPushOverDirectionParams),
    ('y', RPushOverDirectionParams),
]
assert sizeof(RPushOverParams) == 64, sizeof(RPushOverParams)
assert alignment(RPushOverParams) == 8, alignment(RPushOverParams)
IAxisVMCalculationEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'MainProgress',
               ( ['in'], c_double, 'Progress' ),
               ( ['in', 'out'], POINTER(ELongBoolean), 'Abort' )),
    DISPMETHOD([dispid(202)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Finished',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], EAnalysisType, 'AnalysisType' ),
               ( ['in'], VARIANT, 'FinishTypes' ),
               ( ['in'], VARIANT, 'Messages' ),
               ( ['in'], VARIANT, 'LoadCaseOrCombinationIds' )),
]
IAxisVMWindowsEvents._disp_methods_ = [
    DISPMETHOD([dispid(202)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
    DISPMETHOD([dispid(204)], HRESULT, 'New',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], EWindowSplit, 'WindowSplit' ),
               ( ['in'], c_double, 'SplitPosition' )),
]
class RVirtualStripParams(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{34551CE4-A436-4AC3-8EE7-E785E4493D8C}')
IAxisVMVirtualBeams._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'Name',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Name' )),
    COMMETHOD([dispid(202), 'propput'], HRESULT, 'Name',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([dispid(203), 'propget'], HRESULT, 'Length',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainIndex' ),
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(204), 'propget'], HRESULT, 'VirtualBeamType',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(EVirtualBeamType), 'Value' )),
    COMMETHOD([dispid(205)], HRESULT, 'GetDomains',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'DomainIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(206)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(207)], HRESULT, 'Clear',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(208)], HRESULT, 'IndexOf',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(209)], HRESULT, 'AddNewVirtualBeam',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'DomainIds' ),
              ( ['in'], EVBDomainsDuplicateMode, 'DuplicateMode' ),
              ( ['in', 'out'], POINTER(RVirtualBeamParams), 'VirtualBeamParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(210)], HRESULT, 'AddNewDomainToVirtualBeam',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'DomainId' ),
              ( ['in'], EVBDomainsDuplicateMode, 'DuplicateMode' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(211)], HRESULT, 'ModifyDomains',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'DomainIds' ),
              ( ['in'], EVBDomainsDuplicateMode, 'DuplicateMode' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(212)], HRESULT, 'GetVirtualBeamParams',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RVirtualBeamParams), 'VirtualBeamParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(213)], HRESULT, 'GetVirtualStripParams',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RVirtualStripParams), 'VirtualStripParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(214)], HRESULT, 'SetVirtualBeamParams',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RVirtualBeamParams), 'VirtualBeamParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(215)], HRESULT, 'SetVirtualStripParams',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RVirtualStripParams), 'VirtualStripParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(216)], HRESULT, 'GetCenterCoordinates',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainIndex' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'CenterCoordinates' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(217), 'propget'], HRESULT, 'ChainCount',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(218), 'propget'], HRESULT, 'SectionCount',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainIndex' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(219)], HRESULT, 'AddNewVirtualStrip',
              ( ['in', 'out'], POINTER(RVirtualStripParams), 'VirtualStripParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(220), 'propget'], HRESULT, 'UID',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(221), 'propget'], HRESULT, 'IndexOfUID',
              ( ['in'], c_int, 'UID' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(222)], HRESULT, 'GetReductionPointCoordinates',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'ChainIndex' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'ReductionPointCoordinates' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(223)], HRESULT, 'GetExtendedDomainList',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'DomainIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
]
################################################################
## code template for IAxisVMVirtualBeams implementation
##class IAxisVMVirtualBeams_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Name
##    def _set(self, Index, Name):
##        '-no docstring-'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Length(self, Index, ChainIndex):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def VirtualBeamType(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def GetDomains(self, Index):
##        '-no docstring-'
##        #return DomainIds, Value
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def Clear(self):
##        '-no docstring-'
##        #return Value
##
##    def IndexOf(self, Name):
##        '-no docstring-'
##        #return Value
##
##    def AddNewVirtualBeam(self, DuplicateMode):
##        '-no docstring-'
##        #return DomainIds, VirtualBeamParams, Value
##
##    def AddNewDomainToVirtualBeam(self, Index, DomainId, DuplicateMode):
##        '-no docstring-'
##        #return Value
##
##    def ModifyDomains(self, Index, DuplicateMode):
##        '-no docstring-'
##        #return DomainIds, Value
##
##    def GetVirtualBeamParams(self, Index):
##        '-no docstring-'
##        #return VirtualBeamParams, Value
##
##    def GetVirtualStripParams(self, Index):
##        '-no docstring-'
##        #return VirtualStripParams, Value
##
##    def SetVirtualBeamParams(self, Index):
##        '-no docstring-'
##        #return VirtualBeamParams, Value
##
##    def SetVirtualStripParams(self, Index):
##        '-no docstring-'
##        #return VirtualStripParams, Value
##
##    def GetCenterCoordinates(self, Index, ChainIndex):
##        '-no docstring-'
##        #return CenterCoordinates, Value
##
##    @property
##    def ChainCount(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def SectionCount(self, Index, ChainIndex):
##        '-no docstring-'
##        #return Value
##
##    def AddNewVirtualStrip(self):
##        '-no docstring-'
##        #return VirtualStripParams, Value
##
##    @property
##    def UID(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def IndexOfUID(self, UID):
##        '-no docstring-'
##        #return Value
##
##    def GetReductionPointCoordinates(self, Index, ChainIndex):
##        '-no docstring-'
##        #return ReductionPointCoordinates, Value
##
##    def GetExtendedDomainList(self, Index):
##        '-no docstring-'
##        #return DomainIds, Value
##


# values for enumeration 'EActualReinforcementError'
areCOMError = -100001
areDomainIdOutOfBounds = -100002
areErrorAddingPolygonReinforcement = -100003
areDomainReinforcementNotFound = -100004
areSurfaceIdOutOfBounds = -100005
areSurfaceVertexIndexOutOfBounds = -100006
areDiameterIsInvalid = -100007
areSpacingIsInvalid = -100008
areCoverIsInvalid = -100009
areReinfParamMissing = -100010
EActualReinforcementError = c_int # enum
RLoadPanelPolyArea._fields_ = [
    ('LoadCaseId', c_int),
    ('DistributionType', EDistributionType),
    ('LoadDistributionType', ELoadDistributionType),
    ('Component', EAxis),
    ('P1', c_double),
    ('P2', c_double),
    ('P3', c_double),
    ('x1', c_double),
    ('x2', c_double),
    ('x3', c_double),
    ('y1', c_double),
    ('y2', c_double),
    ('y3', c_double),
    ('z1', c_double),
    ('z2', c_double),
    ('z3', c_double),
    ('WindowLoad', ELongBoolean),
]
assert sizeof(RLoadPanelPolyArea) == 120, sizeof(RLoadPanelPolyArea)
assert alignment(RLoadPanelPolyArea) == 8, alignment(RLoadPanelPolyArea)

# values for enumeration 'EVelocityError'
veeLoadCaseIdIndexOutOfBounds = -100001
veeInvalidCombinationOfLoadCaseAndTimeStep = -100002
veeInvalidAnalysisType = -100003
veeLoadCombinationHasNoDynamicResult = -100004
EVelocityError = c_int # enum

# values for enumeration 'ESteelDesignMemberError'
sdmeCOMError = -100001
sdmeLineListIsEmpty = -100002
sdmeInvalidNationalDesignCode = -100003
sdmeNotConnectingLines = -100004
sdmeDesignParametersNotValidForUsedDesignCode = -100005
ESteelDesignMemberError = c_int # enum
IAxisVMAttachmentsEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrCode' )),
]
class RXLAMSurfaceStresses(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{406C1133-43EA-48FB-831B-91453AA38821}')
RXLAMSurfaceStresses._fields_ = [
    ('ContourPointCount', c_int),
    ('ContourPoint1Id', c_int),
    ('ContourPoint2Id', c_int),
    ('ContourPoint3Id', c_int),
    ('ContourPoint4Id', c_int),
    ('ContourLine1Id', c_int),
    ('ContourLine2Id', c_int),
    ('ContourLine3Id', c_int),
    ('ContourLine4Id', c_int),
    ('xssvCenterPoint', RXLAMSurfaceStressValues),
    ('xssvContourPoint1', RXLAMSurfaceStressValues),
    ('xssvContourPoint2', RXLAMSurfaceStressValues),
    ('xssvContourPoint3', RXLAMSurfaceStressValues),
    ('xssvContourPoint4', RXLAMSurfaceStressValues),
    ('xssvContourLineMidPoint1', RXLAMSurfaceStressValues),
    ('xssvContourLineMidPoint2', RXLAMSurfaceStressValues),
    ('xssvContourLineMidPoint3', RXLAMSurfaceStressValues),
    ('xssvContourLineMidPoint4', RXLAMSurfaceStressValues),
]
assert sizeof(RXLAMSurfaceStresses) == 976, sizeof(RXLAMSurfaceStresses)
assert alignment(RXLAMSurfaceStresses) == 8, alignment(RXLAMSurfaceStresses)
class RCircularFootingSpec(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{1CB7003D-7938-4824-9FF3-3D74D2C1BE94}')
RCircularFootingSpec._fields_ = [
    ('FixedDiam', ELongBoolean),
    ('Diam', c_double),
    ('StepMeasureSource', EPadFootingStepMeasureSource),
    ('DeltaR', c_double),
]
assert sizeof(RCircularFootingSpec) == 32, sizeof(RCircularFootingSpec)
assert alignment(RCircularFootingSpec) == 8, alignment(RCircularFootingSpec)

# values for enumeration 'ESteelDesignResultsError'
sdreCOMError = -100001
sdreLoadCaseIdIndexOutOfBounds = -100002
sdreLoadCombinationIdIndexOutOfBounds = -100003
sdreInvalidAnalysisType = -100004
sdreCombinationTypeNotValidForCurrentNationalDesignCode = -100005
ESteelDesignResultsError = c_int # enum

# values for enumeration 'ETaskError'
teCanNotStartTask = -100001
teCanNotChangeMainTab = -100002
ETaskError = c_int # enum
RStructuralGridLineParams._fields_ = [
    ('P1', RPoint3d),
    ('P2', RPoint3d),
    ('NormalVector', RPoint3d),
    ('Colour', c_int),
    ('Extension', c_double),
    ('ShowTitle', EShowStructuralGridLineTitle),
    ('ToLogicalPart', ELongBoolean),
    ('PlaneTolerance', c_double),
]
assert sizeof(RStructuralGridLineParams) == 104, sizeof(RStructuralGridLineParams)
assert alignment(RStructuralGridLineParams) == 8, alignment(RStructuralGridLineParams)
IAxisVMCustomPartFolderEvents._disp_methods_ = [
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]
class RSurfaceStresses(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{79F0DEB8-47DD-4DA7-9A56-06A7BD2BF157}')
RSurfaceStresses._fields_ = [
    ('ContourPointCount', c_int),
    ('ContourPoint1Id', c_int),
    ('ContourPoint2Id', c_int),
    ('ContourPoint3Id', c_int),
    ('ContourPoint4Id', c_int),
    ('ContourLine1Id', c_int),
    ('ContourLine2Id', c_int),
    ('ContourLine3Id', c_int),
    ('ContourLine4Id', c_int),
    ('ssvtmbCenterPoint', RSurfaceStressValuesTMB),
    ('ssvtmbContourPoint1', RSurfaceStressValuesTMB),
    ('ssvtmbContourPoint2', RSurfaceStressValuesTMB),
    ('ssvtmbContourPoint3', RSurfaceStressValuesTMB),
    ('ssvtmbContourPoint4', RSurfaceStressValuesTMB),
    ('ssvtmbContourLineMidPoint1', RSurfaceStressValuesTMB),
    ('ssvtmbContourLineMidPoint2', RSurfaceStressValuesTMB),
    ('ssvtmbContourLineMidPoint3', RSurfaceStressValuesTMB),
    ('ssvtmbContourLineMidPoint4', RSurfaceStressValuesTMB),
]
assert sizeof(RSurfaceStresses) == 1984, sizeof(RSurfaceStresses)
assert alignment(RSurfaceStresses) == 8, alignment(RSurfaceStresses)

# values for enumeration 'EXLAMSurfaceEfficiency'
xse_M_N_0 = 0
xse_M_N_90 = 1
xse_V_T = 2
xse_Vr_N = 3
xse_Max = 4
EXLAMSurfaceEfficiency = c_int # enum
IAxisVMStresses._methods_ = [
    COMMETHOD([dispid(201)], HRESULT, 'GetLineStressByLoadCaseId',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RLineStressValues), 'Stress' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(202)], HRESULT, 'GetLineStressByLoadCombinationId',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RLineStressValues), 'Stress' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(203)], HRESULT, 'GetEnvelopeLineStress',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELineStress, 'Component' ),
              ( ['in', 'out'], POINTER(RLineStressValues), 'Stress' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'GetCriticalLineStress',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELineStress, 'Component' ),
              ( ['in', 'out'], POINTER(RLineStressValues), 'Stress' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205)], HRESULT, 'GetLineStressesByLoadCaseId',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineStressValues)), 'Stresses' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'GetLineStressesByLoadCombinationId',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineStressValues)), 'Stresses' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'GetEnvelopeLineStresses',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELineStress, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineStressValues)), 'Stresses' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208)], HRESULT, 'GetCriticalLineStresses',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELineStress, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineStressValues)), 'Stresses' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209)], HRESULT, 'GetAllLineStressesByLoadCaseId',
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineStressValues)), 'Stresses' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(210)], HRESULT, 'GetAllLineStressesByLoadCombinationId',
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineStressValues)), 'Stresses' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(211)], HRESULT, 'GetAllEnvelopeLineStresses',
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELineStress, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineStressValues)), 'Stresses' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(212)], HRESULT, 'GetAllCriticalLineStresses',
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELineStress, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineStressValues)), 'Stresses' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(213)], HRESULT, 'GetLineStressesForResultBlocks',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RResultBlockInfo)), 'ResultBlockInfo' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineStressValues)), 'Stresses' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(214)], HRESULT, 'GetSurfaceStressByLoadCaseId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in'], ESurfaceStressPosition, 'SurfaceStressPosition' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RSurfaceStressValues), 'Stress' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(215)], HRESULT, 'GetSurfaceStressByLoadCombinationId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in'], ESurfaceStressPosition, 'SurfaceStressPosition' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RSurfaceStressValues), 'Stress' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(216)], HRESULT, 'GetEnvelopeSurfaceStress',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in'], ESurfaceStressPosition, 'SurfaceStressPosition' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ESurfaceStress, 'Component' ),
              ( ['in', 'out'], POINTER(RSurfaceStressValues), 'Stress' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(217)], HRESULT, 'GetCriticalSurfaceStress',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in'], ESurfaceStressPosition, 'SurfaceStressPosition' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ESurfaceStress, 'Component' ),
              ( ['in', 'out'], POINTER(RSurfaceStressValues), 'Stress' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(218)], HRESULT, 'GetSurfaceStressesByLoadCaseId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RSurfaceStresses), 'Stresses' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(219)], HRESULT, 'GetSurfaceStressesByLoadCombinationId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RSurfaceStresses), 'Stresses' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(220)], HRESULT, 'GetEnvelopeSurfaceStresses',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ESurfaceStress, 'Component' ),
              ( ['in', 'out'], POINTER(RSurfaceStresses), 'Stresses' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(221)], HRESULT, 'GetCriticalSurfaceStresses',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ESurfaceStress, 'Component' ),
              ( ['in', 'out'], POINTER(RSurfaceStresses), 'Stresses' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(222)], HRESULT, 'GetAllSurfaceStressesByLoadCaseId',
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceStresses)), 'Stresses' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(223)], HRESULT, 'GetAllSurfaceStressesByLoadCombinationId',
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceStresses)), 'Stresses' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(224)], HRESULT, 'GetAllEnvelopeSurfaceStresses',
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ESurfaceStress, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceStresses)), 'Stresses' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(225)], HRESULT, 'GetAllCriticalSurfaceStresses',
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ESurfaceStress, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceStresses)), 'Stresses' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(226)], HRESULT, 'GetSurfaceStressesForResultBlocks',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RResultBlockInfo)), 'ResultBlockInfo' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceStresses)), 'Stresses' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(227)], HRESULT, 'GetSurfaceStressValuesForResultBlocks',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in'], ESurfaceStressPosition, 'SurfaceStressPosition' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RResultBlockInfo)), 'ResultBlockInfo' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceStressValues)), 'Stresses' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(228), 'propget'], HRESULT, 'AnalysisType',
              ( ['out', 'retval'], POINTER(EAnalysisType), 'Value' )),
    COMMETHOD([dispid(228), 'propput'], HRESULT, 'AnalysisType',
              ( ['in'], EAnalysisType, 'Value' )),
    COMMETHOD([dispid(229), 'propget'], HRESULT, 'LoadCaseId',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(229), 'propput'], HRESULT, 'LoadCaseId',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(230), 'propget'], HRESULT, 'LoadCombinationId',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(230), 'propput'], HRESULT, 'LoadCombinationId',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(231), 'propget'], HRESULT, 'MinMaxType',
              ( ['out', 'retval'], POINTER(EMinMaxType), 'Value' )),
    COMMETHOD([dispid(231), 'propput'], HRESULT, 'MinMaxType',
              ( ['in'], EMinMaxType, 'Value' )),
    COMMETHOD([dispid(232), 'propget'], HRESULT, 'CombinationType',
              ( ['out', 'retval'], POINTER(ECombinationType), 'Value' )),
    COMMETHOD([dispid(232), 'propput'], HRESULT, 'CombinationType',
              ( ['in'], ECombinationType, 'Value' )),
    COMMETHOD([dispid(233), 'propget'], HRESULT, 'LoadLevelOrTimeStep',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(233), 'propput'], HRESULT, 'LoadLevelOrTimeStep',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(234), 'propget'], HRESULT, 'LineStressComponent',
              ( ['out', 'retval'], POINTER(ELineStress), 'Value' )),
    COMMETHOD([dispid(234), 'propput'], HRESULT, 'LineStressComponent',
              ( ['in'], ELineStress, 'Value' )),
    COMMETHOD([dispid(235), 'propget'], HRESULT, 'SurfaceStressComponent',
              ( ['out', 'retval'], POINTER(ESurfaceStress), 'Value' )),
    COMMETHOD([dispid(235), 'propput'], HRESULT, 'SurfaceStressComponent',
              ( ['in'], ESurfaceStress, 'Value' )),
    COMMETHOD([dispid(236)], HRESULT, 'LineStressByLoadCaseId',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in', 'out'], POINTER(RLineStressValues), 'Stress' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(237)], HRESULT, 'LineStressByLoadCombinationId',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in', 'out'], POINTER(RLineStressValues), 'Stress' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(238)], HRESULT, 'EnvelopeLineStress',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in', 'out'], POINTER(RLineStressValues), 'Stress' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(239)], HRESULT, 'CriticalLineStress',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in', 'out'], POINTER(RLineStressValues), 'Stress' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(240)], HRESULT, 'LineStressesByLoadCaseId',
              ( ['in'], c_int, 'LineId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineStressValues)), 'Stresses' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(241)], HRESULT, 'LineStressesByLoadCombinationId',
              ( ['in'], c_int, 'LineId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineStressValues)), 'Stresses' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(242)], HRESULT, 'EnvelopeLineStresses',
              ( ['in'], c_int, 'LineId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineStressValues)), 'Stresses' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(243)], HRESULT, 'CriticalLineStresses',
              ( ['in'], c_int, 'LineId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineStressValues)), 'Stresses' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(244)], HRESULT, 'AllLineStressesByLoadCaseId',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineStressValues)), 'Stresses' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(245)], HRESULT, 'AllLineStressesByLoadCombinationId',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineStressValues)), 'Stresses' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(246)], HRESULT, 'AllEnvelopeLineStresses',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineStressValues)), 'Stresses' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(247)], HRESULT, 'AllCriticalLineStresses',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'SectionCounts' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineStressValues)), 'Stresses' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(248)], HRESULT, 'LineStressesForResultBlocks',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RResultBlockInfo)), 'ResultBlockInfo' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineStressValues)), 'Stresses' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(249)], HRESULT, 'SurfaceStressByLoadCaseId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in'], ESurfaceStressPosition, 'SurfaceStressPosition' ),
              ( ['in', 'out'], POINTER(RSurfaceStressValues), 'Stress' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(250)], HRESULT, 'SurfaceStressByLoadCombinationId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in'], ESurfaceStressPosition, 'SurfaceStressPosition' ),
              ( ['in', 'out'], POINTER(RSurfaceStressValues), 'Stress' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(251)], HRESULT, 'EnvelopeSurfaceStress',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in'], ESurfaceStressPosition, 'SurfaceStressPosition' ),
              ( ['in', 'out'], POINTER(RSurfaceStressValues), 'Stress' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(252)], HRESULT, 'CriticalSurfaceStress',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in'], ESurfaceStressPosition, 'SurfaceStressPosition' ),
              ( ['in', 'out'], POINTER(RSurfaceStressValues), 'Stress' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(253)], HRESULT, 'SurfaceStressesByLoadCaseId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in', 'out'], POINTER(RSurfaceStresses), 'Stresses' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(254)], HRESULT, 'SurfaceStressesByLoadCombinationId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in', 'out'], POINTER(RSurfaceStresses), 'Stresses' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(255)], HRESULT, 'EnvelopeSurfaceStresses',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in', 'out'], POINTER(RSurfaceStresses), 'Stresses' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(256)], HRESULT, 'CriticalSurfaceStresses',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in', 'out'], POINTER(RSurfaceStresses), 'Stresses' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(257)], HRESULT, 'AllSurfaceStressesByLoadCaseId',
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceStresses)), 'Stresses' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(258)], HRESULT, 'AllSurfaceStressesByLoadCombinationId',
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceStresses)), 'Stresses' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(259)], HRESULT, 'AllEnvelopeSurfaceStresses',
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceStresses)), 'Stresses' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(260)], HRESULT, 'AllCriticalSurfaceStresses',
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceStresses)), 'Stresses' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(261)], HRESULT, 'SurfaceStressesForResultBlocks',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RResultBlockInfo)), 'ResultBlockInfo' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceStresses)), 'Stresses' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(262)], HRESULT, 'SurfaceStressValuesForResultBlocks',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in'], ESurfaceStressPosition, 'SurfaceStressPosition' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RResultBlockInfo)), 'ResultBlockInfo' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceStressValues)), 'Stresses' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(263), 'propget'], HRESULT, 'EnvelopeUID',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(263), 'propput'], HRESULT, 'EnvelopeUID',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(266)], HRESULT, 'GetEnvelopeLineStress2',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELineStress, 'Component' ),
              ( ['in', 'out'], POINTER(RLineStressValues), 'Stress' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'LoadLevel' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(267)], HRESULT, 'GetCriticalLineStress2',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELineStress, 'Component' ),
              ( ['in', 'out'], POINTER(RLineStressValues), 'Stress' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(ECombinationType), 'CriticalCombinationType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Factors' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(270)], HRESULT, 'GetEnvelopeSurfaceStress2',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in'], ESurfaceStressPosition, 'SurfaceStressPosition' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ESurfaceStress, 'Component' ),
              ( ['in', 'out'], POINTER(RSurfaceStressValues), 'Stress' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'LoadLevel' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(271)], HRESULT, 'GetCriticalSurfaceStress2',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in'], ESurfaceStressPosition, 'SurfaceStressPosition' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ESurfaceStress, 'Component' ),
              ( ['in', 'out'], POINTER(RSurfaceStressValues), 'Stress' ),
              ( ['out'], POINTER(ECombinationType), 'CriticalCombinationType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Factors' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(274)], HRESULT, 'EnvelopeLineStress2',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in', 'out'], POINTER(RLineStressValues), 'Stress' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'LoadLevel' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(275)], HRESULT, 'CriticalLineStress2',
              ( ['in'], c_int, 'LineId' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['in', 'out'], POINTER(RLineStressValues), 'Stress' ),
              ( ['out'], POINTER(c_double), 'PosX' ),
              ( ['out'], POINTER(ECombinationType), 'CriticalCombinationType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Factors' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(278)], HRESULT, 'EnvelopeSurfaceStress2',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in'], ESurfaceStressPosition, 'SurfaceStressPosition' ),
              ( ['in', 'out'], POINTER(RSurfaceStressValues), 'Stress' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'LoadLevel' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(279)], HRESULT, 'CriticalSurfaceStress2',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in'], ESurfaceStressPosition, 'SurfaceStressPosition' ),
              ( ['in', 'out'], POINTER(RSurfaceStressValues), 'Stress' ),
              ( ['out'], POINTER(ECombinationType), 'CriticalCombinationType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Factors' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(280)], HRESULT, 'GetMemberStressesByLoadCaseId',
              ( ['in'], c_int, 'MemberID' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineStressValues)), 'Stresses' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(281)], HRESULT, 'GetMemberStressesByLoadCombinationId',
              ( ['in'], c_int, 'MemberID' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineStressValues)), 'Stresses' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(282)], HRESULT, 'GetEnvelopeMemberStresses',
              ( ['in'], c_int, 'MemberID' ),
              ( ['in'], c_int, 'EnvelopeUID' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELineStress, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineStressValues)), 'Stresses' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(283)], HRESULT, 'GetCriticalMemberStresses',
              ( ['in'], c_int, 'MemberID' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ELineStress, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RLineStressValues)), 'Stresses' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'PosX' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(284), 'propget'], HRESULT, 'XLAMSurfaceStressComponent',
              ( ['out', 'retval'], POINTER(EXLAMSurfaceStress), 'Value' )),
    COMMETHOD([dispid(284), 'propput'], HRESULT, 'XLAMSurfaceStressComponent',
              ( ['in'], EXLAMSurfaceStress, 'Value' )),
    COMMETHOD([dispid(285)], HRESULT, 'GetXLAMSurfaceStressByLoadCaseId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RXLAMSurfaceStressValues), 'Stress' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(286)], HRESULT, 'GetXLAMSurfaceStressByLoadCombinationId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RXLAMSurfaceStressValues), 'Stress' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(287)], HRESULT, 'GetEnvelopeXLAMSurfaceStress',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], c_int, 'EnvelopeUID' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EXLAMSurfaceStress, 'Component' ),
              ( ['in', 'out'], POINTER(RXLAMSurfaceStressValues), 'Stress' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'LoadLevel' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(288)], HRESULT, 'GetCriticalXLAMSurfaceStress',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EXLAMSurfaceStress, 'Component' ),
              ( ['in', 'out'], POINTER(RXLAMSurfaceStressValues), 'Stress' ),
              ( ['out'], POINTER(ECombinationType), 'CriticalCombinationType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Factors' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(289)], HRESULT, 'GetXLAMSurfaceStressesByLoadCaseId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RXLAMSurfaceStresses), 'Stresses' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(290)], HRESULT, 'GetXLAMSurfaceStressesByLoadCombinationId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RXLAMSurfaceStresses), 'Stresses' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(291)], HRESULT, 'GetEnvelopeXLAMSurfaceStresses',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], c_int, 'EnvelopeUID' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EXLAMSurfaceStress, 'Component' ),
              ( ['in', 'out'], POINTER(RXLAMSurfaceStresses), 'Stresses' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(292)], HRESULT, 'GetCriticalXLAMSurfaceStresses',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EXLAMSurfaceStress, 'Component' ),
              ( ['in', 'out'], POINTER(RXLAMSurfaceStresses), 'Stresses' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(293)], HRESULT, 'GetXLAMSurfaceStressesForResultBlocks',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RResultBlockInfo)), 'ResultBlockInfo' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RXLAMSurfaceStresses)), 'Stresses' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(294)], HRESULT, 'GetXLAMSurfaceStressValuesForResultBlocks',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RResultBlockInfo)), 'ResultBlockInfo' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RXLAMSurfaceStressValues)), 'Stresses' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(295)], HRESULT, 'GetXLAMSurfaceEfficiencyByLoadCaseId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RXLAMSurfaceEfficiencyValues), 'Efficiency' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(296)], HRESULT, 'GetXLAMSurfaceEfficiencyByLoadCombinationId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RXLAMSurfaceEfficiencyValues), 'Efficiency' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(297)], HRESULT, 'GetEnvelopeXLAMSurfaceEfficiency',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], c_int, 'EnvelopeUID' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EXLAMSurfaceEfficiency, 'Component' ),
              ( ['in', 'out'], POINTER(RXLAMSurfaceEfficiencyValues), 'Efficiency' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'LoadLevel' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(304)], HRESULT, 'GetCriticalXLAMSurfaceEfficiency',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ESurfaceVertexType, 'SurfaceVertexType' ),
              ( ['in'], c_int, 'SurfaceVertexId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EXLAMSurfaceEfficiency, 'Component' ),
              ( ['in', 'out'], POINTER(RXLAMSurfaceEfficiencyValues), 'Efficiency' ),
              ( ['out'], POINTER(ECombinationType), 'CriticalCombinationType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Factors' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(305)], HRESULT, 'GetXLAMSurfaceEfficienciesByLoadCaseId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevelOrTimeStep' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RXLAMSurfaceEfficiencies), 'Efficiencies' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(306)], HRESULT, 'GetXLAMSurfaceEfficienciesByLoadCombinationId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RXLAMSurfaceEfficiencies), 'Efficiencies' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(307)], HRESULT, 'GetEnvelopeXLAMSurfaceEfficiencies',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], c_int, 'EnvelopeUID' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EXLAMSurfaceEfficiency, 'Component' ),
              ( ['in', 'out'], POINTER(RXLAMSurfaceEfficiencies), 'Efficiencies' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(308)], HRESULT, 'GetCriticalXLAMSurfaceEfficiencies',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], EXLAMSurfaceEfficiency, 'Component' ),
              ( ['in', 'out'], POINTER(RXLAMSurfaceEfficiencies), 'Efficiencies' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(309), helpstring('minHeight = 580, minWidth = 640 ')], HRESULT, 'SaveMemberStressesToMetaFileByLoadCaseID',
              ( ['in'], BSTR, 'FileName' ),
              ( ['in'], c_int, 'MemberID' ),
              ( ['in'], c_int, 'StressPointID' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], c_int, 'Width' ),
              ( ['in'], c_int, 'Height' ),
              ( ['in'], c_double, 'Position' ),
              ( ['in'], EWindowColourMode, 'ColourMode' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(310), helpstring('minHeight = 580, minWidth = 640 ')], HRESULT, 'SaveMemberStressesToMetaFileByLoadCombinationID',
              ( ['in'], BSTR, 'FileName' ),
              ( ['in'], c_int, 'MemberID' ),
              ( ['in'], c_int, 'StressPointID' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], c_int, 'Width' ),
              ( ['in'], c_int, 'Height' ),
              ( ['in'], c_double, 'Position' ),
              ( ['in'], EWindowColourMode, 'ColourMode' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(311), helpstring('minHeight = 580, minWidth = 640 ')], HRESULT, 'SaveEnvelopeMemberStressesToMetaFile',
              ( ['in'], BSTR, 'FileName' ),
              ( ['in'], c_int, 'MemberID' ),
              ( ['in'], c_int, 'EnvelopeUID' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], c_int, 'Width' ),
              ( ['in'], c_int, 'Height' ),
              ( ['in'], ELongBoolean, 'EnvelopeOnly' ),
              ( ['in'], c_double, 'Position' ),
              ( ['in'], EWindowColourMode, 'ColourMode' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(312), helpstring('minHeight = 580, minWidth = 640 ')], HRESULT, 'SaveCriticalMemberStressesToMetaFile',
              ( ['in'], BSTR, 'FileName' ),
              ( ['in'], c_int, 'MemberID' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], c_int, 'Width' ),
              ( ['in'], c_int, 'Height' ),
              ( ['in'], ELongBoolean, 'EnvelopeOnly' ),
              ( ['in'], c_double, 'Position' ),
              ( ['in'], EWindowColourMode, 'ColourMode' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(313)], HRESULT, 'SetUserCreep',
              ( ['in'], ELongBoolean, 'Creep' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(314), 'propget'], HRESULT, 'UserCreep',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
]
################################################################
## code template for IAxisVMStresses implementation
##class IAxisVMStresses_Impl(object):
##    def GetLineStressByLoadCaseId(self, LineId, SectionId, LoadCaseId, LoadLevelOrTimeStep, AnalysisType):
##        '-no docstring-'
##        #return Stress, PosX, Combination, ResultValue
##
##    def GetLineStressByLoadCombinationId(self, LineId, SectionId, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Stress, PosX, Combination, ResultValue
##
##    def GetEnvelopeLineStress(self, LineId, SectionId, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return Stress, PosX, Combination, ResultValue
##
##    def GetCriticalLineStress(self, LineId, SectionId, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Stress, PosX, Combination, ResultValue
##
##    def GetLineStressesByLoadCaseId(self, LineId, LoadCaseId, LoadLevelOrTimeStep, AnalysisType):
##        '-no docstring-'
##        #return Stresses, PosX, ResultValue
##
##    def GetLineStressesByLoadCombinationId(self, LineId, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Stresses, PosX, ResultValue
##
##    def GetEnvelopeLineStresses(self, LineId, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return Stresses, PosX, ResultValue
##
##    def GetCriticalLineStresses(self, LineId, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Stresses, PosX, ResultValue
##
##    def GetAllLineStressesByLoadCaseId(self, LoadCaseId, LoadLevelOrTimeStep, AnalysisType):
##        '-no docstring-'
##        #return SectionCounts, Stresses, PosX, ResultValue
##
##    def GetAllLineStressesByLoadCombinationId(self, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return SectionCounts, Stresses, PosX, ResultValue
##
##    def GetAllEnvelopeLineStresses(self, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return SectionCounts, Stresses, PosX, ResultValue
##
##    def GetAllCriticalLineStresses(self, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return SectionCounts, Stresses, PosX, ResultValue
##
##    def GetLineStressesForResultBlocks(self, LineId, SectionId, AnalysisType):
##        '-no docstring-'
##        #return ResultBlockInfo, Stresses, PosX, ResultValue
##
##    def GetSurfaceStressByLoadCaseId(self, SurfaceId, SurfaceVertexType, SurfaceVertexId, SurfaceStressPosition, LoadCaseId, LoadLevelOrTimeStep, AnalysisType):
##        '-no docstring-'
##        #return Stress, Combination, ResultValue
##
##    def GetSurfaceStressByLoadCombinationId(self, SurfaceId, SurfaceVertexType, SurfaceVertexId, SurfaceStressPosition, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Stress, Combination, ResultValue
##
##    def GetEnvelopeSurfaceStress(self, SurfaceId, SurfaceVertexType, SurfaceVertexId, SurfaceStressPosition, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return Stress, Combination, ResultValue
##
##    def GetCriticalSurfaceStress(self, SurfaceId, SurfaceVertexType, SurfaceVertexId, SurfaceStressPosition, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Stress, Combination, ResultValue
##
##    def GetSurfaceStressesByLoadCaseId(self, SurfaceId, LoadCaseId, LoadLevelOrTimeStep, AnalysisType):
##        '-no docstring-'
##        #return Stresses, ResultValue
##
##    def GetSurfaceStressesByLoadCombinationId(self, SurfaceId, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Stresses, ResultValue
##
##    def GetEnvelopeSurfaceStresses(self, SurfaceId, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return Stresses, ResultValue
##
##    def GetCriticalSurfaceStresses(self, SurfaceId, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Stresses, ResultValue
##
##    def GetAllSurfaceStressesByLoadCaseId(self, LoadCaseId, LoadLevelOrTimeStep, AnalysisType):
##        '-no docstring-'
##        #return Stresses, ResultValue
##
##    def GetAllSurfaceStressesByLoadCombinationId(self, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Stresses, ResultValue
##
##    def GetAllEnvelopeSurfaceStresses(self, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return Stresses, ResultValue
##
##    def GetAllCriticalSurfaceStresses(self, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Stresses, ResultValue
##
##    def GetSurfaceStressesForResultBlocks(self, SurfaceId, AnalysisType):
##        '-no docstring-'
##        #return ResultBlockInfo, Stresses, ResultValue
##
##    def GetSurfaceStressValuesForResultBlocks(self, SurfaceId, SurfaceVertexType, SurfaceVertexId, SurfaceStressPosition, AnalysisType):
##        '-no docstring-'
##        #return ResultBlockInfo, Stresses, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    AnalysisType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LoadCaseId = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LoadCombinationId = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    MinMaxType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    CombinationType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LoadLevelOrTimeStep = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LineStressComponent = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    SurfaceStressComponent = property(_get, _set, doc = _set.__doc__)
##
##    def LineStressByLoadCaseId(self, LineId, SectionId):
##        '-no docstring-'
##        #return Stress, PosX, Combination, ResultValue
##
##    def LineStressByLoadCombinationId(self, LineId, SectionId):
##        '-no docstring-'
##        #return Stress, PosX, Combination, ResultValue
##
##    def EnvelopeLineStress(self, LineId, SectionId):
##        '-no docstring-'
##        #return Stress, PosX, Combination, ResultValue
##
##    def CriticalLineStress(self, LineId, SectionId):
##        '-no docstring-'
##        #return Stress, PosX, Combination, ResultValue
##
##    def LineStressesByLoadCaseId(self, LineId):
##        '-no docstring-'
##        #return Stresses, PosX, ResultValue
##
##    def LineStressesByLoadCombinationId(self, LineId):
##        '-no docstring-'
##        #return Stresses, PosX, ResultValue
##
##    def EnvelopeLineStresses(self, LineId):
##        '-no docstring-'
##        #return Stresses, PosX, ResultValue
##
##    def CriticalLineStresses(self, LineId):
##        '-no docstring-'
##        #return Stresses, PosX, ResultValue
##
##    def AllLineStressesByLoadCaseId(self):
##        '-no docstring-'
##        #return SectionCounts, Stresses, PosX, ResultValue
##
##    def AllLineStressesByLoadCombinationId(self):
##        '-no docstring-'
##        #return SectionCounts, Stresses, PosX, ResultValue
##
##    def AllEnvelopeLineStresses(self):
##        '-no docstring-'
##        #return SectionCounts, Stresses, PosX, ResultValue
##
##    def AllCriticalLineStresses(self):
##        '-no docstring-'
##        #return SectionCounts, Stresses, PosX, ResultValue
##
##    def LineStressesForResultBlocks(self, LineId, SectionId):
##        '-no docstring-'
##        #return ResultBlockInfo, Stresses, PosX, ResultValue
##
##    def SurfaceStressByLoadCaseId(self, SurfaceId, SurfaceVertexType, SurfaceVertexId, SurfaceStressPosition):
##        '-no docstring-'
##        #return Stress, Combination, ResultValue
##
##    def SurfaceStressByLoadCombinationId(self, SurfaceId, SurfaceVertexType, SurfaceVertexId, SurfaceStressPosition):
##        '-no docstring-'
##        #return Stress, Combination, ResultValue
##
##    def EnvelopeSurfaceStress(self, SurfaceId, SurfaceVertexType, SurfaceVertexId, SurfaceStressPosition):
##        '-no docstring-'
##        #return Stress, Combination, ResultValue
##
##    def CriticalSurfaceStress(self, SurfaceId, SurfaceVertexType, SurfaceVertexId, SurfaceStressPosition):
##        '-no docstring-'
##        #return Stress, Combination, ResultValue
##
##    def SurfaceStressesByLoadCaseId(self, SurfaceId):
##        '-no docstring-'
##        #return Stresses, ResultValue
##
##    def SurfaceStressesByLoadCombinationId(self, SurfaceId):
##        '-no docstring-'
##        #return Stresses, ResultValue
##
##    def EnvelopeSurfaceStresses(self, SurfaceId):
##        '-no docstring-'
##        #return Stresses, ResultValue
##
##    def CriticalSurfaceStresses(self, SurfaceId):
##        '-no docstring-'
##        #return Stresses, ResultValue
##
##    def AllSurfaceStressesByLoadCaseId(self):
##        '-no docstring-'
##        #return Stresses, ResultValue
##
##    def AllSurfaceStressesByLoadCombinationId(self):
##        '-no docstring-'
##        #return Stresses, ResultValue
##
##    def AllEnvelopeSurfaceStresses(self):
##        '-no docstring-'
##        #return Stresses, ResultValue
##
##    def AllCriticalSurfaceStresses(self):
##        '-no docstring-'
##        #return Stresses, ResultValue
##
##    def SurfaceStressesForResultBlocks(self, SurfaceId):
##        '-no docstring-'
##        #return ResultBlockInfo, Stresses, ResultValue
##
##    def SurfaceStressValuesForResultBlocks(self, SurfaceId, SurfaceVertexType, SurfaceVertexId, SurfaceStressPosition):
##        '-no docstring-'
##        #return ResultBlockInfo, Stresses, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    EnvelopeUID = property(_get, _set, doc = _set.__doc__)
##
##    def GetEnvelopeLineStress2(self, LineId, SectionId, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return Stress, PosX, LoadCaseOrCombinationId, LoadLevel, ResultValue
##
##    def GetCriticalLineStress2(self, LineId, SectionId, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Stress, PosX, CriticalCombinationType, Factors, LoadCaseIds, ResultValue
##
##    def GetEnvelopeSurfaceStress2(self, SurfaceId, SurfaceVertexType, SurfaceVertexId, SurfaceStressPosition, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return Stress, LoadCaseOrCombinationId, LoadLevel, ResultValue
##
##    def GetCriticalSurfaceStress2(self, SurfaceId, SurfaceVertexType, SurfaceVertexId, SurfaceStressPosition, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Stress, CriticalCombinationType, Factors, LoadCaseIds, ResultValue
##
##    def EnvelopeLineStress2(self, LineId, SectionId):
##        '-no docstring-'
##        #return Stress, PosX, LoadCaseOrCombinationId, LoadLevel, ResultValue
##
##    def CriticalLineStress2(self, LineId, SectionId):
##        '-no docstring-'
##        #return Stress, PosX, CriticalCombinationType, Factors, LoadCaseIds, ResultValue
##
##    def EnvelopeSurfaceStress2(self, SurfaceId, SurfaceVertexType, SurfaceVertexId, SurfaceStressPosition):
##        '-no docstring-'
##        #return Stress, LoadCaseOrCombinationId, LoadLevel, ResultValue
##
##    def CriticalSurfaceStress2(self, SurfaceId, SurfaceVertexType, SurfaceVertexId, SurfaceStressPosition):
##        '-no docstring-'
##        #return Stress, CriticalCombinationType, Factors, LoadCaseIds, ResultValue
##
##    def GetMemberStressesByLoadCaseId(self, MemberID, LoadCaseId, LoadLevelOrTimeStep, AnalysisType):
##        '-no docstring-'
##        #return Stresses, PosX, ResultValue
##
##    def GetMemberStressesByLoadCombinationId(self, MemberID, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Stresses, PosX, ResultValue
##
##    def GetEnvelopeMemberStresses(self, MemberID, EnvelopeUID, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return Stresses, PosX, ResultValue
##
##    def GetCriticalMemberStresses(self, MemberID, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Stresses, PosX, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    XLAMSurfaceStressComponent = property(_get, _set, doc = _set.__doc__)
##
##    def GetXLAMSurfaceStressByLoadCaseId(self, SurfaceId, SurfaceVertexType, SurfaceVertexId, LoadCaseId, LoadLevelOrTimeStep, AnalysisType):
##        '-no docstring-'
##        #return Stress, Combination, ResultValue
##
##    def GetXLAMSurfaceStressByLoadCombinationId(self, SurfaceId, SurfaceVertexType, SurfaceVertexId, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Stress, Combination, ResultValue
##
##    def GetEnvelopeXLAMSurfaceStress(self, SurfaceId, EnvelopeUID, SurfaceVertexType, SurfaceVertexId, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return Stress, LoadCaseOrCombinationId, LoadLevel, ResultValue
##
##    def GetCriticalXLAMSurfaceStress(self, SurfaceId, SurfaceVertexType, SurfaceVertexId, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Stress, CriticalCombinationType, Factors, LoadCaseIds, ResultValue
##
##    def GetXLAMSurfaceStressesByLoadCaseId(self, SurfaceId, LoadCaseId, LoadLevelOrTimeStep, AnalysisType):
##        '-no docstring-'
##        #return Stresses, ResultValue
##
##    def GetXLAMSurfaceStressesByLoadCombinationId(self, SurfaceId, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Stresses, ResultValue
##
##    def GetEnvelopeXLAMSurfaceStresses(self, SurfaceId, EnvelopeUID, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return Stresses, ResultValue
##
##    def GetCriticalXLAMSurfaceStresses(self, SurfaceId, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Stresses, ResultValue
##
##    def GetXLAMSurfaceStressesForResultBlocks(self, SurfaceId, AnalysisType):
##        '-no docstring-'
##        #return ResultBlockInfo, Stresses, ResultValue
##
##    def GetXLAMSurfaceStressValuesForResultBlocks(self, SurfaceId, SurfaceVertexType, SurfaceVertexId, AnalysisType):
##        '-no docstring-'
##        #return ResultBlockInfo, Stresses, ResultValue
##
##    def GetXLAMSurfaceEfficiencyByLoadCaseId(self, SurfaceId, SurfaceVertexType, SurfaceVertexId, LoadCaseId, LoadLevelOrTimeStep, AnalysisType):
##        '-no docstring-'
##        #return Efficiency, Combination, ResultValue
##
##    def GetXLAMSurfaceEfficiencyByLoadCombinationId(self, SurfaceId, SurfaceVertexType, SurfaceVertexId, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Efficiency, Combination, ResultValue
##
##    def GetEnvelopeXLAMSurfaceEfficiency(self, SurfaceId, EnvelopeUID, SurfaceVertexType, SurfaceVertexId, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return Efficiency, LoadCaseOrCombinationId, LoadLevel, ResultValue
##
##    def GetCriticalXLAMSurfaceEfficiency(self, SurfaceId, SurfaceVertexType, SurfaceVertexId, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Efficiency, CriticalCombinationType, Factors, LoadCaseIds, ResultValue
##
##    def GetXLAMSurfaceEfficienciesByLoadCaseId(self, SurfaceId, LoadCaseId, LoadLevelOrTimeStep, AnalysisType):
##        '-no docstring-'
##        #return Efficiencies, ResultValue
##
##    def GetXLAMSurfaceEfficienciesByLoadCombinationId(self, SurfaceId, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return Efficiencies, ResultValue
##
##    def GetEnvelopeXLAMSurfaceEfficiencies(self, SurfaceId, EnvelopeUID, MinMaxType, AnalysisType, Component):
##        '-no docstring-'
##        #return Efficiencies, ResultValue
##
##    def GetCriticalXLAMSurfaceEfficiencies(self, SurfaceId, MinMaxType, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return Efficiencies, ResultValue
##
##    def SaveMemberStressesToMetaFileByLoadCaseID(self, FileName, MemberID, StressPointID, LoadCaseId, LoadLevel, AnalysisType, Width, Height, Position, ColourMode):
##        'minHeight = 580, minWidth = 640 '
##        #return ResultValue
##
##    def SaveMemberStressesToMetaFileByLoadCombinationID(self, FileName, MemberID, StressPointID, LoadCombinationId, LoadLevel, AnalysisType, Width, Height, Position, ColourMode):
##        'minHeight = 580, minWidth = 640 '
##        #return ResultValue
##
##    def SaveEnvelopeMemberStressesToMetaFile(self, FileName, MemberID, EnvelopeUID, AnalysisType, Width, Height, EnvelopeOnly, Position, ColourMode):
##        'minHeight = 580, minWidth = 640 '
##        #return ResultValue
##
##    def SaveCriticalMemberStressesToMetaFile(self, FileName, MemberID, CombinationType, AnalysisType, Width, Height, EnvelopeOnly, Position, ColourMode):
##        'minHeight = 580, minWidth = 640 '
##        #return ResultValue
##
##    def SetUserCreep(self, Creep):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def UserCreep(self):
##        '-no docstring-'
##        #return Value
##


# values for enumeration 'EaxsImportCustomParts'
aicpToActiveCustomParts = 0
aicpPreserveNames = 1
aicpNoCustomParts = 2
EaxsImportCustomParts = c_int # enum

# values for enumeration 'EModelError'
meCannotExport = -100001
meNoSeismicParams = -100002
meErrorSettingSeismicParams = -100003
meLoadCaseLoadCombinationNotFound = -100004
mePianoCanNotUpdate = -100005
mePianoCanNotFindFile = -100006
mePianoInternalException = -100007
meRCBeamDesignDisabled = -100008
meRCColumnCheckingDisabled = -100009
meSteelDesignMembersDisabled = -100010
meActualReinforcementDisabled = -100011
meIFCmoduleNotAvailable = -100012
meDXFmoduleNotAvailable = -100013
meSE1moduleNotAvailable = -100014
meTD1moduleNotAvailable = -100015
meSWGmoduleNotAvailable = -100016
meSE2moduleNotAvailable = -100017
meDYNmoduleNotAvailable = -100018
meCannotSaveGlobalData = -100019
meCannotReadGlobalData = -100020
meInvalidDataName = -100021
meInvalidOrEmptyGlobalData = -100022
meGlobalDataNotFound = -100023
meDataNameAlreadyExists = -100024
meFileNotExists = -100025
mePDFmoduleNotAvailable = -100026
meReinforcementForExportNotAvailable = -100027
mePDFimportCannotReadAllObjects = -100028
mePDFimportNoEOF = -100029
mePDFimportNoGraphicElements = -100030
mePDFimportFailure = -100031
mePDFimportErrorInCompressedData = -100032
mePDFimportObjectMissing = -100033
mePDFimportUnknownCompression = -100034
mePDFimportStreamDataNotFound = -100035
mePDFimportStreamLengthNotFound = -100036
mePDFimportNoGraphicElementsOnPage = -100037
mePDFimportPageNotFound = -100038
mePDFimportUnknownLinearization = -100039
mePDFimportReferenceStreamParsingError = -100040
mePDFimportUnknownEmbeddedObject = -100041
mePDFimportReferenceTableParsingError = -100042
mePDFimportUnknownError = -100043
mePDFimportFileGlyphlistNotFound = -100044
mePDFimportPDFfileIsEncrypted = -100045
mePDFimportPagesCannotBeFound = -100046
meIFCInvalidDeviationOrByAngle = -100047
meIFCNoStaticData = -100048
meIFCVersionNotFound = -100049
meIFCOtherError = -100050
meIFCMaxDeviationAndByAngleIsZero = -100051
meSD9moduleNotAvailable = -100052
meTD9moduleNotAvailable = -100053
meRevitModuleNotAvailable = -100054
meRevitImportTessDegreeOutOfRange = -100055
EModelError = c_int # enum

# values for enumeration 'ELoadCasesError'
lcaePropertyNotValidForThisType = -100001
lcaeNameExists = -100002
lcaeErrorCreatingStandardSeismicCases = -100003
lcaeGroupIdOutOfBounds = -100004
lcaeErrorCreatingPushOverCases = -100005
lcaeInvalidAnalysisTypeDirX = -100006
lcaeLoadCaseIndexOutOfBoundsDirX = -100007
lcaeVibrationModeIndexOfOutBoundsDirX = -100008
lcaeInvalidAnalysisTypeDirY = -100009
lcaeLoadCaseIndexOutOfBoundsDirY = -100010
lcaeVibrationModeIndexOfOutBoundsDirY = -100011
lcaeErrorCreatingPreStressCases = -100012
lcaeNoPushOverCases = -100013
lcaeInvalidLoadCaseType = -100014
lcaeNoModeShapesForLoadCaseInDirectionX = -100015
lcaeNoModeShapesForLoadCaseInDirectionY = -100016
lcaeNoModeShapesInDirectionX = -100017
lcaeNoModeShapesInDirectionY = -100018
lcaeInvalidLoadGroupType = -100019
lcaeSWGmoduleNotAvailable = -100020
lcaeNoSnowLoadCases = -100021
lcaeNoWindLoadCases = -100022
lcaeInvalidName = -100023
lcaeNoSeismicLoadCases = -100024
lcaeSE1moduleNotAvailable = -100025
lcaeErrorSetingSeismicParams = -100026
lcaeLoadCaseLoadCombinationNotFound = -100027
lcaeErrorTooManySeismicGroups = -100003
lcaeSeismicInvalidGroupID = -100028
ELoadCasesError = c_int # enum

# values for enumeration 'ELoadPanelsError'
lopeInvalidContourParams = -100001
lopeLineIndexlListEmpty = -100002
lopeLineIndexOutOfBounds = -100003
lopeInvalidContour = -100004
lopeSameLoadPanelExists = -100005
lopeMemberIndexlListEmpty = -100006
lopeMemberIndexOutOfBounds = -100007
lopeInvalidContourType = -100008
lopeNodeIndexlListEmpty = -100009
lopeDomainIndexlListEmpty = -1000010
ELoadPanelsError = c_int # enum
class RReinforcementParameters_STAS(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{89DC3C6A-252C-4294-8588-90BC8A2A9481}')
RReinforcementParameters_STAS._fields_ = [
    ('mbc', c_double),
    ('mbt', c_double),
    ('ksi0', c_double),
    ('UnfavorableEccentricity_Npos', c_double),
    ('UnfavorableEccentricity_Nneg', c_double),
    ('RebarPos', RRebarPos),
    ('fse', c_double),
    ('phi', c_double),
    ('nu', c_double),
    ('tau_a', c_double),
]
assert sizeof(RReinforcementParameters_STAS) == 104, sizeof(RReinforcementParameters_STAS)
assert alignment(RReinforcementParameters_STAS) == 8, alignment(RReinforcementParameters_STAS)
RLineGeomData._fields_ = [
    ('CircleArc', RCircleArcGeomData),
    ('EllipseArc', REllipseArcGeomData),
]
assert sizeof(RLineGeomData) == 160, sizeof(RLineGeomData)
assert alignment(RLineGeomData) == 8, alignment(RLineGeomData)
IAxisVMDimensionsEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Cleared'),
    DISPMETHOD([dispid(202)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]
IAxisVMNodesEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Cleared'),
    DISPMETHOD([dispid(202)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]

# values for enumeration 'EAccelerationError'
aeLoadCaseIdIndexOutOfBounds = -100001
aeInvalidCombinationOfLoadCaseAndTimeStep = -100002
aeInvalidAnalysisType = -100003
aeLoadCombinationHasNoDynamicResult = -100004
EAccelerationError = c_int # enum
RLoadSurfaceConcentrated._fields_ = [
    ('LoadCaseId', c_int),
    ('SurfaceId', c_int),
    ('Fx', c_double),
    ('Fy', c_double),
    ('Fz', c_double),
    ('Mx', c_double),
    ('My', c_double),
    ('Mz', c_double),
    ('x', c_double),
    ('y', c_double),
    ('z', c_double),
    ('ReferenceId', c_int),
    ('SystemGLR', ESystem),
]
assert sizeof(RLoadSurfaceConcentrated) == 88, sizeof(RLoadSurfaceConcentrated)
assert alignment(RLoadSurfaceConcentrated) == 8, alignment(RLoadSurfaceConcentrated)
RNonLinearAnalysisResultInfo._fields_ = [
    ('Increments', c_int),
    ('Iterations', c_int),
    ('Lambda', c_double),
    ('ErrorP', c_double),
    ('ErrorU', c_double),
    ('ErrorE', c_double),
    ('ErrorEq', c_double),
    ('ControlVal', c_double),
    ('Convergence', ELongBoolean),
]
assert sizeof(RNonLinearAnalysisResultInfo) == 64, sizeof(RNonLinearAnalysisResultInfo)
assert alignment(RNonLinearAnalysisResultInfo) == 8, alignment(RNonLinearAnalysisResultInfo)
RAXSimportParameters._fields_ = [
    ('Place', RPoint3d),
    ('CheckTolerance', c_double),
    ('MergeLoadCases', ELongBoolean),
    ('UserInteraction', ELongBoolean),
    ('IgnoreDesignCode', ELongBoolean),
    ('MergeLayers', ELongBoolean),
    ('CustomParts', EaxsImportCustomParts),
]
assert sizeof(RAXSimportParameters) == 56, sizeof(RAXSimportParameters)
assert alignment(RAXSimportParameters) == 8, alignment(RAXSimportParameters)
IAxisVMTimberDesignResultsEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrCode' )),
]

# values for enumeration 'EPadFootingType2'
pft_NodeRectangular = 0
pft_NodeCircular = 1
pft_Linear = 2
EPadFootingType2 = c_int # enum
IAxisVMNodesSupports._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'DomainId1',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(203), 'propget'], HRESULT, 'DomainId2',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(204), 'propget'], HRESULT, 'HasStiffnessCalcParams',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(205), 'propget'], HRESULT, 'HasFooting',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(206), 'propget'], HRESULT, 'FootingType',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(EPadFootingType), 'Value' )),
    COMMETHOD([dispid(207), 'propget'], HRESULT, 'IndexOfUID',
              ( ['in'], c_int, 'UID' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(208), 'propget'], HRESULT, 'LineId',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(209), 'propget'], HRESULT, 'Name',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Name' )),
    COMMETHOD([dispid(210), 'propget'], HRESULT, 'NodeId',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(211), 'propget'], HRESULT, 'ReferenceId',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(212), 'propget'], HRESULT, 'SelCount',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(213), 'propget'], HRESULT, 'Selected',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(213), 'propput'], HRESULT, 'Selected',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], ELongBoolean, 'Value' )),
    COMMETHOD([dispid(214), 'propget'], HRESULT, 'SupportType',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ENodalSupportType), 'Value' )),
    COMMETHOD([dispid(215), 'propget'], HRESULT, 'SurfaceId1',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(216), 'propget'], HRESULT, 'SurfaceId2',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(217), 'propget'], HRESULT, 'UID',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(218)], HRESULT, 'GetStiffnesses',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RStiffnesses), 'Stiffness' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(219)], HRESULT, 'GetNonLinearity',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RNonLinearity), 'NonLinearity' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(220)], HRESULT, 'GetResistances',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RResistances), 'Resistances' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(221)], HRESULT, 'GetStiffnessCalcParams',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RNodalSupportStiffParams), 'StiffnessParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(222)], HRESULT, 'SetStiffnessCalcParams',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RNodalSupportStiffParams), 'StiffnessParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(223)], HRESULT, 'AddNodalGlobal',
              ( ['in', 'out'], POINTER(RStiffnesses), 'Stiffness' ),
              ( ['in', 'out'], POINTER(RNonLinearity), 'NonLinearity' ),
              ( ['in', 'out'], POINTER(RResistances), 'Resistances' ),
              ( ['in'], c_int, 'NodeId' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(224)], HRESULT, 'AddNodalMemberRelative',
              ( ['in', 'out'], POINTER(RStiffnesses), 'Stiffness' ),
              ( ['in', 'out'], POINTER(RNonLinearity), 'NonLinearity' ),
              ( ['in', 'out'], POINTER(RResistances), 'Resistances' ),
              ( ['in'], c_int, 'NodeId' ),
              ( ['in'], c_int, 'MemberID' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(225)], HRESULT, 'AddNodalDomainRelative',
              ( ['in', 'out'], POINTER(RStiffnesses), 'Stiffness' ),
              ( ['in', 'out'], POINTER(RNonLinearity), 'NonLinearity' ),
              ( ['in', 'out'], POINTER(RResistances), 'Resistances' ),
              ( ['in'], c_int, 'NodeId' ),
              ( ['in'], c_int, 'MemberID' ),
              ( ['in'], c_int, 'DomainId1' ),
              ( ['in'], c_int, 'DomainId2' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(226)], HRESULT, 'AddNodalReferenceRelative',
              ( ['in', 'out'], POINTER(RStiffnesses), 'Stiffness' ),
              ( ['in', 'out'], POINTER(RNonLinearity), 'NonLinearity' ),
              ( ['in', 'out'], POINTER(RResistances), 'Resistances' ),
              ( ['in'], c_int, 'NodeId' ),
              ( ['in'], c_int, 'MemberID' ),
              ( ['in'], c_int, 'ReferenceId' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(227)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(228)], HRESULT, 'DeleteSelected',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(229)], HRESULT, 'GetTrMatrix',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RMatrix3x3), 'TrMatrix' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(230)], HRESULT, 'GetSelectedItemIds',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'ItemIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(231)], HRESULT, 'RenameSelected',
              ( ['in'], c_int, 'NewBase' ),
              ( ['in'], BSTR, 'FormatStr' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(232)], HRESULT, 'GetNodalSupportID',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(233)], HRESULT, 'SelectAll',
              ( ['in'], ELongBoolean, 'Select' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(234)], HRESULT, 'SetStiffnesses',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RStiffnesses), 'Stiffness' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(235)], HRESULT, 'SetNonLinearity',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RNonLinearity), 'NonLinearity' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(236)], HRESULT, 'SetResistances',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RResistances), 'Resistances' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(237)], HRESULT, 'GetFootingParams',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RPadFootingParams), 'FootingParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(239)], HRESULT, 'GetFootingParams_V153',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RPadFootingParams_V153), 'FootingParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(240)], HRESULT, 'AddNodalGlobal_V153',
              ( ['in', 'out'], POINTER(RNodalSupportSpringParams), 'NodalSupportSpringParams' ),
              ( ['in'], c_int, 'NodeId' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(241)], HRESULT, 'AddNodalMemberRelative_V153',
              ( ['in', 'out'], POINTER(RNodalSupportSpringParams), 'NodalSupportSpringParams' ),
              ( ['in'], c_int, 'NodeId' ),
              ( ['in'], c_int, 'MemberID' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(242)], HRESULT, 'AddNodalDomainRelative_V153',
              ( ['in', 'out'], POINTER(RNodalSupportSpringParams), 'NodalSupportSpringParams' ),
              ( ['in'], c_int, 'NodeId' ),
              ( ['in'], c_int, 'MemberID' ),
              ( ['in'], c_int, 'SurfaceId1' ),
              ( ['in'], c_int, 'SurfaceId2' ),
              ( ['in'], c_int, 'DomainId1' ),
              ( ['in'], c_int, 'DomainId2' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(243)], HRESULT, 'AddNodalReference_V153',
              ( ['in', 'out'], POINTER(RNodalSupportSpringParams), 'NodalSupportSpringParams' ),
              ( ['in'], c_int, 'NodeId' ),
              ( ['in'], c_int, 'ReferenceId' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(244)], HRESULT, 'AddNodalLocal_V153',
              ( ['in', 'out'], POINTER(RNodalSupportSpringParams), 'NodalSupportSpringParams' ),
              ( ['in'], c_int, 'NodeId' ),
              ( ['in'], c_int, 'ReferenceIdx' ),
              ( ['in'], c_int, 'ReferenceIdz' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(245), 'propget'], HRESULT, 'SpringParams',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(RNodalSupportSpringParams), 'Value' )),
    COMMETHOD([dispid(245), 'propput'], HRESULT, 'SpringParams',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RNodalSupportSpringParams), 'Value' )),
    COMMETHOD([dispid(246)], HRESULT, 'AddIsolator',
              ( ['in', 'out'], POINTER(RNodalSupportSpringParams), 'NodalSupportSpringParams' ),
              ( ['in'], c_int, 'NodeId' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(247)], HRESULT, 'BulkAdd',
              ( ['in'], _midlSAFEARRAY(RBulkNodalSupportSpringParams), 'NodalSupports' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'Indexes' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMNodesSupports implementation
##class IAxisVMNodesSupports_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def DomainId1(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def DomainId2(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def HasStiffnessCalcParams(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def HasFooting(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def FootingType(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def IndexOfUID(self, UID):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def LineId(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Name(self, Index):
##        '-no docstring-'
##        #return Name
##
##    @property
##    def NodeId(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def ReferenceId(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def SelCount(self):
##        '-no docstring-'
##        #return Value
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    Selected = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SupportType(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def SurfaceId1(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def SurfaceId2(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def UID(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def GetStiffnesses(self, Index):
##        '-no docstring-'
##        #return Stiffness, Value
##
##    def GetNonLinearity(self, Index):
##        '-no docstring-'
##        #return NonLinearity, Value
##
##    def GetResistances(self, Index):
##        '-no docstring-'
##        #return Resistances, Value
##
##    def GetStiffnessCalcParams(self, Index):
##        '-no docstring-'
##        #return StiffnessParams, Value
##
##    def SetStiffnessCalcParams(self, Index):
##        '-no docstring-'
##        #return StiffnessParams, Value
##
##    def AddNodalGlobal(self, NodeId):
##        '-no docstring-'
##        #return Stiffness, NonLinearity, Resistances, Value
##
##    def AddNodalMemberRelative(self, NodeId, MemberID):
##        '-no docstring-'
##        #return Stiffness, NonLinearity, Resistances, Value
##
##    def AddNodalDomainRelative(self, NodeId, MemberID, DomainId1, DomainId2):
##        '-no docstring-'
##        #return Stiffness, NonLinearity, Resistances, Value
##
##    def AddNodalReferenceRelative(self, NodeId, MemberID, ReferenceId):
##        '-no docstring-'
##        #return Stiffness, NonLinearity, Resistances, Value
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def DeleteSelected(self):
##        '-no docstring-'
##        #return Value
##
##    def GetTrMatrix(self, Index):
##        '-no docstring-'
##        #return TrMatrix, Value
##
##    def GetSelectedItemIds(self):
##        '-no docstring-'
##        #return ItemIds, Value
##
##    def RenameSelected(self, NewBase, FormatStr):
##        '-no docstring-'
##        #return Value
##
##    def GetNodalSupportID(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def SelectAll(self, Select):
##        '-no docstring-'
##        #return Value
##
##    def SetStiffnesses(self, Index):
##        '-no docstring-'
##        #return Stiffness, Value
##
##    def SetNonLinearity(self, Index):
##        '-no docstring-'
##        #return NonLinearity, Value
##
##    def SetResistances(self, Index):
##        '-no docstring-'
##        #return Resistances, Value
##
##    def GetFootingParams(self, Index):
##        '-no docstring-'
##        #return FootingParams, Value
##
##    def GetFootingParams_V153(self, Index):
##        '-no docstring-'
##        #return FootingParams, Value
##
##    def AddNodalGlobal_V153(self, NodeId):
##        '-no docstring-'
##        #return NodalSupportSpringParams, ResultValue
##
##    def AddNodalMemberRelative_V153(self, NodeId, MemberID):
##        '-no docstring-'
##        #return NodalSupportSpringParams, ResultValue
##
##    def AddNodalDomainRelative_V153(self, NodeId, MemberID, SurfaceId1, SurfaceId2, DomainId1, DomainId2):
##        '-no docstring-'
##        #return NodalSupportSpringParams, ResultValue
##
##    def AddNodalReference_V153(self, NodeId, ReferenceId):
##        '-no docstring-'
##        #return NodalSupportSpringParams, ResultValue
##
##    def AddNodalLocal_V153(self, NodeId, ReferenceIdx, ReferenceIdz):
##        '-no docstring-'
##        #return NodalSupportSpringParams, ResultValue
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    SpringParams = property(_get, _set, doc = _set.__doc__)
##
##    def AddIsolator(self, NodeId):
##        '-no docstring-'
##        #return NodalSupportSpringParams, ResultValue
##
##    def BulkAdd(self, NodalSupports):
##        '-no docstring-'
##        #return Indexes, ResultValue
##

IAxisVMAttributesEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrCode' )),
]

# values for enumeration 'ECalculatedReinforcementError'
creCOMError = -100001
creLoadCaseIdIndexOutOfBounds = -100002
creLoadCombinationIdIndexOutOfBounds = -100003
creInvalidAnalysisType = -100004
creCombinationTypeNotValidForCurrentNationalDesignCode = -100005
creInvalidCombinationOfLoadCaseAndLoadLevel = -100006
creInvalidCombinationOfLoadCombinationAndLoadLevel = -100007
ECalculatedReinforcementError = c_int # enum
IAxisVMLoadCombinationsEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Cleared'),
    DISPMETHOD([dispid(202)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]
IAxisVMRebarSteelGradesEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Cleared'),
    DISPMETHOD([dispid(202)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]
class RStressPoint(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{A1F74536-08A2-420A-9BDF-EB050AE3F873}')
class RStressPointParams(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{A4B8F50F-8FDB-4FE6-9826-7AEA50648832}')
IAxisVMCrossSection._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(201), 'propput'], HRESULT, 'Name',
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'CrossSectionShape',
              ( ['out', 'retval'], POINTER(ECrossSectionShape), 'Value' )),
    COMMETHOD([dispid(202), 'propput'], HRESULT, 'CrossSectionShape',
              ( ['in'], ECrossSectionShape, 'Value' )),
    COMMETHOD([dispid(203), 'propget'], HRESULT, 'Process',
              ( ['out', 'retval'], POINTER(ECrossSectionProcess), 'Value' )),
    COMMETHOD([dispid(203), 'propput'], HRESULT, 'Process',
              ( ['in'], ECrossSectionProcess, 'Value' )),
    COMMETHOD([dispid(204), 'propget'], HRESULT, 'StressPointCount',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(206), 'propget'], HRESULT, 'aX',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(206), 'propput'], HRESULT, 'aX',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(207), 'propget'], HRESULT, 'aY',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(207), 'propput'], HRESULT, 'aY',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(208), 'propget'], HRESULT, 'aZ',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(208), 'propput'], HRESULT, 'aZ',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(209), 'propget'], HRESULT, 'Ix',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(209), 'propput'], HRESULT, 'Ix',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(210), 'propget'], HRESULT, 'Iy',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(210), 'propput'], HRESULT, 'Iy',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(211), 'propget'], HRESULT, 'Iz',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(211), 'propput'], HRESULT, 'Iz',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(212), 'propget'], HRESULT, 'Hy',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(212), 'propput'], HRESULT, 'Hy',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(213), 'propget'], HRESULT, 'Hz',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(213), 'propput'], HRESULT, 'Hz',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(216), 'propget'], HRESULT, 'tw',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(216), 'propput'], HRESULT, 'tw',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(217), 'propget'], HRESULT, 'tf',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(217), 'propput'], HRESULT, 'tf',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(218), 'propget'], HRESULT, 'Iw',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(218), 'propput'], HRESULT, 'Iw',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(219), 'propget'], HRESULT, 'Iyz',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(219), 'propput'], HRESULT, 'Iyz',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(220), 'propget'], HRESULT, 'Ys',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(220), 'propput'], HRESULT, 'Ys',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(221), 'propget'], HRESULT, 'Zs',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(221), 'propput'], HRESULT, 'Zs',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(222), 'propget'], HRESULT, 'W1t',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(222), 'propput'], HRESULT, 'W1t',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(223), 'propget'], HRESULT, 'W1b',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(223), 'propput'], HRESULT, 'W1b',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(224), 'propget'], HRESULT, 'W2t',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(224), 'propput'], HRESULT, 'W2t',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(225), 'propget'], HRESULT, 'W2b',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(225), 'propput'], HRESULT, 'W2b',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(226), 'propget'], HRESULT, 'W1pl',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(226), 'propput'], HRESULT, 'W1pl',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(227), 'propget'], HRESULT, 'W2pl',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(227), 'propput'], HRESULT, 'W2pl',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(228), 'propget'], HRESULT, 'r1',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(228), 'propput'], HRESULT, 'r1',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(229), 'propget'], HRESULT, 'r2',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(229), 'propput'], HRESULT, 'r2',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(230), 'propget'], HRESULT, 'r3',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(230), 'propput'], HRESULT, 'r3',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(231), 'propget'], HRESULT, 'b2',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(231), 'propput'], HRESULT, 'b2',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(232), 'propget'], HRESULT, 'h2',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(232), 'propput'], HRESULT, 'h2',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(233), 'propget'], HRESULT, 'tw2',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(233), 'propput'], HRESULT, 'tw2',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(234), 'propget'], HRESULT, 'tf2',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(234), 'propput'], HRESULT, 'tf2',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(235), 'propget'], HRESULT, 'a',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(235), 'propput'], HRESULT, 'a',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(236), 'propget'], HRESULT, 'b1',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(236), 'propput'], HRESULT, 'b1',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(237), 'propget'], HRESULT, 'N',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(237), 'propput'], HRESULT, 'N',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(238), 'propget'], HRESULT, 'Yg',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(238), 'propput'], HRESULT, 'Yg',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(239), 'propget'], HRESULT, 'Zg',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(239), 'propput'], HRESULT, 'Zg',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(240), 'propget'], HRESULT, 'Alpha',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(241), 'propget'], HRESULT, 'Mirrored',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(242), 'propget'], HRESULT, 'OuterPerimeter',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(243), 'propget'], HRESULT, 'InnerPerimeter',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(244), 'propget'], HRESULT, 'I1',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(245), 'propget'], HRESULT, 'I2',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(246), 'propget'], HRESULT, 'Ialpha',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(247), 'propget'], HRESULT, 'ShapePolygonList',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMPolygon2dList)), 'Value' )),
    COMMETHOD([dispid(248)], HRESULT, 'AddStressPoint',
              ( ['in', 'out'], POINTER(RStressPoint), 'Point' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(249)], HRESULT, 'DeleteStressPoint',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(250)], HRESULT, 'Move',
              ( ['in'], c_double, 'dy' ),
              ( ['in'], c_double, 'dz' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(251)], HRESULT, 'Rotate',
              ( ['in'], c_double, 'oy' ),
              ( ['in'], c_double, 'oz' ),
              ( ['in'], c_double, 'Alfa' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(252)], HRESULT, 'Mirror',
              ( ['in'], c_double, 'y1' ),
              ( ['in'], c_double, 'z1' ),
              ( ['in'], c_double, 'y2' ),
              ( ['in'], c_double, 'z2' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(214), 'propget'], HRESULT, 'b',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(214), 'propput'], HRESULT, 'b',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(215), 'propget'], HRESULT, 'h',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(215), 'propput'], HRESULT, 'h',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(253)], HRESULT, 'VerifyProperties',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(254)], HRESULT, 'GetStressPoint',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RStressPoint), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(255)], HRESULT, 'SetStressPoint',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RStressPoint), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(256)], HRESULT, 'GetStressPointParams',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RStressPointParams), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(257)], HRESULT, 'SetStressPointParams',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RStressPointParams), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(258)], HRESULT, 'GetUserParams',
              ( ['in', 'out'], POINTER(RCrossSectionUserParams), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(259)], HRESULT, 'SetUserParams',
              ( ['in', 'out'], POINTER(RCrossSectionUserParams), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(260)], HRESULT, 'GetUserParamsAsArray',
              ( ['out'], POINTER(c_int), 'lParam' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(261)], HRESULT, 'SetUserParamsAsArray',
              ( ['in'], c_int, 'lParam' ),
              ( ['in'], _midlSAFEARRAY(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(262)], HRESULT, 'GetUserParamsAsByteArray',
              ( ['out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(263)], HRESULT, 'SetUserParamsAsByteArray',
              ( ['in'], _midlSAFEARRAY(c_ubyte), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(264), 'propget'], HRESULT, 'Yg_Tekla',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(264), 'propput'], HRESULT, 'Yg_Tekla',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(265), 'propget'], HRESULT, 'Zg_Tekla',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(265), 'propput'], HRESULT, 'Zg_Tekla',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(266)], HRESULT, 'SetUserParamsAsArray_vb',
              ( ['in'], c_int, 'lParam' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(267)], HRESULT, 'SetUserParamsAsByteArray_vb',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(268), 'propget'], HRESULT, 'UID',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(269), 'propget'], HRESULT, 'CrossSectionShapeEx',
              ( ['out', 'retval'], POINTER(ECrossSectionShapeEx), 'Value' )),
    COMMETHOD([dispid(269), 'propput'], HRESULT, 'CrossSectionShapeEx',
              ( ['in'], ECrossSectionShapeEx, 'Value' )),
    COMMETHOD([dispid(270), 'propget'], HRESULT, 'DoubleWedgedI',
              ( ['out', 'retval'], POINTER(RDoubleWedgedI), 'Value' )),
    COMMETHOD([dispid(270), 'propput'], HRESULT, 'DoubleWedgedI',
              ( ['in'], RDoubleWedgedI, 'Value' )),
    COMMETHOD([dispid(271), 'propget'], HRESULT, 'CrossSection2IX',
              ( ['out', 'retval'], POINTER(RCrossSection2IX), 'Value' )),
    COMMETHOD([dispid(271), 'propput'], HRESULT, 'CrossSection2IX',
              ( ['in'], RCrossSection2IX, 'Value' )),
    COMMETHOD([dispid(272), 'propget'], HRESULT, 'CrossSectionHSQ',
              ( ['out', 'retval'], POINTER(RCrossSectionHSQ), 'Value' )),
    COMMETHOD([dispid(272), 'propput'], HRESULT, 'CrossSectionHSQ',
              ( ['in'], RCrossSectionHSQ, 'Value' )),
    COMMETHOD([dispid(273), 'propget'], HRESULT, 'CrossSectionHSQA',
              ( ['out', 'retval'], POINTER(RCrossSectionHSQA), 'Value' )),
    COMMETHOD([dispid(273), 'propput'], HRESULT, 'CrossSectionHSQA',
              ( ['in'], RCrossSectionHSQA, 'Value' )),
    COMMETHOD([dispid(274), 'propget'], HRESULT, 'CrossSectionIFB',
              ( ['out', 'retval'], POINTER(RCrossSectionIFB), 'Value' )),
    COMMETHOD([dispid(274), 'propput'], HRESULT, 'CrossSectionIFB',
              ( ['in'], RCrossSectionIFB, 'Value' )),
    COMMETHOD([dispid(275), 'propget'], HRESULT, 'CrossSectionSFB',
              ( ['out', 'retval'], POINTER(RCrossSectionSFB), 'Value' )),
    COMMETHOD([dispid(275), 'propput'], HRESULT, 'CrossSectionSFB',
              ( ['in'], RCrossSectionSFB, 'Value' )),
    COMMETHOD([dispid(276), 'propget'], HRESULT, 'DoubleLClosed',
              ( ['out', 'retval'], POINTER(RDoubleLClosed), 'Value' )),
    COMMETHOD([dispid(276), 'propput'], HRESULT, 'DoubleLClosed',
              ( ['in'], RDoubleLClosed, 'Value' )),
]
################################################################
## code template for IAxisVMCrossSection implementation
##class IAxisVMCrossSection_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    CrossSectionShape = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Process = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def StressPointCount(self):
##        '-no docstring-'
##        #return Value
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    aX = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    aY = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    aZ = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Ix = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Iy = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Iz = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Hy = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Hz = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    tw = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    tf = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Iw = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Iyz = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Ys = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Zs = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    W1t = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    W1b = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    W2t = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    W2b = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    W1pl = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    W2pl = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    r1 = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    r2 = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    r3 = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    b2 = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    h2 = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    tw2 = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    tf2 = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    a = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    b1 = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    N = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Yg = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Zg = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Alpha(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Mirrored(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def OuterPerimeter(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def InnerPerimeter(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def I1(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def I2(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Ialpha(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def ShapePolygonList(self):
##        '-no docstring-'
##        #return Value
##
##    def AddStressPoint(self):
##        '-no docstring-'
##        #return Point, ResultValue
##
##    def DeleteStressPoint(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def Move(self, dy, dz):
##        '-no docstring-'
##        #return ResultValue
##
##    def Rotate(self, oy, oz, Alfa):
##        '-no docstring-'
##        #return ResultValue
##
##    def Mirror(self, y1, z1, y2, z2):
##        '-no docstring-'
##        #return ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    b = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    h = property(_get, _set, doc = _set.__doc__)
##
##    def VerifyProperties(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetStressPoint(self, Index):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetStressPoint(self, Index):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def GetStressPointParams(self, Index):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetStressPointParams(self, Index):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def GetUserParams(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetUserParams(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def GetUserParamsAsArray(self):
##        '-no docstring-'
##        #return lParam, Value, ResultValue
##
##    def SetUserParamsAsArray(self, lParam, Value):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetUserParamsAsByteArray(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetUserParamsAsByteArray(self, Value):
##        '-no docstring-'
##        #return ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Yg_Tekla = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Zg_Tekla = property(_get, _set, doc = _set.__doc__)
##
##    def SetUserParamsAsArray_vb(self, lParam):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetUserParamsAsByteArray_vb(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    @property
##    def UID(self):
##        '-no docstring-'
##        #return Value
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    CrossSectionShapeEx = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    DoubleWedgedI = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    CrossSection2IX = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    CrossSectionHSQ = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    CrossSectionHSQA = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    CrossSectionIFB = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    CrossSectionSFB = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    DoubleLClosed = property(_get, _set, doc = _set.__doc__)
##

RPadFootingDimensions._fields_ = [
    ('UpperThickness', c_double),
    ('LowerThickness', c_double),
    ('UpperCornerA', RPoint2d),
    ('UpperCornerB', RPoint2d),
    ('LowerCornerA', RPoint2d),
    ('LowerCornerB', RPoint2d),
]
assert sizeof(RPadFootingDimensions) == 80, sizeof(RPadFootingDimensions)
assert alignment(RPadFootingDimensions) == 8, alignment(RPadFootingDimensions)
class RRectangularFootingCalced(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{BBF8BCB8-0F76-4E90-B675-610FB92684F3}')
RRectangularFootingCalced._fields_ = [
    ('Calculated', ELongBoolean),
    ('x1', c_double),
    ('x2', c_double),
    ('y1', c_double),
    ('y2', c_double),
    ('dx1', c_double),
    ('dx2', c_double),
    ('dy1', c_double),
    ('dy2', c_double),
]
assert sizeof(RRectangularFootingCalced) == 72, sizeof(RRectangularFootingCalced)
assert alignment(RRectangularFootingCalced) == 8, alignment(RRectangularFootingCalced)
class RDimensionLineParameters(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{1AB8E103-66D4-4DEB-A82A-661E4EACA2A8}')
RDimensionLineParameters._fields_ = [
    ('Orthogonal', ELongBoolean),
    ('Plane', EGlobalWorkplaneType),
    ('OrthoDirection', EAxis),
    ('NodeId1', c_int),
    ('NodeId2', c_int),
    ('LayerID', c_int),
    ('LabelDistance', c_double),
    ('LabelInside', ELongBoolean),
    ('LabelOrientation', EDimensionLabelOrientation),
    ('TickMarkStyle', EDimensionStyle),
    ('DisplayUnit', ELongBoolean),
]
assert sizeof(RDimensionLineParameters) == 48, sizeof(RDimensionLineParameters)
assert alignment(RDimensionLineParameters) == 8, alignment(RDimensionLineParameters)
class RRectangularFootingSpec(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{A8976962-F90A-45B9-9C81-C1B562C43512}')
RRectangularFootingSpec._fields_ = [
    ('FixedX1', ELongBoolean),
    ('FixedX2', ELongBoolean),
    ('x1', c_double),
    ('x2', c_double),
    ('FixedY1', ELongBoolean),
    ('FixedY2', ELongBoolean),
    ('y1', c_double),
    ('y2', c_double),
    ('StepMeasureSource', EPadFootingStepMeasureSource),
    ('dx1', c_double),
    ('dx2', c_double),
    ('dy1', c_double),
    ('dy2', c_double),
]
assert sizeof(RRectangularFootingSpec) == 88, sizeof(RRectangularFootingSpec)
assert alignment(RRectangularFootingSpec) == 8, alignment(RRectangularFootingSpec)
class RRCBeamDesignParameters_MSZ(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{8C1E27E5-FB69-40B8-A137-6FF357C67E17}')
RRCBeamDesignParameters_MSZ._fields_ = [
    ('CrackWidthCheck', ELongBoolean),
    ('MaxCrackWidth_Top', c_double),
    ('MaxCrackWidth_Bottom', c_double),
    ('TakeConcTensileStrength', ELongBoolean),
    ('AutoPsi', ELongBoolean),
    ('Deflection_Beam_L_div', c_double),
    ('Deflection_Cantilever_L_div', c_double),
]
assert sizeof(RRCBeamDesignParameters_MSZ) == 48, sizeof(RRCBeamDesignParameters_MSZ)
assert alignment(RRCBeamDesignParameters_MSZ) == 8, alignment(RRCBeamDesignParameters_MSZ)
class RSpectrumData_EC(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{054ACC99-093E-4CF0-A01B-E6F881DB3A56}')
RSpectrumData_EC._fields_ = [
    ('SubsoilClass', ESubsoilClass),
    ('agr', c_double),
    ('S', c_double),
    ('beta0', c_double),
    ('TB', c_double),
    ('TC', c_double),
    ('TD', c_double),
    ('gammaI', c_double),
    ('qx', c_double),
    ('qy', c_double),
]
assert sizeof(RSpectrumData_EC) == 80, sizeof(RSpectrumData_EC)
assert alignment(RSpectrumData_EC) == 8, alignment(RSpectrumData_EC)
RSpectrumData._fields_ = [
    ('SpectrumData_EC', RSpectrumData_EC),
    ('SpectrumData_ITA', RSpectrumData_ITA),
    ('SpectrumData_SIA', RSpectrumData_SIA),
    ('SpectrumData_STAS', RSpectrumData_STAS),
    ('SpectrumData_DIN', RSpectrumData_DIN),
]
assert sizeof(RSpectrumData) == 360, sizeof(RSpectrumData)
assert alignment(RSpectrumData) == 8, alignment(RSpectrumData)
class RRelease(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{D8007D94-21A3-4CC9-8C71-5FC99C18B236}')
RRelease._fields_ = [
    ('ReleaseType', EReleaseType),
    ('Init', c_double),
    ('Limit', c_double),
    ('FunctionId', c_int),
]
assert sizeof(RRelease) == 32, sizeof(RRelease)
assert alignment(RRelease) == 8, alignment(RRelease)
RLoadSurfaceToBeam._fields_ = [
    ('LoadCaseId', c_int),
    ('DistributionType', EDistributionType),
    ('Px', c_double),
    ('Py', c_double),
    ('Pz', c_double),
]
assert sizeof(RLoadSurfaceToBeam) == 32, sizeof(RLoadSurfaceToBeam)
assert alignment(RLoadSurfaceToBeam) == 8, alignment(RLoadSurfaceToBeam)
class RPlaneTolerance(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{63C1868E-2850-4383-8C8E-7F6576425669}')
class RUnitParameters(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{67A9E4AB-8B75-4A81-8A98-7F7E8BB1BD9B}')
IAxisVMSettings._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'EditingTolerance',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(201), 'propput'], HRESULT, 'EditingTolerance',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'CrossSectionEditingTolerance',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(202), 'propput'], HRESULT, 'CrossSectionEditingTolerance',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(204), 'propget'], HRESULT, 'NationalDesignCode',
              ( ['out', 'retval'], POINTER(ENationalDesignCode), 'Value' )),
    COMMETHOD([dispid(204), 'propput'], HRESULT, 'NationalDesignCode',
              ( ['in'], ENationalDesignCode, 'Value' )),
    COMMETHOD([dispid(205)], HRESULT, 'GetPlaneTolerance',
              ( ['in', 'out'], POINTER(RPlaneTolerance), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'SetPlaneTolerance',
              ( ['in', 'out'], POINTER(RPlaneTolerance), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207), 'propget'], HRESULT, 'ProgramLanguage',
              ( ['out', 'retval'], POINTER(ELanguage), 'Value' )),
    COMMETHOD([dispid(207), 'propput'], HRESULT, 'ProgramLanguage',
              ( ['in'], ELanguage, 'Value' )),
    COMMETHOD([dispid(208), 'propget'], HRESULT, 'FixedMesh',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(208), 'propput'], HRESULT, 'FixedMesh',
              ( ['in'], ELongBoolean, 'Value' )),
    COMMETHOD([dispid(209), 'propget'], HRESULT, 'ReportLanguage',
              ( ['out', 'retval'], POINTER(ELanguage), 'Value' )),
    COMMETHOD([dispid(209), 'propput'], HRESULT, 'ReportLanguage',
              ( ['in'], ELanguage, 'Value' )),
    COMMETHOD([dispid(210)], HRESULT, 'GetGridOptions',
              ( ['in', 'out'], POINTER(RGridOptions), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(211)], HRESULT, 'SetGridOptions',
              ( ['in', 'out'], POINTER(RGridOptions), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(212)], HRESULT, 'GetCursorSnap',
              ( ['in', 'out'], POINTER(RCursorSnap), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(213)], HRESULT, 'SetCursorSnap',
              ( ['in', 'out'], POINTER(RCursorSnap), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(214)], HRESULT, 'GetEditingOptions',
              ( ['in', 'out'], POINTER(REditingOptions), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(215)], HRESULT, 'SetEditingOptions',
              ( ['in', 'out'], POINTER(REditingOptions), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(216)], HRESULT, 'GetTempFolderType',
              ( ['out'], POINTER(ETempFolderType), 'TempFolderType' ),
              ( ['out'], POINTER(BSTR), 'Path' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(217)], HRESULT, 'SetTempFolderType',
              ( ['in'], ETempFolderType, 'TempFolderType' ),
              ( ['in'], BSTR, 'Path' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(218), 'propget'], HRESULT, 'MomentDiagramType',
              ( ['out', 'retval'], POINTER(EMomentDiagramType), 'Value' )),
    COMMETHOD([dispid(218), 'propput'], HRESULT, 'MomentDiagramType',
              ( ['in'], EMomentDiagramType, 'Value' )),
    COMMETHOD([dispid(219), 'propget'], HRESULT, 'BackgroundColour',
              ( ['out', 'retval'], POINTER(EBackgroundColour), 'Value' )),
    COMMETHOD([dispid(219), 'propput'], HRESULT, 'BackgroundColour',
              ( ['in'], EBackgroundColour, 'Value' )),
    COMMETHOD([dispid(220)], HRESULT, 'SetGravity',
              ( ['in', 'out'], POINTER(RPoint3d), 'Direction' ),
              ( ['in'], c_double, 'Acceleration' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(221)], HRESULT, 'GetGravity',
              ( ['in', 'out'], POINTER(RPoint3d), 'Direction' ),
              ( ['out'], POINTER(c_double), 'Acceleration' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(222)], HRESULT, 'EnvironmentClassIsValid',
              ( ['in'], EEnvironmentClass, 'EnvironmentClass' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(223)], HRESULT, 'GetUnitParams_Geometry',
              ( ['in'], EGeometryUnitType, 'UnitType' ),
              ( ['in'], ELongBoolean, 'MathText' ),
              ( ['in'], ELongBoolean, 'Default' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'AvailableUnits' ),
              ( ['in', 'out'], POINTER(RUnitParameters), 'UnitParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(224)], HRESULT, 'GetUnitParams_CrossSection',
              ( ['in'], ECrossSectionUnitType, 'UnitType' ),
              ( ['in'], ELongBoolean, 'MathText' ),
              ( ['in'], ELongBoolean, 'Default' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'AvailableUnits' ),
              ( ['in', 'out'], POINTER(RUnitParameters), 'UnitParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(225)], HRESULT, 'GetUnitParams_Material',
              ( ['in'], EMaterialUnitType, 'UnitType' ),
              ( ['in'], ELongBoolean, 'MathText' ),
              ( ['in'], ELongBoolean, 'Default' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'AvailableUnits' ),
              ( ['in', 'out'], POINTER(RUnitParameters), 'UnitParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(226)], HRESULT, 'GetUnitParams_Properties',
              ( ['in'], EPropertiesUnitType, 'UnitType' ),
              ( ['in'], ELongBoolean, 'MathText' ),
              ( ['in'], ELongBoolean, 'Default' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'AvailableUnits' ),
              ( ['in', 'out'], POINTER(RUnitParameters), 'UnitParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(227)], HRESULT, 'GetUnitParams_Stiffness',
              ( ['in'], EStiffnessUnitType, 'UnitType' ),
              ( ['in'], ELongBoolean, 'MathText' ),
              ( ['in'], ELongBoolean, 'Default' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'AvailableUnits' ),
              ( ['in', 'out'], POINTER(RUnitParameters), 'UnitParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(228)], HRESULT, 'GetUnitParams_Loads',
              ( ['in'], ELoadsUnitType, 'UnitType' ),
              ( ['in'], ELongBoolean, 'MathText' ),
              ( ['in'], ELongBoolean, 'Default' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'AvailableUnits' ),
              ( ['in', 'out'], POINTER(RUnitParameters), 'UnitParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(229)], HRESULT, 'GetUnitParams_Static',
              ( ['in'], EStaticUnitType, 'UnitType' ),
              ( ['in'], ELongBoolean, 'MathText' ),
              ( ['in'], ELongBoolean, 'Default' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'AvailableUnits' ),
              ( ['in', 'out'], POINTER(RUnitParameters), 'UnitParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(230)], HRESULT, 'GetUnitParams_RC_design',
              ( ['in'], ERCDesignUnitType, 'UnitType' ),
              ( ['in'], ELongBoolean, 'MathText' ),
              ( ['in'], ELongBoolean, 'Default' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'AvailableUnits' ),
              ( ['in', 'out'], POINTER(RUnitParameters), 'UnitParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(231)], HRESULT, 'GetUnitParams_Steel_design',
              ( ['in'], ESteelDesignUnitType, 'UnitType' ),
              ( ['in'], ELongBoolean, 'MathText' ),
              ( ['in'], ELongBoolean, 'Default' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'AvailableUnits' ),
              ( ['in', 'out'], POINTER(RUnitParameters), 'UnitParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(232)], HRESULT, 'GetUnitParams_Timber_design',
              ( ['in'], ETimberDesignUnitType, 'UnitType' ),
              ( ['in'], ELongBoolean, 'MathText' ),
              ( ['in'], ELongBoolean, 'Default' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'AvailableUnits' ),
              ( ['in', 'out'], POINTER(RUnitParameters), 'UnitParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(233)], HRESULT, 'GetUnitParams_Dimensioning',
              ( ['in'], EDimensioningUnitType, 'UnitType' ),
              ( ['in'], ELongBoolean, 'MathText' ),
              ( ['in'], ELongBoolean, 'Default' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'AvailableUnits' ),
              ( ['in', 'out'], POINTER(RUnitParameters), 'UnitParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(234), 'propget'], HRESULT, 'StiffnessReductionColumns_A',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(234), 'propput'], HRESULT, 'StiffnessReductionColumns_A',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(235), 'propget'], HRESULT, 'StiffnessReductionColumns_I',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(235), 'propput'], HRESULT, 'StiffnessReductionColumns_I',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(236), 'propget'], HRESULT, 'StiffnessReductionBeams_A',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(236), 'propput'], HRESULT, 'StiffnessReductionBeams_A',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(237), 'propget'], HRESULT, 'StiffnessReductionBeams_I',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(237), 'propput'], HRESULT, 'StiffnessReductionBeams_I',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(238), 'propget'], HRESULT, 'StiffnessReductionOtherMembers_A',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(238), 'propput'], HRESULT, 'StiffnessReductionOtherMembers_A',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(239), 'propget'], HRESULT, 'StiffnessReductionOtherMembers_I',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(239), 'propput'], HRESULT, 'StiffnessReductionOtherMembers_I',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(240), 'propget'], HRESULT, 'StiffnessReductionWalls',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(240), 'propput'], HRESULT, 'StiffnessReductionWalls',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(241), 'propget'], HRESULT, 'StiffnessReductionSlabs',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(241), 'propput'], HRESULT, 'StiffnessReductionSlabs',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(242), 'propget'], HRESULT, 'StiffnessReductionOtherDomains',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(242), 'propput'], HRESULT, 'StiffnessReductionOtherDomains',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(243), 'propget'], HRESULT, 'NL_ConsequenceClass',
              ( ['out', 'retval'], POINTER(ENL_ConsequenceClass), 'Value' )),
    COMMETHOD([dispid(243), 'propput'], HRESULT, 'NL_ConsequenceClass',
              ( ['in'], ENL_ConsequenceClass, 'Value' )),
]
################################################################
## code template for IAxisVMSettings implementation
##class IAxisVMSettings_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    EditingTolerance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    CrossSectionEditingTolerance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    NationalDesignCode = property(_get, _set, doc = _set.__doc__)
##
##    def GetPlaneTolerance(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetPlaneTolerance(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    ProgramLanguage = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    FixedMesh = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    ReportLanguage = property(_get, _set, doc = _set.__doc__)
##
##    def GetGridOptions(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetGridOptions(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def GetCursorSnap(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetCursorSnap(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def GetEditingOptions(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetEditingOptions(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def GetTempFolderType(self):
##        '-no docstring-'
##        #return TempFolderType, Path, ResultValue
##
##    def SetTempFolderType(self, TempFolderType, Path):
##        '-no docstring-'
##        #return ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    MomentDiagramType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    BackgroundColour = property(_get, _set, doc = _set.__doc__)
##
##    def SetGravity(self, Acceleration):
##        '-no docstring-'
##        #return Direction, Value
##
##    def GetGravity(self):
##        '-no docstring-'
##        #return Direction, Acceleration, Value
##
##    def EnvironmentClassIsValid(self, EnvironmentClass):
##        '-no docstring-'
##        #return Value
##
##    def GetUnitParams_Geometry(self, UnitType, MathText, Default):
##        '-no docstring-'
##        #return AvailableUnits, UnitParameters, Value
##
##    def GetUnitParams_CrossSection(self, UnitType, MathText, Default):
##        '-no docstring-'
##        #return AvailableUnits, UnitParameters, Value
##
##    def GetUnitParams_Material(self, UnitType, MathText, Default):
##        '-no docstring-'
##        #return AvailableUnits, UnitParameters, Value
##
##    def GetUnitParams_Properties(self, UnitType, MathText, Default):
##        '-no docstring-'
##        #return AvailableUnits, UnitParameters, Value
##
##    def GetUnitParams_Stiffness(self, UnitType, MathText, Default):
##        '-no docstring-'
##        #return AvailableUnits, UnitParameters, Value
##
##    def GetUnitParams_Loads(self, UnitType, MathText, Default):
##        '-no docstring-'
##        #return AvailableUnits, UnitParameters, Value
##
##    def GetUnitParams_Static(self, UnitType, MathText, Default):
##        '-no docstring-'
##        #return AvailableUnits, UnitParameters, Value
##
##    def GetUnitParams_RC_design(self, UnitType, MathText, Default):
##        '-no docstring-'
##        #return AvailableUnits, UnitParameters, Value
##
##    def GetUnitParams_Steel_design(self, UnitType, MathText, Default):
##        '-no docstring-'
##        #return AvailableUnits, UnitParameters, Value
##
##    def GetUnitParams_Timber_design(self, UnitType, MathText, Default):
##        '-no docstring-'
##        #return AvailableUnits, UnitParameters, Value
##
##    def GetUnitParams_Dimensioning(self, UnitType, MathText, Default):
##        '-no docstring-'
##        #return AvailableUnits, UnitParameters, Value
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    StiffnessReductionColumns_A = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    StiffnessReductionColumns_I = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    StiffnessReductionBeams_A = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    StiffnessReductionBeams_I = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    StiffnessReductionOtherMembers_A = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    StiffnessReductionOtherMembers_I = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    StiffnessReductionWalls = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    StiffnessReductionSlabs = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    StiffnessReductionOtherDomains = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    NL_ConsequenceClass = property(_get, _set, doc = _set.__doc__)
##

IAxisVMReinforcementCheck._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202)], HRESULT, 'GetReinforcementChecksByLoadCaseId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RReinforcementCheck), 'ReinforcementCheck' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(203)], HRESULT, 'GetReinforcementChecksByLoadCombinationId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RReinforcementCheck), 'ReinforcementCheck' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'GetEnvelopeReinforcementChecks',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RReinforcementCheck), 'ReinforcementCheck' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205)], HRESULT, 'GetCriticalReinforcementChecks',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RReinforcementCheck), 'ReinforcementCheck' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'GetAllReinforcementChecksByLoadCaseId',
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RReinforcementCheck)), 'ReinforcementChecks' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'GetAllReinforcementChecksByLoadCombinationId',
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RReinforcementCheck)), 'ReinforcementChecks' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208)], HRESULT, 'GetAllEnvelopeReinforcementChecks',
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RReinforcementCheck)), 'ReinforcementChecks' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209)], HRESULT, 'GetAllCriticalReinforcementChecks',
              ( ['in'], EMinMaxType, 'MinMaxType' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RReinforcementCheck)), 'ReinforcementChecks' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(210), 'propget'], HRESULT, 'AnalysisType',
              ( ['out', 'retval'], POINTER(EAnalysisType), 'Value' )),
    COMMETHOD([dispid(210), 'propput'], HRESULT, 'AnalysisType',
              ( ['in'], EAnalysisType, 'Value' )),
    COMMETHOD([dispid(211), 'propget'], HRESULT, 'LoadCaseId',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(211), 'propput'], HRESULT, 'LoadCaseId',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(212), 'propget'], HRESULT, 'LoadCombinationId',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(212), 'propput'], HRESULT, 'LoadCombinationId',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(213), 'propget'], HRESULT, 'MinMaxType',
              ( ['out', 'retval'], POINTER(EMinMaxType), 'Value' )),
    COMMETHOD([dispid(213), 'propput'], HRESULT, 'MinMaxType',
              ( ['in'], EMinMaxType, 'Value' )),
    COMMETHOD([dispid(214), 'propget'], HRESULT, 'CombinationType',
              ( ['out', 'retval'], POINTER(ECombinationType), 'Value' )),
    COMMETHOD([dispid(214), 'propput'], HRESULT, 'CombinationType',
              ( ['in'], ECombinationType, 'Value' )),
    COMMETHOD([dispid(215), 'propget'], HRESULT, 'LoadLevel',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(215), 'propput'], HRESULT, 'LoadLevel',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(216)], HRESULT, 'ReinforcementChecksByLoadCaseId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in', 'out'], POINTER(RReinforcementCheck), 'ReinforcementCheck' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(217)], HRESULT, 'ReinforcementChecksByLoadCombinationId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in', 'out'], POINTER(RReinforcementCheck), 'ReinforcementCheck' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(218)], HRESULT, 'EnvelopeReinforcementChecks',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in', 'out'], POINTER(RReinforcementCheck), 'ReinforcementCheck' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(219)], HRESULT, 'CriticalReinforcementChecks',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in', 'out'], POINTER(RReinforcementCheck), 'ReinforcementCheck' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(220)], HRESULT, 'AllReinforcementChecksByLoadCaseId',
              ( ['out'], POINTER(_midlSAFEARRAY(RReinforcementCheck)), 'ReinforcementChecks' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(221)], HRESULT, 'AllReinforcementChecksByLoadCombinationId',
              ( ['out'], POINTER(_midlSAFEARRAY(RReinforcementCheck)), 'ReinforcementChecks' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(222)], HRESULT, 'AllEnvelopeReinforcementChecks',
              ( ['out'], POINTER(_midlSAFEARRAY(RReinforcementCheck)), 'ReinforcementChecks' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(223)], HRESULT, 'AllCriticalReinforcementChecks',
              ( ['out'], POINTER(_midlSAFEARRAY(RReinforcementCheck)), 'ReinforcementChecks' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(224), 'propget'], HRESULT, 'EnvelopeUID',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(224), 'propput'], HRESULT, 'EnvelopeUID',
              ( ['in'], c_int, 'Value' )),
]
################################################################
## code template for IAxisVMReinforcementCheck implementation
##class IAxisVMReinforcementCheck_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def GetReinforcementChecksByLoadCaseId(self, SurfaceId, LoadCaseId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return ReinforcementCheck, Combination, ResultValue
##
##    def GetReinforcementChecksByLoadCombinationId(self, SurfaceId, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return ReinforcementCheck, Combination, ResultValue
##
##    def GetEnvelopeReinforcementChecks(self, SurfaceId, MinMaxType, AnalysisType):
##        '-no docstring-'
##        #return ReinforcementCheck, ResultValue
##
##    def GetCriticalReinforcementChecks(self, SurfaceId, MinMaxType, CombinationType, AnalysisType):
##        '-no docstring-'
##        #return ReinforcementCheck, ResultValue
##
##    def GetAllReinforcementChecksByLoadCaseId(self, LoadCaseId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return ReinforcementChecks, Combinations, ResultValue
##
##    def GetAllReinforcementChecksByLoadCombinationId(self, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return ReinforcementChecks, Combinations, ResultValue
##
##    def GetAllEnvelopeReinforcementChecks(self, MinMaxType, AnalysisType):
##        '-no docstring-'
##        #return ReinforcementChecks, ResultValue
##
##    def GetAllCriticalReinforcementChecks(self, MinMaxType, CombinationType, AnalysisType):
##        '-no docstring-'
##        #return ReinforcementChecks, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    AnalysisType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LoadCaseId = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LoadCombinationId = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    MinMaxType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    CombinationType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LoadLevel = property(_get, _set, doc = _set.__doc__)
##
##    def ReinforcementChecksByLoadCaseId(self, SurfaceId):
##        '-no docstring-'
##        #return ReinforcementCheck, Combination, ResultValue
##
##    def ReinforcementChecksByLoadCombinationId(self, SurfaceId):
##        '-no docstring-'
##        #return ReinforcementCheck, Combination, ResultValue
##
##    def EnvelopeReinforcementChecks(self, SurfaceId):
##        '-no docstring-'
##        #return ReinforcementCheck, ResultValue
##
##    def CriticalReinforcementChecks(self, SurfaceId):
##        '-no docstring-'
##        #return ReinforcementCheck, ResultValue
##
##    def AllReinforcementChecksByLoadCaseId(self):
##        '-no docstring-'
##        #return ReinforcementChecks, Combinations, ResultValue
##
##    def AllReinforcementChecksByLoadCombinationId(self):
##        '-no docstring-'
##        #return ReinforcementChecks, Combinations, ResultValue
##
##    def AllEnvelopeReinforcementChecks(self):
##        '-no docstring-'
##        #return ReinforcementChecks, ResultValue
##
##    def AllCriticalReinforcementChecks(self):
##        '-no docstring-'
##        #return ReinforcementChecks, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    EnvelopeUID = property(_get, _set, doc = _set.__doc__)
##

class RMovingLoadOnDomainItem(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{8DA51964-1273-4D04-9947-63743DDD0F13}')
IAxisVMMovingLoadOnDomain._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'ItemCount',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202)], HRESULT, 'AddItem',
              ( ['in', 'out'], POINTER(RMovingLoadOnDomainItem), 'MovingLoadOnDomainItem' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(203)], HRESULT, 'DeleteItem',
              ( ['in'], c_int, 'ItemIndex' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'GetItem',
              ( ['in'], c_int, 'ItemIndex' ),
              ( ['in', 'out'], POINTER(RMovingLoadOnDomainItem), 'MovingLoadOnDomainItem' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205)], HRESULT, 'SetItem',
              ( ['in'], c_int, 'ItemIndex' ),
              ( ['in', 'out'], POINTER(RMovingLoadOnDomainItem), 'MovingLoadOnDomainItem' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'GetPath',
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Path' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'NormV' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'SetPath',
              ( ['in'], _midlSAFEARRAY(RPoint3d), 'Path' ),
              ( ['in'], _midlSAFEARRAY(RPoint3d), 'NormV' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208), 'propget'], HRESULT, 'Steps',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(208), 'propput'], HRESULT, 'Steps',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(209), 'propget'], HRESULT, 'RunningMode',
              ( ['out', 'retval'], POINTER(ERunningMode), 'Value' )),
    COMMETHOD([dispid(209), 'propput'], HRESULT, 'RunningMode',
              ( ['in'], ERunningMode, 'Value' )),
    COMMETHOD([dispid(210), 'propget'], HRESULT, 'StructureMode',
              ( ['out', 'retval'], POINTER(EStructureMode), 'Value' )),
    COMMETHOD([dispid(210), 'propput'], HRESULT, 'StructureMode',
              ( ['in'], EStructureMode, 'Value' )),
    COMMETHOD([dispid(211), 'propget'], HRESULT, 'ConcentratedLoad',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(211), 'propput'], HRESULT, 'ConcentratedLoad',
              ( ['in'], ELongBoolean, 'Value' )),
    COMMETHOD([dispid(212), 'propget'], HRESULT, 'LoadCaseId',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(212), 'propput'], HRESULT, 'LoadCaseId',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(213)], HRESULT, 'Clear',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(214)], HRESULT, 'SetPath_vb',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Path' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'NormV' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMMovingLoadOnDomain implementation
##class IAxisVMMovingLoadOnDomain_Impl(object):
##    @property
##    def ItemCount(self):
##        '-no docstring-'
##        #return Value
##
##    def AddItem(self):
##        '-no docstring-'
##        #return MovingLoadOnDomainItem, ResultValue
##
##    def DeleteItem(self, ItemIndex):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetItem(self, ItemIndex):
##        '-no docstring-'
##        #return MovingLoadOnDomainItem, ResultValue
##
##    def SetItem(self, ItemIndex):
##        '-no docstring-'
##        #return MovingLoadOnDomainItem, ResultValue
##
##    def GetPath(self):
##        '-no docstring-'
##        #return Path, NormV, ResultValue
##
##    def SetPath(self, Path, NormV):
##        '-no docstring-'
##        #return ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Steps = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    RunningMode = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    StructureMode = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    ConcentratedLoad = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LoadCaseId = property(_get, _set, doc = _set.__doc__)
##
##    def Clear(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def SetPath_vb(self):
##        '-no docstring-'
##        #return Path, NormV, ResultValue
##

IAxisVMLoadGroups._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(AxisVMLoadGroup)), 'Value' )),
    COMMETHOD([dispid(203)], HRESULT, 'Add',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], ELoadGroupType, 'LoadGroupType' ),
              ( ['in'], ELongBoolean, 'SimultExc' ),
              ( ['in'], EGroupCombinationType, 'CombinationType' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMLoadGroups implementation
##class IAxisVMLoadGroups_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Item(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def Add(self, Name, LoadGroupType, SimultExc, CombinationType):
##        '-no docstring-'
##        #return ResultValue
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return ResultValue
##


# values for enumeration 'ESpectrumError'
seLoadingFailed = -100001
seSavingFailed = -100002
seSpectrumDataNotAvailable = -100003
seSpectrumDataNotParametric = -100004
seInvalidNationalDesignCode = -100005
seFunctionPointsEmpty = -100006
seSpectrumNotValid = -100007
seNonParametricSpectrumIsNotAllowed = -100008
ESpectrumError = c_int # enum
RLLLinkElementRec._fields_ = [
    ('MasterLine', c_int),
    ('SlaveLine', c_int),
    ('MasterStartLink', c_int),
    ('MasterEndLink', c_int),
    ('PositionType', EBeamRibDistributionType),
    ('Position', c_double),
    ('Stiffnesses', RStiffnesses),
    ('Resistances', RResistances),
    ('NonLinearity', RNonLinearity),
]
assert sizeof(RLLLinkElementRec) == 152, sizeof(RLLLinkElementRec)
assert alignment(RLLLinkElementRec) == 8, alignment(RLLLinkElementRec)
RStressPointParams._fields_ = [
    ('Tx_y', c_double),
    ('Tx_z', c_double),
    ('Vy_y', c_double),
    ('Vy_z', c_double),
    ('Vz_y', c_double),
    ('Vz_z', c_double),
    ('w', c_double),
    ('Tw_y', c_double),
    ('Tw_z', c_double),
]
assert sizeof(RStressPointParams) == 72, sizeof(RStressPointParams)
assert alignment(RStressPointParams) == 8, alignment(RStressPointParams)

# values for enumeration 'ERigidBodiesError'
rbeLineListIsEmpty = -100001
rbeNoLinesAreSelected = -100002
rbeLineIndexOutOfBounds = -100003
ERigidBodiesError = c_int # enum

# values for enumeration 'ENodesSupportsError'
nsePropertyNotValidForThisType = -100001
nseNodeIndexOutOfBounds = -100002
nseMemberIndexOutOfBounds = -100003
nseReferenceIndexOutOfBounds = -100004
nseInvalidType = -100005
nsePadFootingNotDefined = -100006
nseInvalidMemberAndNodeCombination = -100007
nseStiffnessCalcParamsNotDefined = -100008
nseMaterialIndexOutOfBounds = -100009
nseCrossSectionIndexOutOfBounds = -100010
ENodesSupportsError = c_int # enum
class RLoadDomainLine(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{32247C6F-323A-498C-9E81-A1F572D05778}')
RLoadDomainLine._fields_ = [
    ('px1', c_double),
    ('px2', c_double),
    ('py1', c_double),
    ('py2', c_double),
    ('pz1', c_double),
    ('pz2', c_double),
    ('pm1', c_double),
    ('pm2', c_double),
    ('DistributionType', EDistributionType),
    ('SegmentId', c_int),
    ('GlbStartx', c_double),
    ('GlbStarty', c_double),
    ('GlbStartz', c_double),
    ('GlbEndx', c_double),
    ('GlbEndy', c_double),
    ('GlbEndz', c_double),
]
assert sizeof(RLoadDomainLine) == 120, sizeof(RLoadDomainLine)
assert alignment(RLoadDomainLine) == 8, alignment(RLoadDomainLine)
class RRCBeamDesignParameters_STAS(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{4FE6202D-6495-4C0D-9CA2-D385F271BF14}')
RRCBeamDesignParameters_STAS._fields_ = [
    ('mbc', c_double),
    ('mbt', c_double),
    ('ksi0', c_double),
    ('SeismicZone', ERCBeam_ECRO_STAS_SeismicZone),
    ('fse', c_double),
    ('PlasticHinges', RRCBeamPlasticHinges),
]
assert sizeof(RRCBeamDesignParameters_STAS) == 160, sizeof(RRCBeamDesignParameters_STAS)
assert alignment(RRCBeamDesignParameters_STAS) == 8, alignment(RRCBeamDesignParameters_STAS)
RPadFootingParams._fields_ = [
    ('HeightTop', c_double),
    ('HeightBottom', c_double),
    ('BaseThickness', c_double),
    ('bx', c_double),
    ('x1', c_double),
    ('x2', c_double),
    ('by', c_double),
    ('y1', c_double),
    ('y2', c_double),
    ('dy1', c_double),
    ('dy2', c_double),
    ('MaterialId', c_int),
]
assert sizeof(RPadFootingParams) == 96, sizeof(RPadFootingParams)
assert alignment(RPadFootingParams) == 8, alignment(RPadFootingParams)
class RRectanularFootingCalced(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{A569EB7A-C07A-4526-AD1C-E686A73875F6}')
RRectanularFootingCalced._fields_ = [
    ('Calculated', ELongBoolean),
    ('x1', c_double),
    ('x2', c_double),
    ('y1', c_double),
    ('y2', c_double),
    ('StepMeasureSource', EPadFootingStepMeasureSource),
    ('dx1', c_double),
    ('dx2', c_double),
    ('dy1', c_double),
    ('dy2', c_double),
]
assert sizeof(RRectanularFootingCalced) == 80, sizeof(RRectanularFootingCalced)
assert alignment(RRectanularFootingCalced) == 8, alignment(RRectanularFootingCalced)
IAxisVMEnvelopesEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]

# values for enumeration 'ECalculationError'
ceSE2moduleNotAvailable = -100001
ceNLpackageNotAvailable = -100002
ceDYNmoduleNotAvailable = -100003
ceStoryIDOutOfBounds = -100004
ECalculationError = c_int # enum
RNNLinkElementRec._fields_ = [
    ('LineId', c_int),
    ('SystemGLR', ESystem),
    ('MasterPoint', c_int),
    ('RefZId', c_int),
    ('PositionType', EBeamRibDistributionType),
    ('Position', c_double),
    ('Stiffnesses', RStiffnesses),
    ('Resistances', RResistances),
    ('NonLinearity', RNonLinearity),
]
assert sizeof(RNNLinkElementRec) == 152, sizeof(RNNLinkElementRec)
assert alignment(RNNLinkElementRec) == 8, alignment(RNNLinkElementRec)
RLinkElementRec._fields_ = [
    ('NNLinkElementRec', RNNLinkElementRec),
    ('LLLinkElementRec', RLLLinkElementRec),
]
assert sizeof(RLinkElementRec) == 304, sizeof(RLinkElementRec)
assert alignment(RLinkElementRec) == 8, alignment(RLinkElementRec)
RPadFootingParams_V153._fields_ = [
    ('FootingType', EPadFootingType2),
    ('VerticalType', EPadFootingType),
    ('MaterialId', c_int),
    ('GroundToBottom', c_double),
    ('HeightMain', c_double),
    ('HeightStep', c_double),
    ('BlindThickness', c_double),
    ('RectangularFootingSpec', RRectangularFootingSpec),
    ('RectangularFootingCalced', RRectanularFootingCalced),
    ('CircularFootingSpec', RCircularFootingSpec),
    ('CircularFootingCalced', RCircularFootingCalced),
]
assert sizeof(RPadFootingParams_V153) == 280, sizeof(RPadFootingParams_V153)
assert alignment(RPadFootingParams_V153) == 8, alignment(RPadFootingParams_V153)
IAxisVMCustomParts._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202)], HRESULT, 'GetPart',
              ( ['in'], c_int, 'PartId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPartItem)), 'PartItems' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(203)], HRESULT, 'DeletePart',
              ( ['in'], c_int, 'PartId' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(204)], HRESULT, 'ModifyPartFromSelectedItems',
              ( ['in'], c_int, 'PartId' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(205)], HRESULT, 'ModifyPart',
              ( ['in'], c_int, 'PartId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPartItem)), 'PartItems' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(206)], HRESULT, 'SelectPartItems',
              ( ['in'], c_int, 'PartId' ),
              ( ['in'], ESelectMode, 'SelectMode' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(207), 'propget'], HRESULT, 'Name',
              ( ['in'], c_int, 'PartId' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(207), 'propput'], HRESULT, 'Name',
              ( ['in'], c_int, 'PartId' ),
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(208), 'propget'], HRESULT, 'PartUID',
              ( ['in'], c_int, 'PartId' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(209)], HRESULT, 'AddPartItemsFromSelectedItemsToPart',
              ( ['in'], c_int, 'PartId' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(210)], HRESULT, 'AddPartItemsToPart',
              ( ['in'], c_int, 'PartId' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPartItem)), 'PartItems' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(211), 'propget'], HRESULT, 'RootFolder',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMCustomPartFolder)), 'Value' )),
    COMMETHOD([dispid(212)], HRESULT, 'GetCustomPartFolderByPath',
              ( ['in'], BSTR, 'FullPath' ),
              ( ['out', 'retval'], POINTER(POINTER(AxisVMCustomPartFolder)), 'Value' )),
    COMMETHOD([dispid(213), 'propget'], HRESULT, 'IsCustomPart',
              ( ['in'], c_int, 'PartUID' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(214), 'propget'], HRESULT, 'Attachments',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMAttachments)), 'Value' )),
    COMMETHOD([dispid(215)], HRESULT, 'GetPartItemsByUID',
              ( ['in'], c_int, 'PartUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPartItem)), 'PartItems' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(216), 'propget'], HRESULT, 'IndexOfUID',
              ( ['in'], c_int, 'PartUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(217), 'propget'], HRESULT, 'FullName',
              ( ['in'], c_int, 'PartId' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
]
################################################################
## code template for IAxisVMCustomParts implementation
##class IAxisVMCustomParts_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def GetPart(self, PartId):
##        '-no docstring-'
##        #return PartItems, Value
##
##    def DeletePart(self, PartId):
##        '-no docstring-'
##        #return Value
##
##    def ModifyPartFromSelectedItems(self, PartId):
##        '-no docstring-'
##        #return Value
##
##    def ModifyPart(self, PartId):
##        '-no docstring-'
##        #return PartItems, Value
##
##    def SelectPartItems(self, PartId, SelectMode):
##        '-no docstring-'
##        #return Value
##
##    def _get(self, PartId):
##        '-no docstring-'
##        #return Value
##    def _set(self, PartId, Value):
##        '-no docstring-'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def PartUID(self, PartId):
##        '-no docstring-'
##        #return Value
##
##    def AddPartItemsFromSelectedItemsToPart(self, PartId):
##        '-no docstring-'
##        #return Value
##
##    def AddPartItemsToPart(self, PartId):
##        '-no docstring-'
##        #return PartItems, Value
##
##    @property
##    def RootFolder(self):
##        '-no docstring-'
##        #return Value
##
##    def GetCustomPartFolderByPath(self, FullPath):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def IsCustomPart(self, PartUID):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Attachments(self):
##        '-no docstring-'
##        #return Value
##
##    def GetPartItemsByUID(self, PartUID):
##        '-no docstring-'
##        #return PartItems, Value
##
##    @property
##    def IndexOfUID(self, PartUID):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def FullName(self, PartId):
##        '-no docstring-'
##        #return Value
##

class RReleases(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{0F9906BA-7643-4702-8BE7-E2C4DDDDB693}')
RReleases._fields_ = [
    ('x', RRelease),
    ('y', RRelease),
    ('z', RRelease),
    ('xx', RRelease),
    ('yy', RRelease),
    ('zz', RRelease),
]
assert sizeof(RReleases) == 192, sizeof(RReleases)
assert alignment(RReleases) == 8, alignment(RReleases)
class RSpectrumData_ECHU(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{88B932AE-A6A9-43DF-B79F-6DC54DCBBC7D}')
RSpectrumData_ECHU._fields_ = [
    ('SubsoilClass', ESubsoilClass),
    ('agr', c_double),
    ('S', c_double),
    ('beta0', c_double),
    ('TB', c_double),
    ('TC', c_double),
    ('TD', c_double),
    ('gammaI', c_double),
    ('qx', c_double),
    ('qy', c_double),
    ('LocalSpectrum', ELongBoolean),
    ('F0', c_double),
]
assert sizeof(RSpectrumData_ECHU) == 96, sizeof(RSpectrumData_ECHU)
assert alignment(RSpectrumData_ECHU) == 8, alignment(RSpectrumData_ECHU)
class RSpectrumData_ECNL(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{DDB42C33-4A35-4BE0-9D06-099D2BF20C4C}')
RSpectrumData_ECNL._fields_ = [
    ('agr', c_double),
    ('P', c_double),
    ('TB', c_double),
    ('TC', c_double),
    ('TD', c_double),
    ('gammaI', c_double),
    ('qx', c_double),
    ('qy', c_double),
]
assert sizeof(RSpectrumData_ECNL) == 64, sizeof(RSpectrumData_ECNL)
assert alignment(RSpectrumData_ECNL) == 8, alignment(RSpectrumData_ECNL)
RSpectrumData_V153._fields_ = [
    ('SpectrumData_EC', RSpectrumData_EC),
    ('SpectrumData_ITA', RSpectrumData_ITA),
    ('SpectrumData_SIA', RSpectrumData_SIA),
    ('SpectrumData_STAS', RSpectrumData_STAS),
    ('SpectrumData_DIN', RSpectrumData_DIN),
    ('SpectrumData_ECHU', RSpectrumData_ECHU),
    ('SpectrumData_ECNL', RSpectrumData_ECNL),
]
assert sizeof(RSpectrumData_V153) == 520, sizeof(RSpectrumData_V153)
assert alignment(RSpectrumData_V153) == 8, alignment(RSpectrumData_V153)

# values for enumeration 'EDiaphragmError'
dpheLineListIsEmpty = -100001
dpheNoLinesAreSelected = -100002
dpheLineIndexOutOfBounds = -100003
dpheIllegalDOFValue = -100004
EDiaphragmError = c_int # enum
RCrossSectionUserParams._fields_ = [
    ('lParam', c_int),
    ('dParam1', c_double),
    ('dParam2', c_double),
    ('dParam3', c_double),
    ('dParam4', c_double),
    ('dParam5', c_double),
    ('dParam6', c_double),
    ('dParam7', c_double),
    ('dParam8', c_double),
    ('dParam9', c_double),
    ('dParam10', c_double),
]
assert sizeof(RCrossSectionUserParams) == 88, sizeof(RCrossSectionUserParams)
assert alignment(RCrossSectionUserParams) == 8, alignment(RCrossSectionUserParams)
RTimberDesignParameters_V153._fields_ = [
    ('BreakAtElements', ELongBoolean),
    ('EC', RTimberDesignParameters_EC_V153),
]
assert sizeof(RTimberDesignParameters_V153) == 176, sizeof(RTimberDesignParameters_V153)
assert alignment(RTimberDesignParameters_V153) == 8, alignment(RTimberDesignParameters_V153)
RStressPoint._fields_ = [
    ('y', c_double),
    ('z', c_double),
]
assert sizeof(RStressPoint) == 16, sizeof(RStressPoint)
assert alignment(RStressPoint) == 8, alignment(RStressPoint)
RLoadBeamMemberConcentrated._fields_ = [
    ('LoadCaseId', c_int),
    ('MemberID', c_int),
    ('Fgx', c_double),
    ('Fgy', c_double),
    ('Fgz', c_double),
    ('Mgx', c_double),
    ('Mgy', c_double),
    ('Mgz', c_double),
    ('Position', c_double),
    ('SystemGLR', ESystem),
]
assert sizeof(RLoadBeamMemberConcentrated) == 72, sizeof(RLoadBeamMemberConcentrated)
assert alignment(RLoadBeamMemberConcentrated) == 8, alignment(RLoadBeamMemberConcentrated)

# values for enumeration 'EColour'
cColourByMaterial = -1
EColour = c_int # enum

# values for enumeration 'EGravityDirection'
gdXp = 0
gdYp = 1
gdZp = 2
gdXm = 3
gdYm = 4
gdZm = 5
EGravityDirection = c_int # enum
RLoadSurfaceFluid._fields_ = [
    ('LoadCaseId', c_int),
    ('Direction', EAxis),
    ('Coord1', c_double),
    ('Coord2', c_double),
    ('P1', c_double),
    ('P2', c_double),
    ('SurfaceId', c_int),
]
assert sizeof(RLoadSurfaceFluid) == 48, sizeof(RLoadSurfaceFluid)
assert alignment(RLoadSurfaceFluid) == 8, alignment(RLoadSurfaceFluid)
RTimberDesignParameters._fields_ = [
    ('BreakAtElements', ELongBoolean),
    ('EC_SIA_ITA', RTimberDesignParameters_EC_SIA_ITA),
]
assert sizeof(RTimberDesignParameters) == 48, sizeof(RTimberDesignParameters)
assert alignment(RTimberDesignParameters) == 8, alignment(RTimberDesignParameters)
RLoadDynamic._fields_ = [
    ('DynamicLoadType', ELoadType),
    ('LoadCaseId', c_int),
    ('NodeId', c_int),
    ('Fx', c_double),
    ('Fy', c_double),
    ('Fz', c_double),
    ('Mx', c_double),
    ('My', c_double),
    ('Mz', c_double),
    ('ReferenceId', c_int),
    ('FxFunctionId', c_int),
    ('FyFunctionId', c_int),
    ('FzFunctionId', c_int),
    ('MxFunctionId', c_int),
    ('MyFunctionId', c_int),
    ('MzFunctionId', c_int),
]
assert sizeof(RLoadDynamic) == 96, sizeof(RLoadDynamic)
assert alignment(RLoadDynamic) == 8, alignment(RLoadDynamic)
RLoadRibMemberDistributed._fields_ = [
    ('LoadCaseId', c_int),
    ('MemberID', c_int),
    ('qx1', c_double),
    ('qy1', c_double),
    ('qz1', c_double),
    ('mx1', c_double),
    ('my1', c_double),
    ('mz1', c_double),
    ('qx2', c_double),
    ('qy2', c_double),
    ('qz2', c_double),
    ('mx2', c_double),
    ('my2', c_double),
    ('mz2', c_double),
    ('SystemGLR', ESystem),
    ('Position1', c_double),
    ('Position2', c_double),
    ('DistributionType', EBeamRibDistributionType),
    ('Trapezoid', ELongBoolean),
]
assert sizeof(RLoadRibMemberDistributed) == 136, sizeof(RLoadRibMemberDistributed)
assert alignment(RLoadRibMemberDistributed) == 8, alignment(RLoadRibMemberDistributed)
RSeismicSensitivityResults._fields_ = [
    ('ResultsValidX', ELongBoolean),
    ('ResultsValidY', ELongBoolean),
    ('ThetaMax_x', c_double),
    ('ThetaMax_y', c_double),
    ('Ptot', c_double),
    ('Vtot_x', c_double),
    ('Vtot_y', c_double),
    ('d_max_x', c_double),
    ('d_max_y', c_double),
    ('S_x', c_double),
    ('S_y', c_double),
    ('Gm_x', c_double),
    ('Gm_y', c_double),
    ('M_x', c_double),
    ('M_y', c_double),
    ('M_z', c_double),
    ('Imz', c_double),
    ('Error', ESeismicSensitivityResultsError),
]
assert sizeof(RSeismicSensitivityResults) == 136, sizeof(RSeismicSensitivityResults)
assert alignment(RSeismicSensitivityResults) == 8, alignment(RSeismicSensitivityResults)
RLoadPanelLinear._fields_ = [
    ('LoadCaseId', c_int),
    ('LoadPanelId', c_int),
    ('DistributionType', EDistributionType),
    ('LoadDistributionType', ELoadDistributionType),
    ('Component', EAxis),
    ('P1', c_double),
    ('P2', c_double),
    ('P3', c_double),
    ('x1', c_double),
    ('x2', c_double),
    ('x3', c_double),
    ('y1', c_double),
    ('y2', c_double),
    ('y3', c_double),
    ('z1', c_double),
    ('z2', c_double),
    ('z3', c_double),
]
assert sizeof(RLoadPanelLinear) == 120, sizeof(RLoadPanelLinear)
assert alignment(RLoadPanelLinear) == 8, alignment(RLoadPanelLinear)
class RDomainVariableThickness(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{834A807D-24FB-4F98-B51C-143F472E65A8}')
class RDomainExcentricity(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{F9C5DE07-1BF7-414D-A641-DFE8E982FD78}')
class RDomainCompositeRib(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{12EBCE2D-6E1A-4741-8E37-24C6439D4D06}')
IAxisVMDomains._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(AxisVMDomain)), 'Value' )),
    COMMETHOD([dispid(203), 'propget'], HRESULT, 'Selected',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(203), 'propput'], HRESULT, 'Selected',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], ELongBoolean, 'Value' )),
    COMMETHOD([dispid(204), 'propget'], HRESULT, 'SelCount',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(205)], HRESULT, 'Add',
              ( ['in'], _midlSAFEARRAY(c_int), 'LineIds' ),
              ( ['in', 'out'], POINTER(RSurfaceAttr), 'SurfaceAttr' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'DeleteSelected',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208)], HRESULT, 'GenerateMeshOnSelectedDomains',
              ( ['in', 'out'], POINTER(RDomainMeshParameters), 'MeshParameters' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'ErrorCodes' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'ErrorPoints' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'ErrorLines' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209)], HRESULT, 'GetSelectedItemIds',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'ItemIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(210)], HRESULT, 'SelectAllWalls',
              ( ['in'], ELongBoolean, 'Select' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(211)], HRESULT, 'SelectAllSlabs',
              ( ['in'], ELongBoolean, 'Select' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(212)], HRESULT, 'SelectAllOthers',
              ( ['in'], ELongBoolean, 'Select' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(213)], HRESULT, 'SelectAllWallsAtStorey',
              ( ['in'], ELongBoolean, 'Select' ),
              ( ['in'], c_int, 'StoreyId' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(214)], HRESULT, 'SelectAllSlabsAtStorey',
              ( ['in'], ELongBoolean, 'Select' ),
              ( ['in'], c_int, 'StoreyId' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(215)], HRESULT, 'SelectAllOthersAtStorey',
              ( ['in'], ELongBoolean, 'Select' ),
              ( ['in'], c_int, 'StoreyId' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(216)], HRESULT, 'GetSelectedWallIds',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'DomainIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(217)], HRESULT, 'GetSelectedSlabIds',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'DomainIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(218)], HRESULT, 'GetSelectedOtherIds',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'DomainIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(219)], HRESULT, 'RenameSelectedDomains',
              ( ['in'], c_int, 'NewBase' ),
              ( ['in'], BSTR, 'FormatStr' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(220)], HRESULT, 'DeleteReinforcementParametersFromSelectedDomains',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(221)], HRESULT, 'GenerateMeshOnSelectedDomainsWithOriginalParams',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'ErrorCodes' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'ErrorPoints' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'ErrorLines' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(222)], HRESULT, 'DeleteNameOfAllDomains',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(223), 'propget'], HRESULT, 'UID',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(224)], HRESULT, 'Add_vb',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['in', 'out'], POINTER(RSurfaceAttr), 'SurfaceAttr' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(225), 'propget'], HRESULT, 'IndexOfUID',
              ( ['in'], c_int, 'UID' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(226), 'propget'], HRESULT, 'StiffnessReduction',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(226), 'propput'], HRESULT, 'StiffnessReduction',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(227), 'propget'], HRESULT, 'Attributes',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMAttributes)), 'Value' )),
    COMMETHOD([dispid(228), 'propget'], HRESULT, 'Attachments',
              ( ['out', 'retval'], POINTER(POINTER(AxisVMAttachments)), 'Value' )),
    COMMETHOD([dispid(229)], HRESULT, 'GetVariableThickness',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RDomainVariableThickness), 'DomainVariableThickness' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(230)], HRESULT, 'SetVariableThickness',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RDomainVariableThickness), 'DomainVariableThickness' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(231)], HRESULT, 'GetExcentricity',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RDomainExcentricity), 'DomainExcentricity' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(232)], HRESULT, 'SetExcentricity',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RDomainExcentricity), 'DomainExcentricity' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(233)], HRESULT, 'CreateNewExcentricityGroup',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(234)], HRESULT, 'GetRibbedDomainParameters',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'Origin' ),
              ( ['in', 'out'], POINTER(RRibbedDomainParameters), 'x' ),
              ( ['in', 'out'], POINTER(RRibbedDomainParameters), 'y' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(235)], HRESULT, 'SetRibbedDomainParameters',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'Origin' ),
              ( ['in', 'out'], POINTER(RRibbedDomainParameters), 'x' ),
              ( ['in', 'out'], POINTER(RRibbedDomainParameters), 'y' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(236)], HRESULT, 'GetXLAMParameters',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(c_int), 'XLAMindex' ),
              ( ['out'], POINTER(EXLAMTopLayerDirection), 'TopLayerDirection' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(237)], HRESULT, 'SetXLAMParameters',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'XLAMindex' ),
              ( ['in'], EXLAMTopLayerDirection, 'TopLayerDirection' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(238), 'propget'], HRESULT, 'IsRibbed',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(239), 'propget'], HRESULT, 'IsXLAM',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(240), 'propget'], HRESULT, 'IsExcentic',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(241), 'propget'], HRESULT, 'HasVariableThickness',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(242)], HRESULT, 'DeleteMeshes',
              ( ['in'], _midlSAFEARRAY(c_int), 'DomainIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(243)], HRESULT, 'DeleteAllMeshes',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(244)], HRESULT, 'GetCustomStiffnessMatrix',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RMatrix3x3), 'a' ),
              ( ['in', 'out'], POINTER(RMatrix3x3), 'b' ),
              ( ['in', 'out'], POINTER(RMatrix3x3), 'd' ),
              ( ['in', 'out'], POINTER(RMatrix2x2), 'S' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(245)], HRESULT, 'SetCustomStiffnessMatrix',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RMatrix3x3), 'a' ),
              ( ['in', 'out'], POINTER(RMatrix3x3), 'b' ),
              ( ['in', 'out'], POINTER(RMatrix3x3), 'd' ),
              ( ['in', 'out'], POINTER(RMatrix2x2), 'S' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(246)], HRESULT, 'CutSelected',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(247)], HRESULT, 'BulkAdd',
              ( ['in'], _midlSAFEARRAY(c_int), 'LineIdCounts' ),
              ( ['in'], _midlSAFEARRAY(c_int), 'BulkLineIds' ),
              ( ['in'], _midlSAFEARRAY(RSurfaceAttr), 'SurfaceAttrs' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'DomainIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(248)], HRESULT, 'BulkGetDomains',
              ( ['in'], _midlSAFEARRAY(c_int), 'DomainIds' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIdCounts' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'BulkLineIds' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RSurfaceAttr)), 'SurfaceAttrs' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(249)], HRESULT, 'BulkSetDomains',
              ( ['in'], _midlSAFEARRAY(c_int), 'DomainIds' ),
              ( ['in'], _midlSAFEARRAY(c_int), 'LineIdCounts' ),
              ( ['in'], _midlSAFEARRAY(c_int), 'BulkLineIds' ),
              ( ['in'], _midlSAFEARRAY(RSurfaceAttr), 'SurfaceAttrs' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(250), 'propget'], HRESULT, 'StiffnessReduction_V153',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], ESurfaceStiffnessReduction, 'Component' ),
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(250), 'propput'], HRESULT, 'StiffnessReduction_V153',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], ESurfaceStiffnessReduction, 'Component' ),
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(251)], HRESULT, 'AddHollowCore',
              ( ['in'], _midlSAFEARRAY(c_int), 'LineIds' ),
              ( ['in', 'out'], POINTER(RSurfaceAttr), 'SurfaceAttr' ),
              ( ['in', 'out'], POINTER(RDomainHollowCore), 'HollowCoreParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(252)], HRESULT, 'GetXLAMParameters_V161',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(RXLAMParams), 'XLAMParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(253)], HRESULT, 'SetXLAMParameters_V161',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RXLAMParams), 'XLAMParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(254)], HRESULT, 'AddXLAM',
              ( ['in'], _midlSAFEARRAY(c_int), 'LineIds' ),
              ( ['in', 'out'], POINTER(RSurfaceAttr), 'SurfaceAttr' ),
              ( ['in', 'out'], POINTER(RXLAMParams), 'XLAMParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(255)], HRESULT, 'GetTrapezoidalParameters',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(RDomainTrapezoidal), 'TrapezoidalParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(256)], HRESULT, 'SetTrapezoidalParameters',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RDomainTrapezoidal), 'TrapezoidalParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(257)], HRESULT, 'AddTrapezoidal',
              ( ['in'], _midlSAFEARRAY(c_int), 'LineIds' ),
              ( ['in', 'out'], POINTER(RSurfaceAttr), 'SurfaceAttr' ),
              ( ['in', 'out'], POINTER(RDomainTrapezoidal), 'TrapezoidalParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(258), 'propget'], HRESULT, 'IsTrapezoidal',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(259)], HRESULT, 'GetCompositeRibParameters',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(RDomainCompositeRib), 'CompositeRibParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(260)], HRESULT, 'SetCompositeRibParameters',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RDomainCompositeRib), 'CompositeRibParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(261)], HRESULT, 'AddCompositeRib',
              ( ['in'], _midlSAFEARRAY(c_int), 'LineIds' ),
              ( ['in', 'out'], POINTER(RSurfaceAttr), 'SurfaceAttr' ),
              ( ['in', 'out'], POINTER(RDomainCompositeRib), 'CompositeRibParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(262), 'propget'], HRESULT, 'IsCompositeRib',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(263)], HRESULT, 'SetRibbedDomainActual',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], ELongBoolean, 'Actual' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(264)], HRESULT, 'GetHollowCoreParameters',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(RDomainHollowCore), 'HollowCoreParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(265)], HRESULT, 'SetHollowCoreParameters',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RDomainHollowCore), 'HollowCoreParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(266), 'propget'], HRESULT, 'IsHollowCore',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
]
################################################################
## code template for IAxisVMDomains implementation
##class IAxisVMDomains_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Item(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    Selected = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SelCount(self):
##        '-no docstring-'
##        #return Value
##
##    def Add(self, LineIds):
##        '-no docstring-'
##        #return SurfaceAttr, ResultValue
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def DeleteSelected(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def GenerateMeshOnSelectedDomains(self):
##        '-no docstring-'
##        #return MeshParameters, ErrorCodes, ErrorPoints, ErrorLines, ResultValue
##
##    def GetSelectedItemIds(self):
##        '-no docstring-'
##        #return ItemIds, ResultValue
##
##    def SelectAllWalls(self, Select):
##        '-no docstring-'
##        #return ResultValue
##
##    def SelectAllSlabs(self, Select):
##        '-no docstring-'
##        #return ResultValue
##
##    def SelectAllOthers(self, Select):
##        '-no docstring-'
##        #return ResultValue
##
##    def SelectAllWallsAtStorey(self, Select, StoreyId):
##        '-no docstring-'
##        #return ResultValue
##
##    def SelectAllSlabsAtStorey(self, Select, StoreyId):
##        '-no docstring-'
##        #return ResultValue
##
##    def SelectAllOthersAtStorey(self, Select, StoreyId):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetSelectedWallIds(self):
##        '-no docstring-'
##        #return DomainIds, ResultValue
##
##    def GetSelectedSlabIds(self):
##        '-no docstring-'
##        #return DomainIds, ResultValue
##
##    def GetSelectedOtherIds(self):
##        '-no docstring-'
##        #return DomainIds, ResultValue
##
##    def RenameSelectedDomains(self, NewBase, FormatStr):
##        '-no docstring-'
##        #return ResultValue
##
##    def DeleteReinforcementParametersFromSelectedDomains(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def GenerateMeshOnSelectedDomainsWithOriginalParams(self):
##        '-no docstring-'
##        #return ErrorCodes, ErrorPoints, ErrorLines, ResultValue
##
##    def DeleteNameOfAllDomains(self):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def UID(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def Add_vb(self):
##        '-no docstring-'
##        #return LineIds, SurfaceAttr, ResultValue
##
##    @property
##    def IndexOfUID(self, UID):
##        '-no docstring-'
##        #return Value
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    StiffnessReduction = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Attributes(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Attachments(self):
##        '-no docstring-'
##        #return Value
##
##    def GetVariableThickness(self, Index):
##        '-no docstring-'
##        #return DomainVariableThickness, ResultValue
##
##    def SetVariableThickness(self, Index):
##        '-no docstring-'
##        #return DomainVariableThickness, ResultValue
##
##    def GetExcentricity(self, Index):
##        '-no docstring-'
##        #return DomainExcentricity, ResultValue
##
##    def SetExcentricity(self, Index):
##        '-no docstring-'
##        #return DomainExcentricity, ResultValue
##
##    def CreateNewExcentricityGroup(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetRibbedDomainParameters(self, Index):
##        '-no docstring-'
##        #return Origin, x, y, ResultValue
##
##    def SetRibbedDomainParameters(self, Index):
##        '-no docstring-'
##        #return Origin, x, y, ResultValue
##
##    def GetXLAMParameters(self, Index):
##        '-no docstring-'
##        #return XLAMindex, TopLayerDirection, ResultValue
##
##    def SetXLAMParameters(self, Index, XLAMindex, TopLayerDirection):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def IsRibbed(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def IsXLAM(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def IsExcentic(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def HasVariableThickness(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def DeleteMeshes(self, DomainIds):
##        '-no docstring-'
##        #return Value
##
##    def DeleteAllMeshes(self):
##        '-no docstring-'
##        #return Value
##
##    def GetCustomStiffnessMatrix(self, Index):
##        '-no docstring-'
##        #return a, b, d, S, ResultValue
##
##    def SetCustomStiffnessMatrix(self, Index):
##        '-no docstring-'
##        #return a, b, d, S, ResultValue
##
##    def CutSelected(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def BulkAdd(self, LineIdCounts, BulkLineIds, SurfaceAttrs):
##        '-no docstring-'
##        #return DomainIds, ResultValue
##
##    def BulkGetDomains(self, DomainIds):
##        '-no docstring-'
##        #return LineIdCounts, BulkLineIds, SurfaceAttrs, ResultValue
##
##    def BulkSetDomains(self, DomainIds, LineIdCounts, BulkLineIds, SurfaceAttrs):
##        '-no docstring-'
##        #return ResultValue
##
##    def _get(self, Index, Component):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Component, Value):
##        '-no docstring-'
##    StiffnessReduction_V153 = property(_get, _set, doc = _set.__doc__)
##
##    def AddHollowCore(self, LineIds):
##        '-no docstring-'
##        #return SurfaceAttr, HollowCoreParams, ResultValue
##
##    def GetXLAMParameters_V161(self, Index):
##        '-no docstring-'
##        #return XLAMParams, ResultValue
##
##    def SetXLAMParameters_V161(self, Index):
##        '-no docstring-'
##        #return XLAMParams, ResultValue
##
##    def AddXLAM(self, LineIds):
##        '-no docstring-'
##        #return SurfaceAttr, XLAMParams, ResultValue
##
##    def GetTrapezoidalParameters(self, Index):
##        '-no docstring-'
##        #return TrapezoidalParams, ResultValue
##
##    def SetTrapezoidalParameters(self, Index):
##        '-no docstring-'
##        #return TrapezoidalParams, ResultValue
##
##    def AddTrapezoidal(self, LineIds):
##        '-no docstring-'
##        #return SurfaceAttr, TrapezoidalParams, ResultValue
##
##    @property
##    def IsTrapezoidal(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def GetCompositeRibParameters(self, Index):
##        '-no docstring-'
##        #return CompositeRibParams, ResultValue
##
##    def SetCompositeRibParameters(self, Index):
##        '-no docstring-'
##        #return CompositeRibParams, ResultValue
##
##    def AddCompositeRib(self, LineIds):
##        '-no docstring-'
##        #return SurfaceAttr, CompositeRibParams, ResultValue
##
##    @property
##    def IsCompositeRib(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def SetRibbedDomainActual(self, Index, Actual):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetHollowCoreParameters(self, Index):
##        '-no docstring-'
##        #return HollowCoreParams, ResultValue
##
##    def SetHollowCoreParameters(self, Index):
##        '-no docstring-'
##        #return HollowCoreParams, ResultValue
##
##    @property
##    def IsHollowCore(self, Index):
##        '-no docstring-'
##        #return Value
##

IAxisVMLoadCasesEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Cleared'),
    DISPMETHOD([dispid(202)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]
class RShowActualReinforcement(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{5F285AE5-0A0B-4CF7-A0B8-01ADBDFDACD3}')
RShowActualReinforcement._fields_ = [
    ('Symbol_axb', ELongBoolean),
    ('Symbol_ayb', ELongBoolean),
    ('Symbol_axt', ELongBoolean),
    ('Symbol_ayt', ELongBoolean),
    ('Label_axb', ELongBoolean),
    ('Label_ayb', ELongBoolean),
    ('Label_axt', ELongBoolean),
    ('Label_ayt', ELongBoolean),
    ('ActReinfLabelType', EActualReinforcementLabelType),
    ('AccordResComponent', ELongBoolean),
]
assert sizeof(RShowActualReinforcement) == 40, sizeof(RShowActualReinforcement)
assert alignment(RShowActualReinforcement) == 4, alignment(RShowActualReinforcement)
class AxisVMStructuralGrid(CoClass):
    'AxisVMStructuralGrid Object'
    _reg_clsid_ = GUID('{B0532FA5-C09F-4F20-8920-331CC384A4F1}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
AxisVMStructuralGrid._com_interfaces_ = [IAxisVMStructuralGrid]

IAxisVMDynamicLoadFunctionsEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Cleared'),
    DISPMETHOD([dispid(202)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]
IAxisVMDimensions._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202)], HRESULT, 'AddDimensionLine',
              ( ['in'], BSTR, 'Text' ),
              ( ['in', 'out'], POINTER(RDimensionLineParameters), 'DimensionLineParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(203)], HRESULT, 'AddTextBox',
              ( ['in'], BSTR, 'Text' ),
              ( ['in', 'out'], POINTER(RTextBoxParameters), 'TextBoxParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(204), helpstring('The Params must be type casted into the appropriate dimension record type!')], HRESULT, 'GetParams',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'Params' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205), helpstring('The Params must be type casted into the appropriate dimension record type!')], HRESULT, 'SetParams',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], _midlSAFEARRAY(c_ubyte), 'Params' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'GetText',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(BSTR), 'Text' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'SetText',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Text' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(209), 'propget'], HRESULT, 'DimensionType',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(EDimensionType), 'Value' )),
    COMMETHOD([dispid(210), 'propget'], HRESULT, 'MeasurementCharacter',
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
]
################################################################
## code template for IAxisVMDimensions implementation
##class IAxisVMDimensions_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def AddDimensionLine(self, Text):
##        '-no docstring-'
##        #return DimensionLineParameters, Value
##
##    def AddTextBox(self, Text):
##        '-no docstring-'
##        #return TextBoxParameters, Value
##
##    def GetParams(self, Index):
##        'The Params must be type casted into the appropriate dimension record type!'
##        #return Params, ResultValue
##
##    def SetParams(self, Index, Params):
##        'The Params must be type casted into the appropriate dimension record type!'
##        #return ResultValue
##
##    def GetText(self, Index):
##        '-no docstring-'
##        #return Text, ResultValue
##
##    def SetText(self, Index, Text):
##        '-no docstring-'
##        #return ResultValue
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def DimensionType(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def MeasurementCharacter(self):
##        '-no docstring-'
##        #return Value
##

IAxisVMIncrementFunctionsEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Cleared'),
    DISPMETHOD([dispid(202)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]
class IAxisVMWindLoadEvents(stdole.IDispatch):
    _case_insensitive_ = True
    'Events interface for AxisVMWindLoad Object'
    _iid_ = GUID('{CB2CAD4C-4FB0-4D27-BD12-0D4C8F4FEE42}')
    _idlflags_ = []
    _methods_ = []
IAxisVMWindLoadEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]
IAxisVMDomainsEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Cleared'),
    DISPMETHOD([dispid(202)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]
IAxisVMSurfaceSupports._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAxisVMSurfaceSupport)), 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(203), 'propget'], HRESULT, 'Selected',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(203), 'propput'], HRESULT, 'Selected',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], ELongBoolean, 'Value' )),
    COMMETHOD([dispid(204), 'propget'], HRESULT, 'SelCount',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(205)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'DeleteSelected',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'AddSurfaceElasticFoundation',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in', 'out'], POINTER(RStiffnessesXYZ), 'StiffnessesXYZ' ),
              ( ['in', 'out'], POINTER(RNonLinearityXYZ), 'NonLinearityXYZ' ),
              ( ['in', 'out'], POINTER(RResistancesXYZ), 'ResistancesXYZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208)], HRESULT, 'SelectAll',
              ( ['in'], ELongBoolean, 'Select' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209), 'propget'], HRESULT, 'SurfaceId',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(210)], HRESULT, 'GetSelectedItemIds',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'ItemIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(213)], HRESULT, 'AddSurfacePasternakFoundation',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in', 'out'], POINTER(RStiffnessesXYZ), 'StiffnessesXYZ' ),
              ( ['in'], c_double, 'ShearStiffness' ),
              ( ['in', 'out'], POINTER(RNonLinearityXYZ), 'NonLinearityXYZ' ),
              ( ['in', 'out'], POINTER(RResistancesXYZ), 'ResistancesXYZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMSurfaceSupports implementation
##class IAxisVMSurfaceSupports_Impl(object):
##    @property
##    def Item(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    Selected = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SelCount(self):
##        '-no docstring-'
##        #return Value
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def DeleteSelected(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddSurfaceElasticFoundation(self, SurfaceId):
##        '-no docstring-'
##        #return StiffnessesXYZ, NonLinearityXYZ, ResistancesXYZ, ResultValue
##
##    def SelectAll(self, Select):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def SurfaceId(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def GetSelectedItemIds(self):
##        '-no docstring-'
##        #return ItemIds, ResultValue
##
##    def AddSurfacePasternakFoundation(self, SurfaceId, ShearStiffness):
##        '-no docstring-'
##        #return StiffnessesXYZ, NonLinearityXYZ, ResistancesXYZ, ResultValue
##

RReinforcementParameters._fields_ = [
    ('ConcreteId', c_int),
    ('RebarSteelGradeId', c_int),
    ('Thickness', c_double),
]
assert sizeof(RReinforcementParameters) == 16, sizeof(RReinforcementParameters)
assert alignment(RReinforcementParameters) == 8, alignment(RReinforcementParameters)
IAxisVMReportsEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Cleared'),
    DISPMETHOD([dispid(202)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]

# values for enumeration 'EStructuralGridsError'
sgeInvalidName = -100001
sgeInvalidWorkPlaneindex = -100002
sgeInvalidStoreyIndex = -100003
sgwInvalidStartCharX = -100004
sgwInvalidStartCharY = -100005
sqwNormalVectorVaries = -100006
sqwGridLineNotInPlane = -100007
EStructuralGridsError = c_int # enum
IAxisVMModels._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(AxisVMModel)), 'Value' )),
    COMMETHOD([dispid(203)], HRESULT, 'New',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMModels implementation
##class IAxisVMModels_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Item(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def New(self):
##        '-no docstring-'
##        #return ResultValue
##

IAxisVMTimeIncrementFunctions._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202)], HRESULT, 'Clear',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(203)], HRESULT, 'Add',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], _midlSAFEARRAY(RPoint2d), 'FunctionPoints' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205), 'propget'], HRESULT, 'Name',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(205), 'propput'], HRESULT, 'Name',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(206), 'propget'], HRESULT, 'PointCount',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(207)], HRESULT, 'DeletePoint',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'PointIndex' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208)], HRESULT, 'DeletePoints',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'StartPointIndex' ),
              ( ['in'], c_int, 'EndPointIndex' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209)], HRESULT, 'AddPoint',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(RPoint2d), 'FunctionPoint' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(210)], HRESULT, 'GetPoints',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RPoint2d)), 'FunctionPoints' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(211)], HRESULT, 'Modify',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], _midlSAFEARRAY(RPoint2d), 'FunctionPoints' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(212)], HRESULT, 'IndexOf',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(213)], HRESULT, 'AddFromFile',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'FileName' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(214)], HRESULT, 'SaveToFile',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'FileName' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(215)], HRESULT, 'Add_vb',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPoint2d)), 'FunctionPoints' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(216)], HRESULT, 'Modify_vb',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPoint2d)), 'FunctionPoints' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMTimeIncrementFunctions implementation
##class IAxisVMTimeIncrementFunctions_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def Clear(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def Add(self, Name, FunctionPoints):
##        '-no docstring-'
##        #return ResultValue
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def PointCount(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def DeletePoint(self, Index, PointIndex):
##        '-no docstring-'
##        #return ResultValue
##
##    def DeletePoints(self, Index, StartPointIndex, EndPointIndex):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddPoint(self, Index):
##        '-no docstring-'
##        #return FunctionPoint, ResultValue
##
##    def GetPoints(self, Index):
##        '-no docstring-'
##        #return FunctionPoints, ResultValue
##
##    def Modify(self, Index, FunctionPoints):
##        '-no docstring-'
##        #return ResultValue
##
##    def IndexOf(self, Name):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddFromFile(self, Name, FileName):
##        '-no docstring-'
##        #return ResultValue
##
##    def SaveToFile(self, Index, FileName):
##        '-no docstring-'
##        #return ResultValue
##
##    def Add_vb(self, Name):
##        '-no docstring-'
##        #return FunctionPoints, ResultValue
##
##    def Modify_vb(self, Index):
##        '-no docstring-'
##        #return FunctionPoints, ResultValue
##

IAxisVMDiaphragm._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202)], HRESULT, 'Clear',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(203)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'AddSelectedLines',
              ( ['in'], c_int, 'dof' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205)], HRESULT, 'Add',
              ( ['in'], c_int, 'dof' ),
              ( ['in'], _midlSAFEARRAY(c_int), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'GetLines',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'GetDOF',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(c_int), 'dof' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208)], HRESULT, 'RemoveLinesFromDiaphragm',
              ( ['in'], _midlSAFEARRAY(c_int), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209)], HRESULT, 'Add_vb',
              ( ['in'], c_int, 'dof' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(210)], HRESULT, 'RemoveLinesFromDiaphragm_vb',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMDiaphragm implementation
##class IAxisVMDiaphragm_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def Clear(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddSelectedLines(self, dof):
##        '-no docstring-'
##        #return ResultValue
##
##    def Add(self, dof, LineIds):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetLines(self, Index):
##        '-no docstring-'
##        #return LineIds, ResultValue
##
##    def GetDOF(self, Index):
##        '-no docstring-'
##        #return dof, ResultValue
##
##    def RemoveLinesFromDiaphragm(self, LineIds):
##        '-no docstring-'
##        #return ResultValue
##
##    def Add_vb(self, dof):
##        '-no docstring-'
##        #return LineIds, ResultValue
##
##    def RemoveLinesFromDiaphragm_vb(self):
##        '-no docstring-'
##        #return LineIds, ResultValue
##

RMatrix3x3._fields_ = [
    ('e11', c_double),
    ('e12', c_double),
    ('e13', c_double),
    ('e21', c_double),
    ('e22', c_double),
    ('e23', c_double),
    ('e31', c_double),
    ('e32', c_double),
    ('e33', c_double),
]
assert sizeof(RMatrix3x3) == 72, sizeof(RMatrix3x3)
assert alignment(RMatrix3x3) == 8, alignment(RMatrix3x3)
IAxisVMLoadCombinations._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'Name',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(202), 'propput'], HRESULT, 'Name',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(203), 'propget'], HRESULT, 'CombinationType',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(ECombinationType), 'Value' )),
    COMMETHOD([dispid(204), helpstring('Add will not free SafeArrays. Called must alloc and free the SafeArray')], HRESULT, 'Add',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], _midlSAFEARRAY(c_double), 'Factors' ),
              ( ['in'], _midlSAFEARRAY(c_int), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206), helpstring('Caller must free SafeArrays!')], HRESULT, 'GetCombination',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Factors' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'SetCombination',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], _midlSAFEARRAY(c_double), 'Factors' ),
              ( ['in'], _midlSAFEARRAY(c_int), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208), 'propget'], HRESULT, 'Comment',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(208), 'propput'], HRESULT, 'Comment',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(209)], HRESULT, 'GenerateAutoCombinations',
              ( ['in'], c_int, 'CombinationTypes' ),
              ( ['in'], ELongBoolean, 'ShowForms' ),
              ( ['in', 'out'], POINTER(RLoadCombinationGenParameters), 'LoadCombinationGenParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(210), helpstring('Add will not free SafeArrays. Called must alloc and free the SafeArray')], HRESULT, 'Add_vb',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Factors' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(211)], HRESULT, 'SetCombination_vb',
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Factors' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(212), 'propget'], HRESULT, 'UID',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(213), 'propget'], HRESULT, 'IndexOfUID',
              ( ['in'], c_int, 'UID' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(214), helpstring('Caller must free SafeArrays!')], HRESULT, 'GetValidCombinationTypes',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'CombinationTypes' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMLoadCombinations implementation
##class IAxisVMLoadCombinations_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def CombinationType(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def Add(self, Name, CombinationType, Factors, LoadCaseIds):
##        'Add will not free SafeArrays. Called must alloc and free the SafeArray'
##        #return ResultValue
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetCombination(self, Index):
##        'Caller must free SafeArrays!'
##        #return Factors, LoadCaseIds, ResultValue
##
##    def SetCombination(self, Index, Factors, LoadCaseIds):
##        '-no docstring-'
##        #return ResultValue
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    Comment = property(_get, _set, doc = _set.__doc__)
##
##    def GenerateAutoCombinations(self, CombinationTypes, ShowForms):
##        '-no docstring-'
##        #return LoadCombinationGenParameters, ResultValue
##
##    def Add_vb(self, Name, CombinationType):
##        'Add will not free SafeArrays. Called must alloc and free the SafeArray'
##        #return Factors, LoadCaseIds, ResultValue
##
##    def SetCombination_vb(self, Index):
##        '-no docstring-'
##        #return Factors, LoadCaseIds, ResultValue
##
##    @property
##    def UID(self, Index):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def IndexOfUID(self, UID):
##        '-no docstring-'
##        #return Value
##
##    def GetValidCombinationTypes(self):
##        'Caller must free SafeArrays!'
##        #return CombinationTypes, ResultValue
##

class RReinforcementParameters_DIN(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{D991CF70-07AC-4303-8196-7BA59348CE75}')
RReinforcementParameters_DIN._fields_ = [
    ('dxt', c_double),
    ('dxb', c_double),
    ('dyt', c_double),
    ('dyb', c_double),
    ('SlabLoadTransfer', ESlabLoadTransfer),
    ('SlabLoadTransferDirection', ESlabLoadTransferDirection),
    ('MainDirectionTop', EReinforcementDirection),
    ('MainDirectionBottom', EReinforcementDirection),
    ('ct', c_double),
    ('cb', c_double),
    ('AggregateSize', c_double),
    ('ApplyMinimumCover', ELongBoolean),
    ('EnvClass_T', EEnvironmentClass),
    ('EnvClass_B', EEnvironmentClass),
    ('ShearReinforcementAngle', c_double),
    ('ShearCrackAngle', c_double),
]
assert sizeof(RReinforcementParameters_DIN) == 104, sizeof(RReinforcementParameters_DIN)
assert alignment(RReinforcementParameters_DIN) == 8, alignment(RReinforcementParameters_DIN)

# values for enumeration 'ECrossSectionOptimizationError'
csoGroupNameAlreadyExists = -100001
csoGroupIsForPredefinedShapes = -100002
csoGroupIsForParametricOptimization = -100003
csoOptimizationChecksNotValid = -100004
csoGroupNameInvalid = -100005
csoMemberDesignIDsEmpty = -100006
csoVariousCrossSectionsAreNotSupported = -100007
csoCrossSectionTypeIsNotSupported = -100008
csoUsedMaterialIsNotSupported = -100009
csoInvalid_b = -100010
csoInvalid_h = -100011
csoInvalid_tw = -100012
csoInvalid_tf = -100013
csoInvalid_b2 = -100014
csoInvalid_tf2 = -100015
csoInvalid_a = -100016
csoInvalidManufacturingProcess = -100017
csoDesignMemberIDOutOfBounds = -100018
csoGroupCrossSectionTypeIsDifferent = -100019
csoOptimizationCheckCombinationIsNotValid = -100020
csoGroupCrossSectionIndexOutOfBounds = -100021
csoOutOfConstraintLimits = -100022
csoMaterialVariesInTheGroup = -100023
csoCrossSectionVariesInTheGroup = -100024
csoManufacturingProcessIsNotSupported = -100025
csoCrossSectionsInTheGroupAreNotUsable = -100026
csoLoadCaseIdIndexOutOfBounds = -100027
csoLoadCombinationIdIndexOutOfBounds = -100028
csoInvalidAnalysisType = -100029
csoCombinationTypeNotValidForCurrentNationalDesignCode = -100030
csoInvalidMaterial = -100031
csoInvalisOptimizationType = -100032
csoNoneOfTheCrossSectionsIsValid = -100033
ECrossSectionOptimizationError = c_int # enum
IAxisVMLoadsEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Cleared'),
    DISPMETHOD([dispid(202)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]
IAxisVMStructuralGrids._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(AxisVMStructuralGrid)), 'Value' )),
    COMMETHOD([dispid(203)], HRESULT, 'Add',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(RStructuralGridParams), 'StructuralGridParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(204)], HRESULT, 'GenerateStructuralGrid',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'PrefixX' ),
              ( ['in'], BSTR, 'StartCharX' ),
              ( ['in'], BSTR, 'RelativeSpacingX' ),
              ( ['in'], BSTR, 'PrefixY' ),
              ( ['in'], BSTR, 'StartCharY' ),
              ( ['in'], BSTR, 'RelativeSpacingY' ),
              ( ['in', 'out'], POINTER(RStructuralGridGenerationParams), 'StructuralGridGenerationParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(205)], HRESULT, 'GetStructuralGridParams',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(BSTR), 'Name' ),
              ( ['in', 'out'], POINTER(RStructuralGridParams), 'StructuralGridParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(206)], HRESULT, 'SetStructuralGridParams',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(RStructuralGridParams), 'StructuralGridParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(207)], HRESULT, 'Delete',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(208), 'propget'], HRESULT, 'Name',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(208), 'propput'], HRESULT, 'Name',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Value' )),
]
################################################################
## code template for IAxisVMStructuralGrids implementation
##class IAxisVMStructuralGrids_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Item(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def Add(self, Name):
##        '-no docstring-'
##        #return StructuralGridParams, Value
##
##    def GenerateStructuralGrid(self, Index, PrefixX, StartCharX, RelativeSpacingX, PrefixY, StartCharY, RelativeSpacingY):
##        '-no docstring-'
##        #return StructuralGridGenerationParams, Value
##
##    def GetStructuralGridParams(self, Index):
##        '-no docstring-'
##        #return Name, StructuralGridParams, Value
##
##    def SetStructuralGridParams(self, Index, Name):
##        '-no docstring-'
##        #return StructuralGridParams, Value
##
##    def Delete(self, Index):
##        '-no docstring-'
##        #return Value
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return Value
##    def _set(self, Index, Value):
##        '-no docstring-'
##    Name = property(_get, _set, doc = _set.__doc__)
##

RMovingLoadOnDomainItem._fields_ = [
    ('SystemGL', ESystem),
    ('Position', c_double),
    ('a', c_double),
    ('b', c_double),
    ('u', c_double),
    ('Fx', c_double),
    ('Fy', c_double),
    ('Fz', c_double),
]
assert sizeof(RMovingLoadOnDomainItem) == 64, sizeof(RMovingLoadOnDomainItem)
assert alignment(RMovingLoadOnDomainItem) == 8, alignment(RMovingLoadOnDomainItem)
IAxisVMShearCapacityEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]
IAxisVMLine._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'StartNode',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(201), 'propput'], HRESULT, 'StartNode',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'EndNode',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202), 'propput'], HRESULT, 'EndNode',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(203), 'propget'], HRESULT, 'GeomType',
              ( ['out', 'retval'], POINTER(ELineGeomType), 'Value' )),
    COMMETHOD([dispid(205), 'propget'], HRESULT, 'LineType',
              ( ['out', 'retval'], POINTER(ELineType), 'Value' )),
    COMMETHOD([dispid(206), helpstring('0 means automatic refenrece'), 'propget'], HRESULT, 'Reference',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(206), helpstring('0 means automatic refenrece'), 'propput'], HRESULT, 'Reference',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(207), 'propget'], HRESULT, 'NonLinearity',
              ( ['out', 'retval'], POINTER(ELineNonLinearity), 'Value' )),
    COMMETHOD([dispid(207), 'propput'], HRESULT, 'NonLinearity',
              ( ['in'], ELineNonLinearity, 'Value' )),
    COMMETHOD([dispid(208), 'propget'], HRESULT, 'TrussResistance',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(208), 'propput'], HRESULT, 'TrussResistance',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(211)], HRESULT, 'DefineAsTruss',
              ( ['in'], c_int, 'MaterialIndex' ),
              ( ['in'], c_int, 'CrossSectionIndex' ),
              ( ['in'], ELineNonLinearity, 'TrussType' ),
              ( ['in'], c_double, 'Resistance' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(212), helpstring('Excentricity values can be specified only at members level')], HRESULT, 'DefineAsBeam',
              ( ['in'], c_int, 'MaterialIndex' ),
              ( ['in'], c_int, 'StartCrossSectionIndex' ),
              ( ['in'], c_int, 'EndCrossSectionIndex' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'StartExcentricity' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'EndExcentricity' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(213), helpstring('Only Z excentricity values are used!')], HRESULT, 'DefineAsRib',
              ( ['in'], c_int, 'MaterialIndex' ),
              ( ['in'], c_int, 'StartCrossSectionIndex' ),
              ( ['in'], c_int, 'EndCrossSectionIndex' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'StartExcentricity' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'EndExcentricity' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(214)], HRESULT, 'DefineAsSpring',
              ( ['in'], ESpringDirection, 'SpringDirection' ),
              ( ['in', 'out'], POINTER(RStiffnesses), 'Stiffnesses' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(215)], HRESULT, 'DefineAsGap',
              ( ['in'], EGapType, 'GapType' ),
              ( ['in'], c_double, 'ActiveStiffness' ),
              ( ['in'], c_double, 'InactiveStiffness' ),
              ( ['in'], c_double, 'InitialOpening' ),
              ( ['in'], c_double, 'MinPenetration' ),
              ( ['in'], c_double, 'MaxPenetration' ),
              ( ['in'], c_double, 'AdjustmentRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(216), 'propget'], HRESULT, 'Length',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(217), 'propget'], HRESULT, 'MidPointId',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(219), 'propget'], HRESULT, 'SectionCount',
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(220), 'propget'], HRESULT, 'MidPointDOF',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(220), 'propput'], HRESULT, 'MidPointDOF',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(221)], HRESULT, 'GetGeomData',
              ( ['in', 'out'], POINTER(RLineGeomData), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(222)], HRESULT, 'SetGeomData',
              ( ['in', 'out'], POINTER(RLineGeomData), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(223)], HRESULT, 'GetStartReleases',
              ( ['in', 'out'], POINTER(RReleases), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(224)], HRESULT, 'SetStartReleases',
              ( ['in', 'out'], POINTER(RReleases), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(225)], HRESULT, 'GetEndReleases',
              ( ['in', 'out'], POINTER(RReleases), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(226)], HRESULT, 'SetEndReleases',
              ( ['in', 'out'], POINTER(RReleases), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(227)], HRESULT, 'GetMidPoint',
              ( ['in', 'out'], POINTER(RPoint3d), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(228)], HRESULT, 'SetGeomType',
              ( ['in'], ELineGeomType, 'LineGeomType' ),
              ( ['in', 'out'], POINTER(RLineGeomData), 'LineGeomData' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(229), 'propget'], HRESULT, 'SectionPos',
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], c_int, 'SectionId' ),
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(230)], HRESULT, 'GetTrussData',
              ( ['out'], POINTER(c_int), 'MaterialIndex' ),
              ( ['out'], POINTER(c_int), 'CrossSectionIndex' ),
              ( ['out'], POINTER(ELineNonLinearity), 'TrussType' ),
              ( ['out'], POINTER(c_double), 'Resistance' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(231), helpstring('Excentricity values are not used yet in this version!')], HRESULT, 'GetBeamData',
              ( ['out'], POINTER(c_int), 'MaterialIndex' ),
              ( ['out'], POINTER(c_int), 'StartCrossSectionIndex' ),
              ( ['out'], POINTER(c_int), 'EndCrossSectionIndex' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'StartExcentricity' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'EndExcentricity' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(232), helpstring('Only Z excentricity values are used!')], HRESULT, 'GetRibData',
              ( ['out'], POINTER(c_int), 'MaterialIndex' ),
              ( ['out'], POINTER(c_int), 'StartCrossSectionIndex' ),
              ( ['out'], POINTER(c_int), 'EndCrossSectionIndex' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'StartExcentricity' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'EndExcentricity' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(233)], HRESULT, 'GetSpringData',
              ( ['out'], POINTER(ESpringDirection), 'SpringDirection' ),
              ( ['in', 'out'], POINTER(RStiffnesses), 'Stiffnesses' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(234)], HRESULT, 'GetGapData',
              ( ['out'], POINTER(EGapType), 'GapType' ),
              ( ['out'], POINTER(c_double), 'ActiveStiffness' ),
              ( ['out'], POINTER(c_double), 'InactiveStiffness' ),
              ( ['out'], POINTER(c_double), 'InitialOpening' ),
              ( ['out'], POINTER(c_double), 'MinPenetration' ),
              ( ['out'], POINTER(c_double), 'MaxPenetration' ),
              ( ['out'], POINTER(c_double), 'AdjustmentRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(235)], HRESULT, 'ChangeLocalDirection',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(236)], HRESULT, 'SplitByNode',
              ( ['in'], c_int, 'NodeId' ),
              ( ['out'], POINTER(c_int), 'LineId1' ),
              ( ['out'], POINTER(c_int), 'LineId2' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(237)], HRESULT, 'SplitByN',
              ( ['in'], c_int, 'N' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(238), 'propget'], HRESULT, 'Timber_kdef',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(238), 'propput'], HRESULT, 'Timber_kdef',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(239), 'propget'], HRESULT, 'Timber_ServiceClass',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(239), 'propput'], HRESULT, 'Timber_ServiceClass',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(240)], HRESULT, 'DefineAsTimberTruss',
              ( ['in'], c_int, 'MaterialIndex' ),
              ( ['in'], c_int, 'ServiceClass' ),
              ( ['in'], c_double, 'kdef' ),
              ( ['in'], c_int, 'CrossSectionIndex' ),
              ( ['in'], ELineNonLinearity, 'TrussType' ),
              ( ['in'], c_double, 'Resistance' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(241), helpstring('Excentricity values are not used yet in this version!')], HRESULT, 'DefineAsTimberBeam',
              ( ['in'], c_int, 'MaterialIndex' ),
              ( ['in'], c_int, 'ServiceClass' ),
              ( ['in'], c_double, 'kdef' ),
              ( ['in'], c_int, 'StartCrossSectionIndex' ),
              ( ['in'], c_int, 'EndCrossSectionIndex' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'StartExcentricity' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'EndExcentricity' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(242), helpstring('Only Z excentricity values are used!')], HRESULT, 'DefineAsTimberRib',
              ( ['in'], c_int, 'MaterialIndex' ),
              ( ['in'], c_int, 'ServiceClass' ),
              ( ['in'], c_double, 'kdef' ),
              ( ['in'], c_int, 'StartCrossSectionIndex' ),
              ( ['in'], c_int, 'EndCrossSectionIndex' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'StartExcentricity' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'EndExcentricity' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(243)], HRESULT, 'GetTimberTrussData',
              ( ['out'], POINTER(c_int), 'MaterialIndex' ),
              ( ['out'], POINTER(c_int), 'ServiceClass' ),
              ( ['out'], POINTER(c_double), 'kdef' ),
              ( ['out'], POINTER(c_int), 'CrossSectionIndex' ),
              ( ['out'], POINTER(ELineNonLinearity), 'TrussType' ),
              ( ['out'], POINTER(c_double), 'Resistance' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(244), helpstring('Excentricity values are not used yet in this version!')], HRESULT, 'GetTimberBeamData',
              ( ['out'], POINTER(c_int), 'MaterialIndex' ),
              ( ['out'], POINTER(c_int), 'ServiceClass' ),
              ( ['out'], POINTER(c_double), 'kdef' ),
              ( ['out'], POINTER(c_int), 'StartCrossSectionIndex' ),
              ( ['out'], POINTER(c_int), 'EndCrossSectionIndex' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'StartExcentricity' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'EndExcentricity' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(245), helpstring('Only Z excentricity values are used!')], HRESULT, 'GetTimberRibData',
              ( ['out'], POINTER(c_int), 'MaterialIndex' ),
              ( ['out'], POINTER(c_int), 'ServiceClass' ),
              ( ['out'], POINTER(c_double), 'kdef' ),
              ( ['out'], POINTER(c_int), 'StartCrossSectionIndex' ),
              ( ['out'], POINTER(c_int), 'EndCrossSectionIndex' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'StartExcentricity' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'EndExcentricity' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(246)], HRESULT, 'DefineAsRibWithAutoExcentricity',
              ( ['in'], c_int, 'MaterialIndex' ),
              ( ['in'], c_int, 'StartCrossSectionIndex' ),
              ( ['in'], c_int, 'EndCrossSectionIndex' ),
              ( ['in'], EAutoExcentricityType, 'AutoExcentricityType' ),
              ( ['in'], c_double, 'kx' ),
              ( ['in'], c_int, 'Domain1' ),
              ( ['in'], c_int, 'Domain2' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(247)], HRESULT, 'DefineAsTimberRibWithAutoExcentricity',
              ( ['in'], c_int, 'MaterialIndex' ),
              ( ['in'], c_int, 'ServiceClass' ),
              ( ['in'], c_double, 'kdef' ),
              ( ['in'], c_int, 'StartCrossSectionIndex' ),
              ( ['in'], c_int, 'EndCrossSectionIndex' ),
              ( ['in'], EAutoExcentricityType, 'AutoExcentricityType' ),
              ( ['in'], c_double, 'kx' ),
              ( ['in'], c_int, 'Domain1' ),
              ( ['in'], c_int, 'Domain2' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(248)], HRESULT, 'GetRibDataWithAutoExcentricity',
              ( ['out'], POINTER(c_int), 'MaterialIndex' ),
              ( ['out'], POINTER(c_int), 'StartCrossSectionIndex' ),
              ( ['out'], POINTER(c_int), 'EndCrossSectionIndex' ),
              ( ['out'], POINTER(EAutoExcentricityType), 'AutoExcentricityType' ),
              ( ['out'], POINTER(c_double), 'kx' ),
              ( ['out'], POINTER(c_int), 'Domain1' ),
              ( ['out'], POINTER(c_int), 'Domain2' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(249)], HRESULT, 'GetTimberRibDataWithAutoExcentricity',
              ( ['out'], POINTER(c_int), 'MaterialIndex' ),
              ( ['out'], POINTER(c_int), 'ServiceClass' ),
              ( ['out'], POINTER(c_double), 'kdef' ),
              ( ['out'], POINTER(c_int), 'StartCrossSectionIndex' ),
              ( ['out'], POINTER(c_int), 'EndCrossSectionIndex' ),
              ( ['out'], POINTER(EAutoExcentricityType), 'AutoExcentricityType' ),
              ( ['out'], POINTER(c_double), 'kx' ),
              ( ['out'], POINTER(c_int), 'Domain1' ),
              ( ['out'], POINTER(c_int), 'Domain2' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(250), 'propget'], HRESULT, 'Weight',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(251), 'propget'], HRESULT, 'Volume',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(252), 'propget'], HRESULT, 'IsBeam',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(253), 'propget'], HRESULT, 'IsColumn',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(254), 'propget'], HRESULT, 'IsOtherType',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(255), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(256), 'propget'], HRESULT, 'StoreyId',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(257), 'propget'], HRESULT, 'MemberID',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(258), 'propget'], HRESULT, 'ColumnReinforcementParametersExists',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(259)], HRESULT, 'DeleteColumnReinforcementParameters',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(260)], HRESULT, 'GetColumnReinforcementParameters',
              ( ['in', 'out'], POINTER(RColumnReinforcementParameters), 'ColumnReinforcementParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(261)], HRESULT, 'SetColumnReinforcementParameters',
              ( ['in', 'out'], POINTER(RColumnReinforcementParameters), 'ColumnReinforcementParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(262), 'propget'], HRESULT, 'RigidBodyId',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(263), 'propget'], HRESULT, 'MaterialColour',
              ( ['out', 'retval'], POINTER(c_ulong), 'Value' )),
    COMMETHOD([dispid(263), 'propput'], HRESULT, 'MaterialColour',
              ( ['in'], c_ulong, 'Value' )),
    COMMETHOD([dispid(264), 'propget'], HRESULT, 'ContourColour',
              ( ['out', 'retval'], POINTER(c_ulong), 'Value' )),
    COMMETHOD([dispid(264), 'propput'], HRESULT, 'ContourColour',
              ( ['in'], c_ulong, 'Value' )),
    COMMETHOD([dispid(265), 'propget'], HRESULT, 'ArchitectElemType',
              ( ['out', 'retval'], POINTER(EArchitectElemType), 'Value' )),
    COMMETHOD([dispid(265), 'propput'], HRESULT, 'ArchitectElemType',
              ( ['in'], EArchitectElemType, 'Value' )),
    COMMETHOD([dispid(266), 'propget'], HRESULT, 'MaterialColour_vb',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(266), 'propput'], HRESULT, 'MaterialColour_vb',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(267), 'propget'], HRESULT, 'ContourColour_vb',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(267), 'propput'], HRESULT, 'ContourColour_vb',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(269), 'propget'], HRESULT, 'StiffnessReduction_A',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(269), 'propput'], HRESULT, 'StiffnessReduction_A',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(270), 'propget'], HRESULT, 'StiffnessReduction_I',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(270), 'propput'], HRESULT, 'StiffnessReduction_I',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(271)], HRESULT, 'DeleteLineElement',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(272), 'propget'], HRESULT, 'StiffnessReduction',
              ( ['in'], ELineStiffnessReduction, 'Component' ),
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(272), 'propput'], HRESULT, 'StiffnessReduction',
              ( ['in'], ELineStiffnessReduction, 'Component' ),
              ( ['in'], c_double, 'Value' )),
]
################################################################
## code template for IAxisVMLine implementation
##class IAxisVMLine_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    StartNode = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    EndNode = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def GeomType(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def LineType(self):
##        '-no docstring-'
##        #return Value
##
##    def _get(self):
##        '0 means automatic refenrece'
##        #return Value
##    def _set(self, Value):
##        '0 means automatic refenrece'
##    Reference = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    NonLinearity = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    TrussResistance = property(_get, _set, doc = _set.__doc__)
##
##    def DefineAsTruss(self, MaterialIndex, CrossSectionIndex, TrussType, Resistance):
##        '-no docstring-'
##        #return ResultValue
##
##    def DefineAsBeam(self, MaterialIndex, StartCrossSectionIndex, EndCrossSectionIndex):
##        'Excentricity values can be specified only at members level'
##        #return StartExcentricity, EndExcentricity, ResultValue
##
##    def DefineAsRib(self, MaterialIndex, StartCrossSectionIndex, EndCrossSectionIndex):
##        'Only Z excentricity values are used!'
##        #return StartExcentricity, EndExcentricity, ResultValue
##
##    def DefineAsSpring(self, SpringDirection):
##        '-no docstring-'
##        #return Stiffnesses, ResultValue
##
##    def DefineAsGap(self, GapType, ActiveStiffness, InactiveStiffness, InitialOpening, MinPenetration, MaxPenetration, AdjustmentRatio):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def Length(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def MidPointId(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def SectionCount(self, AnalysisType):
##        '-no docstring-'
##        #return Value
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    MidPointDOF = property(_get, _set, doc = _set.__doc__)
##
##    def GetGeomData(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetGeomData(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def GetStartReleases(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetStartReleases(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def GetEndReleases(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetEndReleases(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def GetMidPoint(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetGeomType(self, LineGeomType):
##        '-no docstring-'
##        #return LineGeomData, ResultValue
##
##    @property
##    def SectionPos(self, AnalysisType, SectionId):
##        '-no docstring-'
##        #return Value
##
##    def GetTrussData(self):
##        '-no docstring-'
##        #return MaterialIndex, CrossSectionIndex, TrussType, Resistance, ResultValue
##
##    def GetBeamData(self):
##        'Excentricity values are not used yet in this version!'
##        #return MaterialIndex, StartCrossSectionIndex, EndCrossSectionIndex, StartExcentricity, EndExcentricity, ResultValue
##
##    def GetRibData(self):
##        'Only Z excentricity values are used!'
##        #return MaterialIndex, StartCrossSectionIndex, EndCrossSectionIndex, StartExcentricity, EndExcentricity, ResultValue
##
##    def GetSpringData(self):
##        '-no docstring-'
##        #return SpringDirection, Stiffnesses, ResultValue
##
##    def GetGapData(self):
##        '-no docstring-'
##        #return GapType, ActiveStiffness, InactiveStiffness, InitialOpening, MinPenetration, MaxPenetration, AdjustmentRatio, ResultValue
##
##    def ChangeLocalDirection(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def SplitByNode(self, NodeId):
##        '-no docstring-'
##        #return LineId1, LineId2, ResultValue
##
##    def SplitByN(self, N):
##        '-no docstring-'
##        #return ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Timber_kdef = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Timber_ServiceClass = property(_get, _set, doc = _set.__doc__)
##
##    def DefineAsTimberTruss(self, MaterialIndex, ServiceClass, kdef, CrossSectionIndex, TrussType, Resistance):
##        '-no docstring-'
##        #return ResultValue
##
##    def DefineAsTimberBeam(self, MaterialIndex, ServiceClass, kdef, StartCrossSectionIndex, EndCrossSectionIndex):
##        'Excentricity values are not used yet in this version!'
##        #return StartExcentricity, EndExcentricity, ResultValue
##
##    def DefineAsTimberRib(self, MaterialIndex, ServiceClass, kdef, StartCrossSectionIndex, EndCrossSectionIndex):
##        'Only Z excentricity values are used!'
##        #return StartExcentricity, EndExcentricity, ResultValue
##
##    def GetTimberTrussData(self):
##        '-no docstring-'
##        #return MaterialIndex, ServiceClass, kdef, CrossSectionIndex, TrussType, Resistance, ResultValue
##
##    def GetTimberBeamData(self):
##        'Excentricity values are not used yet in this version!'
##        #return MaterialIndex, ServiceClass, kdef, StartCrossSectionIndex, EndCrossSectionIndex, StartExcentricity, EndExcentricity, ResultValue
##
##    def GetTimberRibData(self):
##        'Only Z excentricity values are used!'
##        #return MaterialIndex, ServiceClass, kdef, StartCrossSectionIndex, EndCrossSectionIndex, StartExcentricity, EndExcentricity, ResultValue
##
##    def DefineAsRibWithAutoExcentricity(self, MaterialIndex, StartCrossSectionIndex, EndCrossSectionIndex, AutoExcentricityType, kx, Domain1, Domain2):
##        '-no docstring-'
##        #return ResultValue
##
##    def DefineAsTimberRibWithAutoExcentricity(self, MaterialIndex, ServiceClass, kdef, StartCrossSectionIndex, EndCrossSectionIndex, AutoExcentricityType, kx, Domain1, Domain2):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetRibDataWithAutoExcentricity(self):
##        '-no docstring-'
##        #return MaterialIndex, StartCrossSectionIndex, EndCrossSectionIndex, AutoExcentricityType, kx, Domain1, Domain2, ResultValue
##
##    def GetTimberRibDataWithAutoExcentricity(self):
##        '-no docstring-'
##        #return MaterialIndex, ServiceClass, kdef, StartCrossSectionIndex, EndCrossSectionIndex, AutoExcentricityType, kx, Domain1, Domain2, ResultValue
##
##    @property
##    def Weight(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Volume(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def IsBeam(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def IsColumn(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def IsOtherType(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Name(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def StoreyId(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def MemberID(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def ColumnReinforcementParametersExists(self):
##        '-no docstring-'
##        #return Value
##
##    def DeleteColumnReinforcementParameters(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetColumnReinforcementParameters(self):
##        '-no docstring-'
##        #return ColumnReinforcementParameters, ResultValue
##
##    def SetColumnReinforcementParameters(self):
##        '-no docstring-'
##        #return ColumnReinforcementParameters, ResultValue
##
##    @property
##    def RigidBodyId(self):
##        '-no docstring-'
##        #return Value
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    MaterialColour = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    ContourColour = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    ArchitectElemType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    MaterialColour_vb = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    ContourColour_vb = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    StiffnessReduction_A = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    StiffnessReduction_I = property(_get, _set, doc = _set.__doc__)
##
##    def DeleteLineElement(self):
##        '-no docstring-'
##        #return Value
##
##    def _get(self, Component):
##        '-no docstring-'
##        #return Value
##    def _set(self, Component, Value):
##        '-no docstring-'
##    StiffnessReduction = property(_get, _set, doc = _set.__doc__)
##

IAxisVMLoadGroup._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(201), 'propput'], HRESULT, 'Name',
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'LoadGroupType',
              ( ['out', 'retval'], POINTER(ELoadGroupType), 'Value' )),
    COMMETHOD([dispid(202), 'propput'], HRESULT, 'LoadGroupType',
              ( ['in'], ELoadGroupType, 'Value' )),
    COMMETHOD([dispid(203), 'propget'], HRESULT, 'SimultExc',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(203), 'propput'], HRESULT, 'SimultExc',
              ( ['in'], ELongBoolean, 'Value' )),
    COMMETHOD([dispid(204), 'propget'], HRESULT, 'CombinationType',
              ( ['out', 'retval'], POINTER(EGroupCombinationType), 'Value' )),
    COMMETHOD([dispid(204), 'propput'], HRESULT, 'CombinationType',
              ( ['in'], EGroupCombinationType, 'Value' )),
    COMMETHOD([dispid(205), helpstring('ndcEuroCode* (seismic) or ndcRomanian'), 'propget'], HRESULT, 'gammaI',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(205), helpstring('ndcEuroCode* (seismic) or ndcRomanian'), 'propput'], HRESULT, 'gammaI',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(206), helpstring('ndcEuroCode* (permanent, incidental) or ndcRomanian or  ndcDutch'), 'propget'], HRESULT, 'GammaSup',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(206), helpstring('ndcEuroCode* (permanent, incidental) or ndcRomanian or  ndcDutch'), 'propput'], HRESULT, 'GammaSup',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(207), helpstring('ndcEuroCode* (permanent, incidental) or ndcRomanian or  ndcDutch'), 'propget'], HRESULT, 'GammaInf',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(207), helpstring('ndcEuroCode* (permanent, incidental) or ndcRomanian or  ndcDutch'), 'propput'], HRESULT, 'GammaInf',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(208), helpstring('ndcEuroCode* (permanent, incidental) or ndcRomanian'), 'propget'], HRESULT, 'Psi0',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(208), helpstring('ndcEuroCode* (permanent, incidental) or ndcRomanian'), 'propput'], HRESULT, 'Psi0',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(209), helpstring('ndcEuroCode* (permanent, incidental) or ndcRomanian'), 'propget'], HRESULT, 'Psi1',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(209), helpstring('ndcEuroCode* (permanent, incidental) or ndcRomanian'), 'propput'], HRESULT, 'Psi1',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(210), helpstring('ndcEuroCode* (permanent, incidental) or ndcRomanian'), 'propget'], HRESULT, 'Psi2',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(210), helpstring('ndcEuroCode* (permanent, incidental) or ndcRomanian'), 'propput'], HRESULT, 'Psi2',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(211), helpstring('ndcHungarian'), 'propget'], HRESULT, 'SfactUp',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(211), helpstring('ndcHungarian'), 'propput'], HRESULT, 'SfactUp',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(212), helpstring('ndcHungarian'), 'propget'], HRESULT, 'SfactInf',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(212), helpstring('ndcHungarian'), 'propput'], HRESULT, 'SfactInf',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(213), helpstring('ndcHungarian'), 'propget'], HRESULT, 'SimFact',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(213), helpstring('ndcHungarian'), 'propput'], HRESULT, 'SimFact',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(214), helpstring('ndcHungarian'), 'propget'], HRESULT, 'DynFact',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(214), helpstring('ndcHungarian'), 'propput'], HRESULT, 'DynFact',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(215), helpstring('ndcDutch'), 'propget'], HRESULT, 'psi',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(215), helpstring('ndcDutch'), 'propput'], HRESULT, 'psi',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(216), helpstring('ndcDutch'), 'propget'], HRESULT, 'PsiT',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(216), helpstring('ndcDutch'), 'propput'], HRESULT, 'PsiT',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(217), helpstring('ndcDutch'), 'propget'], HRESULT, 'GammaFsw',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(217), helpstring('ndcDutch'), 'propput'], HRESULT, 'GammaFsw',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(218), helpstring('ndcDutch'), 'propget'], HRESULT, 'PermLoadRatio',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(218), helpstring('ndcDutch'), 'propput'], HRESULT, 'PermLoadRatio',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(219), helpstring('ndcEuroCode'), 'propget'], HRESULT, 'Ksi',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(219), helpstring('ndcEuroCode'), 'propput'], HRESULT, 'Ksi',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(220), 'propget'], HRESULT, 'SeismicGroupID',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
]
################################################################
## code template for IAxisVMLoadGroup implementation
##class IAxisVMLoadGroup_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LoadGroupType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    SimultExc = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    CombinationType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'ndcEuroCode* (seismic) or ndcRomanian'
##        #return Value
##    def _set(self, Value):
##        'ndcEuroCode* (seismic) or ndcRomanian'
##    gammaI = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'ndcEuroCode* (permanent, incidental) or ndcRomanian or  ndcDutch'
##        #return Value
##    def _set(self, Value):
##        'ndcEuroCode* (permanent, incidental) or ndcRomanian or  ndcDutch'
##    GammaSup = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'ndcEuroCode* (permanent, incidental) or ndcRomanian or  ndcDutch'
##        #return Value
##    def _set(self, Value):
##        'ndcEuroCode* (permanent, incidental) or ndcRomanian or  ndcDutch'
##    GammaInf = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'ndcEuroCode* (permanent, incidental) or ndcRomanian'
##        #return Value
##    def _set(self, Value):
##        'ndcEuroCode* (permanent, incidental) or ndcRomanian'
##    Psi0 = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'ndcEuroCode* (permanent, incidental) or ndcRomanian'
##        #return Value
##    def _set(self, Value):
##        'ndcEuroCode* (permanent, incidental) or ndcRomanian'
##    Psi1 = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'ndcEuroCode* (permanent, incidental) or ndcRomanian'
##        #return Value
##    def _set(self, Value):
##        'ndcEuroCode* (permanent, incidental) or ndcRomanian'
##    Psi2 = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'ndcHungarian'
##        #return Value
##    def _set(self, Value):
##        'ndcHungarian'
##    SfactUp = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'ndcHungarian'
##        #return Value
##    def _set(self, Value):
##        'ndcHungarian'
##    SfactInf = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'ndcHungarian'
##        #return Value
##    def _set(self, Value):
##        'ndcHungarian'
##    SimFact = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'ndcHungarian'
##        #return Value
##    def _set(self, Value):
##        'ndcHungarian'
##    DynFact = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'ndcDutch'
##        #return Value
##    def _set(self, Value):
##        'ndcDutch'
##    psi = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'ndcDutch'
##        #return Value
##    def _set(self, Value):
##        'ndcDutch'
##    PsiT = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'ndcDutch'
##        #return Value
##    def _set(self, Value):
##        'ndcDutch'
##    GammaFsw = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'ndcDutch'
##        #return Value
##    def _set(self, Value):
##        'ndcDutch'
##    PermLoadRatio = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'ndcEuroCode'
##        #return Value
##    def _set(self, Value):
##        'ndcEuroCode'
##    Ksi = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SeismicGroupID(self):
##        '-no docstring-'
##        #return Value
##


# values for enumeration 'ELogicalPartsError'
lpeMaterialIdOutOfBounds = -100001
lpeCrossSectionIdOutOfBounds = -100002
lpeInvalidLineType = -100003
lpeNotFound = -100004
lpeStoreyIdOutOfBounds = -100005
lpeStructuralGridLineUIDOutOfBounds = -100006
ELogicalPartsError = c_int # enum

# values for enumeration 'ECrossSectionBasicType'
csbtAll = 0
csbtSolid = 1
csbtThinWalled = 2
csbtCompositeThinWalled = 4
csbtCompositeSolid = 8
ECrossSectionBasicType = c_int # enum
RShowLabels._fields_ = [
    ('ShowNumbering', RShowNumbering),
    ('ShowProperties', RShowProperties),
    ('ShowActualReinf', RShowActualReinforcement),
    ('UseFiniteElements', ELongBoolean),
    ('LabelsOnLines', ELongBoolean),
]
assert sizeof(RShowLabels) == 188, sizeof(RShowLabels)
assert alignment(RShowLabels) == 4, alignment(RShowLabels)
RVirtualStripParams._fields_ = [
    ('Name', BSTR),
    ('StartP', RPoint3d),
    ('EndP', RPoint3d),
    ('SectionI', c_int),
    ('SectionJ', c_int),
    ('NormV', RPoint3d),
    ('L', c_double),
    ('R', c_double),
    ('DefinitionType', EVSDefinitionType),
    ('EccIY', c_double),
    ('EccIZ', c_double),
    ('EccJY', c_double),
    ('EccJZ', c_double),
]
assert sizeof(RVirtualStripParams) == 144, sizeof(RVirtualStripParams)
assert alignment(RVirtualStripParams) == 8, alignment(RVirtualStripParams)
IAxisVMCalcCrackWidth._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202)], HRESULT, 'GetCrackWidthsByLoadCaseId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RCrackWidths), 'CrackWidths' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(203)], HRESULT, 'GetCrackWidthsByLoadCombinationId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in', 'out'], POINTER(RCrackWidths), 'CrackWidths' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204), helpstring('Combination is a multiline string (separated with CR+LF) where the lines belong to: ContourPoint1_Bottom, ContourPoint1_Top, ContourLineMidPoint1_Bottom, ContourLineMidPoint1_Top, ContourPoint2_Bottom, ContourPoint2_Top, ContourLineMidPoint2_Bottom, ContourLin')], HRESULT, 'GetEnvelopeCrackWidths',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ECrackWidth, 'Component' ),
              ( ['in', 'out'], POINTER(RCrackWidths), 'CrackWidths' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205), helpstring('Combination is a multiline string (separated with CR+LF) where the lines belong to: ContourPoint1_Bottom, ContourPoint1_Top, ContourLineMidPoint1_Bottom, ContourLineMidPoint1_Top, ContourPoint2_Bottom, ContourPoint2_Top, ContourLineMidPoint2_Bottom, ContourLin')], HRESULT, 'GetCriticalCrackWidths',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ECrackWidth, 'Component' ),
              ( ['in', 'out'], POINTER(RCrackWidths), 'CrackWidths' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'GetAllCrackWidthsByLoadCaseId',
              ( ['in'], c_int, 'LoadCaseId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RCrackWidths)), 'CrackWidths' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'GetAllCrackWidthsByLoadCombinationId',
              ( ['in'], c_int, 'LoadCombinationId' ),
              ( ['in'], c_int, 'LoadLevel' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RCrackWidths)), 'CrackWidths' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208), helpstring('Combinations contain multiline strings (separated with CR+LF) where the lines belong to: ContourPoint1_Bottom, ContourPoint1_Top, ContourLineMidPoint1_Bottom, ContourLineMidPoint1_Top, ContourPoint2_Bottom, ContourPoint2_Top, ContourLineMidPoint2_Bottom, Conto')], HRESULT, 'GetAllEnvelopeCrackWidths',
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ECrackWidth, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RCrackWidths)), 'CrackWidths' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209), helpstring('Combinations contain multiline strings (separated with CR+LF) where the lines belong to: ContourPoint1_Bottom, ContourPoint1_Top, ContourLineMidPoint1_Bottom, ContourLineMidPoint1_Top, ContourPoint2_Bottom, ContourPoint2_Top, ContourLineMidPoint2_Bottom, Conto')], HRESULT, 'GetAllCriticalCrackWidths',
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ECrackWidth, 'Component' ),
              ( ['out'], POINTER(_midlSAFEARRAY(RCrackWidths)), 'CrackWidths' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(210), 'propget'], HRESULT, 'AnalysisType',
              ( ['out', 'retval'], POINTER(EAnalysisType), 'Value' )),
    COMMETHOD([dispid(210), 'propput'], HRESULT, 'AnalysisType',
              ( ['in'], EAnalysisType, 'Value' )),
    COMMETHOD([dispid(211), 'propget'], HRESULT, 'LoadCaseId',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(211), 'propput'], HRESULT, 'LoadCaseId',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(212), 'propget'], HRESULT, 'LoadCombinationId',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(212), 'propput'], HRESULT, 'LoadCombinationId',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(214), 'propget'], HRESULT, 'CombinationType',
              ( ['out', 'retval'], POINTER(ECombinationType), 'Value' )),
    COMMETHOD([dispid(214), 'propput'], HRESULT, 'CombinationType',
              ( ['in'], ECombinationType, 'Value' )),
    COMMETHOD([dispid(215), 'propget'], HRESULT, 'LoadLevel',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(215), 'propput'], HRESULT, 'LoadLevel',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(216), 'propget'], HRESULT, 'Component',
              ( ['out', 'retval'], POINTER(ECrackWidth), 'Value' )),
    COMMETHOD([dispid(216), 'propput'], HRESULT, 'Component',
              ( ['in'], ECrackWidth, 'Value' )),
    COMMETHOD([dispid(217)], HRESULT, 'CrackWidthsByLoadCaseId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in', 'out'], POINTER(RCrackWidths), 'CrackWidths' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(218)], HRESULT, 'CrackWidthsByLoadCombinationId',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in', 'out'], POINTER(RCrackWidths), 'CrackWidths' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(219), helpstring('Combination is a multiline string (separated with CR+LF) where the lines belong to: ContourPoint1_Bottom, ContourPoint1_Top, ContourLineMidPoint1_Bottom, ContourLineMidPoint1_Top, ContourPoint2_Bottom, ContourPoint2_Top, ContourLineMidPoint2_Bottom, ContourLin')], HRESULT, 'EnvelopeCrackWidths',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in', 'out'], POINTER(RCrackWidths), 'CrackWidths' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(220), helpstring('Combination is a multiline string (separated with CR+LF) where the lines belong to: ContourPoint1_Bottom, ContourPoint1_Top, ContourLineMidPoint1_Bottom, ContourLineMidPoint1_Top, ContourPoint2_Bottom, ContourPoint2_Top, ContourLineMidPoint2_Bottom, ContourLin')], HRESULT, 'CriticalCrackWidths',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in', 'out'], POINTER(RCrackWidths), 'CrackWidths' ),
              ( ['out'], POINTER(BSTR), 'Combination' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(221)], HRESULT, 'AllCrackWidthsByLoadCaseId',
              ( ['out'], POINTER(_midlSAFEARRAY(RCrackWidths)), 'CrackWidths' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(222)], HRESULT, 'AllCrackWidthsByLoadCombinationId',
              ( ['out'], POINTER(_midlSAFEARRAY(RCrackWidths)), 'CrackWidths' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(223), helpstring('Combinations contain multiline strings (separated with CR+LF) where the lines belong to: ContourPoint1_Bottom, ContourPoint1_Top, ContourLineMidPoint1_Bottom, ContourLineMidPoint1_Top, ContourPoint2_Bottom, ContourPoint2_Top, ContourLineMidPoint2_Bottom, Conto')], HRESULT, 'AllEnvelopeCrackWidths',
              ( ['out'], POINTER(_midlSAFEARRAY(RCrackWidths)), 'CrackWidths' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(224), helpstring('Combinations contain multiline strings (separated with CR+LF) where the lines belong to: ContourPoint1_Bottom, ContourPoint1_Top, ContourLineMidPoint1_Bottom, ContourLineMidPoint1_Top, ContourPoint2_Bottom, ContourPoint2_Top, ContourLineMidPoint2_Bottom, Conto')], HRESULT, 'AllCriticalCrackWidths',
              ( ['out'], POINTER(_midlSAFEARRAY(RCrackWidths)), 'CrackWidths' ),
              ( ['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Combinations' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(225), 'propget'], HRESULT, 'EnvelopeUID',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(225), 'propput'], HRESULT, 'EnvelopeUID',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(228), helpstring('LoadCaseOrCombinationId is an index of load case if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count')], HRESULT, 'GetEnvelopeCrackWidths2',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ECrackWidth, 'Component' ),
              ( ['in', 'out'], POINTER(RCrackWidths), 'CrackWidths' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'LoadLevel' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(229)], HRESULT, 'GetCriticalCrackWidths2',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in'], ECombinationType, 'CombinationType' ),
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], ECrackWidth, 'Component' ),
              ( ['in', 'out'], POINTER(RCrackWidths), 'CrackWidths' ),
              ( ['out'], POINTER(ECombinationType), 'CriticalCombinationType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Factors' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(232), helpstring('LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count')], HRESULT, 'EnvelopeCrackWidths2',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in', 'out'], POINTER(RCrackWidths), 'CrackWidths' ),
              ( ['out'], POINTER(c_int), 'LoadCaseOrCombinationId' ),
              ( ['out'], POINTER(c_int), 'LoadLevel' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(233)], HRESULT, 'CriticalCrackWidths2',
              ( ['in'], c_int, 'SurfaceId' ),
              ( ['in', 'out'], POINTER(RCrackWidths), 'CrackWidths' ),
              ( ['out'], POINTER(ECombinationType), 'CriticalCombinationType' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_double)), 'Factors' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadCaseIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(234)], HRESULT, 'SetUserCreep',
              ( ['in'], ELongBoolean, 'Creep' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(235), 'propget'], HRESULT, 'UserCreep',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
]
################################################################
## code template for IAxisVMCalcCrackWidth implementation
##class IAxisVMCalcCrackWidth_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def GetCrackWidthsByLoadCaseId(self, SurfaceId, LoadCaseId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return CrackWidths, Combination, ResultValue
##
##    def GetCrackWidthsByLoadCombinationId(self, SurfaceId, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return CrackWidths, Combination, ResultValue
##
##    def GetEnvelopeCrackWidths(self, SurfaceId, AnalysisType, Component):
##        'Combination is a multiline string (separated with CR+LF) where the lines belong to: ContourPoint1_Bottom, ContourPoint1_Top, ContourLineMidPoint1_Bottom, ContourLineMidPoint1_Top, ContourPoint2_Bottom, ContourPoint2_Top, ContourLineMidPoint2_Bottom, ContourLin'
##        #return CrackWidths, Combination, ResultValue
##
##    def GetCriticalCrackWidths(self, SurfaceId, CombinationType, AnalysisType, Component):
##        'Combination is a multiline string (separated with CR+LF) where the lines belong to: ContourPoint1_Bottom, ContourPoint1_Top, ContourLineMidPoint1_Bottom, ContourLineMidPoint1_Top, ContourPoint2_Bottom, ContourPoint2_Top, ContourLineMidPoint2_Bottom, ContourLin'
##        #return CrackWidths, Combination, ResultValue
##
##    def GetAllCrackWidthsByLoadCaseId(self, LoadCaseId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return CrackWidths, Combinations, ResultValue
##
##    def GetAllCrackWidthsByLoadCombinationId(self, LoadCombinationId, LoadLevel, AnalysisType):
##        '-no docstring-'
##        #return CrackWidths, Combinations, ResultValue
##
##    def GetAllEnvelopeCrackWidths(self, AnalysisType, Component):
##        'Combinations contain multiline strings (separated with CR+LF) where the lines belong to: ContourPoint1_Bottom, ContourPoint1_Top, ContourLineMidPoint1_Bottom, ContourLineMidPoint1_Top, ContourPoint2_Bottom, ContourPoint2_Top, ContourLineMidPoint2_Bottom, Conto'
##        #return CrackWidths, Combinations, ResultValue
##
##    def GetAllCriticalCrackWidths(self, CombinationType, AnalysisType, Component):
##        'Combinations contain multiline strings (separated with CR+LF) where the lines belong to: ContourPoint1_Bottom, ContourPoint1_Top, ContourLineMidPoint1_Bottom, ContourLineMidPoint1_Top, ContourPoint2_Bottom, ContourPoint2_Top, ContourLineMidPoint2_Bottom, Conto'
##        #return CrackWidths, Combinations, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    AnalysisType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LoadCaseId = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LoadCombinationId = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    CombinationType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LoadLevel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Component = property(_get, _set, doc = _set.__doc__)
##
##    def CrackWidthsByLoadCaseId(self, SurfaceId):
##        '-no docstring-'
##        #return CrackWidths, Combination, ResultValue
##
##    def CrackWidthsByLoadCombinationId(self, SurfaceId):
##        '-no docstring-'
##        #return CrackWidths, Combination, ResultValue
##
##    def EnvelopeCrackWidths(self, SurfaceId):
##        'Combination is a multiline string (separated with CR+LF) where the lines belong to: ContourPoint1_Bottom, ContourPoint1_Top, ContourLineMidPoint1_Bottom, ContourLineMidPoint1_Top, ContourPoint2_Bottom, ContourPoint2_Top, ContourLineMidPoint2_Bottom, ContourLin'
##        #return CrackWidths, Combination, ResultValue
##
##    def CriticalCrackWidths(self, SurfaceId):
##        'Combination is a multiline string (separated with CR+LF) where the lines belong to: ContourPoint1_Bottom, ContourPoint1_Top, ContourLineMidPoint1_Bottom, ContourLineMidPoint1_Top, ContourPoint2_Bottom, ContourPoint2_Top, ContourLineMidPoint2_Bottom, ContourLin'
##        #return CrackWidths, Combination, ResultValue
##
##    def AllCrackWidthsByLoadCaseId(self):
##        '-no docstring-'
##        #return CrackWidths, Combinations, ResultValue
##
##    def AllCrackWidthsByLoadCombinationId(self):
##        '-no docstring-'
##        #return CrackWidths, Combinations, ResultValue
##
##    def AllEnvelopeCrackWidths(self):
##        'Combinations contain multiline strings (separated with CR+LF) where the lines belong to: ContourPoint1_Bottom, ContourPoint1_Top, ContourLineMidPoint1_Bottom, ContourLineMidPoint1_Top, ContourPoint2_Bottom, ContourPoint2_Top, ContourLineMidPoint2_Bottom, Conto'
##        #return CrackWidths, Combinations, ResultValue
##
##    def AllCriticalCrackWidths(self):
##        'Combinations contain multiline strings (separated with CR+LF) where the lines belong to: ContourPoint1_Bottom, ContourPoint1_Top, ContourLineMidPoint1_Bottom, ContourLineMidPoint1_Top, ContourPoint2_Bottom, ContourPoint2_Top, ContourLineMidPoint2_Bottom, Conto'
##        #return CrackWidths, Combinations, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    EnvelopeUID = property(_get, _set, doc = _set.__doc__)
##
##    def GetEnvelopeCrackWidths2(self, SurfaceId, AnalysisType, Component):
##        'LoadCaseOrCombinationId is an index of load case if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count'
##        #return CrackWidths, LoadCaseOrCombinationId, LoadLevel, ResultValue
##
##    def GetCriticalCrackWidths2(self, SurfaceId, CombinationType, AnalysisType, Component):
##        '-no docstring-'
##        #return CrackWidths, CriticalCombinationType, Factors, LoadCaseIds, ResultValue
##
##    def EnvelopeCrackWidths2(self, SurfaceId):
##        'LoadCaseOrCombinationId is an index of load cease if <= than LoadCases.count otherwise LoadCombinationIndex = LoadCaseOrCombinationId -  LoadCases.count'
##        #return CrackWidths, LoadCaseOrCombinationId, LoadLevel, ResultValue
##
##    def CriticalCrackWidths2(self, SurfaceId):
##        '-no docstring-'
##        #return CrackWidths, CriticalCombinationType, Factors, LoadCaseIds, ResultValue
##
##    def SetUserCreep(self, Creep):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def UserCreep(self):
##        '-no docstring-'
##        #return Value
##

RUnitParameters._fields_ = [
    ('ConversionBaseID', c_int),
    ('UsedID', c_int),
    ('DecimalPlaces', c_int),
    ('Multiplier', c_double),
]
assert sizeof(RUnitParameters) == 24, sizeof(RUnitParameters)
assert alignment(RUnitParameters) == 8, alignment(RUnitParameters)

# values for enumeration 'EApplicationError'
appeUnknownUnitSystem = -100001
EApplicationError = c_int # enum
RMatrix2x2._fields_ = [
    ('e11', c_double),
    ('e12', c_double),
    ('e21', c_double),
    ('e22', c_double),
]
assert sizeof(RMatrix2x2) == 32, sizeof(RMatrix2x2)
assert alignment(RMatrix2x2) == 8, alignment(RMatrix2x2)
RDynamicAnalysis._fields_ = [
    ('LoadCase', c_int),
    ('StaticLoadCase', c_int),
    ('LoadCombination', c_int),
    ('TimeIncrementFunctionId', c_int),
    ('TimeIncrement', c_double),
    ('NumberOfIncrements', c_int),
    ('a', c_double),
    ('b', c_double),
    ('MassMatrixType', EMassMatrixType),
    ('ConvertLoadsToMasses', ELongBoolean),
    ('ConcentratedMasses', ELongBoolean),
    ('ConvertConcentratedMassesToLoads', ELongBoolean),
    ('MassControl', EMassControl),
    ('ElementMasses', ELongBoolean),
    ('MaterialNonLinearity', ELongBoolean),
    ('GeometricNonLinearity', ELongBoolean),
    ('PerformIterations', ELongBoolean),
    ('Iterations', c_int),
    ('DisplacementConvergenceValue', c_double),
    ('ForceConvergenceValue', c_double),
    ('WorkConvergenceValue', c_double),
    ('EnableDisplacementConvergence', ELongBoolean),
    ('EnableForceConvergence', ELongBoolean),
    ('EnableWorkConvergence', ELongBoolean),
    ('ContinueWithoutConvergence', ELongBoolean),
    ('SavingInterval', c_double),
    ('LoadsAndNodalMassesForDamping', ELongBoolean),
]
assert sizeof(RDynamicAnalysis) == 144, sizeof(RDynamicAnalysis)
assert alignment(RDynamicAnalysis) == 8, alignment(RDynamicAnalysis)
RDomainCompositeRib._fields_ = [
    ('RibMaterial', c_int),
    ('CrossSection', c_int),
    ('Direction', EXYDirection),
    ('Origin', RPoint3d),
    ('d', c_double),
    ('EccType', EDomainCompRibEccType),
    ('Eccentricity', c_double),
    ('HasCustomShear', ELongBoolean),
    ('CustomShear', c_double),
    ('ActualRibs', ELongBoolean),
]
assert sizeof(RDomainCompositeRib) == 88, sizeof(RDomainCompositeRib)
assert alignment(RDomainCompositeRib) == 8, alignment(RDomainCompositeRib)
class RColumnStirrupSpacing(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{1C11EB91-69B0-4CC4-901A-1FD844C86CE6}')
RColumnStirrupSpacing._fields_ = [
    ('ss_bottom', c_double),
    ('ss_middle', c_double),
    ('ss_top', c_double),
]
assert sizeof(RColumnStirrupSpacing) == 24, sizeof(RColumnStirrupSpacing)
assert alignment(RColumnStirrupSpacing) == 8, alignment(RColumnStirrupSpacing)

# values for enumeration 'EMembersError'
mbeEmptyLineList = -100001
mbePropertyNotValidForThisLineType = -100002
mbeNotBeam = -100003
mbeNotRib = -100004
mbeIllegalServiceClassValue = -100005
mbeDomainIndexOutOfBounds = -100006
mbeStoreyIdOutOfBounds = -100007
mbeMustBeBeamOrRibOrTuss = -100008
mbeInvalidMemberType = -100009
mbeReinforcementParametersNotExsist = -100010
mbeInvalidColumnRebarsId = -100011
mbeInvalidConcreteMaterialId = -100012
mbeInvalidRebarSteelGradeId = -100013
mbeNotTruss = -100014
mbeInvalidRelease = -100015
mbeInvalidFunctionIDofRelease = -100016
mbeReleaseInitAndLimitMustBe0 = -100017
mbeFunctionIdMustBe0 = -100018
mbeMembersNotContinuous = -100019
mbeStartEndCrossSectionTypeIncompatible = -100020
mbeInvalidRCCheckingParameters = -100021
mbeRCShrinkageEpsMustBePositive = -100022
mbeStirrupParametersAreInvalid = -100023
mbeShearCrackAngleIsInvalid = -100024
mbeInvalidSteelMaterialId = -100025
mbeInvalidStiffnessReduction = -100026
mbeStiffnessReductionNotAllowed = -100027
mbeInvalidStiffnessReductionMat = -100028
mbeRibEccTypeUsedOnBeam = -100029
mbeReleaseFunctionIndexError = -100030
mbeReleaseInvalidType = -100031
mbeInvalidRefZ = -100032
mbeInvalidLineType = -100033
mbeReleaseInvalidMaterial = -100034
mbeReleaseInvalidComponent = -100035
EMembersError = c_int # enum
IAxisVMStructuralGridsEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Cleared'),
    DISPMETHOD([dispid(202)], HRESULT, 'Deleted',
               ( ['in'], c_int, 'Index' )),
    DISPMETHOD([dispid(203)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrorCode' )),
]
IAxisVMMember._methods_ = [
    COMMETHOD([dispid(201)], HRESULT, 'GetLines',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(202), 'propget'], HRESULT, 'MemberType',
              ( ['out', 'retval'], POINTER(ELineType), 'Value' )),
    COMMETHOD([dispid(203), helpstring('Excentricity values are not used yet in this version!')], HRESULT, 'DefineAsBeam',
              ( ['in'], c_int, 'MaterialIndex' ),
              ( ['in'], c_int, 'StartCrossSectionIndex' ),
              ( ['in'], c_int, 'EndCrossSectionIndex' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'StartExcentricity' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'EndExcentricity' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204), helpstring('Only Z excentricity values are used!')], HRESULT, 'DefineAsRib',
              ( ['in'], c_int, 'MaterialIndex' ),
              ( ['in'], c_int, 'StartCrossSectionIndex' ),
              ( ['in'], c_int, 'EndCrossSectionIndex' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'StartExcentricity' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'EndExcentricity' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205), 'propget'], HRESULT, 'Length',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(206)], HRESULT, 'GetStartReleases',
              ( ['in', 'out'], POINTER(RReleases), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'SetStartReleases',
              ( ['in', 'out'], POINTER(RReleases), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208)], HRESULT, 'GetEndReleases',
              ( ['in', 'out'], POINTER(RReleases), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209)], HRESULT, 'SetEndReleases',
              ( ['in', 'out'], POINTER(RReleases), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(210)], HRESULT, 'GetGeomData',
              ( ['in', 'out'], POINTER(RLineGeomData), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(211), helpstring('Excentricity values are not used yet in this version!')], HRESULT, 'GetBeamData',
              ( ['out'], POINTER(c_int), 'MaterialIndex' ),
              ( ['out'], POINTER(c_int), 'StartCrossSectionIndex' ),
              ( ['out'], POINTER(c_int), 'EndCrossSectionIndex' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'StartExcentricity' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'EndExcentricity' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(212), helpstring('Only Z excentricity values are used!')], HRESULT, 'GetRibData',
              ( ['out'], POINTER(c_int), 'MaterialIndex' ),
              ( ['out'], POINTER(c_int), 'StartCrossSectionIndex' ),
              ( ['out'], POINTER(c_int), 'EndCrossSectionIndex' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'StartExcentricity' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'EndExcentricity' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(213)], HRESULT, 'ChangeLocalDirection',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(214), 'propget'], HRESULT, 'Timber_kdef',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(214), 'propput'], HRESULT, 'Timber_kdef',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(215), 'propget'], HRESULT, 'Timber_ServiceClass',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(215), 'propput'], HRESULT, 'Timber_ServiceClass',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(216), helpstring('Excentricity values are not used yet in this version!')], HRESULT, 'DefineAsTimberBeam',
              ( ['in'], c_int, 'MaterialIndex' ),
              ( ['in'], c_int, 'ServiceClass' ),
              ( ['in'], c_double, 'kdef' ),
              ( ['in'], c_int, 'StartCrossSectionIndex' ),
              ( ['in'], c_int, 'EndCrossSectionIndex' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'StartExcentricity' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'EndExcentricity' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(217), helpstring('Only Z excentricity values are used!')], HRESULT, 'DefineAsTimberRib',
              ( ['in'], c_int, 'MaterialIndex' ),
              ( ['in'], c_int, 'ServiceClass' ),
              ( ['in'], c_double, 'kdef' ),
              ( ['in'], c_int, 'StartCrossSectionIndex' ),
              ( ['in'], c_int, 'EndCrossSectionIndex' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'StartExcentricity' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'EndExcentricity' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(218), helpstring('Excentricity values are not used yet in this version!')], HRESULT, 'GetTimberBeamData',
              ( ['out'], POINTER(c_int), 'MaterialIndex' ),
              ( ['out'], POINTER(c_int), 'ServiceClass' ),
              ( ['out'], POINTER(c_double), 'kdef' ),
              ( ['out'], POINTER(c_int), 'StartCrossSectionIndex' ),
              ( ['out'], POINTER(c_int), 'EndCrossSectionIndex' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'StartExcentricity' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'EndExcentricity' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(219), helpstring('Only Z excentricity values are used!')], HRESULT, 'GetTimberRibData',
              ( ['out'], POINTER(c_int), 'MaterialIndex' ),
              ( ['out'], POINTER(c_int), 'ServiceClass' ),
              ( ['out'], POINTER(c_double), 'kdef' ),
              ( ['out'], POINTER(c_int), 'StartCrossSectionIndex' ),
              ( ['out'], POINTER(c_int), 'EndCrossSectionIndex' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'StartExcentricity' ),
              ( ['in', 'out'], POINTER(RPoint3d), 'EndExcentricity' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(220)], HRESULT, 'DefineAsRibWithAutoExcentricity',
              ( ['in'], c_int, 'MaterialIndex' ),
              ( ['in'], c_int, 'StartCrossSectionIndex' ),
              ( ['in'], c_int, 'EndCrossSectionIndex' ),
              ( ['in'], EAutoExcentricityType, 'AutoExcentricityType' ),
              ( ['in'], c_double, 'kx' ),
              ( ['in'], c_int, 'Domain1' ),
              ( ['in'], c_int, 'Domain2' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(221)], HRESULT, 'DefineAsTimberRibWithAutoExcentricity',
              ( ['in'], c_int, 'MaterialIndex' ),
              ( ['in'], c_int, 'ServiceClass' ),
              ( ['in'], c_double, 'kdef' ),
              ( ['in'], c_int, 'StartCrossSectionIndex' ),
              ( ['in'], c_int, 'EndCrossSectionIndex' ),
              ( ['in'], EAutoExcentricityType, 'AutoExcentricityType' ),
              ( ['in'], c_double, 'kx' ),
              ( ['in'], c_int, 'Domain1' ),
              ( ['in'], c_int, 'Domain2' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(222)], HRESULT, 'GetRibDataWithAutoExcentricity',
              ( ['out'], POINTER(c_int), 'MaterialIndex' ),
              ( ['out'], POINTER(c_int), 'StartCrossSectionIndex' ),
              ( ['out'], POINTER(c_int), 'EndCrossSectionIndex' ),
              ( ['out'], POINTER(EAutoExcentricityType), 'AutoExcentricityType' ),
              ( ['out'], POINTER(c_double), 'kx' ),
              ( ['out'], POINTER(c_int), 'Domain1' ),
              ( ['out'], POINTER(c_int), 'Domain2' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(223)], HRESULT, 'GetTimberRibDataWithAutoExcentricity',
              ( ['out'], POINTER(c_int), 'MaterialIndex' ),
              ( ['out'], POINTER(c_int), 'ServiceClass' ),
              ( ['out'], POINTER(c_double), 'kdef' ),
              ( ['out'], POINTER(c_int), 'StartCrossSectionIndex' ),
              ( ['out'], POINTER(c_int), 'EndCrossSectionIndex' ),
              ( ['out'], POINTER(EAutoExcentricityType), 'AutoExcentricityType' ),
              ( ['out'], POINTER(c_double), 'kx' ),
              ( ['out'], POINTER(c_int), 'Domain1' ),
              ( ['out'], POINTER(c_int), 'Domain2' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(224)], HRESULT, 'GetMeshParameters',
              ( ['in', 'out'], POINTER(RMemberMeshParameters), 'MeshParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(225)], HRESULT, 'GetTrMatrix',
              ( ['in', 'out'], POINTER(RMatrix3x3), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(226), 'propget'], HRESULT, 'Weight',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(227), 'propget'], HRESULT, 'Volume',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(228), 'propget'], HRESULT, 'MeshExists',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(229), 'propget'], HRESULT, 'IsBeam',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(230), 'propget'], HRESULT, 'IsColumn',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(231), 'propget'], HRESULT, 'IsOtherType',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(232), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(233), 'propget'], HRESULT, 'StoreyId',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(234)], HRESULT, 'DeleteMesh',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(237)], HRESULT, 'GenerateMeshWithParams',
              ( ['in', 'out'], POINTER(RMemberMeshParameters), 'MeshParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(238)], HRESULT, 'CreateMeshWithCoordinates',
              ( ['in'], _midlSAFEARRAY(RPoint3d), 'Points' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(239), 'propget'], HRESULT, 'StartNode',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(240), 'propget'], HRESULT, 'EndNode',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(241), 'propget'], HRESULT, 'ColumnReinforcementParametersExists',
              ( ['out', 'retval'], POINTER(ELongBoolean), 'Value' )),
    COMMETHOD([dispid(242)], HRESULT, 'DeleteColumnReinforcementParameters',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(243)], HRESULT, 'GetColumnReinforcementParameters',
              ( ['in', 'out'], POINTER(RColumnReinforcementParameters), 'ColumnReinforcementParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(244)], HRESULT, 'SetColumnReinforcementParameters',
              ( ['in', 'out'], POINTER(RColumnReinforcementParameters), 'ColumnReinforcementParameters' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(245), 'propget'], HRESULT, 'MaterialColour',
              ( ['out', 'retval'], POINTER(c_ulong), 'Value' )),
    COMMETHOD([dispid(245), 'propput'], HRESULT, 'MaterialColour',
              ( ['in'], c_ulong, 'Value' )),
    COMMETHOD([dispid(246), 'propget'], HRESULT, 'ContourColour',
              ( ['out', 'retval'], POINTER(c_ulong), 'Value' )),
    COMMETHOD([dispid(246), 'propput'], HRESULT, 'ContourColour',
              ( ['in'], c_ulong, 'Value' )),
    COMMETHOD([dispid(247), 'propget'], HRESULT, 'ArchitectElemType',
              ( ['out', 'retval'], POINTER(EArchitectElemType), 'Value' )),
    COMMETHOD([dispid(247), 'propput'], HRESULT, 'ArchitectElemType',
              ( ['in'], EArchitectElemType, 'Value' )),
    COMMETHOD([dispid(248), 'propget'], HRESULT, 'UID',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(249)], HRESULT, 'CreateMeshWithCoordinates_vb',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(RPoint3d)), 'Points' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(250), 'propget'], HRESULT, 'MaterialColour_vb',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(250), 'propput'], HRESULT, 'MaterialColour_vb',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(251), 'propget'], HRESULT, 'ContourColour_vb',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(251), 'propput'], HRESULT, 'ContourColour_vb',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([dispid(252)], HRESULT, 'DefineAsTruss',
              ( ['in'], c_int, 'MaterialIndex' ),
              ( ['in'], c_int, 'CrossSectionIndex' ),
              ( ['in'], ELineNonLinearity, 'TrussType' ),
              ( ['in'], c_double, 'Resistance' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(253)], HRESULT, 'GetTrussData',
              ( ['out'], POINTER(c_int), 'MaterialIndex' ),
              ( ['out'], POINTER(c_int), 'CrossSectionIndex' ),
              ( ['out'], POINTER(ELineNonLinearity), 'TrussType' ),
              ( ['out'], POINTER(c_double), 'Resistance' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(254)], HRESULT, 'DefineAsTimberTruss',
              ( ['in'], c_int, 'MaterialIndex' ),
              ( ['in'], c_int, 'ServiceClass' ),
              ( ['in'], c_double, 'kdef' ),
              ( ['in'], c_int, 'CrossSectionIndex' ),
              ( ['in'], ELineNonLinearity, 'TrussType' ),
              ( ['in'], c_double, 'Resistance' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(255)], HRESULT, 'GetTimberTrussData',
              ( ['out'], POINTER(c_int), 'MaterialIndex' ),
              ( ['out'], POINTER(c_int), 'ServiceClass' ),
              ( ['out'], POINTER(c_double), 'kdef' ),
              ( ['out'], POINTER(c_int), 'CrossSectionIndex' ),
              ( ['out'], POINTER(ELineNonLinearity), 'TrussType' ),
              ( ['out'], POINTER(c_double), 'Resistance' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(256), 'propget'], HRESULT, 'StiffnessReduction_A',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(256), 'propput'], HRESULT, 'StiffnessReduction_A',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(257), 'propget'], HRESULT, 'StiffnessReduction_I',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(257), 'propput'], HRESULT, 'StiffnessReduction_I',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(258)], HRESULT, 'DeleteLineElement',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(259)], HRESULT, 'GetLinesLocX',
              ( ['out'], POINTER(_midlSAFEARRAY(c_int)), 'LineIds' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(260), 'propget'], HRESULT, 'SectionsCount',
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(261)], HRESULT, 'GetXofMemberSectionID',
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], c_int, 'MemberSectionId' ),
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(262)], HRESULT, 'GetLineIDAndLineSectionID',
              ( ['in'], EAnalysisType, 'AnalysisType' ),
              ( ['in'], c_int, 'MemberSectionId' ),
              ( ['out'], POINTER(c_int), 'LineId' ),
              ( ['out'], POINTER(c_int), 'LineSectionId' ),
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(263), 'propget'], HRESULT, 'StiffnessReduction',
              ( ['in'], ELineStiffnessReduction, 'Component' ),
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(263), 'propput'], HRESULT, 'StiffnessReduction',
              ( ['in'], ELineStiffnessReduction, 'Component' ),
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(264)], HRESULT, 'ClearEccentricity',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMMember implementation
##class IAxisVMMember_Impl(object):
##    def GetLines(self):
##        '-no docstring-'
##        #return LineIds, ResultValue
##
##    @property
##    def MemberType(self):
##        '-no docstring-'
##        #return Value
##
##    def DefineAsBeam(self, MaterialIndex, StartCrossSectionIndex, EndCrossSectionIndex):
##        'Excentricity values are not used yet in this version!'
##        #return StartExcentricity, EndExcentricity, ResultValue
##
##    def DefineAsRib(self, MaterialIndex, StartCrossSectionIndex, EndCrossSectionIndex):
##        'Only Z excentricity values are used!'
##        #return StartExcentricity, EndExcentricity, ResultValue
##
##    @property
##    def Length(self):
##        '-no docstring-'
##        #return Value
##
##    def GetStartReleases(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetStartReleases(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def GetEndReleases(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetEndReleases(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def GetGeomData(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def GetBeamData(self):
##        'Excentricity values are not used yet in this version!'
##        #return MaterialIndex, StartCrossSectionIndex, EndCrossSectionIndex, StartExcentricity, EndExcentricity, ResultValue
##
##    def GetRibData(self):
##        'Only Z excentricity values are used!'
##        #return MaterialIndex, StartCrossSectionIndex, EndCrossSectionIndex, StartExcentricity, EndExcentricity, ResultValue
##
##    def ChangeLocalDirection(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Timber_kdef = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Timber_ServiceClass = property(_get, _set, doc = _set.__doc__)
##
##    def DefineAsTimberBeam(self, MaterialIndex, ServiceClass, kdef, StartCrossSectionIndex, EndCrossSectionIndex):
##        'Excentricity values are not used yet in this version!'
##        #return StartExcentricity, EndExcentricity, ResultValue
##
##    def DefineAsTimberRib(self, MaterialIndex, ServiceClass, kdef, StartCrossSectionIndex, EndCrossSectionIndex):
##        'Only Z excentricity values are used!'
##        #return StartExcentricity, EndExcentricity, ResultValue
##
##    def GetTimberBeamData(self):
##        'Excentricity values are not used yet in this version!'
##        #return MaterialIndex, ServiceClass, kdef, StartCrossSectionIndex, EndCrossSectionIndex, StartExcentricity, EndExcentricity, ResultValue
##
##    def GetTimberRibData(self):
##        'Only Z excentricity values are used!'
##        #return MaterialIndex, ServiceClass, kdef, StartCrossSectionIndex, EndCrossSectionIndex, StartExcentricity, EndExcentricity, ResultValue
##
##    def DefineAsRibWithAutoExcentricity(self, MaterialIndex, StartCrossSectionIndex, EndCrossSectionIndex, AutoExcentricityType, kx, Domain1, Domain2):
##        '-no docstring-'
##        #return ResultValue
##
##    def DefineAsTimberRibWithAutoExcentricity(self, MaterialIndex, ServiceClass, kdef, StartCrossSectionIndex, EndCrossSectionIndex, AutoExcentricityType, kx, Domain1, Domain2):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetRibDataWithAutoExcentricity(self):
##        '-no docstring-'
##        #return MaterialIndex, StartCrossSectionIndex, EndCrossSectionIndex, AutoExcentricityType, kx, Domain1, Domain2, ResultValue
##
##    def GetTimberRibDataWithAutoExcentricity(self):
##        '-no docstring-'
##        #return MaterialIndex, ServiceClass, kdef, StartCrossSectionIndex, EndCrossSectionIndex, AutoExcentricityType, kx, Domain1, Domain2, ResultValue
##
##    def GetMeshParameters(self):
##        '-no docstring-'
##        #return MeshParameters, ResultValue
##
##    def GetTrMatrix(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    @property
##    def Weight(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Volume(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def MeshExists(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def IsBeam(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def IsColumn(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def IsOtherType(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def Name(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def StoreyId(self):
##        '-no docstring-'
##        #return Value
##
##    def DeleteMesh(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def GenerateMeshWithParams(self):
##        '-no docstring-'
##        #return MeshParameters, ResultValue
##
##    def CreateMeshWithCoordinates(self, Points):
##        '-no docstring-'
##        #return ResultValue
##
##    @property
##    def StartNode(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def EndNode(self):
##        '-no docstring-'
##        #return Value
##
##    @property
##    def ColumnReinforcementParametersExists(self):
##        '-no docstring-'
##        #return Value
##
##    def DeleteColumnReinforcementParameters(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetColumnReinforcementParameters(self):
##        '-no docstring-'
##        #return ColumnReinforcementParameters, ResultValue
##
##    def SetColumnReinforcementParameters(self):
##        '-no docstring-'
##        #return ColumnReinforcementParameters, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    MaterialColour = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    ContourColour = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    ArchitectElemType = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def UID(self):
##        '-no docstring-'
##        #return Value
##
##    def CreateMeshWithCoordinates_vb(self):
##        '-no docstring-'
##        #return Points, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    MaterialColour_vb = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    ContourColour_vb = property(_get, _set, doc = _set.__doc__)
##
##    def DefineAsTruss(self, MaterialIndex, CrossSectionIndex, TrussType, Resistance):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetTrussData(self):
##        '-no docstring-'
##        #return MaterialIndex, CrossSectionIndex, TrussType, Resistance, ResultValue
##
##    def DefineAsTimberTruss(self, MaterialIndex, ServiceClass, kdef, CrossSectionIndex, TrussType, Resistance):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetTimberTrussData(self):
##        '-no docstring-'
##        #return MaterialIndex, ServiceClass, kdef, CrossSectionIndex, TrussType, Resistance, ResultValue
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    StiffnessReduction_A = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    StiffnessReduction_I = property(_get, _set, doc = _set.__doc__)
##
##    def DeleteLineElement(self):
##        '-no docstring-'
##        #return Value
##
##    def GetLinesLocX(self):
##        '-no docstring-'
##        #return LineIds, ResultValue
##
##    @property
##    def SectionsCount(self, AnalysisType):
##        '-no docstring-'
##        #return Value
##
##    def GetXofMemberSectionID(self, AnalysisType, MemberSectionId):
##        '-no docstring-'
##        #return Value
##
##    def GetLineIDAndLineSectionID(self, AnalysisType, MemberSectionId):
##        '-no docstring-'
##        #return LineId, LineSectionId, Value
##
##    def _get(self, Component):
##        '-no docstring-'
##        #return Value
##    def _set(self, Component, Value):
##        '-no docstring-'
##    StiffnessReduction = property(_get, _set, doc = _set.__doc__)
##
##    def ClearEccentricity(self):
##        '-no docstring-'
##        #return ResultValue
##

RSeismicParams_V153._fields_ = [
    ('VibrType', EVibrationType),
    ('kg', c_double),
    ('ks', c_double),
    ('kt', c_double),
    ('psi', c_double),
    ('SeismicCombType', ESeismicCombType),
    ('qd', c_double),
    ('ksiV', c_double),
    ('ModalCombType', EModalCombType),
    ('Torsion', ELongBoolean),
    ('ExcCoeff', c_double),
    ('C', c_double),
    ('nu', c_double),
    ('LoadCaseLoadCombination', c_int),
    ('Eta', c_double),
    ('GroupID', c_int),
    ('qdy', c_double),
    ('SeismicLimitState', ESeismicLimitState),
]
assert sizeof(RSeismicParams_V153) == 136, sizeof(RSeismicParams_V153)
assert alignment(RSeismicParams_V153) == 8, alignment(RSeismicParams_V153)
RVibration._fields_ = [
    ('LoadCase', c_int),
    ('Iterations', c_int),
    ('ModeShapes', c_int),
    ('EigenValueConvergence', c_double),
    ('EigenVectorConvergence', c_double),
    ('ConvertLoadsToMasses', ELongBoolean),
    ('ConcentratedMasses', ELongBoolean),
    ('ConvertConcentratedMassesToLoads', ELongBoolean),
    ('MassControl', EMassControl),
    ('ElementMasses', ELongBoolean),
    ('MassComponentX', ELongBoolean),
    ('MassComponentY', ELongBoolean),
    ('MassComponentZ', ELongBoolean),
    ('ConvertSlabsToDiaphragms', ELongBoolean),
    ('MassMatrixType', EMassMatrixType),
    ('IncreasedSupportStiffness', ELongBoolean),
    ('MassesTakenIntoAccount', EMassesTakenIntoAccount),
    ('HeightZ', c_double),
    ('StoryID', c_int),
]
assert sizeof(RVibration) == 96, sizeof(RVibration)
assert alignment(RVibration) == 8, alignment(RVibration)
RCompanyLogoParameters._fields_ = [
    ('ShowInHeader', ELongBoolean),
    ('HeaderPosition', ECompanyLogoPosition),
    ('HeaderSizeOption', ECompanyLogoSizeOption),
    ('HeaderSize', c_double),
    ('ShowOnCover', ELongBoolean),
    ('CoverAlignment', EGeneralAlignmentHorizontal),
    ('TopMargin', c_double),
    ('SpacingAfter', c_double),
    ('CoverSizeOption', ECompanyLogoSizeOption),
    ('CoverSize', c_double),
]
assert sizeof(RCompanyLogoParameters) == 64, sizeof(RCompanyLogoParameters)
assert alignment(RCompanyLogoParameters) == 8, alignment(RCompanyLogoParameters)
RSeismicParams._fields_ = [
    ('VibrType', EVibrationType),
    ('kg', c_double),
    ('ks', c_double),
    ('kt', c_double),
    ('psi', c_double),
    ('SeismicCombType', ESeismicCombType),
    ('qd', c_double),
    ('ksiV', c_double),
    ('ModalCombType', EModalCombType),
    ('Torsion', ELongBoolean),
    ('ExcCoeff', c_double),
    ('C', c_double),
    ('nu', c_double),
    ('LoadCaseLoadCombination', c_int),
    ('Eta', c_double),
]
assert sizeof(RSeismicParams) == 112, sizeof(RSeismicParams)
assert alignment(RSeismicParams) == 8, alignment(RSeismicParams)
RNonLinearAnalysis._fields_ = [
    ('LoadCase', c_int),
    ('SolutionControl', ESolutionControl),
    ('NodeId', c_int),
    ('Direction', EAxis),
    ('MaxDisplacement', c_double),
    ('Increments', c_int),
    ('Iterations', c_int),
    ('DisplacementConvergenceValue', c_double),
    ('ForceConvergenceValue', c_double),
    ('WorkConvergenceValue', c_double),
    ('EnableDisplacementConvergence', ELongBoolean),
    ('EnableForceConvergence', ELongBoolean),
    ('EnableWorkConvergence', ELongBoolean),
    ('GeometricNonLinearity', ELongBoolean),
    ('ReinforcementCalculation', ELongBoolean),
    ('StoreLastIncrementOnly', ELongBoolean),
    ('ReinforcementCalculationType', EReinforcementCalculation),
    ('ContinueWithoutConvergence', ELongBoolean),
    ('IncrementFunctionId', c_int),
    ('MaterialNonLinearity', ELongBoolean),
    ('ConsiderCreep', ELongBoolean),
    ('ConsiderShrinkage', ELongBoolean),
]
assert sizeof(RNonLinearAnalysis) == 104, sizeof(RNonLinearAnalysis)
assert alignment(RNonLinearAnalysis) == 8, alignment(RNonLinearAnalysis)
class RReinforcementParameters_MSZ(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{51B09BEF-0BA5-434D-B74E-E76B5207CE8C}')
RReinforcementParameters_MSZ._fields_ = [
    ('UnfavorableEccentricity_Npos', c_double),
    ('UnfavorableEccentricity_Nneg', c_double),
    ('AutoPsi', ELongBoolean),
    ('RebarPos', RRebarPos),
]
assert sizeof(RReinforcementParameters_MSZ) == 56, sizeof(RReinforcementParameters_MSZ)
assert alignment(RReinforcementParameters_MSZ) == 8, alignment(RReinforcementParameters_MSZ)
RLoadRibConcentrated._fields_ = [
    ('LoadCaseId', c_int),
    ('LineId', c_int),
    ('Fgx', c_double),
    ('Fgy', c_double),
    ('Fgz', c_double),
    ('Mgx', c_double),
    ('Mgy', c_double),
    ('Mgz', c_double),
    ('Position', c_double),
    ('SystemGLR', ESystem),
]
assert sizeof(RLoadRibConcentrated) == 72, sizeof(RLoadRibConcentrated)
assert alignment(RLoadRibConcentrated) == 8, alignment(RLoadRibConcentrated)
RBuckling._fields_ = [
    ('LoadCase', c_int),
    ('Iterations', c_int),
    ('ModeShapes', c_int),
    ('EigenValueConvergence', c_double),
    ('EigenVectorConvergence', c_double),
]
assert sizeof(RBuckling) == 32, sizeof(RBuckling)
assert alignment(RBuckling) == 8, alignment(RBuckling)
class RRCBeamDesignParameters_DIN(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{599D12AA-0336-476E-AAC1-E559C6EDA6EF}')
RRCBeamDesignParameters_DIN._fields_ = [
    ('EnvironmentClass', EEnvironmentClass),
    ('Deflection_Beam_L_div', c_double),
    ('Deflection_Cantilever_L_div', c_double),
    ('VariableAngleTrussMethod', ELongBoolean),
    ('Theta', c_double),
    ('CrackWidthCheck', ELongBoolean),
    ('MaxCrackWidth_Top', c_double),
    ('MaxCrackWidth_Bottom', c_double),
    ('TakeConcTensileStrength', ELongBoolean),
]
assert sizeof(RRCBeamDesignParameters_DIN) == 72, sizeof(RRCBeamDesignParameters_DIN)
assert alignment(RRCBeamDesignParameters_DIN) == 8, alignment(RRCBeamDesignParameters_DIN)
class RColumnStirrupDiameters(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{5469DB91-6DCF-4373-9F72-E5C71ABF9B72}')
RColumnStirrupDiameters._fields_ = [
    ('sd_bottom', c_double),
    ('sd_middle', c_double),
    ('sd_top', c_double),
]
assert sizeof(RColumnStirrupDiameters) == 24, sizeof(RColumnStirrupDiameters)
assert alignment(RColumnStirrupDiameters) == 8, alignment(RColumnStirrupDiameters)
RDomainVariableThickness._fields_ = [
    ('VariableThicknessType', EDomainVariableThicknessType),
    ('P1', RPoint3d),
    ('P2', RPoint3d),
    ('P3', RPoint3d),
    ('t1', c_double),
    ('t2', c_double),
    ('t3', c_double),
]
assert sizeof(RDomainVariableThickness) == 104, sizeof(RDomainVariableThickness)
assert alignment(RDomainVariableThickness) == 8, alignment(RDomainVariableThickness)

# values for enumeration 'ECrossSectionEditorError'
cseeEditorNotOpened = -100001
cseeEditorModeIsNotSolidCrossSection = -100002
ECrossSectionEditorError = c_int # enum

# values for enumeration 'EEnvelopesError'
eeLoadCaseIdOutOfBounds = -100001
eeLoadCombinationIdOutOfBounds = -100002
eeErrorAddingEnvelope = -100003
eeErrorModifyingEnvelope = -100004
eeNotUserDefinedEnvelope = -100005
EEnvelopesError = c_int # enum
class RReinforcementParameters_EC(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{94723FBF-D971-43DD-A18C-863F2C7199B3}')
RReinforcementParameters_EC._fields_ = [
    ('dxt', c_double),
    ('dxb', c_double),
    ('dyt', c_double),
    ('dyb', c_double),
    ('SlabLoadTransfer', ESlabLoadTransfer),
    ('SlabLoadTransferDirection', ESlabLoadTransferDirection),
    ('MainDirectionTop', EReinforcementDirection),
    ('MainDirectionBottom', EReinforcementDirection),
    ('ct', c_double),
    ('cb', c_double),
    ('AggregateSize', c_double),
    ('ApplyMinimumCover', ELongBoolean),
    ('StructClass', EStructClass_EC),
    ('EnvClass_T', EEnvironmentClass),
    ('EnvClass_B', EEnvironmentClass),
    ('fse', c_double),
    ('UnfavorableEccentricity_Npos', c_double),
    ('UnfavorableEccentricity_Nneg', c_double),
    ('TakeConcTensileStrength', ELongBoolean),
    ('ShortTerm', ELongBoolean),
    ('ShearReinforcementAngle', c_double),
    ('ShearCrackAngle', c_double),
    ('TakeConcTensileStrengthNL', ELongBoolean),
    ('UseFctmfl', ELongBoolean),
    ('ShrinkageEps', c_double),
    ('RCNonlinearSurfType', ERCNonlinearSurfType),
    ('ReinforcementType', EReinforcementType),
    ('AlphaAngle', c_double),
    ('BetaAngle', c_double),
    ('CalcFromLimitingCrackWidth', ELongBoolean),
    ('wk_b', c_double),
    ('wk2_b', c_double),
    ('wk_t', c_double),
    ('wk2_t', c_double),
    ('ApproximateLevelArm', ELongBoolean),
    ('SeelhoferMartiEquation', ELongBoolean),
    ('TrapSheetOnlyFormWork', ELongBoolean),
    ('TrapSheetOneLayerReinf', ELongBoolean),
    ('TrapSheetConsidered', ELongBoolean),
]
assert sizeof(RReinforcementParameters_EC) == 240, sizeof(RReinforcementParameters_EC)
assert alignment(RReinforcementParameters_EC) == 8, alignment(RReinforcementParameters_EC)
class RReinforcementParameters_NEN(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{3D850F39-5F7E-4DE2-81E2-9BA66524FEFB}')
RReinforcementParameters_NEN._fields_ = [
    ('AggregateSize', c_double),
    ('EnvClass_T', EEnvironmentClass),
    ('SurfaceCheck_T', ESurfaceCheck),
    ('ReductionOf5mm_T', ELongBoolean),
    ('CrackControl_T', ELongBoolean),
    ('EnvClass_B', EEnvironmentClass),
    ('SurfaceCheck_B', ESurfaceCheck),
    ('ReductionOf5mm_B', ELongBoolean),
    ('CrackControl_B', ELongBoolean),
    ('MainDirectionTop', EReinforcementDirection),
    ('MainDirectionBottom', EReinforcementDirection),
    ('ct', c_double),
    ('cb', c_double),
    ('ApplyMinimumCover', ELongBoolean),
    ('dxt', c_double),
    ('dxb', c_double),
    ('dyt', c_double),
    ('dyb', c_double),
]
assert sizeof(RReinforcementParameters_NEN) == 104, sizeof(RReinforcementParameters_NEN)
assert alignment(RReinforcementParameters_NEN) == 8, alignment(RReinforcementParameters_NEN)
RDomainExcentricity._fields_ = [
    ('ExcentricityType', EDomainExcentricityType),
    ('P1', RPoint3d),
    ('P2', RPoint3d),
    ('P3', RPoint3d),
    ('exc1', c_double),
    ('exc2', c_double),
    ('exc3', c_double),
    ('GroupID', c_int),
]
assert sizeof(RDomainExcentricity) == 112, sizeof(RDomainExcentricity)
assert alignment(RDomainExcentricity) == 8, alignment(RDomainExcentricity)
IAxisVMAttributes._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(202)], HRESULT, 'AddDefault',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], _midlSAFEARRAY(c_ubyte), 'ItemData' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(203)], HRESULT, 'GetSizeByName',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'GetSizeByIndex',
              ( ['in'], c_int, 'AttributeIndex' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205)], HRESULT, 'IndexOf',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'GetItemByName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ItemIndex' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'ItemData' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'GetItemByIndex',
              ( ['in'], c_int, 'AttributeIndex' ),
              ( ['in'], c_int, 'ItemIndex' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'ItemData' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208)], HRESULT, 'GetName',
              ( ['in'], c_int, 'AttributeIndex' ),
              ( ['out'], POINTER(BSTR), 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(209)], HRESULT, 'DeleteByName',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(210)], HRESULT, 'DeleteByIndex',
              ( ['in'], c_int, 'AttributeIndex' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(211)], HRESULT, 'FillItemByName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ItemIndex' ),
              ( ['in'], _midlSAFEARRAY(c_ubyte), 'ItemData' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(212)], HRESULT, 'FillItemByIndex',
              ( ['in'], c_int, 'AttributeIndex' ),
              ( ['in'], c_int, 'ItemIndex' ),
              ( ['in'], _midlSAFEARRAY(c_ubyte), 'ItemData' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(213)], HRESULT, 'FillAllItemsByName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], _midlSAFEARRAY(c_ubyte), 'ItemData' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(214)], HRESULT, 'FillAllItemsByIndex',
              ( ['in'], c_int, 'AttributeIndex' ),
              ( ['in'], _midlSAFEARRAY(c_ubyte), 'ItemData' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(215)], HRESULT, 'FillItemsByName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], _midlSAFEARRAY(c_int), 'ItemIndexes' ),
              ( ['in'], _midlSAFEARRAY(c_ubyte), 'ItemData' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(216)], HRESULT, 'FillItemsByIndex',
              ( ['in'], c_int, 'AttributeIndex' ),
              ( ['in'], _midlSAFEARRAY(c_int), 'ItemIndexes' ),
              ( ['in'], _midlSAFEARRAY(c_ubyte), 'ItemData' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(217)], HRESULT, 'SetAllItemsByName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], _midlSAFEARRAY(c_ubyte), 'ItemsData' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(218)], HRESULT, 'SetAllItemsByIndex',
              ( ['in'], c_int, 'AttributeIndex' ),
              ( ['in'], _midlSAFEARRAY(c_ubyte), 'ItemsData' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(219)], HRESULT, 'IsDefaultItemByIndex',
              ( ['in'], c_int, 'AttributeIndex' ),
              ( ['in'], c_int, 'ItemIndex' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'ResultValue' )),
    COMMETHOD([dispid(220)], HRESULT, 'IsDefaultItemByName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ItemIndex' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'ResultValue' )),
    COMMETHOD([dispid(221)], HRESULT, 'GetDefault',
              ( ['in'], c_int, 'AttributeIndex' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'ItemData' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(222), 'propget'], HRESULT, 'InheritCopiedElements',
              ( ['in'], c_int, 'AttributeIndex' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'ResultValue' )),
    COMMETHOD([dispid(222), 'propput'], HRESULT, 'InheritCopiedElements',
              ( ['in'], c_int, 'AttributeIndex' ),
              ( ['in'], ELongBoolean, 'ResultValue' )),
    COMMETHOD([dispid(223), 'propget'], HRESULT, 'InheritDividedElements',
              ( ['in'], c_int, 'AttributeIndex' ),
              ( ['out', 'retval'], POINTER(ELongBoolean), 'ResultValue' )),
    COMMETHOD([dispid(223), 'propput'], HRESULT, 'InheritDividedElements',
              ( ['in'], c_int, 'AttributeIndex' ),
              ( ['in'], ELongBoolean, 'ResultValue' )),
    COMMETHOD([dispid(224)], HRESULT, 'AddDefault_vb',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'ItemData' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(225)], HRESULT, 'FillItemByName_vb',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ItemIndex' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'ItemData' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(226)], HRESULT, 'FillItemByIndex_vb',
              ( ['in'], c_int, 'AttributeIndex' ),
              ( ['in'], c_int, 'ItemIndex' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'ItemData' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(227)], HRESULT, 'FillAllItemsByName_vb',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'ItemData' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(228)], HRESULT, 'FillAllItemsByIndex_vb',
              ( ['in'], c_int, 'AttributeIndex' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'ItemData' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(229)], HRESULT, 'FillItemsByName_vb',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ItemIndexes' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'ItemData' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(230)], HRESULT, 'FillItemsByIndex_vb',
              ( ['in'], c_int, 'AttributeIndex' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ItemIndexes' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'ItemData' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(232)], HRESULT, 'SetAllItemsByName_vb',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'ItemsData' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(233)], HRESULT, 'SetAllItemsByIndex_vb',
              ( ['in'], c_int, 'AttributeIndex' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'ItemsData' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMAttributes implementation
##class IAxisVMAttributes_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Value
##
##    def AddDefault(self, Name, ItemData):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetSizeByName(self, Name):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetSizeByIndex(self, AttributeIndex):
##        '-no docstring-'
##        #return ResultValue
##
##    def IndexOf(self, Name):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetItemByName(self, Name, ItemIndex):
##        '-no docstring-'
##        #return ItemData, ResultValue
##
##    def GetItemByIndex(self, AttributeIndex, ItemIndex):
##        '-no docstring-'
##        #return ItemData, ResultValue
##
##    def GetName(self, AttributeIndex):
##        '-no docstring-'
##        #return Name, ResultValue
##
##    def DeleteByName(self, Name):
##        '-no docstring-'
##        #return ResultValue
##
##    def DeleteByIndex(self, AttributeIndex):
##        '-no docstring-'
##        #return ResultValue
##
##    def FillItemByName(self, Name, ItemIndex, ItemData):
##        '-no docstring-'
##        #return ResultValue
##
##    def FillItemByIndex(self, AttributeIndex, ItemIndex, ItemData):
##        '-no docstring-'
##        #return ResultValue
##
##    def FillAllItemsByName(self, Name, ItemData):
##        '-no docstring-'
##        #return ResultValue
##
##    def FillAllItemsByIndex(self, AttributeIndex, ItemData):
##        '-no docstring-'
##        #return ResultValue
##
##    def FillItemsByName(self, Name, ItemIndexes, ItemData):
##        '-no docstring-'
##        #return ResultValue
##
##    def FillItemsByIndex(self, AttributeIndex, ItemIndexes, ItemData):
##        '-no docstring-'
##        #return ResultValue
##
##    def SetAllItemsByName(self, Name, ItemsData):
##        '-no docstring-'
##        #return ResultValue
##
##    def SetAllItemsByIndex(self, AttributeIndex, ItemsData):
##        '-no docstring-'
##        #return ResultValue
##
##    def IsDefaultItemByIndex(self, AttributeIndex, ItemIndex):
##        '-no docstring-'
##        #return ResultValue
##
##    def IsDefaultItemByName(self, Name, ItemIndex):
##        '-no docstring-'
##        #return ResultValue
##
##    def GetDefault(self, AttributeIndex):
##        '-no docstring-'
##        #return ItemData, ResultValue
##
##    def _get(self, AttributeIndex):
##        '-no docstring-'
##        #return ResultValue
##    def _set(self, AttributeIndex, ResultValue):
##        '-no docstring-'
##    InheritCopiedElements = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, AttributeIndex):
##        '-no docstring-'
##        #return ResultValue
##    def _set(self, AttributeIndex, ResultValue):
##        '-no docstring-'
##    InheritDividedElements = property(_get, _set, doc = _set.__doc__)
##
##    def AddDefault_vb(self, Name):
##        '-no docstring-'
##        #return ItemData, ResultValue
##
##    def FillItemByName_vb(self, Name, ItemIndex):
##        '-no docstring-'
##        #return ItemData, ResultValue
##
##    def FillItemByIndex_vb(self, AttributeIndex, ItemIndex):
##        '-no docstring-'
##        #return ItemData, ResultValue
##
##    def FillAllItemsByName_vb(self, Name):
##        '-no docstring-'
##        #return ItemData, ResultValue
##
##    def FillAllItemsByIndex_vb(self, AttributeIndex):
##        '-no docstring-'
##        #return ItemData, ResultValue
##
##    def FillItemsByName_vb(self, Name):
##        '-no docstring-'
##        #return ItemIndexes, ItemData, ResultValue
##
##    def FillItemsByIndex_vb(self, AttributeIndex):
##        '-no docstring-'
##        #return ItemIndexes, ItemData, ResultValue
##
##    def SetAllItemsByName_vb(self, Name):
##        '-no docstring-'
##        #return ItemsData, ResultValue
##
##    def SetAllItemsByIndex_vb(self, AttributeIndex):
##        '-no docstring-'
##        #return ItemsData, ResultValue
##

IAxisVMCrossSectionEditor._methods_ = [
    COMMETHOD([dispid(201)], HRESULT, 'AddCustomWithUserParams',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], POINTER(AxisVMPolygon2dList), 'ShapePolygonList' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['in'], c_double, 'b' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'tf' ),
              ( ['in'], c_double, 'tw' ),
              ( ['in'], c_double, 'Alpha' ),
              ( ['in'], c_double, 'Yg' ),
              ( ['in'], c_double, 'Zg' ),
              ( ['in', 'out'], POINTER(RCrossSectionUserParams), 'CrossSectionUserParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(202)], HRESULT, 'AddCustomWithUserParamsAsArray',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], POINTER(AxisVMPolygon2dList), 'ShapePolygonList' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['in'], c_double, 'b' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'tf' ),
              ( ['in'], c_double, 'tw' ),
              ( ['in'], c_double, 'Alpha' ),
              ( ['in'], c_double, 'Yg' ),
              ( ['in'], c_double, 'Zg' ),
              ( ['in'], c_int, 'lParam' ),
              ( ['in'], _midlSAFEARRAY(c_double), 'CrossSectionUserParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(203)], HRESULT, 'Clear',
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'AddCustomWithUserParamsAsByteArray',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], POINTER(AxisVMPolygon2dList), 'ShapePolygonList' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['in'], c_double, 'b' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'tf' ),
              ( ['in'], c_double, 'tw' ),
              ( ['in'], c_double, 'Alpha' ),
              ( ['in'], c_double, 'Yg' ),
              ( ['in'], c_double, 'Zg' ),
              ( ['in'], _midlSAFEARRAY(c_ubyte), 'CrossSectionUserParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205)], HRESULT, 'AddCustomWithUserParamsAsArray_vb',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], POINTER(AxisVMPolygon2dList), 'ShapePolygonList' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['in'], c_double, 'b' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'tf' ),
              ( ['in'], c_double, 'tw' ),
              ( ['in'], c_double, 'Alpha' ),
              ( ['in'], c_double, 'Yg' ),
              ( ['in'], c_double, 'Zg' ),
              ( ['in'], c_int, 'lParam' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CrossSectionUserParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'AddCustomWithUserParamsAsByteArray_vb',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], POINTER(AxisVMPolygon2dList), 'ShapePolygonList' ),
              ( ['in'], ECrossSectionProcess, 'Process' ),
              ( ['in'], c_double, 'b' ),
              ( ['in'], c_double, 'h' ),
              ( ['in'], c_double, 'tf' ),
              ( ['in'], c_double, 'tw' ),
              ( ['in'], c_double, 'Alpha' ),
              ( ['in'], c_double, 'Yg' ),
              ( ['in'], c_double, 'Zg' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'CrossSectionUserParams' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMCrossSectionEditor implementation
##class IAxisVMCrossSectionEditor_Impl(object):
##    def AddCustomWithUserParams(self, Name, ShapePolygonList, Process, b, h, tf, tw, Alpha, Yg, Zg):
##        '-no docstring-'
##        #return CrossSectionUserParams, ResultValue
##
##    def AddCustomWithUserParamsAsArray(self, Name, ShapePolygonList, Process, b, h, tf, tw, Alpha, Yg, Zg, lParam, CrossSectionUserParams):
##        '-no docstring-'
##        #return ResultValue
##
##    def Clear(self):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddCustomWithUserParamsAsByteArray(self, Name, ShapePolygonList, Process, b, h, tf, tw, Alpha, Yg, Zg, CrossSectionUserParams):
##        '-no docstring-'
##        #return ResultValue
##
##    def AddCustomWithUserParamsAsArray_vb(self, Name, ShapePolygonList, Process, b, h, tf, tw, Alpha, Yg, Zg, lParam):
##        '-no docstring-'
##        #return CrossSectionUserParams, ResultValue
##
##    def AddCustomWithUserParamsAsByteArray_vb(self, Name, ShapePolygonList, Process, b, h, tf, tw, Alpha, Yg, Zg):
##        '-no docstring-'
##        #return CrossSectionUserParams, ResultValue
##


# values for enumeration 'ECalculatioFinishedType'
cft_OK = 1
cft_Canceled = 2
cft_Warning = 3
cft_Error = 4
ECalculatioFinishedType = c_int # enum
IAxisVMForcesEvents._disp_methods_ = [
    DISPMETHOD([dispid(201)], HRESULT, 'Error',
               ( ['in'], c_int, 'Index' ),
               ( ['in'], c_int, 'ErrCode' )),
]
class RRCBeamDesignParameters_EC_RO(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{BEF7F745-05A6-486D-85DA-44666C455615}')
RRCBeamDesignParameters_EC_RO._fields_ = [
    ('Ksi0_RO', c_double),
    ('SeismicZone', ERCBeam_ECRO_STAS_SeismicZone),
    ('fse', c_double),
    ('VariableAngleTrussMethod', ELongBoolean),
    ('Theta', c_double),
    ('Deflection_Beam_L_div', c_double),
    ('Deflection_Cantilever_L_div', c_double),
    ('CrackWidthCheck', ELongBoolean),
    ('MaxCrackWidth_Top', c_double),
    ('MaxCrackWidth_Bottom', c_double),
    ('TakeConcTensileStrength', ELongBoolean),
    ('ShortTerm', ELongBoolean),
    ('PlasticHinges', RRCBeamPlasticHinges),
]
assert sizeof(RRCBeamDesignParameters_EC_RO) == 208, sizeof(RRCBeamDesignParameters_EC_RO)
assert alignment(RRCBeamDesignParameters_EC_RO) == 8, alignment(RRCBeamDesignParameters_EC_RO)

# values for enumeration 'ESelectionType'
seltNode = 1
seltMidPoint = 2
seltAllLines = 3
seltTruss = 4
seltBeam = 5
seltRib = 6
seltSurfaceEdge = 7
seltRigidBody = 8
seltDiaphragm = 9
seltGap = 10
seltSpring = 11
seltLink = 12
seltAllSurfaces = 13
seltSurfaceMembrane = 14
seltSurfacePlate = 15
seltSurfaceShell = 16
seltAllDomains = 17
seltDomainMembrane = 18
seltDomainPlate = 19
seltDomainShell = 20
seltHole = 21
seltAllSupports = 22
seltNodalSupport = 23
seltLineSupport = 24
seltSurfaceSupport = 25
seltReference = 26
seltAllLoads = 27
seltLoadDomainConcentrated = 28
seltLoadDomainPoly = 29
seltLoadNodalConcentrated = 30
seltLoadBeamConcentrated = 31
seltLoadBeamDistributed = 32
seltLoadDomainDistributed = 33
seltLoadDomainFluid = 34
seltLoadMoving = 35
seltLoadDynamic = 36
seltArchColumn = 37
seltArchBeam = 38
seltArchWall = 39
seltArchSlab = 40
seltArchRamp = 41
seltLoadPanel = 42
seltLoadPanelEdge = 43
seltVirtualBeam = 44
seltLinesOnly = 45
ESelectionType = c_int # enum

# values for enumeration 'ERebarSteelGradesError'
rsgeIllegalNationalDesignCode = -100001
rsgeNonPositive_E = -100002
rsgeNonPositive_ssh = -100003
rsgeNonPositive_es0 = -100004
rsgeNonPositive_esh = -100005
rsgeNonPositive_fyd = -100006
rsgeNonPositive_es1 = -100007
rsgeNonPositive_esu = -100008
rsgeNonPositive_Ra = -100009
rsgeNonPositive_mat = -100010
rsgeNonPositive_fsrep = -100011
rsgeNonPositive_fs = -100012
rsgeNonPositive_fyk = -100013
rsgeNonPositive_Epsuk = -100014
rsgeNonPositive_GammaS = -100015
rsgeNonPositive_fsk = -100016
rsgeNonPositive_ks = -100017
rsgeNonPositive_Epsud = -100018
rsgeNotFound = -100019
ERebarSteelGradesError = c_int # enum
class RRCColumnCapacityDesignParams(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{F5FF0B5A-EF07-4AE2-96C6-B4A6ED9CA33B}')
RRCColumnCapacityDesignParams._fields_ = [
    ('PlasticHinges', ELongBoolean),
    ('DuctilityClass', ESeismicDuctilityClass),
    ('PlasticHingeYY_Top', ELongBoolean),
    ('PlasticHingeYY_Bottom', ELongBoolean),
    ('PlasticHingeZZ_Top', ELongBoolean),
    ('PlasticHingeZZ_Bottom', ELongBoolean),
    ('MRdB_MRdC_RatioYY_Top', c_double),
    ('MRdB_MRdC_RatioYY_Bottom', c_double),
    ('MRdB_MRdC_RatioZZ_Top', c_double),
    ('MRdB_MRdC_RatioZZ_Bottom', c_double),
    ('RelativeClearLengthYY', c_double),
    ('RelativeClearLengthZZ', c_double),
    ('GammaRd', c_double),
]
assert sizeof(RRCColumnCapacityDesignParams) == 80, sizeof(RRCColumnCapacityDesignParams)
assert alignment(RRCColumnCapacityDesignParams) == 8, alignment(RRCColumnCapacityDesignParams)
class AxisVMSurfaceSupport(CoClass):
    'AxisVMSurfaceSupport Object'
    _reg_clsid_ = GUID('{316FEE19-879E-415E-A503-09174475D4BD}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100)
AxisVMSurfaceSupport._com_interfaces_ = [IAxisVMSurfaceSupport]

RPlaneTolerance._fields_ = [
    ('ptType', EPlaneToleranceType),
    ('Value', c_double),
]
assert sizeof(RPlaneTolerance) == 16, sizeof(RPlaneTolerance)
assert alignment(RPlaneTolerance) == 8, alignment(RPlaneTolerance)
class RColumnStirrupZones(Structure):
    _recordinfo_ = ('{0AA46C32-04EF-46E3-B0E4-D2DA28D0AB08}', 16, 100, 0, '{668AF055-BCA6-4018-B44A-732DD96FEE65}')
RColumnStirrupZones._fields_ = [
    ('sz_bottom', c_double),
    ('sz_middle', c_double),
]
assert sizeof(RColumnStirrupZones) == 16, sizeof(RColumnStirrupZones)
assert alignment(RColumnStirrupZones) == 8, alignment(RColumnStirrupZones)
RColumnReinforcementParameters._fields_ = [
    ('ColumnRebarsId', c_int),
    ('ConcreteMaterialId', c_int),
    ('RebarSteelGradeId', c_int),
    ('CheckingParameters', RColumnCheckingParameters),
    ('fse', c_double),
    ('TakeConcTensileStrength', ELongBoolean),
    ('UseFctmfl', ELongBoolean),
    ('ShrinkageEps', c_double),
    ('SpiralStirrup', ELongBoolean),
    ('StirrupSpacing', RColumnStirrupSpacing),
    ('StirrupDiameters', RColumnStirrupDiameters),
    ('StirrupZones', RColumnStirrupZones),
    ('StirrupLegNumY', c_int),
    ('StirrupLegNumZ', c_int),
    ('ShearCrackAngle', c_int),
    ('CapacityDesignParams', RRCColumnCapacityDesignParams),
    ('CBDetailingRules', ELongBoolean),
    ('SteelMaterialId', c_int),
    ('ShearRhoFactor', c_double),
]
assert sizeof(RColumnReinforcementParameters) == 312, sizeof(RColumnReinforcementParameters)
assert alignment(RColumnReinforcementParameters) == 8, alignment(RColumnReinforcementParameters)

# values for enumeration 'ECustomPartsError'
cpeErrorRenamingPartFolder = -100001
cpePartNameAlreadyExists = -100002
cpeInvalidPath = -100003
ECustomPartsError = c_int # enum
IAxisVMDomainSupport._methods_ = [
    COMMETHOD([dispid(201), 'propget'], HRESULT, 'SupportType',
              ( ['out', 'retval'], POINTER(EDomainSupportType), 'Value' )),
    COMMETHOD([dispid(202)], HRESULT, 'GetStiffnessesXYZ',
              ( ['in', 'out'], POINTER(RStiffnessesXYZ), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(203)], HRESULT, 'SetStiffnessesXYZ',
              ( ['in', 'out'], POINTER(RStiffnessesXYZ), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(204)], HRESULT, 'GetNonLinearityXYZ',
              ( ['in', 'out'], POINTER(RNonLinearityXYZ), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(205)], HRESULT, 'SetNonLinearityXYZ',
              ( ['in', 'out'], POINTER(RNonLinearityXYZ), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(206)], HRESULT, 'GetResistancesXYZ',
              ( ['in', 'out'], POINTER(RResistancesXYZ), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(207)], HRESULT, 'SetResistancesXYZ',
              ( ['in', 'out'], POINTER(RResistancesXYZ), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(208), 'propget'], HRESULT, 'DomainId',
              ( ['out', 'retval'], POINTER(c_int), 'Value' )),
    COMMETHOD([dispid(210)], HRESULT, 'GetPasternakStiffness',
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
    COMMETHOD([dispid(211)], HRESULT, 'SetPasternakStiffness',
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'ResultValue' )),
]
################################################################
## code template for IAxisVMDomainSupport implementation
##class IAxisVMDomainSupport_Impl(object):
##    @property
##    def SupportType(self):
##        '-no docstring-'
##        #return Value
##
##    def GetStiffnessesXYZ(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetStiffnessesXYZ(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def GetNonLinearityXYZ(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetNonLinearityXYZ(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def GetResistancesXYZ(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetResistancesXYZ(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    @property
##    def DomainId(self):
##        '-no docstring-'
##        #return Value
##
##    def GetPasternakStiffness(self):
##        '-no docstring-'
##        #return Value, ResultValue
##
##    def SetPasternakStiffness(self, Value):
##        '-no docstring-'
##        #return ResultValue
##

__all__ = [ 'schCompressionOnly', 'sut_Line_translational',
           'rc_snlFyx', 'sdmeLineListIsEmpty', 'lngSerbian',
           'RColumnStirrupDiameters', 'offsBottomLeft', 'cssePipe',
           'gwptXZ', 'mgtQuad', 'RCommonCriticalResultsSettings_V161',
           'rc_ssSzz_Top', 'ERoofFrictionEffect',
           'deNoResultBlocksInTheModel', 'pitDomain', 'rtEnvelope',
           'EFileImportPlane', 'rccceInvalidLineId',
           'deLoadCaseIndexOutofBounds', 'egGeoULSab_A1',
           'IAxisVMResults', 'AxisVMObjectCreator',
           'EDomainElementType', 'RMemberMeshParameters', 'ctULSA8',
           'rc_bstExx', 'lu_foot', 'ecXS3', 'IAxisVMReportsEvents',
           'IAxisVMDomainSupports', 'EAxis', 'csoInvalid_tw',
           'rc_ssByy_Middle', 'scC_Type2', 'xssSyy_m_B', 'rsOK',
           'IAxisVMCrossSectionOptimizationEvents', 'vbfVz',
           'deTrapezoidal_d_MustBePositive',
           'steSurfaceIndexOutOfBounds',
           'deTrapezoidal_v_MustBePositive', 'fiaActualNodes',
           'RWindSubStructParams', 'tslsem_No', 'ecXS2',
           'lut_Section_factor',
           'cweInvalidCombinationOfLoadCombinationAndLoadLevel',
           'RRebarSteelGrade_DIN', 'errNotFound', 'tgBottomEdge',
           'ESpringParHardeningRule', 'meNonPositive_Fy',
           'gut_Geom_Struct_size', 'sslshm_Level', 'rc_sstK2',
           'RTimberDesignParameters_EC_V153', 'cseNegativeAz',
           'EDisplacementsError', 'IAxisVMMovingLoadOnBeam',
           'cseNegative_r2', 'sblm_Factor', 'meNonPositive_Fit',
           'RLoadRibConcentrated', 'dtIsoLabel', 'lsfRxx',
           'deInvalidCharacteristics', 'cmULSab', 'IAxisVMDomains',
           'mut_Limit_stress', 'leeErrorAddingLL',
           'csoInvalidMaterial', 'seMaterialIndex',
           'rcbdeInvalidStirrupLegs', 'cssr_JP', 'RNonLinearity',
           'dtGlobal', 'lctStandard', 'ecClassXD2',
           'feInvalidSurfaceVertexType', 'IAxisVMSteelDesignResults',
           'RLoadDomainLine', 'RRibbedDomainParameters',
           'atteItemsDataMustContainAllItems',
           'sdut_Check_components', 'RLayerTextParams',
           'csieoMainAxisLabels', 'RRebarSteelGrade', 'rc_sstspExyTB',
           'spnlTensionOnly', 'AxisVMRCColumnChecking',
           'meLoadCaseLoadCombinationNotFound',
           'vbeInvalidReferenceParams', 'RCircleArcGeomData',
           'lcaeVibrationModeIndexOfOutBoundsDirX', 'rc_sd_27',
           'ifc2x3', 'rc_vd_fY', 'rc_cw_wk2bt',
           'mbeInvalidStiffnessReductionMat', 'ELine2dPointIndex',
           'IAxisVMRebarSteelGradesEvents', 'ceStoryIDOutOfBounds',
           'feWindowIdNotValid', 'mdtError', 'cssDoubleUOpened',
           'lcaeVibrationModeIndexOfOutBoundsDirY', 'ttHardwood',
           'ltCircleArc', 'errDatabaseNotReady', 'lstEdgeReference',
           'rc_rAsxyb', 'lfNx', 'deCompositeRib_d_TooSmall',
           'clpTopLeft', 'IAxisVMPushoverHingeFunctionsEvents',
           'IAxisVMEnvelopes', 'lnlTensionOnly', 'rdX', 'rc_veRR',
           'AxisVMSettings', 'sdut_Buckling_factor', 'rc_sstKxy',
           'sptIsolator', 'lbFalse', 'IAxisVMNodes',
           'RLineSupportForceValues', 'lcaeInvalidLoadGroupType',
           'tftCustom', 'RRebarSteelGrade_EC_ITA', 'rc_ssSeff_Top',
           'meErrorSettingSeismicParams', 'ctb_ULSAllSE2',
           'AxisVMPolygon2d', 'EIFCVersion', 'ripAuto', 'rc_lsSomin',
           'RRectangularFootingSpec', 'meRevitModuleNotAvailable',
           'cseNegative_r3', 'xse_M_N_90',
           'feVirtualBeamIndexOutOfBounds', 'sdGeometry', 'fimAdd',
           'ndcEuroCode_FIN', 'cssr_SK', 'rc_arcrVz', 'rc_rsdEz',
           'EVirtualBeamError', 'reLoadCombinationIsOutOfBounds',
           'rc_sdrVx', 'cssr_AT', 'deCompositeRibInvalidMaterial',
           'loeDYNmoduleNotAvailable', 'mbeInvalidLineType',
           'deInvalidLayerID', 'rtUndefined', 'cseNonPositiveIx',
           'ltSupportDisplacement', 'RCircularFootingCalced',
           'egGeoULS_A1', 'rc_bstspExxEMin', 'thaRight',
           'IAxisVMCrossSectionsEvents', 'cssDoubleUClosed',
           'RBasicDisplayParameters_V153',
           'cuiNoUserInteractionWithAutoCorrect',
           'IAxisVMCrackWidthEvents', 'IAxisVMVelocityEvents',
           'ctULSALL', 'mcMassesOnly', 'rc_sstspExyTT', 'rc_sfMyDU',
           'ctULSAllSE1', 'rc_sstspE1PB', 'dsNormalTick',
           'RXLAMSurfaceEfficiencyValues', 'scDisplacement',
           'lcaeInvalidLoadCaseType', 'seltDomainMembrane',
           'vbeChainIndexIsInvalid', 'sdmDiagramAvg',
           'cseErrorEditing', 'rc_sstspE2PC', 'aZZ',
           'meNonPositive_Fy40', 'deLineDoesNotReachDomainEdge',
           'IAxisVMSpringParamEvents', 'reTD1moduleNotAvailable',
           'rc_sstspExxEB', 'IAxisVMCriticalGroupCombinationsEvents',
           'ESpringParType', 'ecClassXC2', 'sddtSurface', 'wptGlobal',
           'dvtvNone', 'dcret_top', 'rAsby', 'mmtSegments',
           'EXLAMServiceClass', 'csseRectangleRounded',
           'cft_Canceled', 'rc_sstspE2PB', 'fueNameAlreadyExists',
           'sfMyDp', 'meIFCInvalidDeviationOrByAngle', 'rc_nsfRz',
           'd_fZ', 'mclSteel', 'rc_sstspExyET', 'sfMxDm',
           'RGridOptions', 'RSpringParam_V161', 'seltRib', 'rc_bd_eX',
           'cicsa_Centre', 'lut_Specific_heat', 'EReleasePosType',
           'rc_ecfMy', 'csseTTopHaunched', 'IAxisVMCatalog',
           'creLoadCaseIdIndexOutOfBounds', 'nstNodalBeamRelative',
           'RVirtualBeamParams', 'feLineSupportIndexOutOfBounds',
           'ltDomainStress', 'sut_Moment', 'RLoadLineSelfWeigth',
           'ccfAuto', 'steNoValidLinesInTheModel',
           'vbeDomainListIsEmpty', 'dTextured', 'ELineError',
           'EAccelerationError', 'csoGroupNameInvalid',
           'atLinearStatic', 'lneInvalidRebarSteelGradeId',
           'spitCustom', 'sgeInvalidName', 'rc_ssS1_Bottom',
           'ctULSAllSE4', 'cctEquivalentBilinear',
           'meNonPositive_Rho', 'rc_ivDnxy', 'rcbdeInvalidLoadCaseId',
           'mftLoads', 'dtLocal', 'retMansardEaves', 'ctb_ULSAllSE4',
           'cseNonPositive_R', 'sNo', 'csoDesignMemberIDOutOfBounds',
           'rfeCustom', 'csse2LX', 'scS2', 'ltDomainSelfWeight',
           'rc_lsSmax', 'seInvalidStiffnessReductionMat',
           'IAxisVMStoreys', 'lneErrorSplittingLine',
           'AxisVMCalculation',
           'rceLoadCombinationIdIndexOutOfBounds',
           'IAxisVMLoadCasesEvents',
           'lneStartEndCrossSectionTypeIncompatible', 'seltAllLoads',
           'wpeWorkplaneIsNotGlobal', 'sch_CanBeChecked',
           'RLoadRibThermal', 'hht_Rectangular',
           'RColumnStirrupZones', 'mdbNo', 'cssRectangleRounded',
           'rc_sstEyy', 'rc_ssSxz_Bottom',
           'mbeShearCrackAngleIsInvalid', 'lneInvalidColumnRebarsId',
           'sfVyz', 'ecClassXA1', 'sblm_Auto', 'RLoadPanelLinear',
           'rc_lfMy', 'seRebarDiameterMustBePositive',
           'ESwayDirection', 'EMemberExcOffsPos',
           'cpeErrorRenamingPartFolder', 'RCrossSectionTable',
           'rc_berrdFr', 'leeap_CenterLeft', 'rc_lsfRzz', 'rc_rAsxbt',
           'gavTop', 'spnntNonLinearElastic', 'cseNonPositive_h3',
           'meDXFmoduleNotAvailable', 'clpRight', 'mctSRSS', 'ripOff',
           'seltLoadDomainFluid', 'AxisVMCrossSectionEditor',
           'sslsem_Left', 'EMaterialType', 'ecClassXS1', 'rc_sfRz',
           'aletBeam', 'rc_lefVz_LL', 'de_Custom', 'wsrtFlat',
           'rceCombinationTypeNotValidForCurrentNationalDesignCode',
           'xssSxz_max', 'areCoverIsInvalid', 'lefMy',
           'deConcreteIdIndexOutOfBounds',
           'steInvalidCombinationOfLoadCombinationAndLoadLevel',
           'rc_xsSxxn', 'wptGeneral', 'scS1', 'rc_snlPdeeffx',
           'ssreEmptyStorey', 'ltGap', 'sgp_Story', 'rc_sstspExxPB',
           'rc_bstspLeeffMin',
           'feCombinationTypeNotValidForCurrentNationalDesignCode',
           'errEnvelopeIdOutOfBounds', 'sslslm_Conn',
           'IAxisVMSurfaceSupport', 'steSectionIndexOutOfBounds',
           'cctMDOF', 'rcbsecSeismicM', 'feLineHasNoSections',
           'AxisVMLayers', 'RSpectrumData_DIN', 'cseTooHigh_h',
           'csseZ', 'lngDutch', 'csoInvalid_tf2', 'meFileNotExists',
           'areDomainIdOutOfBounds', 'slt_TwoWay',
           'sdreInvalidAnalysisType', 'cssT', 'mcrmUser',
           'RLoadDomainPolyLine', 'cgceLoadGroupIdOutOfBounds',
           'seSpectrumNotValid', 'ETempFolderType',
           'ELinkElementForce', 'RBulkLineSupport', 'csseRectangular',
           'lnlCompressionOnly', 'ELayerError',
           'steLoadCombinationIndexOutofBounds', 'rc_sstspE1TT',
           'rc_sstspEeffPC', 'errMembersNotAllowed', 'rc_sdrRDx',
           'IAxisVMWindSubStructureEvents', 'mtMin', 'rc_sd_18',
           'REditingOptions', 'RLoadSurfaceFluid',
           'lcaeLoadCaseLoadCombinationNotFound',
           'rbeNoLinesAreSelected', 'csoInvalisOptimizationType',
           'IAxisVMRCBeamDesign', 'rc_snlUyy', 'dWireframe',
           'rc_nsfRxxyyzz', 'ddmDuplication', 'rc_ssState_Middle',
           'egLoadCombinations', 'IAxisVMSections', 'RResistances',
           'ltBeamConcentrated', 'deInvalidLineType',
           'feInvalidCombinationOfLoadCaseAndLoadLevel',
           'AxisVMLoadCombinations', 'mbeNotTruss', 'lgtSnow',
           'IAxisVMDomain', 'EEnvelopesError', 'swetDomain', 'ecXF4',
           'EMassMatrixType', 'RRCBeamDesignDeflectionResults',
           'rtPlane', 'cssr_FI', 'ltBeam',
           'rcbdeInvalidLoadCombinationId', 'IAxisVMStoreysEvents',
           'AxisVMStructuralGrids', 'dloVertical', 'xlscClass2',
           'mexcGroup', 'gahCenter', 'se_k_torsionIsInvalid',
           'rc_lsSminMax', 'smthNone', 'areSurfaceIdOutOfBounds',
           'cseeEditorNotOpened', 'RRCBeamDesignCrackResult',
           'xpeLayersNotSymmetric', 'sch_CanNotBeChecked', 'ctSLS2',
           'EReinforcementType', 'EMassControl', 'rc_vrfaRFull',
           'rc_snlPEeffy', 'RRefPlane', 'rc_ssSyz_Top',
           'seltLoadBeamDistributed', 'lneNotSpring',
           'wpeWorkplaneIsNotGeneral', 'RLoadDomainPolyAssoc',
           'cseNonPositive_tf3', 'mdtCustom', 'sdNodeRelative',
           'mdbNoToAll', 'AxisVMResults', 'put_Mass_per_length',
           'rc_sfNx', 'IAxisVMReferences', 'rdNone', 'tgTopEdge',
           'xpeThicknessesMustBePositive', 'deLineHasNoSections',
           'mtSteel', 'creCOMError', 'feNoValidLinesInTheModel',
           'REdgeConnectionRec', 'sfM1', 'ctULSAllSE7',
           'attaeCannotAddAttachment', 'rdY', 'eeErrorAddingEnvelope',
           'spdoftWarping', 'sslsem_2', 'RLoadTrussFault',
           'rc_sstspE2TC', 'vdeNoVerticalDisplacements', 'rc_snlBzz',
           'EReferenceType', 'nsfRrr', 'IAxisVMWindow',
           'rccceStirrupParametersAreInvalid', 'dtLineIntegrated',
           'ESpringParIsolatorType', 'cseIncompatibleWidthAndHegiht',
           'loeNoSnowLoadCase', 'lcoeInvalidCombinationTypesValue',
           'sassBeam', 'meRCColumnCheckingDisabled',
           'rceLoadCaseIdIndexOutOfBounds', 'dofXXfix', 'pftPlate',
           'rc_sd_21', 'ndcCA_Bridge', 'ltBeamMemberDistributed',
           'cseNonPositive_d', 'rc_lsUMax', 'lctDynamic',
           'RCrossSectionHSQ', 'ctb_SLSQuasi', 'RLoadDynamic',
           'lpetNone', 'rc_sdrRSzz', 'dsUndeformed', 'seltDiaphragm',
           'rAsty', 'rcbsecSeismicH', 'rsgeNonPositive_es0',
           'rcbdeInvalidRebarMaterial', 'EMathTextError',
           'lcoeNameExists', 'idrltLbar', 'svtContourLineMidPoint',
           'rc_lsfRxx', 'ssfRz', 'lgeInvalidType', 'AxisVMDiaphragm',
           'IAxisVMDimensionsEvents',
           'rccceShrinkageEpsMustBePositive', 'IAxisVMDomainSupport',
           'ELineSupportsError', 'mleInvalidSystemValue', 'rc_ecfVz',
           'rcbdeInvalidStirrupMaterial', 'mePDFimportNoEOF',
           'dofPlateYZ', 'RWriteValuesTo', 'rc_xuMN0',
           'feEdgeConnectionIndexOutOfBounds', 'ECombinationTypeBits',
           'cColourByMaterial', 'seltLoadDomainConcentrated',
           'rcbdeErrorSettingMembers', 'vd_w2', 'ltDomainDistributed',
           'ecXD3', 'rmRoundTrip', 'scsOK', 'arltRebarsAndQuantity',
           'seConcreteCoverMustBePositive', 'rc_ecfNx',
           'meNonPositive_Ey', 'cseNonPositive_tf1',
           'cctImportantCharacteristics', 'lu_m', 'sslshm_Member',
           'veeLoadCaseIdIndexOutOfBounds', 'speWFOutOfRange',
           'meInvalidOrEmptyGlobalData', 'rmOneWay', 'xycftNone',
           'sslsem_No', 'feSectionIndexOutOfBounds',
           'deTrapezoidal_p_MustNotBeNegative', 'ltDXF',
           'AxisVMTimberDesignMembers', 'scD_Type2', 'rc_arAsyt',
           'deXLMmoduleNotAvailable', 'mbeReleaseInvalidMaterial',
           'sscstCritical', 'RLoadDomainConstant_V154',
           'RReinforcementCheck', 'csseCustom',
           'creInvalidCombinationOfLoadCombinationAndLoadLevel',
           'cseException', 'fueFileExists', 'IAxisVMEnvelopesEvents',
           'RRCBeamDesignResult', 'cseTooHigh_tw1', 'wcmGreyScale',
           'RExtendedDisplayParameters_V153',
           'reNLpackageNotAvailable', 'AxisVMIncrementFunctions',
           'rc_ssS2_Bottom', 'rc_sstFzz', 'dtLineAssoc',
           'rc_sstspE1PT', 'vd_wtot', 'seAlphaAngleIsInvalid',
           'seltSurfaceSupport', 'bcWhite', 'RPadFootingParams',
           'agtActiveInTension', 'mgtMixedQuadTriangle',
           'leeNotConnectingMasterLineAndMasterEndLink', 'ecClassXC4',
           'dloAutomatic', 'lst3DPolygonFilled',
           'RCommonCriticalResultsSettings',
           'ESteelDesignMemberError', 'ESteelDesignUnitType',
           'lsVmax', 'RRCBeamCrossSections', 'csseU', 'tslslm_Linear',
           'dofFrameXZ', 'ECalculatedReinforcementError',
           'rccceInvalidDesignParameters', 'lu_inch',
           'RRebarSteelGrade_NEN', 'rc_coTop', 'lgtImperfection',
           'scE_Type2', 'sdMinY', 'rc_sdrRDyy', 'rc_sstspLeeffT',
           'rc_sd_4', 'rc_ssSxy_Top', 'rc_rAstx',
           'lseMaterialIndexOutOfBounds', 'rc_d_eZ', 'lsfRz',
           'sut_DistrForce', 'ndcSwiss_SIA26x', 'ecClassXF2',
           'AxisVMAcceleration', 'dsTriangleStr',
           'lneNMustBeGreaterThan1', 'rc_gfNx', 'dsLevelCircle',
           'rcdut_RebarDia', 'IAxisVMMathTexts', 'xssSry_max',
           'mtOther', 'atteNameAlreadyExists',
           'lcaeNoModeShapesForLoadCaseInDirectionY',
           'IAxisVMApplication', 'AxisVMCalcCrackWidth',
           'sdmDiagramRes', 'sfN1', 'IAxisVMMaterials', 'lptUpper',
           'sgeInvalidStoreyIndex', 'catShowWarning', 'lsr_AZ',
           'idoAnchored', 'eceErrorAdding', 'AxisVMVirtualBeams',
           'deRebarPosMustBePositive', 'ndcEuroCode_NO',
           'IAxisVMCustomPartsEvents', 'csseCompositeRound',
           'rc_rsSxt', 'RDimensionLineParameters',
           'RImperfectionParams', 'rc_sfM1', 'AxisVMLine',
           'ETimberSLSPreCamberCurve', 'rc_snlPEx', 'ERoofType',
           'csseAll', 'rc_ssSVM_Bottom', 'rc_vbdFz', 'lgtEllipseArc',
           'IAxisVMCrossSections', 'csut_Size',
           'rcbdeInvalidValue_bw', 'ssreInclinedElementExists',
           'RSteelDesignResult', 'IAxisVMVirtualBeamsEvents',
           'rc_snlPdeeffz', 'ndcRomanian_STAS',
           'RWindLoadParams_V161', 'sgvVisibleAtAllStories', 'lfMyD',
           'rcbsUpStand', 'ltStraightLine3d', 'rc_vdW3', 'ldtLinear',
           'ESelectionType', 'feNoResultBlocksInTheModel',
           'ESmartWorkplaneElementType',
           'deReinforcementParametersNotExists', 'scVEdDivVRdmax',
           'rc_ssBxy_Middle', 'rc_sstspE2TB', 'seltTruss', 'rc_lfTx',
           'sePropertyNotValidForThisSurfaceType',
           'lneStoreyIdOutOfBounds', 'mftMesh', 'cseTooHigh_tw2',
           'rcnlst_Slab', 'meNegative_Alfaz', 'cseTooHigh_tf1',
           'rc_td_2', 'rc_ssSyy_Middle', 'atteCannotDeleteAttribute',
           'ltBeamFault', 'RPartItem', 'rc_xuVrN', 'clpTopCenter',
           'ECrossSectionError', 'mftBuckling', 'rcbdpQyMz',
           'csseHSQA', 'IAxisVMSpectrumEvents', 'ddmDuplicationError',
           'deDomainInvalidType', 'rc_sstspE1EC',
           'rc_bstspLeeffMinMax', 'leeInvalidSystemType',
           'cseTooHigh_tf', 'RLinearFootingParams', 'meNonPositive_R',
           'lgtIncidental', 'deRCNonlinearSurfTypeIsInvalid',
           'mbeReleaseFunctionIndexError', 'dofYfix', 'cspColdFormed',
           'leErrorSettingLoad', 'ltTrussSelfWeight', 'rc_rsdEy',
           'ltDomainConcentrated', 'deStoreyIdOutOfBounds',
           'scstMzVy', 'rccceExcentricity', 'mdtWarning',
           'ECrossSectionShape', 'rc_ilPx1', 'AxisVMNodalSupports',
           'rcbssSeismicH', 'rc_ivDmxy', 'scstNVyVz', 'rc_lsSominMax',
           'detMembrane', 'RLoadPanelEdgeParams',
           'appeUnknownUnitSystem', 'EActualReinforcementError',
           'csoVariousCrossSectionsAreNotSupported',
           'cseNameAlreadyExists', 'ELoadCaseType',
           'rcbdePrestressedBeamsNotSupported', 'IAxisVMVirtualBeams',
           'dsElevTriangleExt', 'csseTWallHaunched',
           'RCrossSectionUserParams', 'reDYNmoduleNotAvailable',
           'rcbsszSeismicH', 'xse_Max', 'cssIHaunched', 'rc_lefVz_NN',
           'EDomainExcentricityType',
           'rccceInvalidCombinationOfLoadCaseAndLoadLevel',
           'errMinMaxNotAllowed', 'rc_rccwUOverall',
           'lcoeDifferentFactorsAndCaseIdsCount', 'fipPlaneYZ',
           'EDXFVersion', 'AxisVMDimensions',
           'csseCompositeRectangle', 'rc_ymEy',
           'RColumnVTCheckResult', 'mbeDomainIndexOutOfBounds',
           'rc_sstE1', 'xssSxx_m_T', 'rc_rdAsyb',
           'ltBeamMemberConcentrated', 'offsCenterRight',
           'ESolutionControl', 'rc_vbdFx', 'rfeVeryRough',
           'AxisVMTimeIncrementFunctions', 'rc_cw_wRt', 'rc_td_10',
           'ctULSAllSE2', 'ELoadsError', 'csbtCompositeSolid',
           'gut_Geom_Distance', 'loeNoPushOverLoadCase',
           'steInvalidAnalysisType', 'mseInvalidType', 'rc_acR',
           'rtRigid', 'ltSurfaceDistributed', 'ltBeamStress',
           'csut_Warping_constant', 'rc_rAsby', 'RRebarPos',
           'egULSab', 'vd_w1', 'detShell', 'spmtInitialMatrix',
           'lut_Line_force', 'IAxisVMCalcCrackWidthEvents', 'csseSFB',
           'scstCritical', 'gctOld', 'AxisVMDomainSupport',
           'mbeReinforcementParametersNotExsist', 'rc_xsSyymT',
           'lcaeErrorCreatingStandardSeismicCases',
           'EStoreyAutoSearchStyle', 'lctPushOver',
           'cseNonPositive_tw1', 'ltDomainThermal', 'cspOther',
           'RResistancesXYZ', 'lneInvalidConcreteMaterialId',
           'rc_vbifVz', 'AxisVMSpringParam', 'dut_Dim_Angle',
           'EMcrMethod', 'lsVzmean', 'atteCannotGetAttribute',
           'reInvalidAnalysisType', 'ctb_SLS3', 'ctb_ULSAllSE5',
           'ERCBeam_ECRO_STAS_SeismicZone',
           'reCalculatedReinforcementDisabled', 'rc_sfMxUcr',
           'AxisVMWorkplanes', 'EDisplacementSystem',
           'EGeometryUnitType', 'lpetWall', 'ELineStress',
           'RRefVector', 'seThetaVRdmaxIsInvalid',
           'lpeInvalidLineType', 'rfeRough', 'dHidden',
           'ETimberSLSLMethod', 'csseT', 'rc_xsSxxmT',
           'seltLoadMoving', 'lctManualPreStress', 'rc_bstEyz',
           'seltLoadBeamConcentrated', 'swetMember',
           'ltSurfaceThermal', 'IAxisVMModelsEvents',
           'ltDynamicNodalAcceleration', 'ESelectMode',
           'AxisVMMembers', 'ERCBeamShape', 'letLL', 'rc_sfMxU',
           'dtCoordinate', 'seltGap', 'cssr_HR',
           'ELoadDistributionType', 'lctImperfection', 'tslslm_Conn',
           'ltTrussThermal', 'rc_arcrVx', 'csseHSQ',
           'sdmeNotConnectingLines', 'veZ',
           'mbeStirrupParametersAreInvalid', 'EMaterialColour',
           'deInvalidStiffnessReduction', 'AxisVMMembersSupports',
           'rc_lsVminMax', 'lut_Moment', 'lopeDomainIndexlListEmpty',
           'wpeInvalidWorkPlaneParameters', 'RDomainExcentricity',
           'rc_d_fX', 'rc_snlMyzz', 'rc_sd_7', 'cssr_AU',
           'RDoubleLClosed', 'veXX', 'dmIsosurfacesAvgVals',
           'lctSnowExcept', 'rc_sd_31', 'veY', 'acY', 'rceCOMError',
           'adetWall', 'sdmeInvalidNationalDesignCode',
           'IAxisVMTimberDesignMembers', 'RColumnStiffnessParams',
           'dSolidResult', 'cssr_CH', 'AxisVMEdgeConnections',
           'ELineNonLinearity', 'reInvalidArrayLength',
           'RDynamicAnalysis', 'gdZp', 'seltBeam', 'mbeEmptyLineList',
           'dodt_SlabVoids', 'IAxisVMDomainsSupports',
           'EShowStructuralGridLineTitle', 'rc_lsBMax', 'rc_d_eY',
           'mdbIgnore', 'rc_sstspE2PT', 'sch_ManipulatedAfterwards',
           'ESurfaceStress', 'IAxisVMDimensions', 'EFileImportAs',
           'IAxisVMMathTextsEvents', 'sut_DistrSurfaceForce',
           'sdElementRelative', 'ctSLSChar',
           'IAxisVMSurfaceSupportsEvents', 'rc_acRR',
           'rc_ssSyz_Middle', 'ERebarSteelGradesError',
           'meIFCVersionNotFound', 'RRCBeamDesignParameters_MSZ',
           'ELoadCombinationsError', 'RLineData',
           'rcbdeInvalidValue_hf', 'mePDFimportPageNotFound',
           'rsgeNonPositive_ks',
           'deCombinationTypeNotValidForCurrentNationalDesignCode',
           'agtActiveInCompression',
           'sceInvalidCombinationOfLoadCaseAndLoadLevel',
           'IAxisVMAccelerationEvents',
           'AxisVMCalculatedReinforcement', 'scstUsual', 'ifc2x',
           'mbeIllegalServiceClassValue', 'ltNNLink',
           'ltRibMemberDistributed', 'sslsem_Right',
           'cseNonPositive_b3', 'dxfR12', 'lgtStraightLine',
           'lcaeSWGmoduleNotAvailable', 'detConstant', 'mgtTriangle',
           'meNonPositive_Rc',
           'dePropertyNotValidForThisDomainSurfaceType', 'scaVEd',
           'rc_arAsyb', 'AxisVMXLAMpanels', 'rc_lsBMin',
           'mtAluminium', 'tFixed', 'ifc20', 'rcdut_ReinfArea',
           'mseMaterialIndexOutOfBounds', 'dsArrow', 'tdreCOMError',
           'rccceCapacityCurveNotYetGenerated', 'mdbRetry',
           'cseNegativeW1pl', 'lgtWind', 'tslslm_Custom', 'EDisplay',
           'dsGlobal', 'mleInvalidMovingLoad', 'sceCOMError',
           'xssSrx_max', 'rc_sfAn', 'reInvalidLoadCaseType',
           'mleInvalidNormVLength', 'offsTopLeft', 'rc_lsBMinMax',
           'ctOther', 'seInvalidType', 'rc_ssSxz_Middle',
           'cseTooHigh_e', 'leet_Ref', 'EActualReinforcementType',
           'rc_veZZ', 'RTableCrossSectionID',
           'lstBeamElasticFoundation', 'EMembersSupportsError',
           'mePDFimportReferenceStreamParsingError',
           'csseCompositeBox', 'RCSParametricOptimizationParams',
           'EBaseHeightType', 'dsDeformed', 'gtDotGrid',
           'mclOtherContour', 'dodt_Beam', 'rc_td_7', 'rcnlst_Wall',
           'ltSurfaceToBeam', 'IAxisVMSettings', 'EMinMaxType',
           'seLoadingFailed', 'rc_xsSxymB', 'rc_lefMy_NN',
           'EAxisVMPlatform', 'IAxisVMRCBeamDesignEvents',
           'rcbdeInvalidAst_min', 'AxisVMSurfaceSupports', 'ltLLLink',
           'ctb_ULSA8', 'ctSLS3', 'RRCBeamDesignParameters',
           'AxisVMDomain', 'tdmeInvalidNationalDesignCode',
           'artDomain', 'rc_sd_15', 'rc_rsdFx', 'ctb_ULSA3',
           'rc_sfAn1', 'duOpened', 'scstNMy',
           'atteAttributeSizeMustMatch', 'rc_sstExy',
           'deEnvironmentClassNotValidForUsedDesignCode',
           'mcrmC1C2C3User', 'ELineSupportForce',
           'cseAyIsHigherThanAx', 'mleInvalidPathOrNormV',
           'mut_Young_modulus', 'sysGlobal', 'adetRamp', 'csseCross',
           'dofYYfix', 'vbdt2P', 'seIncompatibleReferences',
           'ammUserDefined', 'fueFailedToAddFromFile',
           'tdreLoadCaseIdIndexOutOfBounds', 'ESurfaceVertexIndex',
           'lneStiffnessReductionNotAllowed', 'deNoSelectedLine',
           'lneMaterialIndexOutOfBounds', 'AxisVMSpectrum',
           'mbeRibEccTypeUsedOnBeam', 'vtSecondOrder', 'mftGeometry',
           'RLoadDomainPolyLineItem', 'cssWedgedI',
           'rePushoverSpectrumIsNotParametric',
           'mePDFimportStreamDataNotFound',
           'deRebarDiameterMustBePositive', 'ltTrussFault',
           'ECrossSectionOptimizationType',
           'seEnvironmentClassNotValidForUsedDesignCode', 'lsVmin',
           'AxisVMAttachments', 'rc_lsVymean',
           'mbeInvalidRCCheckingParameters',
           'EIFCQuestionableDomainLink', 'AxisVMEnvelopes', 'cssI',
           'dePhiMustBePositiveOrZero', 'atLinearVibration',
           'dofPlateXZ', 'RRCBeamSupport', 'ctb_ULSALLab',
           'ripInternalCoeff', 'RExtendedDisplayParameters',
           'scstNMz', 'rc_scVRdc', 'cssRectangleHollow', 'ipmtBrick',
           'pft_Linear', 'leeInvalidLinkElementType',
           'RNNLinkElementRec', 'RColumnRebarPos',
           'rcbdeInvalidCombinationOfLoadCombinationAndLoadLevel',
           'seCOMError', 'EAcceleration', 'rc_lefTx_NN',
           'IAxisVMDisplacementsEvents', 'atteCannotAddAttribute',
           'deMaterialIndex', 'EXLAMSurfaceEfficiency',
           'cseTooHigh_h2', 'csooMinimumHeight',
           'sviContourLineMidPoint1', 'ssgltEnd',
           'seStiffnessReductionNotAllowed',
           'lcaeErrorCreatingPreStressCases', 'rc_sstspEyyTT',
           'sgp_XY', 'mePDFmoduleNotAvailable', 'rc_td_4', 'rc_veZ',
           'RLoadRibMemberDistributed', 'tvaTop', 'rc_sstspExxTT',
           'nlcc_CC1', 'EVerticalDisplacement', 'steNotValidLineType',
           'mut_Mass', 'sdSeismicIsolator', 'gavCenter', 'rc_snlBy',
           'IAxisVMCustomPartFolder', 'dtLevel', 'ndcEuroCode_B',
           'steNodeIndexOutOfBounds', 'spmtTangentMatrix',
           'steLoadCaseIndexOutofBounds', 'rc_berrdFy', 'rc_lefNx_NN',
           'RSeismicSensitivityResults', 'lpsDashDot',
           'IAxisVMIncrementFunctionsEvents', 'ecXD1', 'RLineAttr',
           'ETimberGrain', 'ELoadPanelContourType', 'vbfMz', 'sfAm',
           'RLoadSurfaceEdge', 'ssS2', 'RSurfaceStresses',
           'AxisVMCrossSections', 'IAxisVMVelocity',
           'seReinforcementParametersNotExists', 'rc_sd_20',
           'EDimensionsError', 'lcaeSeismicInvalidGroupID', 'scstN',
           'lsfRrr', 'rc_xsSyyn', 'rc_sstspAePC', 'scC_Type1',
           'RSpectrumData_EC', 'rc_snlUzz', 'ctb_SLSFreq',
           'EActualReinforcementLabelType', 'ESurfaceCharacteristics',
           'RReinforcementParameters_NEN', 'cseNonPositive_b2',
           'EWindStructureRoofType', 'ctULSA7',
           'AxisVMDomainsSupports', 'clpNoLogo', 'scA_Type1',
           'rc_bstspExxTMin', 'EStructClass_EC', 'cssS',
           'errJSONpropertyMissing', 'meNonPositive_Fu', 'rc_rAsty',
           'RLoadSurfaceDistributed', 'EDomainsError', 'xssSxx_m_B',
           'scstNMyMx', 'rc_lsUMin', 'rc_rAsxyt', 'rc_sstspExxPT',
           'ESurfaceStiffnessReduction', 'mtiaAboveHeightZ',
           'rcbdeInvalidDesignParameters', 'meSE1moduleNotAvailable',
           'IAxisVMMembersSupportsEvents', 'ctb_ULS',
           'RCSOptimizationResultsParametric', 'scsFail',
           'dodt_Column', 'AxisVMTimberDesignResults',
           'pft_NodeCircular', 'wsrtMonopitch', 'stPlane',
           'ENodesSupportsError', 'deInvalidStiffnessReductionMat',
           'IAxisVMStressesEvents', 'rc_sfRzz', 'rc_rsSyt',
           'egLoadCases', 'sdmDiagramSegWidth',
           'csoGroupIsForPredefinedShapes', 'loeInvalidLoadCaseType',
           'spdtKelvin', 'EGridType', 'rc_veX', 'ECrossSectionRegion',
           'AxisVMSupports', 'weLoadCombinationIdOutOfBounds',
           'rc_ssfy_Bottom', 'ESurfaceSupportForce', 'cseNegativeAy',
           'wsrtDuopitchCanopy', 'rc_ssBzz_Middle', 'lfTx',
           'rc_ssAs_Bottom', 'EaxsImportCustomParts', 'rc_sfAm2',
           'deCompositeRibInvalidCrossSection',
           'lcaeInvalidAnalysisTypeDirY', 'EIFCimportMethod',
           'mePDFimportPDFfileIsEncrypted', 'seltSpring',
           'leeap_TopCenter', 'deBetaAngleIsInvalid', 'ctb_ULSAllSE8',
           'IAxisVMLineSupport', 'scB_Type1', 'retRoundEaves',
           'rcbsszAntiSeismic', 'rc_sd_14',
           'lneInvalidLineTypeOrFEnumber',
           'lneInvalidStiffnessReduction', 'cssr_EE', 'ecClassXS2',
           'ecClassXM1', 'rccceInvalidConcreteMaterialId',
           'RReinforcementParameters_EC',
           'steInvalidCombinationOfLoadCaseAndLoadLevel',
           'areSurfaceVertexIndexOutOfBounds', 'mmtAngle',
           'RPartialRCBeamDesignParameters', 'EDiaphragmError',
           'de_k_torsionIsInvalid', 'IAxisVMLoadGroups',
           'AxisVMSurface', 'sfNyD', 'nsfRx',
           'loeZeroLoadValueOnLoadPanel', 'IAxisVMLoadCases', 'scS3',
           'rc_rccolUSum', 'AxisVMTask', 'ldcOther', 'rc_sstspE2TT',
           'dtNone', 'rc_snlFyz', 'RDXFimportParameters', 'ltPDF',
           'IAxisVMDomainSupportsEvents',
           'IAxisVMVerticalDisplacements', 'cssTrapezoid', 'dtRadius',
           'ECriticalGroupCombinationsError', 'ecXC3',
           'RReinforcementParameters_STAS', 'AxisVMStresses',
           'RLineSupportStiffParams', 'rc_vbdEy',
           'rsgeNonPositive_fyk', 'RCrossSectionSFB',
           'ESectionsError', 'rc_sdrVxx', 'seltRigidBody',
           'detOneDirection', 'dpheLineIndexOutOfBounds', 'rc_bd_fY',
           'cspRolled', 'RNonLinearAnalysisResultInfo', 'areCOMError',
           'cssTTopHaunched', 'RTimberDesignResult',
           'ESectionSegmentChainIntegratedResultant', 'ssSxy',
           'ltDomainConstant', 'scfeEndNode',
           'reResultCaseIndexOutOfBounds', 'smInvert', 'ctb_SLS1',
           'RSpectrumData_ECHU', 'EReleaseType',
           'mePDFimportUnknownEmbeddedObject', 'seltDomainPlate',
           'cseNotAllowedProcessForShape', 'RSpringParamIndexes',
           'dofZZfix', 'sfNy', 'lgeNameExists', 'IAxisVMDiaphragm',
           'IAxisVMLineSupports', 'atBuckling', 'ndcEuroCode_PL',
           'RNodalSupportSpringParams', 'lpctAssociated',
           'lut_Surface_force', 'feNoLinkElementsInTheModel',
           'acEnableShowWarning', 'ctSLS1',
           'RVerticalDisplacementValues',
           'deInvalidHollowCoreHoletype', 'RBasicDisplayParameters',
           'lbTrue', 'rc_cw_wkb', 'meNonPositive_fc90kz',
           'nseInvalidType', 'rtMonopitch',
           'sceInvalidCombinationOfLoadCombinationAndLoadLevel',
           'EWorkplanesError', 'cssr_CZ', 'scfeStartNode',
           'EMeshType', 'ECalculationUserInteraction',
           'seSectionTypeIsNotSegment', 'IAxisVMMaterial',
           'EStructuralGridVisibility', 'teCanNotStartTask',
           'weLoadCaseIdOutOfBounds', 'ndcEuroCode_GER',
           'dtArcLength', 'mtTimber', 'EConnectedToNodeType',
           'ecClassX0', 'lneInvalidStiffnessReductionMat',
           'IAxisVMRCColumnChecking', 'EColour',
           'loeNotDynamicLoadCase', 'mtAdaptive', 'AxisVMMovingLoads',
           'leErrorSettingLines', 'rc_berrdFx', 'RPoint3d',
           'mleInvalidItemType', 'nstSeismicIsolator', 'rc_sd_12',
           'sviCenterPoint', 'ctb_ULSab', 'ndcEuroCode_DK',
           'RReinforcementParameters_MSZ', 'rc_ssS2_Top',
           'ctULSSeismic', 'lneNotTruss', 'rc_sfAvRz', 'scstNAbsMyMz',
           'wptSmart', 'cseTooLow_c', 'EPadFootingType',
           'sTransversal', 'leet_None', 'lsfRr', 'aetTop',
           'ltRibMemberConcentrated', 'rsCannotBeReinforcedY',
           'xyd_x', 'rc_sd_13', 'dmDiagram', 'errCreepNotSupported',
           'RDomainTrapezoidal', 'seltLoadPanel', 'ELengthUnit',
           'sgwInvalidStartCharX', 'IAxisVMMovingLoadOnDomainEvents',
           'selsLifeSafety', 'ctb_ULSA2', 'ssreOK',
           'sefseMustBePositive', 'ndcEuroCode_GR', 'ctb_ULSA1',
           'meCannotExport', 'EEdgeConnectionForce',
           'sceInvalidAnalysisType', 'lcaeNameExists', 'sspBottom',
           'csoCrossSectionTypeIsNotSupported', 'AxisVMMaterials',
           'sptNodal', 'EReinforcement', 'egGeoULS_A2',
           'rccceInvalidEnvelopeID', 'vbfTx',
           'loeLoadComponentMustBeZero',
           'speNegativeValueMustBePositive', 'lngGreek',
           'cseNonPositive_c', 'cseNonPositive_b1', 'rc_snlUx',
           'xyclsArrange', 'EXYDirection', 'csse4L',
           'RImperfectionParams_V153', 'cssr_NO',
           'rbeLineListIsEmpty', 'oClockwise',
           'IAxisVMApplicationEvents', 'vbfNx',
           'lneInvalidSteelMaterialId', 'rc_sstEsz', 'RLine3d',
           'AxisVMReferences', 'ltTrussStress', 'errInvalidPosition',
           'RAXSimportParameters', 'rc_td_9', 'daClass',
           'rc_nsfRalpha', 'EForcesError', 'RSection', 'rc_ivDnx',
           'nseMaterialIndexOutOfBounds',
           'IAxisVMActualReinforcementEvents', 'rc_lefVy_NN',
           'nsfRxx', 'ESpringForce', 'mtiaAboveSelectedStory',
           'RLoadDomainPolyArea', 'feInvalidAnalysisType', 'mtMinMax',
           'rc_d_fR', 'egDefault', 'egULS_ALL', 'cseTooLow_N',
           'RLoadTrussStress', 'nstNodalEdgeRelative',
           'leet_RibDomain', 'IAxisVMColumnRebarsEvents', 'veYY',
           'ESteelLateralSupports', 'mbeInvalidStiffnessReduction',
           'leet_AlignementPoint', 'lefVz', 'meSD9moduleNotAvailable',
           'rc_sd_3', 'acZZ', 'EGroupCombinationType',
           'attaeAttachmentNotFound', 'RLoadDomainConcentrated',
           'csseDoubleIBox', 'rc_sd_19', 'rc_sdrRSy', 'rtPlastic',
           'ctAuto', 'rc_td_1',
           'creLoadCombinationIdIndexOutOfBounds', 'egULSSeismic',
           'ecClassXA2', 'cssAsymmetricI', 'cssr_NZ', 'dloLeft',
           'rsgeNonPositive_E', 'seltLoadDomainPoly', 'rc_sstspAeTB',
           'rc_berrdEr', 'veeInvalidCombinationOfLoadCaseAndTimeStep',
           'rc_snlUz', 'RShowProperties', 'dofPlateXY', 'veRR',
           'mclConcreteContour', 'lngBulgarian', 'rc_ssByy_Top',
           'lpeNotFound', 'vdeNoNonlinearResults', 'ERunningMode',
           'cssDoubleL', 'errInvalidEnvelopeUID',
           'vbeInvalidSections', 'cseNonPositiveIy',
           'IAxisVMResultsEvents', 'letNN', 'rccceInvalidArrayLength',
           'deNotARibbedDomain', 'mbeReleaseInvalidComponent',
           'rc_sd_22', 'EDisplayMode', 'IAxisVMCalculation',
           'seltAllSupports', 'sysLocal',
           'atteInvalidOrEmptyItemData', 'rc_td_15',
           'meNonPositive_Fck_cube', 'rc_vd_eY', 'clsoAuto',
           'meInvalid_NationalDesignCode', 'rc_cw_wS2b',
           'leErrorSettingLoadCaseId', 'EWindowSplit',
           'rc_sstspEyyEB', 'errNoResults', 'dodt_Wall',
           'feNoSpringsInTheModel', 'ecfVz', 'lctManualSeismic',
           'lsSmin', 'ndcGerman_DIN1045_1', 'ctSLSFreq',
           'errCOMServerInternalError', 'RCrackWidths',
           'rc_bstspExxPMin', 'sctMax', 'meEmtpy_Name', 'lfMy',
           'mePDFimportNoGraphicElementsOnPage', 'cft_Warning',
           'seNodeIndexOutOfBounds', 'mdtOnCompressionSide',
           'rc_vbdEr', 'meNonPositive_Gmean',
           'ESurfaceDomainDistributionType', 'sfRzz', 'nsfRzz',
           'nsfRr', 'IAxisVMWindLoadEvents',
           'csoGroupNameAlreadyExists', 'meNonPositive_Fu40',
           'rc_ivDmx', 'RShowActualReinforcement', 'ammAuto',
           'scstNMzMx', 'RUnitParameters', 'rcdut_Cracking',
           'cssr_FR', 'EGeneralAlignmentVertical', 'rc_sstspE1PC',
           'rc_veXX', 'rc_sd_5', 'cssr_ZA', 'csseCompositePipe',
           'ltNodalForce', 'dsLocal', 'rc_veYY',
           'ERoofInternalPressure', 'cssr_AR', 'dtEdgeLocal',
           'ECalculationError', 'ltBeamDistributed', 'rc_sstspEyyPT',
           'lsfRzz', 'cssL', 'ELine2dType', 'IAxisVMLoadGroup',
           'ldcLong', 'iqdlReinforce', 'IAxisVMPolygon2d',
           'ELEEccType', 'tslspcc_Quadratic', 'ssfRy',
           'offsTopCenter', 'rc_sstE2', 'reSE2moduleNotAvailable',
           'AxisVMWindow', 'IAxisVMCalculationEvents',
           'ESeismicDuctilityClass', 'sviContourLineMidPoint3',
           'dcret_custom', 'IAxisVMShearCapacity', 'lngArabic',
           'ELoadDurationClass', 'rsgeNonPositive_esu', 'cspWelded',
           'lngCroatian', 'RSurfaceStressValuesTMB',
           'ERCColumnCheckingError',
           'EArchitecturalDomainElementType',
           'deMemberIndexOutOfBounds', 'idrltOverlap', 'rtDuopitch',
           'ccfCustom', 'rc_sfAn2', 'ndcCA_Ontario', 'wsVertical',
           'rcbdeInvalidTopPos', 'rc_arAsybt', 'aZ', 'rptRatio',
           'ldcInstant', 'rc_cw_wkbt', 'rtHinged',
           'nseNodeIndexOutOfBounds', 'speNLPInconsistency',
           'AxisVMAttributes', 'de_k_bendingIsInvalid', 'detPlate',
           'rc_ymEx', 'rc_sd_8', 'vbeDuplication', 'rc_d_eX',
           'rc_bstspLeeffMax', 'ecClassXF3',
           'RSteelDesignParameters_MSZ_STAS', 'ldplitBlankLine',
           'rc_ssSVM_Middle', 'rc_rsSxbt', 'RCrossSectionComposite',
           'rc_ssSyy_Bottom', 'EShearCapacitiesError',
           'rcdut_ShearReinfArea', 'mdtOnTensionSide',
           'RMiscellaneousSettings', 'rc_sdrVzz',
           'RRCBeamDesignParameters_STAS', 'RCrossSectionHSQA',
           'aetWall', 'hht_Circular', 'ecXS1',
           'deShrinkageEpsMustBePositive', 'AxisVMCrossSection',
           'sut_DistrMoment', 'deAlphaAngleIsInvalid',
           'RSurfaceSupportForces',
           'deInvalidCombinationOfLoadCombinationAndLoadLevel',
           'acEnableNoWarning', 'xpeInvalidLayers',
           'dpheLineListIsEmpty', 'EStructureMode', 'EResultType',
           'RRefPoint', 'dtLowLevel', 'fueFailedToModifyFunction',
           'ldplitDomain', 'AxisVMCrackWidth', 'sdPlusY', 'dsInBox',
           'ESlabLoadTransferDirection', 'csseDoubleUOpened',
           'leNotValidLineTypeForThisLoad',
           'reLoadLevelIndexOutOfBounds', 'RLoadSurfaceLine',
           'seltLoadDynamic', 'feInvalidLineType', 'idrltUbar',
           'rc_lsSomax', 'ecClassXF4', 'deInvalidMarkType',
           'ELEEccAlignementPoint', 'csieoStressPointsLabels',
           'lcaeNoModeShapesForLoadCaseInDirectionX', 'RRelease',
           'rc_bstspExxPMinMax', 'rtBeta', 'sassDomain',
           'mdtConfirmation', 'rc_ssState_Top', 'aX',
           'cctElasticADRS', 'sdc_DCM', 'sseSeismicResultsMissing',
           'pft_NodeRectangular', 'rc_ssSeff_Middle',
           'mmtMaxDeviationFromArc', 'RSurfacePointIndexes',
           'mePDFimportStreamLengthNotFound', 'rc_lfNx',
           'ECompanyLogoSizeOption', 'sfNxD', 'cseTooLow_e',
           'lst3DPolygon', 'ldtConst', 'smthSelective', 'ndcItalian',
           'nseCrossSectionIndexOutOfBounds', 'atNonLinearStatic',
           'meNonPositive_s', 'brdtProjected', 'EStiffeners',
           'csoLoadCaseIdIndexOutOfBounds', 'deNoLoadCasesInTheModel',
           'cssr_LT', 'lneNotRib', 'ctULSAllSE8',
           'meActualReinforcementDisabled', 'ccfSemiAuto',
           'deNoNodesInTheModel', 'scArcLength', 'EDimensionType',
           'rc_arcrDez', 'rc_sstspLeeffC', 'rc_cw_wS2t',
           'mseInvalidRefType', 'detTwoDirections', 'EVelocityError',
           'rc_sstspExxEC', 'lsr_IX', 'dsLevelCircleCheck',
           'REnabledLogicalParts', 'lcoeAutoGenerationFailed',
           'ESlabLoadTransfer', 'sviContourPoint2',
           'seLoadCaseIndexOutOfBounds',
           'lneInvalidFunctionIDofRelease', 'lngGerman', 'rc_td_11',
           'rc_d_fY', 'meRCBeamDesignDisabled',
           'seShrinkageEpsMustBePositive', 'vbfVy',
           'lcaeErrorSetingSeismicParams', 'IAxisVMDiaphragmEvents',
           'sctAuto', 'RNonLinearityXYZ', 'RLLLinkElementRec',
           'mclConcrete', 'IAxisVMCrossSectionOptimization',
           'deHollowCoreFiMustBePositive', 'EBeamRibDistributionType',
           'meTD1moduleNotAvailable', 'atteInvalidName',
           'errNoLoadCaseInLoadGroups', 'ESpringParMatrixType',
           'rc_lefTx_LL', 'IAxisVMModel', 'rc_ilPy1',
           'stMembraneStrain', 'stShell', 'rc_vbdFr', 'dsBoldTick',
           'IAxisVMObjectCreator',
           'rccceVTCapacityDesignIsNotSupported',
           'leThereAreNoSeismicStoreys', 'RDomainVariableThickness',
           'RCSOptimizationParamsGeneral', 'EDisplayAnalysisType',
           'EMainFormTab', 'rc_snlPEeffx', 'rtWelded', 'bhtLowest',
           'sviContourPoint3', 'RRebarSteelGrade_SIA',
           'mePianoCanNotFindFile', 'tcIV',
           'feMembersSupportIndexOutOfBounds', 'rc_bd_eZ', 'lsr_IY',
           'IAxisVMSeismicStoreysEvents',
           'mePDFimportUnknownCompression', 'pcMoveToRootFolder',
           'IAxisVMMembersSupports', 'wcmColour', 'vbfMy',
           'meNonPositive_SigmahH', 'rc_bd_fX', 'ecClassXS4',
           'lopeInvalidContour', 'cssC', 'dmDiagramAvgVals',
           'rtSemiRigid', 'RStressPoint', 'tdmeNotConnectingLines',
           'rc_snlUxx', 'wsrtUndefined', 'rc_sstspE1TB', 'sfNxy',
           'RLoadEmptySurfaceLine', 'RIFCimportParameters',
           'rc_xsSyzmax', 'rc_xuMN90', 'RBulkWSLineSupport',
           'ESurfaceVertexType', 'feLoadCaseIndexOutofBounds',
           'creInvalidCombinationOfLoadCaseAndLoadLevel',
           'cseNotAllowedProcessForParameters', 'ELoadPanelsError',
           'meTD9moduleNotAvailable', 'rc_ilPz1', 'rc_xuVt',
           'EDomainVariableThicknessType', 'sdGlobal',
           'csseDoubleLFlange', 'ssSyy', 'sslslm_Custom',
           'RLoadDomainSelfWeigth', 'feNoGapsInTheModel',
           'IAxisVMStructuralGrid', 'put_Gap_opening', 'selsCollapse',
           'RTimberDesignParameters_V153', 'xse_V_T',
           'RVirtualStripParams', 'ERCBeam_EC_SIA_SeismicZone',
           'cssr_CN', 'ecClassXA3', 'mbeInvalidConcreteMaterialId',
           'steNoResultBlocksInTheModel', 'leet_CustomOffset',
           'sdCustom', 'cssr_SE', 'reInvalidNationalDesignCode',
           'rc_bd_fZ', 'cseExtParams', 'seltVirtualBeam',
           'lngRussian', 'lngItalian', 'dloCentre', 'ldcMedium',
           'seltAllSurfaces', 'EAttributesError',
           'ptRelativePerThousand', 'ELinkElementError', 'ltSpring',
           'loeSE1moduleNotAvailable', 'csoInvalid_a', 'idoOverRun',
           'rsgeNonPositive_Ra', 'rc_ivDqy',
           'IAxisVMTimberDesignResults', 'cssr_SI', 'mdbYes',
           'IAxisVMReports',
           'sceCombinationTypeNotValidForCurrentNationalDesignCode',
           'RRebarSteelGrade_STAS', 'rc_lsfyMax',
           'IAxisVMActualReinforcement',
           'csoNoneOfTheCrossSectionsIsValid', 'csieoNone',
           'pfsms_Edge', 'cuiNoUserInteractionWithAutoCorrectNoShow',
           'deReferenceIndexOutOfBounds', 'AxisVMCustomPartFolder',
           'leeap_TopLeft', 'rc_sd_util_SLS',
           'REdgeConnectionForceValues', 'lpsDashDotDot',
           'sphrIsotropic', 'ctSemiAutoSLS2',
           'cseTooLargeInnerCrossSection', 'lstEdgeGlobal',
           'rc_sfVyz', 'dtOrtho', 'rccceInvalidRebarSteelGradeId',
           'rccceInvalidAnalysisType', 'deMoreThanOneHoleFound',
           'sfRyy', 'ESmoothing', 'feNoEdgeConnectionsInTheModel',
           'rtFlat', 'deEmptyHole', 'ltRib', 'cssr_IT',
           'IAxisVMCrossSectionTable', 'EMaterialError', 'cssr_DE',
           'meDYNmoduleNotAvailable', 'rsgeNonPositive_Epsud',
           'rtyp_Ortho', 'ltRibThermal', 'thaFit',
           'aicpToActiveCustomParts', 'mseSectionIdOutOfBounds',
           'mtMax', 'reInvalidResponseSpectraParam',
           'EMomentDiagramType', 'mclAluminiumContour', 'bcLightGrey',
           'RElasticFoundationXYZ', 'svtContourPoint', 'rc_sstEyz',
           'sut_Rotation', 'RRefBeta', 'EIntensityReferenceValue',
           'nsfRz', 'wsNormal', 'seltLink', 'ecfMy', 'rc_veR',
           'seltNodalSupport', 'csseIFB', 'IAxisVMSettingsEvents',
           'dsElevTriangleRight', 'rc_sfM2', 'RSpectrumData_ECNL',
           'csoCrossSectionVariesInTheGroup',
           'ETimberDesignMemberError', 'leErrorSettingPoly',
           'ltBeamThermal', 'lneReleaseInvalidType', 'EMembersError',
           'RSurface', 'cweInvalidAnalysisType', 'sslshm_Structure',
           'loeDerivedSurfaceLoadsNotConverted', 'cseNonPositive_h',
           'gdZm', 'EApplicationError', 'rc_lfVz', 'sltd_OneWayY',
           'RLineStressValues', 'dsPlus', 'leInvalidLineType',
           'rmsdY', 'ESectionDisplayMode', 'rc_ssBxy_Top',
           'AxisVMReinforcementCheck', 'ctb_Other',
           'lneDomainIndexOutOfBounds', 'rc_sfNy',
           'RReinforcementParameters_SIA', 'cseNegativeW2t',
           'rc_snlBx', 'ELongBoolean', 'RWindLoadParams', 'lsfRyy',
           'leeap_BottomLeft', 'ecClassXM3', 'AxisVMWindows',
           'lgtPrestress', 'ecfNx', 'rcdut_RebarDistance', 'sscir_M',
           'EColumnRebarsError', 'offsBottomRight',
           'RNodeReinforcementValues', 'rc_sstspLeeffB', 'mcrmAuto',
           'ctntSelected', 'EXYchartLabelingStyle',
           'AxisVMLoadPanels', 'cssr_PT', 'scForce', 'vbdtStraight',
           'cssr_BR', 'RShowNumbering', 'deAlphaVRdmaxIsInvalid',
           'ctb_ULSAllSE6', 'reRC1moduleNotAvailable',
           'ERCBeamDesignPlane', 'put_Beam_length',
           'RElementStiffnessParams', 'rc_snlEEz',
           'IAxisVMCalculatedReinforcement', 'mdbNone',
           'scVEdMinusVRdc', 'mePDFimportFileGlyphlistNotFound',
           'AxisVMSurfaces', 'csbtSolid', 'errIndexDuplication',
           'tcI', 'smBridge', 'rc_sstspEyyPC', 'rc_td_util_ULS',
           'rc_sstspDeeffPT', 'lsSomax', 'mdbOK', 'smDeselect',
           'rc_sd_10', 'cseNonPositive_tw2', 'mbeStoreyIdOutOfBounds',
           'sgp_WorkPlane', 'ETerrainCategory',
           'RReinforcementParameters_DIN', 'IAxisVMNodesEvents',
           'ESteelFireParBetaMethod', 'xse_M_N_0', 'rc_sfRx',
           'ttOther', 'deTrapezoidal_h_MustBePositive',
           'steLineIndexOutOfBounds',
           'csoCrossSectionsInTheGroupAreNotUsable',
           'seSpectrumDataNotParametric', 'ecClassXC3',
           'dmIsosurfaces3D', 'cssr_UK',
           'csoUsedMaterialIsNotSupported', 'rcbdeInvalidMaterialId',
           'cssr_GR', 'mtUniform', 'meNonPositive_fvkz',
           'RReleases_V161', 'AxisVMResultTreeIterator',
           'seSpectrumDataNotAvailable', 'sltd_OneWayX',
           'IAxisVMCalculatedReinforcementEvents', 'rc_ssU_Bottom',
           'lneReadOnlyPropertyForThisLineType', 'rc_sstspExxTB',
           'meReinforcementForExportNotAvailable', 'IAxisVMMember',
           'EExpClass_EC', 'sblm_Length', 'RResultBlockInfo',
           'seltArchBeam', 'lneReleaseInvalidMaterial',
           'tdreCombinationTypeNotValidForCurrentNationalDesignCode',
           'csseDoubleL', 'dodt_Domain', 'RPushOverDirectionParams',
           'IAxisVMTimberDesignResultsEvents', 'vbtVirtualBeam',
           'detBottomSurface', 'deThicknessMustBePositive',
           'cweCombinationTypeNotValidForCurrentNationalDesignCode',
           'rc_ssSxy_Middle', 'rc_vrfaRSelf', 'EArchitectElemType',
           'AxisVMRCBeamDesign', 'ltDynamicNodalForce',
           'IAxisVMCrossSectionTablesEvents', 'rc_ecfTx',
           'IAxisVMDynamicLoadFunctions',
           'rcbdeInvalidPlasticHingeParams', 'lefMz', 'scA_Type2',
           'AxisVMNodesSupports', 'feNodalSupportIndexOutOfBounds',
           'ECrossSectionBasicType', 'iimArchitecturalModelObjects',
           'ESeismicStoreysError', 'EVSDefinitionType',
           'steLineHasNoSections', 'laeInvalidPenWidth', 'rc_nsfRx',
           'xtldLocalY', 'cssr_LV', 'meSWGmoduleNotAvailable',
           'IAxisVMMaterialsEvents', 'ecClassXD3', 'cseNegative_r1',
           'rc_bstspExxEMax', 'offsCenterLeft',
           'ceNLpackageNotAvailable', 'sfpbm_Auto',
           'RNMInteractionDiagMinMax',
           'cweLoadCaseIdIndexOutOfBounds', 'lctMoving',
           'EShearCapacity', 'acXX', 'gdYp', 'RLoadPanelPolyLine',
           'IAxisVMLogicalParts', 'egSLSQuasipermanent', 'rmspFirst',
           'IAxisVMLine2d', 'deCompositeRibInvalidDirection',
           'cssRegularPolygon', 'rcActual',
           'atteInvalidOrEmptyItemIndexes', 'lgtMoving',
           'seltArchRamp', 'eceLineIndexOutOfBounds', 'rc_lfMz',
           'egULS', 'thaMiddle', 'rc_ssSyz_Bottom',
           'cseeEditorModeIsNotSolidCrossSection',
           'AxisVMCrossSectionOptimization',
           'mbeRCShrinkageEpsMustBePositive', 'ctULSa', 'ctULS2',
           'reLoadCaseIsOutOfBounds', 'cssCircleHollow', 'lsSomin',
           'RXLAMSurfaceStressValues', 'RAccelerationValues',
           'rc_td_14', 'lcaeLoadCaseIndexOutOfBoundsDirY',
           'EMemberMeshType', 'csoOutOfConstraintLimits',
           'RLineGeomData', 'csbtCompositeThinWalled', 'gdXm',
           'EPartControl', 'lut_Fire_duration', 'RSurfaceForces',
           'sgvOnlyIfActive', 'seTauaMustBePositiveOrZero', 'vFront',
           'feInvalidCombinationOfLoadCombinationAndLoadLevel',
           'dut_Dim_Distance', 'se_k_shearIsInvalid',
           'RLayerShapeAttributes', 'IAxisVMSpringParamsEvents',
           'IAxisVMStrains', 'tFree', 'IAxisVMCalcCrackWidth',
           'spitRubber', 'sceLoadCaseIdIndexOutOfBounds',
           'RLoadCombinationGenParameters',
           'loeSWGmoduleNotAvailable',
           'cweInvalidCombinationOfLoadCaseAndLoadLevel',
           'IAxisVMDisplacements', 'aetAuto', 'dtInfoHint',
           'RRebarSteelGrade_MSZ', 'nsfRalpha', 'ctb_ULSA6',
           'cpeInvalidPath', 'pfsms_Interior', 'cssr_ES', 'ctULSA2',
           'EDegreeOfFreedom', 'ECompanyLogoPosition', 'rc_acZ',
           'deLimitingCrackWidthIsInvalid',
           'RLoadSupportDisplacement',
           'RBulkNodalSupportSpringParams', 'rc_snlPEy',
           'rc_sstspAePT', 'tslsem_Right', 'ctULSA3',
           'ddmNoDuplication', 'aXX', 'rc_sfAm1', 'rc_snlEExx',
           'lopeNodeIndexlListEmpty', 'IAxisVMPolygon2dList',
           'ELineGeomType', 'deEmptyContour', 'IAxisVMLines',
           'ECrackWidthsError', 'thaLeft', 'areReinfParamMissing',
           'cctInelasticADRS', 'ecXC4', 'AxisVMCrossSectionTable',
           'stSegment', 'mclBrick', 'meSteelDesignMembersDisabled',
           'ecClassXF1', 'cwBottom', 'seltMidPoint',
           'mleInvalidMovingLoadType',
           'deInvalidCombinationOfLoadCaseAndLoadLevel',
           'RLoadDomainThermal', 'cseTooHigh_tf2', 'retSharpEaves',
           'rc_vbifTx', 'bhtCustom', 'mclBrickContour',
           'rsgeNonPositive_es1', 'ELinkElementType',
           'lcaeNoPushOverCases', 'seConcreteIdIndexOutOfBounds',
           'reModeShapeIndexOutOfBounds', 'rc_xsSyymB',
           'lsePadFootingNotDefined', 'rc_lsUMinMax',
           'cseInvalidMaterials', 'EVirtualBeamType', 'dmNone',
           'fipWorkPlane', 'RSectionSegmentIntegratedResultant',
           'loePointIsOutOfLoadPanel', 'rc_vd_eX',
           'RLinearFootingCalced', 'sdmeCOMError', 'sfpbm_User',
           'RSurfaceCoordinates', 'AxisVMPushoverHingeFunctions',
           'rc_sstKxx', 'rc_vd_eR', 'ECrossSectionOptimizationError',
           'rc_sstspAeET', 'RDoubleWedgedI',
           'IAxisVMSteelDesignResultsEvents', 'rc_sd_16',
           'ltSurfaceFluid', 'ltLoadDomainPolyLine',
           'EArcAngleOrientation', 'wcmBlackAndWhite',
           'ECriticalCombinationFormula',
           'tdreLoadCombinationIdIndexOutOfBounds',
           'meCannotReadGlobalData', 'doeCOMError', 'ssfRx',
           'seLineIndexOutOfBounds', 'RTotalLoads',
           'mePDFimportNoGraphicElements', 'ctULS3',
           'ENodalSupportForce', 'rcbsRectangle', 'mbeInvalidRelease',
           'EBackgroundColour', 'rc_sstKyy', 'EMemberExcType',
           'REccReleases', 'cssr_IN', 'dtAngle', 'cssr_KR',
           'IAxisVMXLAMpanelsEvents', 'RMatrix2x2',
           'IAxisVMSpringParam', 'mftStatic', 'rc_rReinfCheck',
           'rc_td_12', 'lcaeNoModeShapesInDirectionX', 'nlcc_Invalid',
           'RLoadBeamMemberDistributed', 'rcbdeInvalidThetaValue',
           'EHollowHoleType', 'brdtLength',
           'RReinforcementCheckValues',
           'rccceInvalidCombinationOfLoadCombinationAndLoadLevel',
           'RRCBeamDesignParameters_DIN', 'svtCenterPoint',
           'EGravityDirection', 'cseNonPositive_tf',
           'cpePartNameAlreadyExists', 'tcIII', 'xssSyy_n',
           'dsCircleFilled', 'EMassesTakenIntoAccount', 'rc_arcrM',
           'csoGroupCrossSectionIndexOutOfBounds', 'dtElevation',
           'cseDifferentWidthAndHeight', 'csseJ', 'cseNegativeW2b',
           'ESectionType', 'ssSxx', 'meNonPositive_fvky',
           'rtPushover', 'mbeInvalidSteelMaterialId', 'ttSoftWood',
           'ELoadGroupType', 'RLinkElementForces', 'cssr_BG',
           'rccceDifferentColumnReinforcementParameters',
           'rcdut_Eccentricity', 'rc_sdrRSx', 'cssr_BE',
           'IAxisVMForces', 'ESeismicComponentSumType',
           'cseNegativeW2pl', 'sassBoth', 'laeInvalidFontName',
           'rc_bstExz', 'errNotSupportedByNationalDesignCode',
           'oCounterClockwise', 'rc_acX', 'AxisVMNodes',
           'leeNotConnectingMasterLineAndMasterStartLink',
           'RSteelDesignParameters_NEN', 'dsElevTriangleTop',
           'rc_scVEdDivVRdmax', 'cctSDOF', 'RActualReinforcement',
           'sfRxx', 'lopeInvalidContourParams',
           'IAxisVMWindowsEvents', 'ESurfaceStressPosition',
           'dpheIllegalDOFValue', 'lefTx', 'rc_lsfRz',
           'RShowGraphicSymbols', 'AxisVMWindSubStructure',
           'RSteelDesignParameters', 'rc_nsfRrr', 'rc_sstspEeffPT',
           'rc_sfMxDcr', 'wsrtBarrel', 'dcret_midplane',
           'seSavingFailed', 'rc_snlPdeeffxx', 'cssZ', 'lngHungarian',
           'csoInvalidManufacturingProcess', 'csbtAll',
           'RReinforcementParameters_ITA', 'ETextHorizontalAlignment',
           'lngHebrew', 'RCrackWidthValues', 'aetColumn', 'rc_sfvSz',
           'EIFCDomainOverlap', 'csotPreDefinedShapes',
           'ctb_ULSSeismic', 'lopeMemberIndexOutOfBounds',
           'fimOverwrite', 'RShowLoads', 'lngRomanian',
           'RReinforcements', 'deCustomStiffnessMatrixUndefined',
           'seSurfaceReferenceIndexOutOfBounds',
           'AxisVMVerticalDisplacements', 'ecClassXM2', 'dodt_Slab',
           'rc_sstspAeTT', 'rc_rsdFz', 'ESpringParNLDefType',
           'rc_snlEEzz', 'rc_sstspE1ET', 'rc_td_util_SLS',
           'loeLoadPanelIndexlListEmpty', 'rc_dcmwU',
           'ESurfacesError', 'sscir_Q', 'AxisVMModels',
           'rcbdeInvalidCombinationOfLoadCaseAndLoadLevel',
           'rc_vbdEx', 'de_k_shearIsInvalid',
           'mseStiffnessCalcParamsNotDefined', 'mexcDomainRib',
           'leInvalidLoadType', 'mcrmDutch', 'rc_d_fZ',
           'IAxisVMLinkElementsEvents', 'rc_vbdEz', 'RShowLabels',
           'meNonPositive_fc90ky', 'lcaeLoadCaseIndexOutOfBoundsDirX',
           'rc_arAsxbt', 'RNonLinearAnalysis', 'scVRdc', 'rc_lsSmin',
           'rc_lsfRr', 'seteInvalidGravityAcceleration',
           'sdVectorReference', 'lneReleaseFunctionIndexError',
           'csoOptimizationCheckCombinationIsNotValid',
           'RCompanyLogoParameters', 'RLineForceValues',
           'mclSteelContour', 'EWindLoadError', 'EDesignApproach',
           'lneEmptyLineList', 'ETimberSLSDesignCreepMode',
           'ENodalSupportType', 'cseNonPositive_v',
           'RSpectrumData_SIA', 'se_k_bendingIsInvalid', 'rc_lsVmin',
           'feNotValidLineType', 'RMyMz', 'seltAllLines',
           'EPartItemType', 'ripUndefined', 'cuiUserInteraction',
           'pitLine', 'feMemberIndexOutOfBounds', 'cseNegativeIw',
           'cseTooHigh_r1', 'cssr_EU', 'rc_sfNxD', 'lngSlovakian',
           'nstNodalReference', 'EMaterialUnitType', 'RCursorSnap',
           'mbeMembersNotContinuous', 'ssgltStart',
           'sdreLoadCombinationIdIndexOutOfBounds',
           'lneReleaseInitAndLimitMustBe0', 'ndcEuroCode_S', 'csseS',
           'ldplitLoadPanel', 'sdPointReference', 'thaCenter',
           'ndcOther', 'deInvalidType', 'mexcRelOffs',
           'RColumnReinforcementParameters',
           'RSteelDesignParameters_EC_SIA_ITA', 'rc_ssS1_Middle',
           'lsSmax', 'RRCBeamDesignParameters_SIA',
           'lneSectionIndexOutOfBounds', 'RSurfaceStressValues',
           'retNone', 'ECrossSectionObjectiveOfOptimization',
           'deInvalidText', 'rc_bstspEeffMinMax', 'leet_Group',
           'lcaeNoSnowLoadCases', 'swetSurface',
           'IAxisVMSeismicStoreys', 'IAxisVMRebarSteelGrades',
           'sut_Force', 'deElasticFoundationNegative',
           'deHollowCoreHMustBePositive', 'steXLAMmoduleNotAvailable',
           'mbeInvalidColumnRebarsId', 'EDisplayShape',
           'sePhiMustBePositiveOrZero', 'AxisVMColumnRebars',
           'mclOther', 'sut_Stress', 'sptConstraint', 'rc_sdrRDz',
           'ldcShort', 'meNonPositive_GammaM', 'ltSurfaceToBeamAssoc',
           'csseCircle', 'ETopographicCategory', 'sgltLetters',
           'mePDFimportReferenceTableParsingError', 'sgvDefault',
           'RRCBeamDesignBendingResult', 'csseAsymmetricI',
           'ctULSExceptional', 'RSteelDesignParameters_V153',
           'rc_nsfRzz', 'iimStaticModel', 'IAxisVMSectionsEvents',
           'sfRx', 'mePDFimportErrorInCompressedData',
           'spnntNonLinearPlastic', 'AxisVMDrawingsLibrary',
           'IAxisVMSpringParams', 'IAxisVMModels', 'cseTooHigh_tw3',
           'mleInvalidLoadGroup',
           'RSectionSegmentChainIntegratedParameters',
           'AxisVMVelocity', 'lctFire', 'lneNotGap', 'sut_Surface',
           'mftElements', 'ldplitSurface', 'ctULS', 'csieoFilled',
           'd_eX', 'RSpringCharacteristics', 'ctb_ULSb', 'RMatrix3x3',
           'scPushOver', 'meNonPositive_SigmaH',
           'EStructuralGridPlane', 'dodt_Hole', 'cssr_RS',
           'EIFCopeningsAlignedToDomainEdge',
           'lneInvalidRCCheckingParameters', 'mcrmC1Lopez',
           'lcaePropertyNotValidForThisType',
           'AxisVMMovingLoadOnBeam', 'lsVymean',
           'ESupportSeismicComponentSumType',
           'RMovingLoadOnDomainItem', 'IAxisVMXLAMpanels', 'sfMxDp',
           'sut_Displacement', 'eceDomainIndexOutOfBounds',
           'rc_lsfRrr', 'rc_lsfyMin', 'de_Current',
           'rePushoverSpectrumIsNotValid', 'lut_Force', 'lgtSeismic',
           'spdoftTranslation', 'AxisVMDomainSupports',
           'rc_sstspExyEC', 'nsfRyy',
           'deVirtualBeamChainIndexOutOfBounds',
           'EIFCDomainReinforcementLinkType',
           'rceInvalidAnalysisType', 'ldcPermanent', 'ctb_ULSa',
           'veZZ', 'EGlobalWorkplaneType', 'ttLVL', 'css4L',
           'rc_sdrVy', 'ENL_ConsequenceClass',
           'leMemberIndexOutOfBounds', 'IAxisVMEdgeConnectionsEvents',
           'meNonPositive_Fck', 'IAxisVMCrossSection',
           'EVBDomainsDuplicateMode', 'dloRight',
           'RCircularFootingSpec', 'RLoadBeamMemberConcentrated',
           'atNonLinearVibration', 'vsdtCentroid',
           'EXLAMSurfaceStress', 'lopeMemberIndexlListEmpty',
           'seReferenceIndexOutOfBounds', 'rc_sfMxDUcr',
           'spnlCompressionOnly', 'rc_snlFyy', 'stMembraneStress',
           'dofZfix', 'rc_rsSxb', 'ctb_ULS3',
           'IAxisVMMovingLoadsEvents',
           'rccceColumnCheckingIsNotSupported', 'lngEnglish',
           'leeReferenceIndexOutOfBounds', 'rc_ssS2_Middle',
           'rc_bstspDeeffMax', 'ctntAll', 'REdgeConnectionForces',
           'gahLeft', 'IAxisVMCriticalGroupCombinations',
           'RWorldRectangle', 'cctInitialPeriod', 'rc_ssS1_Top',
           'lgtCircleArc', 'ESurfaceForce',
           'nsePropertyNotValidForThisType', 'xyclsOverlapFilter',
           'aYY', 'loeSE2moduleNotAvailable', 'RLoadBeamThermal',
           'reITAReductionCriterionNotSatisfied', 'IAxisVMWorkplanes',
           'RDisplacementValues', 'cgceNotEditable', 'vd_wbij',
           'RPadFootingParams_V153',
           'deCustomStiffnessMatrixNonPositiveDefine',
           'ERoofMultiSpanPos', 'ECombinationType', 'acRR',
           'rc_sd_29', 'deCOMError', 'tcT3', 'EPadFootingType2',
           'lgtFire', 'catExitApplication', 'loeInvalidRoofType',
           'csut_Static_moment', 'EReinforcementDirection',
           'scVRdmax', 'steCOMError', 'rc_rccolUNM',
           'rccceInvalidColumnRebarsId',
           'seInvalidNationalDesignCode', 'ltStraightLine', 'ctULS1',
           'rc_sfMxDU', 'leeap_BottomCenter', 'tcII', 'AxisVMForces',
           'ERigidBodiesError', 'offsBottomCenter', 'dloHorizontal',
           'RLoadSurfaceToBeamAssoc', 'tcT4', 'deDomainIsNotMeshed',
           'rc_sstspExxPC', 'rc_ssSxx_Bottom', 'smthAllSurf',
           'rc_bd_eY', 'acYY', 'cssDoubleI', 'sspTop',
           'rc_rccwUStrip', 'd_fY', 'ctULSA5', 'cseTooHigh_v',
           'AxisVMActualReinforcement', 'rc_vbdFy', 'RPoint2d',
           'rtRibbed', 'deThetaVRdmaxIsInvalid', 'IAxisVMMovingLoads',
           'ESpringDirection', 'csseIHaunched', 'rc_arcrN',
           'EWindowState', 'RInfoWindowSwitch', 'errOutOfMemory',
           'egSLSFrequent', 'RRCBeamSection', 'rc_arcrUtil',
           'mbeStartEndCrossSectionTypeIncompatible',
           'attaeCannotDeleteAttachment', 'rc_vdWTot', 'ndcCA_NBCC',
           'dsExtLine', 'AxisVMPolygon2dList',
           'csut_Area_Moment_Inertia', 'csseI', 'csseWedgedI',
           'mbeNotBeam', 'meInvalidDataName', 'dsLevelCircleExt',
           'EEnvelopeGroup', 'IAxisVMTask', 'RSurfaceAttr',
           'rcbsecAntiSeismic', 'piEnd', 'lpsSolid', 'pitSurface',
           'egCustomCombinations', 'rcCalculated', 'RLoadNodalForce',
           'cssr_IL', 'seteInvalidGravityDirection', 'rc_ecfMz',
           'attaeInvalidName', 'IAxisVMTimberDesignMembersEvents',
           'ECrossSectionEditorError', 'rc_td_3',
           'rcbdeDesignCodeParametersNotValidForUsedDesignCode',
           'RLoadDomainPolyAssoc_V161', 'rc_snlPEeffxx',
           'feNoLineSupportsInTheModel', 'meNonPositive_fc0k',
           'spitSlider', 'ltEdge', 'IAxisVMSteelDesignMembers',
           'AxisVMModel', 'mePianoInternalException', 'sdmResultant',
           'IAxisVMAcceleration', 'csoInvalidAnalysisType',
           'ESeismicLimitState', 'EModelError', 'ELoadPositionType',
           'stPlate', 'dmSolidModel', 'vbdt1PAndV', 'rc_vdW2',
           'rc_sd_30', 'meIFCNoStaticData', 'leeap_BottomRight',
           'spdtMaxwell', 'deInvalidNodeID', 'ndcEuroCode_NL',
           'AxisVMSpringParams', 'ssr_IC', 'meNonPositive_SigmabH',
           'stHole', 'lcaeNoWindLoadCases', 'lneNodeNotOnLine',
           'rc_arcrAvgUtil', 'mut_Limit_strain', 'mexcNone',
           'seltSurfaceShell', 'EPadFootingStepMeasureSource',
           'lstRibElasticFoundation', 'AxisVMDynamicLoadFunctions',
           'RPushOverAnalysis', 'irvAbsMaxModel', 'adetSlab',
           'cseNonPositive_tw3', 'feLoadCombinationIndexOutofBounds',
           'RFrequencyParameters', 'AxisVMLines', 'RShowSymbols',
           'cctBilinearAD', 'rsgeNonPositive_fyd', 'IAxisVMLines3d',
           'IAxisVMLineSupportsEvents', 'rc_acZZ',
           'AxisVMSurfaceSupport', 'AxisVMStoreys',
           'EDistributionType', 'xse_Vr_N', 'mlxo_ij',
           'IAxisVMMovingLoadOnDomain', 'EStaticUnitType',
           'dsElevCorner', 'EFileImportMode', 'csseDoubleLClosed',
           'IAxisVMLinkElements', 'feNoNodalSupportsInTheModel',
           'mftSteelDesign', 'loeInvalidLoad', 'pcDeleteParts',
           'csseComposite2IX', 'lopeInvalidContourType',
           'ENationalDesignCode', 'ctSemiAutoSLS1',
           'ESpringParDampingType', 'cssRectangular', 'cssr_US',
           'rc_vbifNx', 'seParametersRecordNotValidForUsedDesignCode',
           'ETimberType', 'acR', 'rcbdeInvalidShrinkageValue',
           'IAxisVMMovingLoadOnBeamEvents', 'rc_xsSxzmax',
           'IAxisVMLogicalPartsEvents', 'vTop',
           'IAxisVMPushoverHingeFunctions', 'rc_arAsxb',
           'lopeSameLoadPanelExists',
           'rccceColumnReinforcementParametersNotSet',
           'RWindowPosition', 'fuePointIndexOutOfBounds',
           'cseAzIsHigherThanAx', 'dmSectionFilled',
           'meNegative_Alfax', 'ndcEuroCode_LV', 'rsgeNonPositive_fs',
           'cseNonPositive_h2', 'csseL', 'deNodeIndexOutOfBounds',
           'ssSVM', 'IAxisVMAttachments', 'rc_vd_fZ',
           'ndcHungarian_MSZ', 'egSLSCharacteristic',
           'seInvalidStiffnessReduction', 'sdreCOMError',
           'leDomainIndexOutOfBounds', 'sctQuadratic',
           'sut_Translational', 'rc_sd_2', 'cssCircle',
           'RRCBeamDesignCrackResults', 'rc_scaVEd',
           'rc_bstspExxEMinMax', 'dePolyLineIsNotContinuous',
           'lngCzech', 'rc_sd_25', 'rsgeNotFound', 'scstMyVz',
           'RLoadBeamConcentrated', 'schLinear',
           'rccceShearCrackAngleIsInvalid', 'rtSmooth',
           'RLineAttr_V161', 'rc_sfMyDcr',
           'leeNotConnectingSlaveLineAndMasterEndLink',
           'sphrKinematic', 'rc_sstspAeTC',
           'cuiNoUserInteractionWithoutAutoCorrectNoShow',
           'rcbdeInvalidStirrupDiameter', 'EStructuralGridsError',
           'ecClassXD2B', 'dsLevelCross', 'rc_nsfRy',
           'csseDoubleUClosed', 'errInvalidName', 'rc_lsfRx',
           'IAxisVMWindows', 'dofFrameXY', 'rc_ivDqx', 'rc_scAsw',
           'tslsdcm_User', 'EApplicationClose', 'sut_Line_rotational',
           'ammEstimatedFromKzKw', 'rc_sstExz', 'meNegative_Nux',
           'spdoftRotation', 'AxisVMLoads', 'rc_vbifVy',
           'attaeItemIndexOutOfBounds',
           'seLimitingCrackWidthIsInvalid', 'rc_ssBzz_Top', 'lctSnow',
           'RNodeCrackWidthValues', 'csoMemberDesignIDsEmpty',
           'loeNoMassLoadOnNode', 'ecfVy', 'sviContourPoint1',
           'cseNonPositive_tw', 'atteItemIndexOutOfBounds',
           'deNoLoadCombinationsInTheModel', 'rc_vd_fR',
           'mePianoCanNotUpdate', 'rc_bstspExxTMinMax',
           'rc_bstspDeeffMin', 'rc_scVEdMinusVRdc', 'rmspSecond',
           'seFunctionPointsEmpty', 'RXLAMSurfaceEfficiencies',
           'EAnalysisType', 'rc_lefMz_LL', 'IAxisVMLayersEvents',
           'gctAdditive', 'ndcEuroCode_CZ', 'rc_vdW1', 'lsfRy',
           'dtNodeAssoc', 'rc_sd_eff', 'ECalculatioFinishedType',
           'rc_snlBxx', 'ctULSab', 'RSurfaceForceValues',
           'seInvalidReinfParamForTrapezoidal', 'ctb_ULSA7',
           'aeLoadCombinationHasNoDynamicResult', 'scS5',
           'rcbsszSeismicM', 'sut_Rotational', 'rc_cw_wk2t',
           'errInternalException',
           'lpeStructuralGridLineUIDOutOfBounds',
           'ERCNonlinearSurfType', 'ltSimpleLine',
           'RSurfaceSupportForceValues', 'offsTopRight',
           'rsgeIllegalNationalDesignCode', 'ecXF3',
           'sqwNormalVectorVaries', 'cseNonPositive_b', 'rc_sdrRSz',
           'ESpringParDOFType', 'ecXF2', 'ifc2x2',
           'RStructuralGridParams', 'deHoleNotInDomainPlane',
           'RReinforcementValues', 'rc_sstspE1TC', 'dsTriangleFilled',
           'csoGroupIsForParametricOptimization',
           'ECrossSectionShapeEx', 'rc_sfMyDm', 'rc_rAsybt',
           'rc_snlUy', 'rcbdeInvalidValue_h',
           'lcaeInvalidAnalysisTypeDirX', 'cssr_RU', 'rc_rdAsxb',
           'dofFree', 'ELoadPanelEdgeType', 'mtiaAll', 'ecXC1',
           'RLinkElementForceValues', 'rc_arAsxt',
           'mcConvertLoadToMasses', 'ETorsion', 'clsoWidth',
           'aicpPreserveNames', 'csoInvalid_b2', 'ESpringParError',
           'rc_rsdEx', 'scB_Type2', 'rc_sfMyD', 'EDomainSupportType',
           'seInvalidCharacteristics', 'sscstFxyzWithLinkedMyz',
           'IAxisVMReferencesEvents',
           'steCombinationTypeNotValidForCurrentNationalDesignCode',
           'rc_bstExy', 'rc_sfMxDm', 'IAxisVMMembersEvents',
           'errCriticalCombinationNotAllowed', 'RShearCapacityValues',
           'rc_sstspExxTC', 'mdbAbort', 'leLoadCaseIndexOutOfBounds',
           'ndcEuroCode_Austrian', 'RResultTreeIteratorRec',
           'rc_sd_9', 'IAxisVMNodesSupports', 'rc_sfMyDp', 'sfAn',
           'lopeLineIndexOutOfBounds', 'RColumnForces',
           'atteCannotSetAttribute',
           'lneRCShrinkageEpsMustBePositive',
           'IAxisVMRCColumnCheckingEvents', 'feNodeIndexOutOfBounds',
           'mbeInvalidRebarSteelGradeId', 'ltDomainFluid',
           'rc_lsVmax', 'rc_sd_util_ULS', 'rc_sfNyD',
           'RShearCapacities', 'rc_sd_6',
           'errCombinationTypeNotAllowed',
           'rceInvalidCombinationOfLoadCombinationAndLoadLevel',
           'lgtManualSeismic', 'RLoadSurfaceThermal',
           'AxisVMLogicalParts', 'sfVxz',
           'IAxisVMReinforcementCheckEvents', 'dloRadial',
           'mexcLocal', 'IAxisVMStructuralGrids',
           'EDisplayedEnvelopes', 'pftSloped', 'aletDiagonal',
           'RVibration', 'xssSxy_max', 'RPDFimportParameters',
           'AxisVMShearCapacity', 'ESteelSLSHMethod',
           'rc_ssByy_Bottom', 'vPerspective', 'errIndexOutOfBounds',
           'rc_vd_fX', 'scS4', 'rc_sstspAeEC', 'rc_lsfRy',
           'wsrtSignBoard', 'csooMinimumWeight',
           'pcMoveToUpperFolder', 'aY',
           'deAggregateSizeMustBePositive', 'IAxisVMMembers',
           'rsgeNonPositive_Epsuk', 'rc_snlPEz', 'lneInvalidRefZ',
           'RCrossSectionIFB', 'rcbdeInvalidValue_beff', 'rAstx',
           'rc_lsfRyy', 'tdreInvalidAnalysisType', 'rc_cw_wk2b',
           'lneCrossSectionIndexOutOfBounds',
           'RSegmentChainPointCrackWidthValues', 'mmtMaxElementSize',
           'RLoadBeamFault',
           'aeInvalidCombinationOfLoadCaseAndTimeStep',
           'IAxisVMAttachmentsEvents', 'sslslm_Member',
           'EWindowsError', 'rc_sd_26', 'rc_sstspEyyTB', 'lptLower',
           'tslsem_Left', 'deTauaMustBePositiveOrZero',
           'RSeismicParams_V153', 'ERoofMultiSpanDir', 'rc_ivDny',
           'dtProjected', 'ltDomainLinear', 'ELayerType',
           'csoGroupCrossSectionTypeIsDifferent', 'rc_snlPdeeffyy',
           'RSectionElementData', 'rc_sd_11', 'lngPortuguese',
           'AxisVMLoadGroup', 'lneNotBeam', 'rc_berrdFz', 'sgp_YZ',
           'AxisVMSteelDesignResults', 'IAxisVMLinesEvents',
           'rc_sdrRDzz', 'aeInvalidAnalysisType',
           'sviContourLineMidPoint4', 'seltLoadDomainDistributed',
           'AxisVMNodalSupport', 'ELine3dType', 'sfMxy', 'sfvSz',
           'lsr_AY', 'sdmDiagramOnly', 'RSeismicParams',
           'ELoadsUnitType', 'EReinforcementCheckError',
           'IAxisVMSurfaces', 'EWindowColourMode', 'dtDomainAssoc',
           'seltLoadPanelEdge', 'ESystem', 'deInvalidAnalysisType',
           'rc_acXX', 'deNuMustBePositiveOrZero', 'rc_sfMxDp',
           'lseSectionIdOutOfBounds', 'rc_td_6', 'sscir_N',
           'ECrossSectionDoubleUType', 'mdbCancel', 'csseC',
           'dvtvTwoDirections', 'ctULSb', 'cseNegativeW1b',
           'mltMovingLoadOnDomain', 'rc_sstspEyyEC',
           'EDimensionLabelOrientation', 'RRCBeamPlasticHingeParams',
           'aeLoadCaseIdIndexOutOfBounds', 'ndcEuroCode_SK',
           'rc_sfMy', 'sslspcc_Quadratic', 'meNonPositive_Ry',
           'fipPlaneXZ', 'nseStiffnessCalcParamsNotDefined',
           'rc_snlPEeffzz', 'lcaeNoModeShapesInDirectionY',
           'reResultCaseIsNotLoadCase', 'vsdtEccentric',
           'mbeInvalidMemberType', 'ctb_ULSA5', 'ELineType',
           'sdreLoadCaseIdIndexOutOfBounds', 'mePDFimportFailure',
           'EReinforcementCalculation', 'rc_ssfRy',
           'seRebarSteelGradeIdIndexOutOfBounds',
           'sstSurfaceElasticFoundation', 'tcT1', 'ecfMz',
           'seAlphaVRdmaxIsInvalid', 'mdbYesToAll', 'rtAxis',
           'steReadXLAMSurfaceStresses',
           'mbeReleaseInitAndLimitMustBe0', 'AxisVMLoadGroups',
           'csseTrapezoid', 'cssPipe', 'ELineForce', 'lctWind',
           'wsrtFreestandingWall', 'IAxisVMLoadPanels', 'acX',
           'ERCDesignUnitType', 'mctAuto', 'duClosed',
           'ECompositeInnerCSalign',
           'feVirtualBeamSectionIndexOutOfBounds',
           'rccceInvalidLoadCombinationId', 'aetCustom', 'rc_rsdFy',
           'RRCBeamDesignParameters_EC', 'cseNonPositive_tf2',
           'ctb_SLS2', 'EArchitecturalLineElementType',
           'mdtErrorConfirmation', 'EEdgeConnectionError',
           'rsgeNonPositive_mat', 'ltCircleArc3d', 'IAxisVMLoadPanel',
           'RXLAMSurfaceStresses', 'cseTooLow_r1', 'ltRibDistributed',
           'csbtThinWalled', 'rc_xsSrymax', 'meNonPositive_ft0k',
           'dsTriangle', 'RStiffnesses', 'IAxisVMNodalSupportsEvents',
           'selsDamage', 'EStiffnessUnitType',
           'AxisVMCriticalGroupCombinations',
           'deRebarSteelGradeIdIndexOutOfBounds', 'steNotXLAMpanel',
           'mctCQC', 'pitNode', 'css2LX',
           'deTrapezoidal_t_MustBePositive',
           'meSE2moduleNotAvailable', 'mbeInvalidFunctionIDofRelease',
           'pftStepped', 'dofFrameYZ', 'rc_sstspDeeffPC',
           'sviContourLineMidPoint2', 'AxisVMMember',
           'rc_ssSxy_Bottom', 'RXLAMParams', 'RNcrParameters',
           'ltAxisVM', 'lfVy', 'seLineCountCanBeOnly3Or4',
           'feCOMError', 'seltSurfacePlate', 'cseNonPositiveHz',
           'RBuckling', 'rc_sfRxx',
           'csoManufacturingProcessIsNotSupported',
           'ECustomPartsError', 'mleInvalidLoadCase',
           'meRevitImportTessDegreeOutOfRange', 'IAxisVMLoads',
           'mleInvalidPathOrNodes', 'gtGridLines', 'ESubsoilClass',
           'cseNonPositiveAx', 'rc_ssSVM_Top', 'ELayerPenStyle',
           'ndcDutch_NEN', 'IAxisVMSurfacesEvents',
           'leeap_CenterCenter', 'cseInvalidCrossSectionType',
           'ioatdeAdjustTheDomain', 'sfRz',
           'seElasticFoundationNegative', 'EMovingLoadError',
           'acDisable', 'cseTooLow_h', 'RRCBeamDesignParameters_ITA',
           'reResultCaseIsNotLoadCombination',
           'feLineIndexOutOfBounds', 'seltSurfaceMembrane',
           'seltNode', 'scsNotAvailable', 'cseErrorAdding',
           'RNodalSupportStiffParams', 'rc_sstspEyyPB', 'rtCritical',
           'RLinearFootingSpec', 'nseInvalidMemberAndNodeCombination',
           'IAxisVMShearCapacityEvents', 'AxisVMStructuralGrid',
           'IAxisVMCrossSectionEditor', 'ctb_ULSExceptional',
           'RLoadTrussThermal', 'ctULSAllSE5', 'thaAligned',
           'RVirtualBeamForceValues', 'rbeLineIndexOutOfBounds',
           'rc_sstspExyPT', 'rc_snlPEeffyy',
           'cseDifferentCrossSectionShape', 'csseDoubleI',
           'lopeLineIndexlListEmpty', 'gctExclusive', 'rc_ssfRz',
           'rc_snlPdeeffy', 'rc_sd_1', 'sfRy', 'seltSurfaceEdge',
           'meNonPositive_fmk', 'ETimberDesignResultsError',
           'lngSpanish', 'deNoValidLinesInTheModel', 'ETaskError',
           'RResultBlock', 'IAxisVMStrainsEvents',
           'deCustomStiffnessMatrixNonSymetric', 'rc_sfN1',
           'meNegative_Nuy', 'rtLoadCase',
           'reFrequencyIndexOutOfBounds', 'lgtExceptional',
           'sysReference', 'seltHole', 'lcaeGroupIdOutOfBounds',
           'reSteelDesignResultsDisabled', 'seSegmentDefinitionError',
           'rc_d_eR', 'catNone', 'ECombinationMethod', 'egGeo',
           'meIFCMaxDeviationAndByAngleIsZero', 'dRendered', 'lfMz',
           'xycftGradient', 'ecXD2b', 'dmIsolines',
           'cctSDOFinADSpace', 'rptLength', 'meNegative_Nuz',
           'rcbdeInvalidAnalysisType', 'ltSurfaceSelfWeight',
           'egULSExceptional', 'rc_rccolUVT', 'IAxisVMLoadsEvents',
           'cssr_PL', 'AxisVMRigidBodies', 'rc_ssAs_Middle',
           'rc_ssSxz_Top', 'RRefData', 'AxisVMApplication',
           'put_Surface', 'mteMathTextUIDandAPI_NameDontMatch',
           'ETimberDesignUnitType', 'rc_sstspAePB',
           'lctLocalImperfection', 'rfeSmooth', 'tvaCenter',
           'RDisplaySwitch', 'rc_lefNx_LL', 'lneInvalidRelease',
           'RSpringForceValues', 'seBetaAngleIsInvalid',
           'eeErrorModifyingEnvelope', 'nstNodalGlobal',
           'cweLoadCombinationIdIndexOutOfBounds', 'ESurfaceCheck',
           'EVirtualBeamForce', 'deHollowCoreBMustBePositive',
           'areDiameterIsInvalid', 'teCanNotChangeMainTab',
           'rc_ssSzz_Bottom', 'mdbHelp', 'EFunctionsError',
           'seltArchColumn', 'rc_ssU_Top', 'rc_ssBzz_Bottom',
           'rc_sfMxy', 'fiaBackgroundLayer', 'rmsdX', 'mdbClose',
           'IAxisVMVerticalDisplacementsEvents', 'sgltNumbers',
           'meNonPositive_E005', 'ESurfaceSupportType', 'rc_scVRdmax',
           'rc_sdrVz', 'ESupportError', 'rc_snlBz', 'ssAs',
           'mbeStiffnessReductionNotAllowed', 'REllipseArcGeomData',
           'IAxisVMTaskEvents', 'deTrapezoidal_w_MustBePositive',
           'AxisVMLoadCases', 'EResultsError',
           'dsElevTriangleTopRight', 'sdc_DCH', 'IAxisVMCrackWidth',
           'ERebarType', 'rc_snlPEeffz', 'cseTooLow_b2', 'tftSystem',
           'scS6', 'ECrossSectionUnitType',
           'RStructuralGridGenerationParams', 'rcbdeInvalidAsb_min',
           'clpTopRight', 'ecClassXD4', 'mclTimberContour',
           'rccceInvalidMemberId', 'selsOther', 'rc_sdrRDy',
           'RLoadSurfaceToBeam', 'ecXF1', 'AxisVMSeismicStoreys',
           'rc_td_13', 'put_Thickness', 'ceDYNmoduleNotAvailable',
           'deSectionIndexOutOfBounds', 'RSurfaceStiffnessFactors',
           'dpheNoLinesAreSelected', 'rc_bstspEeffMin', 'ctSLSQuasi',
           'schTensionOnly', 'RLoadRibMemberConcentrated',
           'ipmtOther', 'RWallStiffnessParams',
           'nseReferenceIndexOutOfBounds', 'ctb_ULSAllSE1',
           'IAxisVMCrossSectionEditorEvents', 'vbtVirtualStrip',
           'tdut_Check_components', 'mtConcrete', 'rc_ecfVy',
           'rc_lsSeffMinMax', 'rc_sfVxz', 'EXLAMTopLayerDirection',
           'rccceColumnReinforcementNoForces', 'sfMyDm',
           'seltLineSupport', 'EModalCombType',
           'vbeVirtualBeamNoSection', 'AxisVMDomains', 'rc_sfAm',
           'leErrorAddingLoad', 'ltDynamicNodalSupportAcceleration',
           'retWithParapetWall', 'ESteelSLSPreCamberCurve',
           'seThicknessMustBePositive', 'RShowSwitches',
           'seltDomainShell', 'lut_Temperature_variation', 'mtBrick',
           'meDataNameAlreadyExists', 'sddtProjected', 'cssr_NL',
           'ecfTx', 'IAxisVMLine', 'seAggregateSizeMustBePositive',
           'rc_xuMax', 'rcbdeErrorSettingLines', 'cseEmptyName',
           'csoInvalid_b', 'vbdtCentroid', 'ctULSA1', 'RNode',
           'dodt_BeamHorizontal', 'rc_berrdEy', 'rc_sstspE2EC',
           'sfM2', 'feZeroValidLineNumber', 'rc_snlByy',
           'rsgeNonPositive_fsrep', 'seRCNonlinearSurfTypeIsInvalid',
           'wsrtMonopitchCanopy', 'lgtPermanent',
           'atteAttributeNotFound', 'cweCOMError', 'sviContourPoint4',
           'ELayerShapeType', 'wsHorizontal', 'cft_Error',
           'ctb_SLSChar', 'lfVz', 'rc_bstKyy', 'cft_OK', 'rc_sdrRSyy',
           'irvAbsMaxParts', 'IAxisVMSteelDesignMembersEvents',
           'dut_Graphics_size', 'ECapacityCurveType', 'xssSxx_n',
           'sdmeDesignParametersNotValidForUsedDesignCode',
           'seInvalidAnalysisType', 'nsfRy', 'rc_ivDmy',
           'csooMinimumWidth', 'cssTWallHaunched', 'lpctUserDefined',
           'IAxisVMRigidBodiesEvents',
           'lneStirrupParametersAreInvalid', 'sqwGridLineNotInPlane',
           'seltArchSlab', 'd_eZ', 'rc_lsSeffMin', 'rc_sfNxy',
           'IAxisVMReinforcementCheck',
           'deInvalidReinfParamForTrapezoidal',
           'IAxisVMLoadCombinationsEvents', 'sgp_XZ',
           'IAxisVMSurfaceSupports', 'lpeStoreyIdOutOfBounds',
           'rccceCapacityCurveCannotBeGenerated',
           'cuiNoUserInteractionWithoutAutoCorrect', 'rc_sstspExyTC',
           'speNLEInconsistency', 'lneNoLinesAreSelected',
           'rc_ssU_Middle', 'lneFunctionIdMustBe0',
           'nsePadFootingNotDefined', 'EDimensioningUnitType',
           'lnlTensionAndCompression', 'ELogicalPartsError',
           'tftModel', 'lngBrasilianPortuguese', 'ESurfaceType',
           'sspMiddle', 'areErrorAddingPolygonReinforcement',
           'csoMaterialVariesInTheGroup', 'rc_snlEEyy', 'csut_Area',
           'feNoSurfacesInTheModel', 'fipPlaneXY', 'rtPoint',
           'dmDiagramFilled', 'veX', 'ndcEuroCode_HU',
           'cssDoubleLFlange', 'sdMinX', 'rc_sstspExxET', 'lu_mm',
           'arltRebarsAndReinfValues', 'rsgeNonPositive_fsk',
           'lctVibration', 'spnldtByParam', 'IAxisVMLoadGroupsEvents',
           'mlxo_ji', 'lcaeInvalidName', 'mdbAll', 'AxisVMMathTexts',
           'lsfRx', 'deTrapezoidal_eta_OutOfRange', 'ecX0',
           'AxisVMLineSupports', 'xssSyy_m_T', 'RSpectrumData_STAS',
           'RDomainHollowCore', 'rccceInvalidSteelMaterialId',
           'dcret_bottom', 'atDynamic',
           'deVirtualBeamIndexOutOfBounds', 'meGlobalDataNotFound',
           'lu_cm', 'dsLevelCrossExt',
           'ESeismicSensitivityResultsError', 'bcDarkGrey',
           'areDomainReinforcementNotFound', 'ipmtConcSteel',
           'csieoMainAxis', 'rc_nsfRyy', 'mexcRefLine',
           'EWorkplaneType', 'IAxisVMResultTreeIterator',
           'attaeItemHasNoAttachment', 'ESpringParNonLinearity',
           'errReadOnly', 'dmSectionLine', 'rc_snlPdeeffzz',
           'attaeCannotGetAttachment', 'EAutoExcentricityType',
           'EImperfectionParMatType', 'AxisVMMaterial',
           'IAxisVMStresses', 'clpLeft', 'ESpectrumError',
           'mcrmDutchUser', 'RPushOverParams', 'AxisVMLinkElements',
           'wsMaximized', 'csieoStressPointsMarks',
           'attaeInvalidOrEmptyItemData', 'rc_snlEEx', 'rc_td_util',
           'rcnlst_Shell', 'RSegmentChainCrackWidthValues',
           'ctULSAllSE3', 'fueInvalidFunction', 'rc_ssfy_Top',
           'mtDiagonal', 'eeNotUserDefinedEnvelope',
           'RRCBeamDesignParameters_EC_RO', 'loeNoSeismicLoadCase',
           'rc_coBottom', 'IAxisVMWindLoad', 'seltLinesOnly',
           'dmIsosurfaces2D', 'rtNone', 'csseBox', 'rc_snlEEy',
           'ctb_ULS2', 'rc_td_eff',
           'RCSOptimizationResultsPredefinedShapes', 'rc_sstspExyPC',
           'aicpNoCustomParts', 'rc_acY', 'meErrorAdding',
           'meNonPositive_SigmapH', 'IAxisVMTimeIncrementFunctions',
           'cseNegativeW1t', 'rc_td_8', 'rc_ssfy_Middle',
           'IAxisVMColumnRebars', 'ECrossSectionProcess',
           'mleInvalidNValue', 'lneInvalidLineType', 'ssSyz',
           'rcbsDownStand', 'IAxisVMEdgeConnections', 'rc_rsSybt',
           'RSnowLoadParams', 'mteMathTextUIDnotValid',
           'seltArchWall', 'wpeInvalidName', 'rc_sfMx',
           'lpeMaterialIdOutOfBounds', 'feSurfaceIndexOutOfBounds',
           'cseTooHigh_r3', 'IAxisVMDomainsEvents',
           'cseDifferentThicknesses', 'rc_ssfRx', 'scE_Type1',
           'ctULSA6', 'RLoadRibDistributed', 'leeErrorAddingNN',
           'rAsbx', 'RDomainCompositeRib', 'csseDoubleWedgedI',
           'gdYm', 'rtBarrel', 'IAxisVMDomainsSupportsEvents',
           'ctb_ULS1', 'loeErrorCreatingPushOverLoads',
           'ESteelSLSEMethod', 'rc_sfMyUcr', 'ETimberSLSEMethod',
           'loeNoWindLoadCase', 'egGeoULSab_A2', 'tcT2',
           'lstEdgeRelative', 'IAxisVMForcesEvents',
           'RLoadBeamDistributed', 'rc_sd_28', 'lctPreStress',
           'rc_rdAsxt', 'aetSlab', 'rc_sstspEeffPB',
           'steMemberIndexOutOfBounds', 'RColumnCheckResult',
           'ndcEuroCode_UK', 'rc_lsfyMinMax', 'csotParametric',
           'RReleases', 'RNodalMass', 'IAxisVMStructuralGridsEvents',
           'ptAbsolute', 'offsNone', 'rc_sstspExyPB',
           'EXYchartFillType', 'meNegative_Alfay', 'RSteelLTBSupport',
           'RPadFootingDimensions', 'EPlaneToleranceType',
           'IAxisVMSupportsEvents', 'crbeInvalidCrossSectionId',
           'EStructuralGridLabelType',
           'lnePropertyNotValidForThisLineType',
           'AxisVMDisplacements', 'leeap_TopRight',
           'ioatdeImportAsOpenings', 'RRCColumnCapacityDesignParams',
           'mclAluminium', 'seltLoadNodalConcentrated', 'rc_rAsbx',
           'EDimensionStyle', 'ESeismicCombType', 'RSpectrumData',
           'meNonPositive_Ez', 'errNotImplemented', 'rc_lfVxz',
           'rc_sfN2', 'lut_Line_force_moment', 'seCannotModify',
           'rc_vbifMy', 'nlcc_CC2', 'IAxisVMSupports', 'rc_xsSxxmB',
           'lgtSnowExcept', 'IAxisVMLoadPanelsEvents',
           'AxisVMLineSupport', 'ESteelCantileverFixedEnd',
           'RRectangularFootingCalced', 'EDomainCompRibEccType',
           'feVirtualBeamChainIndexOutOfBounds', 'ssr_AC',
           'rc_sstspEyyET', 'iqdlNone', 'EGeneralAlignmentHorizontal',
           'rc_sfMyU', 'seLoadCombinationIndexOutOfBounds', 'vd_w3',
           'EClientAliveTest', 'RSpectrumData_ITA',
           'lcaeNoSeismicLoadCases', 'rc_sstAe', 'mftTimberDesign',
           'ecClassXA4', 'rtLoadCombination', 'meNonPositive_Alfacc',
           'ctb_ULSALL', 'sgwInvalidStartCharY',
           'mePDFimportPagesCannotBeFound', 'rc_sstspAeEB',
           'dofTrussAndMembraneXZ', 'feNoSurfaceSupportsInTheModel',
           'rc_sd_24', 'rc_rdAsyt', 'mftDynamic', 'ctULSALLab',
           'rc_vd_eZ', 'lefNx', 'glsd_Other',
           'RRectanularFootingCalced', 'ctb_ULSA4', 'AxisVMLines3d',
           'mltMovingLoadOnBeam', 'steInvalidSurfaceVertexType',
           'eeLoadCombinationIdOutOfBounds', 'tvaBaseline',
           'RCombinationElement', 'lefVy',
           'IAxisVMDynamicLoadFunctionsEvents', 'RTextBoxParameters',
           'rc_sstspE2EB', 'EMessageDialogType',
           'EReinforcementStatus', 'd_eY',
           'steStressPointIDOutOfBounds',
           'sceLoadCombinationIdIndexOutOfBounds',
           'areSpacingIsInvalid', 'wpeNameAlreadyExists', 'ecXC2',
           'IAxisVMIncrementFunctions', 'ltTruss',
           'dstDomainElasticFoundation',
           'rcbdeEnvironmentClassNotValidForUsedDesignCode',
           'csoCombinationTypeNotValidForCurrentNationalDesignCode',
           'EMemberLocXOrientation', 'rsgeNonPositive_ssh',
           'RColumnCheckingParameters', 'EAttachmentsError',
           'IAxisVMAttributesEvents', 'RStressPointParams',
           'ltRibConcentrated', 'IAxisVMLayers', 'ltRibSelfWeight',
           'ndcEuroCode', 'rc_lfMyD', 'mteAPI_NameNotFound',
           'xlscClass1', 'sgeInvalidWorkPlaneindex',
           'ltSurfaceStress', 'RReinforcementParameters', 'ltNone',
           'IAxisVMDrawingsLibrary', 'tdmeLineListIsEmpty',
           'meNoSeismicParams', 'rc_lsVzmean',
           'meIFCmoduleNotAvailable', 'ammForkSupports',
           'attaeInvalidOrEmptyItemIndexes', 'tPartial', 'dsNothing',
           'sdreCombinationTypeNotValidForCurrentNationalDesignCode',
           'xycftSolid', 'lpsDot', 'RRefAxis', 'rc_ssSxx_Middle',
           'acZ', 'RSpringParam', 'IAxisVMWindSubStructure',
           'lngFrench', 'rc_ssfRr', 'creInvalidAnalysisType',
           'RMovingLoadOnBeamItem', 'veR', 'mbeMustBeBeamOrRibOrTuss',
           'lneLinesNotContinuous', 'ELineSupportType',
           'RConcentratedMovingLoadOnBeam',
           'deNoSelectedLineAndDomain', 'cseNegative_e', 'aetBottom',
           'rsgeNonPositive_esh', 'IAxisVMRigidBodies',
           'veeInvalidAnalysisType', 'put_Volume', 'EXLAMpanelsError',
           'rc_bstspEeffMax', 'rc_cw_wkt', 'rcbdeInvalidBottomPos',
           'RLoadPanelPolyArea', 'ssgltBoth',
           'EReinforcementCheckStatus', 'EDisplacement',
           'IAxisVMAttributes', 'cssr_Unknown',
           'eeLoadCaseIdOutOfBounds', 'AxisVMMovingLoadOnDomain',
           'rc_lefMy_LL', 'cssr_RO', 'EVBDefinitionType',
           'rsComprReinforcementNeededX', 'mclTimber',
           'smCrainrunway', 'deLoadCombinationIndexOutofBounds',
           'smSelect', 'seltReference', 'rc_snlPExx',
           'IAxisVMSurface', 'mePDFimportUnknownError',
           'rsCannotBeReinforcedX', 'wsrtDuopitch', 'ltBeamEnd',
           'deTrapezoidal_b_MustBePositive', 'lpetParapet',
           'rc_sstspE2ET', 'cssBox', 'tslsem_2', 'glsd_X',
           'RCommonDisplayParameters_V161',
           'feLinkElementIndexOutOfBounds', 'rc_ssSzz_Middle',
           'deTrapezoidalInvalidMaterial', 'ecClassXD1', 'rc_cw_wRb',
           'dofwfix', 'rptAuto',
           'lcoeAutoGenerationFailedNoCriticalGroup', 'cseTooHigh_tw',
           'scD_Type1', 'ETextVerticalAlignment',
           'creCombinationTypeNotValidForCurrentNationalDesignCode',
           'feSurfaceSupportIndexOutOfBounds',
           'rcbdeInvalidEnvelopeID', 'csoInvalid_h', 'mcrmAutoLS',
           'EFlatRoofEdgeType', 'bcBlack', 'daElastic', 'detNone',
           'ESteelSLSLMethod', 'AxisVMCustomParts', 'AxisVMCatalog',
           'EDirectObjectDrawType', 'dut_Level_symobol', 'csse2IX',
           'rc_acYY', 'RLoadSurfaceConcentrated', 'EStressesError',
           'veeLoadCombinationHasNoDynamicResult', 'cseNegative_a',
           'meNonPositive_ft90k', 'EGridLineSpacingDirection',
           'rc_lsSeffMax', 'spnntLinear', 'rc_snlPEyy',
           'RBulkMemberSupport', 'RSteelLateralSupport',
           'spnlTensionAndCompression', 'rc_snlMyyy', 'gavBottom',
           'AxisVMWindLoad', 'glsd_Y', 'rc_sfRy', 'rc_ssBxy_Bottom',
           'RCrossSection2IX', 'mbePropertyNotValidForThisLineType',
           'mdtInformation', 'laeInvalidName', 'cssr_DK',
           'RLoadBeamInfluence', 'piStart', 'rc_sstspE1EB',
           'rceInvalidCombinationOfLoadCaseAndLoadLevel',
           'mePDFimportObjectMissing', 'lpsDash', 'csoInvalid_tf',
           'spnldtByFunction', 'cseNonPositive_h1', 'cssDoubleIBox',
           'ltDomainEdge', 'rtyp_Skew', 'sslshm_Custom',
           'tslsdcm_Code', 'ECrossSectionImageExportOptions',
           'nstTrieder', 'ecClassXS3', 'ctSemiAutoSLS3',
           'RStiffnessesXYZ', 'RIFCExportReinforcementParams',
           'lneReferenceIndexOutOfBounds', 'ltSurfaceEdge',
           'RRCBeamDesignDeflectionResult', 'meInvalid_MaterialType',
           'vSide', 'dtAligned', 'rc_snlPEzz', 'rc_sstspEyyTC',
           'rc_veY', 'd_fX', 'gdXp', 'meCannotSaveGlobalData',
           'RRCBeamPlasticHinges', 'rc_bstspExxPMax', 'cssAll',
           'sdPlusX', 'EMovingLoadType', 'RLoadDomainFluid',
           'IAxisVMCustomParts', 'mtConsistent',
           'IAxisVMCustomPartFolderEvents',
           'deCompositeRibInvalidEccType', 'msePadFootingNotDefined',
           'egSLS_ALL', 'cssJ', 'EPropertiesUnitType',
           'cseNonPositiveHy', 'RLoadLineDistributed', 'wsrtHip',
           'vbeInvalidParameters', 'lngPolish', 'gwptYZ',
           'deTrapezoidal_ht_Mismatch', 'ELoadDomainPolyLineItemType',
           'lst3DLine', 'cssr_HU', 'RGlobalForces', 'rc_rsSyb',
           'rc_ssSyy_Top', 'ESteelDesignResultsError',
           'leeNotConnectingSlaveLineAndMasterStartLink',
           'RCommonDisplayParameters', 'meNameAlreadyExists',
           'lcaeErrorCreatingPushOverCases', 'avmp32', 'sfMy',
           'vbeDomainIndexIsInvalid', 'csseRectangleHollow', 'cwTop',
           'ELineStiffnessReduction', 'ltDomainPolyArea',
           'rc_sdrRSxx', 'idoSeparately', 'lu_dm', 'cssU',
           'rc_ssState_Bottom', 'rc_xsSxymT', 'rc_bd_eR', 'dofXfix',
           'rcbdeInvalidArrayLength', 'rc_sstExx',
           'ltSurfaceConcentrated', 'ceSE2moduleNotAvailable', 'sfN2',
           'xyd_y', 'seltAllDomains', 'EGapType', 'rc_nsfRr',
           'RColumnStirrupSpacing', 'rc_sfMxD', 'tvaBottom',
           'slt_OneWay', 'ELoadGroupsError', 'RRCBeamSupports',
           'lctInfluenceLine', 'vbeDomainIndexOutOfBounds',
           'lneReinforcementParametersNotExsist', 'rc_sstK1',
           'rc_sfMyDUcr', 'gwptXY',
           'seNonParametricSpectrumIsNotAllowed',
           'wpeWorkplaneIsNotSmart', 'IAxisVMNodalSupport',
           'RLoadPanelConcentrated', 'dloTangential', 'cseTooHigh_r2',
           'loeReferenceIndexOutOfBounds', 'rc_sstspDeeffPB',
           'rc_sd_23', 'csoLoadCombinationIdIndexOutOfBounds',
           'rc_ssAs_Top', 'rc_sstAk', 'ssS1', 'lctSeismic',
           'steReadSurfaceStresses', 'lu_yard',
           'AxisVMSteelDesignMembers', 'ecClassXC1', 'ttGLULAM',
           'ltBeamSelfWeight', 'IAxisVMSpectrum', 'rc_sfRyy',
           'rc_nsfRxyz', 'meIFCOtherError', 'rc_ssSxx_Top',
           'RLoadDomainConstant', 'lneLineHasNoMidPoint',
           'meGreaterThan05_Nuz', 'cicsa_CentreGravity',
           'rccceInvalidLoadCaseId', 'lsr_IZ',
           'EVerticalDisplacementsError', 'steNoSurfacesInTheModel',
           'rcbssSeismicM', 'RTimberDesignParameters_EC_SIA_ITA',
           'AxisVMCrossSectionTables', 'deTrapezoidal_dbw_Mismatch',
           'RTimberDesignParameters', 'cseTooHigh_tf3',
           'RRCBeamDesignReqReinf', 'IAxisVMLoadCombinations',
           'lut_Design_fire_load_density', 'deLineIndexOutOfBounds',
           'EGeneralError', 'rc_bstspDeeffMinMax', 'EResultComponent',
           'IAxisVMDrawingsLibraryEvents', 'ltDomainPolyAssoc',
           'ECrackWidth', 'mbeNotRib', 'lneShearCrackAngleIsInvalid',
           'rc_lfVy', 'rc_snlMyxx', 'rc_xsSxyn', 'rc_sd_17',
           'deStiffnessReductionNotAllowed', 'idrltNone',
           'deVirtualBeamSectionIndexOutOfBounds',
           'deInvalidHollowCoreDirection',
           'lneIllegalServiceClassValue', 'deInvalidGroupID',
           'RLinkElementRec', 'ESpringParNNType', 'RPlaneTolerance',
           'scstNMyMz', 'rc_sdrVyy',
           'IAxisVMTimeIncrementFunctionsEvents', 'cseNonPositiveIz',
           'RDomainMeshParameters', 'cssCustom', 'EEnvironmentClass',
           'rc_nsfRxx', 'detTopSurface', 'dtTextBox', 'sblm_None',
           'ELoadCasesError', 'sfNx', 'csoOptimizationChecksNotValid',
           'ELanguage', 'rc_vrfaRExtr', 'lptAxis', 'cssr_TR',
           'rc_lefMz_NN', 'ecXD2', 'datNonLinear', 'ctntVisible',
           'rc_berrdEz', 'AxisVMReports', 'feInvalidEnvelopeUID',
           'cseTooLow_b', 'deTrapezoidalInvalidDirection', 'put_Mass',
           'rc_vdWbij', 'lpeCrossSectionIdOutOfBounds',
           'reReinforcementCheckDisabled', 'meGreaterThan05_Nux',
           'ltHole', 'gut_Geom_Angle', 'sfMx', 'dvtvOneDirection',
           'deParametersRecordNotValidForUsedDesignCode',
           'lgePropertyNotValidForThisType',
           'rsComprReinforcementNeededY', 'wleNoWindLoadDefined',
           'RSteelDesignParameters_EC_SIA_ITA_V153',
           'RShowLocalSystems',
           'steLineStressComponentNotValidForThisLineType', 'RMyMzFi',
           'xtldLocalX', 'mePDFimportCannotReadAllObjects',
           'gahRight', 'ndcUS', 'ssr_ACS',
           'lcaeErrorTooManySeismicGroups', 'lsr_AX',
           'mbeFunctionIdMustBe0', 'cssr_CA', 'ltBeamInfluence',
           'ctULSA4', 'selsOperational', 'RRelease_V161',
           'tslslm_Member', 'meNonPositive_GammaC',
           'mbeReleaseInvalidType', 'lneNodeIndexOutOfBounds',
           'rc_rccwUBeam', 'AxisVMLoadPanel', 'RBulkMemberWSSupport',
           'lgtManualPreStress', 'aletColumn', 'datLinear',
           'mftRCDesign', 'weEnvelopeIdOutOfBounds', 'EView',
           'clsoHeight', 'rc_td_5', 'rtHip', 'RRCBeamDesignReqReinfs',
           'rsgeNonPositive_GammaS', 'aetBeam',
           'seNuMustBePositiveOrZero', 'mftVibration',
           'lut_Temperature', 'deConcreteCoverMustBePositive',
           'RLoadBeamStress', 'meNonPositive_Ex',
           'IAxisVMWorkplanesEvents', 'AxisVMLine2d',
           'EVibrationType', 'IAxisVMNodesSupportsEvents',
           'rc_lefVy_LL', 'tc0', 'EMessageDialogButton', 'RReference',
           'nlcc_CC3', 'irvCustomVal', 'wsMinimized',
           'seRebarPosMustBePositive', 'rccceVTCheckIsNotSupported',
           'lneReleaseInvalidComponent', 'rtVector',
           'meGreaterThan05_Nuy', 'lcaeSE1moduleNotAvailable',
           'ssreTorsionResultsMissing', 'EVelocity', 'rc_bd_fR',
           'IAxisVMNodalSupports', 'rc_sdrRDxx', 'RSpectrumData_V153',
           'RLoadSurfaceSelfWeigth', 'avmp64',
           'leeLineIndexOutOfBounds', 'nseMemberIndexOutOfBounds',
           'EMeshGeometryType', 'rc_vbifMz', 'RLoadDomainLinear',
           'de_All', 'ERCBeamDesignError', 'csseRegularPolygon',
           'rc_ssSeff_Bottom', 'leeap_CenterRight', 'dloAligned',
           'IAxisVMCrossSectionTables', 'aetMid',
           'RStructuralGridLineParams', 'defseMustBePositive',
           'reRC3moduleNotAvailable', 'deMoreThanOneCountourFound',
           'AxisVMSections', 'rc_sstspExyEB', 'ctb_ULSAllSE3',
           'AxisVMRebarSteelGrades', 'csseCircleHollow',
           'rc_bstspExxTMax', 'ctULSAllSE6', 'cmULS',
           'RDistributedMovingLoadOnBeam', 'vtFirstOrder',
           'deHollowCoreDMustBePositive', 'mbeInvalidRefZ',
           'RVelocityValues', 'ctb_ULSAllSE7', 'rcbdpQzMy',
           'ELoadType', 'rc_xsSrxmax', 'dxfR2000',
           'RNodalSupportForceValues', 'ssSxz', 'rc_bstKzz', 'd_eR',
           'ripOpeningAreaBased', 'rc_berrdEx', 'sslslm_Linear',
           'rmspInner', 'rc_rccolAsl', 'd_fR',
           'mePDFimportUnknownLinearization', 'RSeismicEq',
           'schBilinear', 'ndcEuroCode_RO', 'dsCircleStr',
           'AxisVMStrains', 'IAxisVMCrossSectionTableEvents',
           'reMissingAnalysisResults', 'ESettingsError',
           'ESteelBucklingLengthMode', 'artPolygon']
from comtypes import _check_version; _check_version('1.1.11', 1646663652.0)
